@model UAAAS.Models.CollegePGCourse
<script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
@{
    Layout = "~/Views/Shared/_LayoutLeftMenu.cshtml";
    if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
    {
        Layout = "~/Views/Shared/_DataEntryLayoutLeftMenu.cshtml";
    }

    ViewBag.Title = "Add PG Course";
}
<script type="text/javascript">
    $(document).ready(function () {

        // GetSpecialization(@Model.departmentId);
        if ($("#Degree").val() > 0) {
            GetDepartments($("#Degree").val());
        }

        if ($("#Department").val() > 0) {
            GetSpecialization($("#Department").val());
        }
        $("#Degree").change(function () {
            var DegreeID = $(this).val();
            GetDepartments(DegreeID);
        });
        function GetDepartments(DegreeID) {
            $.getJSON("/CollegePGCourse/GetDepartments", { id: DegreeID },
                function (DepartmentsData) {
                    var select = $("#Department");
                    select.empty();
                    select.append($('<option/>', {
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(DepartmentsData, function (index, itemdata) {
                        select.append($('<option/>', {
                            value: itemdata.Value,
                            text: itemdata.Text
                            // , selected: (itemdata.Value == @Model.departmentId ? true : false)
                        }));
                    });
                });
        }
        $("#Department").change(function () {
            var DepartmentID = $(this).val();
            GetSpecialization(DepartmentID);
        });
        function GetSpecialization(DepartmantID) {
            $.getJSON("/CollegePGCourse/GetSpecialization", { id: DepartmantID },
                function (Specializationdata) {
                    var select = $("#Specialization");
                    select.empty();
                    select.append($('<option/>', {
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(Specializationdata, function (index, itemdata) {
                        select.append($('<option/>', {
                            value: itemdata.Value,
                            text: itemdata.Text
                            // ,selected: (itemdata.Value == @Model.specializationId ? true : false)
                        }));
                    });
                });
        }


        //


        $('#btnSave').click(function () {
            var count = $('#tblpgfaculty > tbody > tr').length - 2;
            if (count == 0) {
                alert('Enter Faculty Details');
                return false;
            }
            var strGrid = "";
            for (var i = 0; i < count; i++) {
                if ($("#nameoftheFaculty" + i + "").val() == '') {
                    alert('Name of The Faculty is Required');
                    return false;
                }
                if ($("#designation" + i + "").val() == '') {
                    alert('Designation is Required');
                    return false;
                }
                if ($("#ug" + i + "").val() == '') {
                    alert('UG Course is Required');
                    return false;
                }

                strGrid += $("#nameoftheFaculty" + i + "").val() + "~";
                strGrid += $("#designation" + i + "").val() + "~";
                strGrid += $("#ug" + i + "").val() + "~";
                strGrid += $("#pg" + i + "").val() + "~";
                strGrid += $("#phd" + i + "").val() + "~";

                strGrid += $("#ugs" + i + "").val() + "~";
                strGrid += $("#pgs" + i + "").val() + "~";
                strGrid += $("#phds" + i + "").val() + "~";

                if (i != count - 1)
                { strGrid += "$" }
            }
            var a = $('#griddata').val(strGrid);

        });

        //add row


        var i = 0, j = 1;
        var tbl = $("#tblpgfaculty");
        $("#addRowBtn").click(function () {
            $("<tr><td style='text-align: center;'>" + j + "</td><td><input id='nameoftheFaculty" + i + "' type='text' placeholder='Name of the Faculty' class='editor-field1' style='width: 95%;'  /></td><td><input id='designation" + i + "' type='text' placeholder='Designation' class='editor-field1' style='width: 90%;'  /></td> <td><table class='no-border' with='100%'> <tr><td><b>UG</b></td><td><input id='ug" + i + "' type='text' placeholder='UG' class='editor-field1' style='width: 90%;' /></td></tr><tr><td><b>PG</b></td><td><input id='pg" + i + "' type='text' placeholder='PG' class='editor-field1' style='width: 90%;' /></td></tr><tr><td><b>Ph.D</b></td><td><input id='phd" + i + "' type='text' placeholder='Ph.D' class='editor-field1' style='width: 90%;' /></td></tr></table></td><td><table class='no-border' width='100%'><tr><td><input id='ugs" + i + "' type='text' placeholder='UG Specialization' class='editor-field1' style='width: 90%;' /></td></tr><tr><td><input id='pgs" + i + "' type='text' placeholder='PG Specialization' class='editor-field1' style='width: 90%;' /></td></tr><tr><td><input id='phds" + i + "' type='text' placeholder='Ph.D Specialization' class='editor-field1' style='width: 90%;' /></td></tr></table></td><td style='text-align: center;'><button class='delRowBtn delete_button' style='border: 0;'>Delete</button></td></tr>").appendTo(tbl);
            i++;
            j++;
        });
        $(document.body).delegate(".delRowBtn", "click", function () {
            $(this).closest("tr").remove();
            i--;
        });
    });

</script>
<div style="width: 300px; float: left;">
    <h2>Add PG Course</h2>
</div>

<div style="width: 400px; float: right; text-align: right;">
    @Html.ActionLink("Back", "Index", "CollegePGCourse",new{collegeId = @ViewBag.collegeId}, new { @class = "create_button" })
</div>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)    
    @Html.HiddenFor(model => model.collegeId, new { @Value = Model.collegeId })

    if (TempData["Error"] != null)
    {
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div>
    }

    if (TempData["Success"] != null)
    {
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div>
    }
    
    <table class="downloads_table" style="width: 100%;">
        <tr>
            <td class="editor-label1">Name of the College
            </td>
            <td class="editor-field1">
                @Html.DisplayFor(model => Model.jntuh_college.collegeName)
            </td>
        </tr>
        <tr>
            <td class="editor-label1" style="width: 30%;">College Code
            </td>
            <td class="editor-field1" style="width: 70%;">
                @Html.DisplayFor(model => Model.jntuh_college.collegeCode)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Degree
            </td>
            <td class="editor-field1">
                @Html.DropDownListFor(model => model.degreeId,
            new SelectList(ViewBag.Degree as System.Collections.IEnumerable, "id", "degree"),
            "-- Select --", new { id = "Degree" })
                @Html.ValidationMessageFor(model => model.degreeId)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Department
            </td>
            <td class="editor-field1">
                @if (ViewBag.IsUpdate == true)
                {
                    @Html.DropDownListFor(model => model.departmentId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "departmentName"),
            "-- Select --", new { id = "Department", @class = "width", disabled = "true" })
                    @Html.ValidationMessageFor(model => model.departmentId)
                    @Html.HiddenFor(model => model.departmentId)
                }
                else
                {
                    @Html.DropDownListFor(model => model.departmentId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "departmentName"),
            "-- Select --", new { id = "Department", @class = "width" })
                    @Html.ValidationMessageFor(model => model.departmentId)
           
                }
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Name of the PG Programme
            </td>
            <td class="editor-field1">
                @if (ViewBag.IsUpdate == true)
                {
                    @Html.DropDownListFor(model => model.specializationId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "specializationName"),
            "-- Select --", new { id = "Specialization", @class = "width", disabled = "true" })
                    @Html.ValidationMessageFor(model => model.specializationId)
                    @Html.HiddenFor(model => model.specializationId)
                }
                else
                {
                    @Html.DropDownListFor(model => model.specializationId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "specializationName"),
            "-- Select --", new { id = "Specialization", @class = "width" })
                    @Html.ValidationMessageFor(model => model.specializationId)
                }
            </td>
        </tr>

        <tr>
            <td class="editor-label1">Program Type [ New / Existing ]
            </td>
            <td class="editor-field1">

                @Html.DropDownListFor(model => model.type, new List<SelectListItem>
                        {                            
                            new SelectListItem{ Text = "Existing", Value = "Existing" },
                          new SelectListItem{ Text = "New", Value = "New" } 
                        }, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.type)

            </td>
        </tr>
        <tr>
            <td class="editor-label1">Shift
            </td>
            <td class="editor-field1">
                @Html.DropDownListFor(model => model.shiftId,
            new SelectList(ViewBag.Shifts as System.Collections.IEnumerable, "id", "shiftName"),
            new { id = "Shift", @class = "width" })
                @Html.ValidationMessageFor(model => model.shiftId)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Intake
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.intake)
                @Html.ValidationMessageFor(model => model.intake)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">No of Professors
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.professors)
                @Html.ValidationMessageFor(model => model.professors)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">No of Associate Professors
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.associateProfessors)
                @Html.ValidationMessageFor(model => model.associateProfessors)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">No of Assistant Professors
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.assistantProfessors)
                @Html.ValidationMessageFor(model => model.assistantProfessors)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">UG Faculty/Student Ratio of the Department
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.UGFacultyStudentRatio)
                @Html.ValidationMessageFor(model => model.UGFacultyStudentRatio)
            </td>
        </tr>


        @Html.HiddenFor(model => model.createdBy)
        @Html.HiddenFor(model => model.createdOn)
    </table>
   
    <br />
    <div style="text-align: right; margin-bottom: 5px;">
        <a id="addRowBtn" class="create_button" style="text-align: right">Add Faculty</a>
    </div>
    <table class="downloads_table" style="width: 100%;" id="tblpgfaculty">
        <tr>
            <th colspan="6" class="editor-label1" style="text-align: center">Details of PG faculty</th>
        </tr>
        <tr>
            <th class="editor-label1" style="width: 50px; text-align: center;">S.No</th>
            <th class="editor-label1">Name of the Faculty</th>
            <th class="editor-label1" style="width: 150px;">Designation</th>
            <th class="editor-label1" style="width: 250px; text-align: center">Qualifications</th>
            <th class="editor-label1" style="width: 250px; text-align: center">Specialization</th>
            <th class="editor-label1" style="width: 50px; text-align: center">Delete</th>
        </tr>
        <tbody id="tdata">
        </tbody>
    </table>
   
    @Html.Hidden("griddata")
    <p style="float: left; text-align: right; width: 100%;">
        @if (ViewBag.IsUpdate == true)
        {
            <input type="submit" value="Update" id="btnUpdate" name="cmd" class="submit create_button" />
        }
        else
        {
            <input type="submit" value="Save" id="btnSave" name="cmd" class="submit create_button" />
        }

        @*<input type="button" value="Cancel" id="btnCancel" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" />*@
    </p>
}
<div id="dialog-edit" style="display: none">
</div>
<div id="dialog-view" style="display: none">
</div>
