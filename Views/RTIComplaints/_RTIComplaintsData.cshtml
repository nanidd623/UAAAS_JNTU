@model UAAAS.Models.RTIComplaints
<script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script>
    $(document).ready(function () {
        $(".Supportingfile").change(function () {

            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("You can upload only  PDF files");
                $(this).val('');
                return false;
            } else {
                var size = GetFileSize(file, "Documentfile");
                size = size / 1048576;
                if (size > 0.2000000000000000) {
                    alert("Document should not exceed 200 KB in Size");
                    $(this).val('');
                } else {

                }
            }

        });

        //get file size
        function GetFileSize(fileid, title) {

            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject,
                    //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#" + title)[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }

                return fileSize;
            } catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            } else {
                return strName[0];
            }
        }
    });

</script>
@using (Ajax.BeginForm("AddEditRecord", "RTIComplaints", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "ComplaintsDialog" }, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.collegeId, new { @Value = Model.collegeId })
    if (TempData["Error"] != null)
    {
        <div class="error">
            <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
        </div>
    }
    if (TempData["Success"] != null)
    {
        <div class="success">
            <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
        </div>
    }
    <div class="details_table">
        @if (ViewBag.IsUpdate == true)
        {
            @Html.HiddenFor(model => model.id)
        }
        @*<div class="editor-label" style="width: 98%">
                @Html.LabelFor(model => model.complaintReceived)<br />
                @Html.TextAreaFor(model => model.complaintReceived, new { style = "width: 80%;" })
                @Html.ValidationMessageFor(model => model.complaintReceived)
            </div>*@

        <div class="editor-label" style="width: 98%">
            @Html.LabelFor(model => model.complaintGivenByRegNum)<br />
            @Html.TextBoxFor(model => model.complaintGivenByRegNum, new { style = "width: 80%;" })
            @Html.ValidationMessageFor(model => model.complaintGivenByRegNum)
        </div>
        <div class="editor-label" style="width: 98%">
            @Html.LabelFor(model => model.complaintGivenByName)<br />
            @Html.TextBoxFor(model => model.complaintGivenByName, new { style = "width: 80%;" })
            @Html.ValidationMessageFor(model => model.complaintGivenByName)
        </div>
        <div class="editor-label" style="width: 98%">
            @Html.LabelFor(model => model.complaintOnRegNum)<br />
            @Html.TextBoxFor(model => model.complaintOnRegNum, new { style = "width: 80%;" })
            @Html.ValidationMessageFor(model => model.complaintOnRegNum)
        </div>
        <div class="editor-label" style="width: 98%">
            @Html.LabelFor(model => model.complaintOnName)<br />
            @Html.TextBoxFor(model => model.complaintOnName, new { style = "width: 80%;" })
            @Html.ValidationMessageFor(model => model.complaintOnName)
        </div>
        <div class="editor-label" style="width: 98%">
            @Html.LabelFor(model => model.complaintDescription)<br />
            @Html.TextAreaFor(model => model.complaintDescription, new { style = "width: 80%;", maxlength = "2000" })
            @Html.ValidationMessageFor(model => model.complaintDescription)
        </div>
        <div class="editor-label" style="width: 98%">
            @if (Model.complaintSupportingDocPath != null)
            {
                @Html.TextBoxFor(model => model.complaintSupportingDoc, new { type = "file", @id = "@txtFile", @name = "@file", @class = "Supportingfile", style = "width: 80%;" })
                <a href="~/Content/Upload/CollegeEnclosures/RTIDetails/@Model.complaintSupportingDocPath" target="_blank">
                    <span style="color: red;"><b>View</b></span>
                </a>
                @Html.HiddenFor(model => model.complaintSupportingDocPath)
            }
            else
            {
                @Html.TextBoxFor(model => model.complaintSupportingDoc, new { type = "file", @id = "@txtFile", @name = "@file", @class = "required Supportingfile", style = "width: 80%;" })
            }
            @Html.ValidationMessageFor(model => model.complaintSupportingDoc)
        </div>
        <div class="editor-label" style="width: 98%">
            @Html.LabelFor(model => model.actionsTaken)<br />
            @Html.TextAreaFor(model => model.actionsTaken, new { style = "width: 80%;", maxlength = "2000" })
            @Html.ValidationMessageFor(model => model.actionsTaken)
        </div>
        <div class="editor-label" style="width: 98%">
            @if (Model.actionTakenSupportingDocPath != null)
            {
                @Html.TextBoxFor(model => model.actionTakenSupportingDoc, new { type = "file", @id = "@txtFile", @name = "@file", @class = "Supportingfile", style = "width: 80%;" })
                <a href="~/Content/Upload/CollegeEnclosures/RTIDetails/@Model.actionTakenSupportingDocPath" target="_blank">
                    <span style="color: red;"><b>View</b></span>
                </a>
                @Html.HiddenFor(model => model.actionTakenSupportingDocPath)
            }
            else
            {
                @Html.TextBoxFor(model => model.actionTakenSupportingDoc, new { type = "file", @id = "@txtFile", @name = "@file", @class = "required Supportingfile", style = "width: 80%;" })
            }
            @Html.ValidationMessageFor(model => model.actionTakenSupportingDoc)
        </div>

        @Html.HiddenFor(model => model.createdOn)
        @Html.HiddenFor(model => model.createdBy)
        <div style="text-align: center">
            <p>
                @if (ViewBag.IsUpdate == true)
                {
                    <input type="submit" value="Update" id="btnUpdate" name="cmd" />
                }
                else
                {
                    <input type="submit" value="Save" id="btnSave" name="cmd" />
                }
            </p>
        </div>
    </div>

}