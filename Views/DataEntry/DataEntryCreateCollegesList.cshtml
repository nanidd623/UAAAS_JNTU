@model UAAAS.Models.DataEntryCollegesList
<script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script type="text/javascript">       
   $(document).ready(function () {
       fillUsers();
      //fillColleges();     
       
       $("#userName").change(function () {
           var userid = $(this).val();          
           fillColleges(userid);
       });
   });
   function fillUsers() {
       $.getJSON("/DataEntry/GetUsers", {},
           function (DepartmentsData) {              
               var select = $("#userName");
               select.empty();
               select.append($('<option/>', {
                   value: '',
                   text: '-- Select --'
               }));
               $.each(DepartmentsData, function (index, itemdata) {
                   select.append($('<option/>', {
                       value: itemdata.Value,
                       text: itemdata.Text,
                       selected: (itemdata.Value == @Model.userId ? true : false)
                    }));
                });
            });
   }
    function fillColleges(userid) {        
        $.getJSON("/DataEntry/GetColleges",{ userid : userid},
            function (DepartmentsData) {               
                var select = $("#collegeName");
                select.empty();
                select.append($('<option/>', {
                    value: '',
                    text: '-- Select --'
                }));
                $.each(DepartmentsData, function (index, itemdata) {
                    select.append($('<option/>', {
                        value: itemdata.Value,
                        text: itemdata.Text,
                        selected: (itemdata.Value == @Model.collegeId ? true : false)
                   }));
               });
           });
       }
</script>
   
@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    if (ViewBag.IsUpdate == true)
    {
    @Html.HiddenFor(model => model.id)
    <div class="editor-label">
        @Html.LabelFor(model => model.userId)
    </div>
    <div class="editor-field" style="width:81%">
        @Html.HiddenFor(model => model.userId)
        @Html.DropDownListFor(model => model.userId,
            new SelectList(ViewBag.users as System.Collections.IEnumerable, "id", "name"),
            "-- Select --", new { id = "userName", @class = "width", disabled = "true" })
        @Html.ValidationMessageFor(model => model.userId)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.collegeId)
    </div>
    <div class="editor-field" style="width:81%">
        @Html.HiddenFor(model => model.collegeId)
        @Html.DropDownListFor(model => model.collegeId,
            new SelectList(ViewBag.colleges as System.Collections.IEnumerable, "id", "collegeName"),
            "-- Select --", new { id = "collegeName", @style="width:485px", disabled = "true" })
        @Html.ValidationMessageFor(model => model.collegeId)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.isActive)
    </div>
    <div class="editor-field" style="width:81%">
        <label>@Html.RadioButtonFor(model => model.isActive, true) Active</label>
        <label style="margin:52px">@Html.RadioButtonFor(model => model.isActive, false) In-Active</label>
        @Html.ValidationMessageFor(model => model.isActive)
    </div>
    <div class="editor-label">
        @Html.LabelFor(model => model.isCompleted)
    </div>
    <div class="editor-field" style="width:81%">

        <label>@Html.RadioButtonFor(model => model.isCompleted, true) Completed</label>
        <label style="margin:26px">@Html.RadioButtonFor(model => model.isCompleted, false) Pending</label>
        @Html.ValidationMessageFor(model => model.isCompleted)
    </div>              
   
    @Html.HiddenFor(model => model.userName)
    @Html.HiddenFor(model => model.collegeName)
    @Html.HiddenFor(model => model.createdon)
    @Html.HiddenFor(model => model.createdBy)
    
    }
    else
    {
    <div class="editor-label">
        @Html.LabelFor(model => model.userId)
    </div>
    <div class="editor-field" style="width:81%">
        @Html.DropDownListFor(model => model.userId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "userName"),
            "-- Select --", new { id = "userName", @class = "width" })
        @Html.ValidationMessageFor(model => model.userId)
    </div>

    <div class="editor-label">
        @Html.LabelFor(model => model.collegeId)
    </div>
    <div class="editor-field" style="width:81%">
        @Html.DropDownListFor(model => model.collegeId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "collegeId", "collegeName"),
            "-- Select --", new { id = "collegeName",  @style="width:485px" })
        @Html.ValidationMessageFor(model => model.collegeId)
    </div>            
   
    @Html.HiddenFor(model => model.userName)
    @Html.HiddenFor(model => model.collegeName)
    @Html.HiddenFor(model => model.createdon)
    @Html.HiddenFor(model => model.createdBy)
    
    }

    <div style="text-align: right">
        <p>
            @if (ViewBag.IsUpdate == true)
            {
                <input type="submit" value="Update" id="btnUpdate" name="cmd" />                    
            }
            else
            {
                <input type="submit" value="Add" id="btnAdd" name="cmd" />
            }
        </p>
    </div>
    
}

