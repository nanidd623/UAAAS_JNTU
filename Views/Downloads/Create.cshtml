@model UAAAS.Models.jntuh_download
@{
    ViewBag.Title = "Add New Download";
}

<h2>Add New Download</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@*<script src="@Url.Content("~/Scripts/blueimp/js/vendor/jquery.ui.widget.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/blueimp/js/jquery.iframe-transport.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/blueimp/js/jquery.fileupload.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(function () {
        $('#fileupload').fileupload({
            dataType: 'json',
            url: '@Url.Action("Create")',
            done: function (e, data) {
                $.each(data.result, function (index, file) {
                    $('<p/>').text(file.name).appendTo(document.body);
                });
            } 
        });
    });
</script>*@

<script type="text/jscript">
    //get file size
    function GetFileSize(fileid) {
        try {
            var fileSize = 0;
            //for IE
            if ($.browser.msie) {
                //before making an object of ActiveXObject, 
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                fileSize = fileSize / 1048576; //size in mb 
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $("#" + fileid)[0].files[0].size //size in kb
                fileSize = fileSize / 1048576; //size in mb 
            }

            return fileSize;
        }
        catch (e) {
            //alert("Error is : " + e);
        }
    }

    //get file path from client system
    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }

    $(function () {
        $(".file").change(function () {
            
            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'xls':
                    case 'XLS':
                    case 'xlsx':
                    case 'XLSX':
                    case 'doc':
                    case 'DOC':
                    case 'docx':
                    case 'DOCX':
                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }
            
            if (flag == false) {
                $(".files > span").text("You can upload only Word documents, Excel Sheets, Pdf files");
                return false;
            }
            else {
                var size = GetFileSize('file');
                if (size > 3) {
                    $(".files > span").text("You can upload file up to 3 MB");
                }
                else {
                    $(".files > span").text("");
                }
            }
        });
    });
</script>

@using (Html.BeginForm("Create", "Downloads", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    if (TempData["Error"] != null)
    {
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div>
    }
    if (TempData["Success"] != null)
    {
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div>
    }
    <div class="details_table">
        <div class="editor-label">
            @Html.LabelFor(model => model.downloadTitle)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.downloadTitle)
            @Html.ValidationMessageFor(model => model.downloadTitle)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.downloadUrl)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.downloadUrl)
            @Html.ValidationMessageFor(model => model.downloadUrl)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.uploadFile1)
        </div>
        <div class="editor-field files">
            @*@Html.EditorFor(model => model.uploadFiles)*@
            @Html.TextBoxFor(m => m.uploadFile1, new { type = "file", @class = "file" })<span style="color: red;"></span><br />
            @Html.TextBoxFor(m => m.uploadFile2, new { type = "file" })<br />
            @Html.TextBoxFor(m => m.uploadFile3, new { type = "file" })<br />
            @Html.ValidationMessageFor(model => model.uploadFile1)
        </div>

        @*<div class="editor-label">
            @Html.LabelFor(model => model.downloadWord)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.downloadWord)
            @Html.ValidationMessageFor(model => model.downloadWord)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.downloadExcel)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.downloadExcel)
            @Html.ValidationMessageFor(model => model.downloadExcel)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.downloadPDF)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.downloadPDF)
            @Html.ValidationMessageFor(model => model.downloadPDF)
        </div>*@

        <div class="editor-label">
            @Html.LabelFor(model => model.downloadFromDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.downloadFromDate, new { @class = "calendar" })
            @Html.ValidationMessageFor(model => model.downloadFromDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.downloadToDate)
        </div>
        <div class="editor-field">
            @Html.TextBoxFor(model => model.downloadToDate, new { @class = "calendar" })
            @Html.ValidationMessageFor(model => model.downloadToDate)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.isActive)
        </div>
        <div class="editor-field">
            @*@Html.EditorFor(model => model.isActive)*@
            <label>@Html.RadioButtonFor(model => model.isActive, true) Active</label>
            <label>@Html.RadioButtonFor(model => model.isActive, false) Inactive</label>
            @Html.ValidationMessageFor(model => model.isActive)
        </div>

        @Html.HiddenFor(model => model.createdOn, new { Value = DateTime.Now })
        @Html.HiddenFor(model => model.createdBy, new { Value = Convert.ToInt32(Membership.GetUser(HttpContext.Current.User.Identity.Name).ProviderUserKey) })

        @*<div class="editor-label">
            @Html.LabelFor(model => model.createdOn)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.createdOn)
            @Html.ValidationMessageFor(model => model.createdOn)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.createdBy)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.createdBy)
            @Html.ValidationMessageFor(model => model.createdBy)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.updatedOn)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.updatedOn)
            @Html.ValidationMessageFor(model => model.updatedOn)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.updatedBy)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.updatedBy)
            @Html.ValidationMessageFor(model => model.updatedBy)
        </div>*@

        <div class="editor-label last-row">
            &nbsp;
        </div>
        <div class="editor-field last-row">
            <p>
                @Html.ActionLink("Back", "Index", null, new { @class = "back_button" })
                <input type="submit" value="Add" />
            </p>
        </div>
        <div class="clear"></div>
    </div>
}
