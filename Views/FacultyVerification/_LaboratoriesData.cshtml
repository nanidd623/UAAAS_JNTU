@model UAAAS.Models.Lab
<script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
@*Calender and File Upload Written by Srinivas*@
<script type="text/javascript">
    function ValidateAddmissions() {
        $('#EquipmentDateOfPurchasing').removeClass('input-validation-error');
        $('#DelivaryChalanaDate').removeClass('input-validation-error');
    }
    $(document).ready(function () {

        $('.submit').click(function (event, args) {
            //if ($('#ViewEquipmentPhoto').val() == '')
            //if ($('#scannedCopy').val() == undefined && $('#EquipmentPhoto').val() == '' && $('#ViewEquipmentPhoto').val() == undefined) {
            //    alert("Please Select Equipment Photo");
            //    return false;
            //}
            //else {
            //    return true;
            //}



            // if ($('#EquipmentPhoto').val() == '' || $('#EquipmentDateOfPurchasing').val() == '' || $('#DelivaryChalanaDate').val() == '') {

            //     if ($('#scannedCopy').val() == undefined && $('#EquipmentPhoto').val() == '') {
            //         alert("Please select photo")

            //     }
            //     else if ($('#EquipmentDateOfPurchasing').val() == '') {
            //         alert("Please enter Date of Payment Invoice (DD/MM/YYYY) Formate")

            //     }
            //     else if ($('#DelivaryChalanaDate').val() == '') {
            //         alert("Please enter Date of Delivery Challan (DD/MM/YYYY) Formate")

            //     }

            // }
            ////if ($('#EquipmentPhoto').val() != '' && $('#EquipmentDateOfPurchasing').val() != '' && $('#DelivaryChalanaDate').val() == '') {

            ////     return false;
            //     // }
            // //if ($('#EquipmentPhoto').val() == '' && $('#EquipmentDateOfPurchasing').val() == '' && $('#DelivaryChalanaDate').val() == '') {
            // //    return false;
            // //}
            // else {
            //     return true;
            // }
        });
        //get image file size
        function GetFileSize(fileid) {
            //debugger;
            try {
                var fileSize = 0;

                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    var FileName1 = $("#EquipmentPhoto")[0].files[0].value;
                    //alert('Hai1');
                    //alert(FileName1);
                    fileSize = $("#EquipmentPhoto")[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                    //alert('Hai');
                    // alert(fileSize);


                    //alert('hai3');

                }
                return fileSize;
            }
            catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get delivery chalana file size
        function GetDeliveryChalanaFileSize(fileid) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //alert(fileSize);
                    //fileSize = fileSize / 1048576; //size in mb 
                    // fileSize = fileSize / 1048576; //size in mb 
                    alert(fileSize);
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#DelivaryChalanaImage")[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb 
                }
                return fileSize;
            }
            catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get bank statement file size bankstatementfiles
        function GetBankStatementFileSize(fileid) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //alert(fileSize);
                    //fileSize = fileSize / 1048576; //size in mb 
                    // fileSize = fileSize / 1048576; //size in mb 
                    alert(fileSize);
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#BankStatementImage")[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb 
                }
                return fileSize;
            }
            catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get stock register file size
        function GetStockRegisterFileSize(fileid) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //alert(fileSize);
                    //fileSize = fileSize / 1048576; //size in mb 
                    // fileSize = fileSize / 1048576; //size in mb 
                    alert(fileSize);
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#StockRegisterEntryImage")[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb 
                }
                return fileSize;
            }
            catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            }
            else {
                return strName[0];
            }
        }






        //for image format
        $(function () {
            $(".file").change(function () {

                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {
                        case 'jpg':
                        case 'JPG':
                        case 'png':
                        case 'PNG':
                        case 'jpeg':
                        case 'JPEG':
                        case 'bmp':
                        case 'BMP':
                        case 'gif':
                        case 'GIF':
                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".files > span").text("You can upload only JPEG / JPG / GIF / PNG / BMP files");
                    $(this).val('');
                    return false;
                }
                else {
                    var size = GetFileSize(file);

                    if (size > 307200) {
                        $(".files > span").text("Photo should not exceed 300 KB in Size");
                        $(this).val('');
                    }
                    else {
                        $(".files > span").text("");
                    }
                }

            });
        });

        //for Delivery chalana doc
        $(function () {
            $(".deliverychalanafile").change(function () {

                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {

                        case 'pdf':
                        case 'PDF':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".deliverychalanafiles > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                }
                else {
                    var size = GetDeliveryChalanaFileSize(file);
                    size = size / 1048576;
                    if (size > 1) {
                        $(".deliverychalanafiles > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    }
                    else {

                        $(".deliverychalanafiles > span").text("");
                    }
                }

            });
        });

        //for bank statement
        $(function () {
            $(".bankstatementfile").change(function () {

                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {

                        case 'pdf':
                        case 'PDF':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".bankstatementfiles > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                }
                else {
                    var size = GetBankStatementFileSize(file);
                    size = size / 1048576;
                    if (size > 1) {
                        $(".bankstatementfiles > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    }
                    else {

                        $(".bankstatementfiles > span").text("");
                    }
                }

            });
        });

        //for stock register 
        $(function () {
            $(".stockRegisterfile").change(function () {

                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {

                        case 'pdf':
                        case 'PDF':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".stockRegisterfiles > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                }
                else {
                    var size = GetStockRegisterFileSize(file);
                    size = size / 1048576;
                    if (size > 1) {
                        $(".stockRegisterfiles > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    }
                    else {

                        $(".stockRegisterfiles > span").text("");
                    }
                }

            });
        });


        $("#btnUpdate").click(function() {
            var deliverychallanview = $("#ViewDelivaryChalanaImage").val();
            if (deliverychallanview != null) {
                $("#DelivaryChalanaImage").attr("required", false);
            }
            var bankstatementview = $("#ViewBankStatementImage").val();
            if (bankstatementview != null) {
                $("#BankStatementImage").attr("required", false);
            }
            var stockregisterentryview = $("#ViewStockRegisterEntryImage").val();
            if (stockregisterentryview != null) {
                $("#StockRegisterEntryImage").attr("required", false);
            }

            var equimentphotoview = $("#ViewEquipmentPhoto").val();
            if (equimentphotoview != null) {
                $("#EquipmentPhoto").attr("required", false);
            }



        });


    });
</script>



@using (Ajax.BeginForm("AddEditRecord", "Labs", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "LaboratoriesDialog" }, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    if (TempData["Error"] != null)
    {
        <div class="error">
            <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
        </div>
    }
    if (TempData["Success"] != null)
    {
        <div class="success">
            <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
        </div>
    }
    if (ViewBag.Count == 0)
    {
        <div class="warning" style="width: 550px; margin: 0 auto;">
            <p>Please select your courses in "College Information" page before filling up this page.</p>
        </div>
    }
    <div class="details_table">
        @if (ViewBag.IsUpdate == true)
        {
            @Html.HiddenFor(model => model.id)
            @Html.HiddenFor(model => model.createdBy)
            @Html.HiddenFor(model => model.createdOn)
        }
        @Html.HiddenFor(model => model.collegeId, new { @Value = Model.collegeId })
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.degreeId)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.DisplayFor(model => model.degree)
            @Html.ValidationMessageFor(model => model.degreeId)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.departmentId)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.DisplayFor(model => model.department)
        </div>

        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.specializationId)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.DisplayFor(model => model.specializationName)
        </div>
        @if (Model.degree == "B.Tech" || Model.degree == "B.Pharmacy")
        {
            <div class="editor-label" style="width: 250px">
                @Html.LabelFor(model => model.yearInDegreeId)
            </div>
            <div class="editor-field" style="width: 400px">
                @Html.DisplayFor(model => model.year)
            </div>
            <div class="editor-label" style="width: 250px">
                @Html.LabelFor(model => model.Semester)
            </div>
            <div class="editor-field" style="width: 400px">
                @Html.DisplayFor(model => model.Semester)
            </div>
        }
        else
        {
            @Html.HiddenFor(model => model.year)
            @Html.HiddenFor(model => model.Semester)
        }

        @* <div class="editor-label" style="width: 250px">
                @Html.LabelFor(model => model.Labcode)
            </div>
            <div class="editor-field" style="width: 420px">
                @Html.DisplayFor(model => model.Labcode)
            </div>*@

        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.LabName)
        </div>
        <div class="editor-field" style="width: 400px">
            @if (Model.Labcode != "TMP-CL" && Model.LabName != "" && Model.LabName != null)
            {
                @Html.DisplayFor(model => model.LabName)
                @Html.HiddenFor(model => model.LabName)
            }
            else
            {
                @Html.TextBoxFor(model => model.LabName, new { @Value = Model.LabName, @placeholder = "Lab Name", @maxlength = "50", @class = "required", @id = "Labpname", @title = "We do not have Lab Names for the selected Lab, please specify your own 'Name of the Equipment' in the textbox shown" })
            }

        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.AvailableArea)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.TextBoxFor(model => model.AvailableArea, new { @placeholder = "Floor Area" })
            @Html.ValidationMessageFor(model => model.AvailableArea)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.RoomNumber)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.TextBoxFor(model => model.RoomNumber, new { @placeholder = "Room No", @maxlength = "25" })
            @Html.ValidationMessageFor(model => model.RoomNumber)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.EquipmentID)
        </div>
        <div class="editor-field" style="width: 400px">
            @if (Model.Labcode != "TMP-CL" && Model.EquipmentName != "" && Model.EquipmentName != null)
            {
                @Html.DisplayFor(model => model.EquipmentName)
                @Html.HiddenFor(model => model.EquipmentName)
            }
            else
            {
                @Html.TextBoxFor(model => model.EquipmentName, new { @Value = Model.LabEquipmentName, @placeholder = "Equipment Name", @maxlength = "50", @class = "required", @id = "eqpname", @title = "We do not have Equipment Names for the selected Lab, please specify your own 'Name of the Equipment' in the textbox shown" })
            }
            @*@Html.DisplayFor(model => model.EquipmentNo)  *@
            @Html.HiddenFor(model => model.EquipmentNo)
            @Html.HiddenFor(model => model.EquipmentID)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.EquipmentIds)
        </div>
        <div class="editor-field" style="width: 400px; height:40px;">
            @Html.DisplayFor(model => model.EquipmentIds)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.Make)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.TextBoxFor(model => model.Make, new { @placeholder = "Make", @maxlength = "50" })
            @Html.ValidationMessageFor(model => model.Make)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.Model)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.TextBoxFor(model => model.Model, new { @placeholder = "Model", @maxlength = "50" })
            @Html.ValidationMessageFor(model => model.Model)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.EquipmentUniqueID)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.TextBoxFor(model => model.EquipmentUniqueID, new { @placeholder = "Unique ID", @maxlength = "50" })
            @Html.ValidationMessageFor(model => model.EquipmentUniqueID)
        </div>
        <div class="editor-label" style="width: 250px">
            @Html.LabelFor(model => model.AvailableUnits)
        </div>
        <div class="editor-field" style="width: 400px">
            @Html.TextBoxFor(model => model.AvailableUnits, new { @placeholder = "AvailableUnits" })
            @Html.ValidationMessageFor(model => model.AvailableUnits)
        </div>

        <div class="editor-label" style="width: 252px">
            @*@Html.LabelFor(model => model.EquipmentDateOfPurchasing )*@
            @Html.Label("Date of Payment Invoice(dd/MM/yyyy)")
        </div>
        <div class="editor-field" style="width: 397px;height:25px;">


            @Html.TextBoxFor(model => model.EquipmentDateOfPurchasing1, "{0:dd/MM/yyyy}", new { @class = "calendar1 required", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "Date Of Payment" })
            @Html.ValidationMessageFor(model => model.EquipmentDateOfPurchasing1)

        </div>
        <div class="editor-label" style="width: 252px">
            @*@Html.LabelFor(model => model.EquipmentDateOfPurchasing )*@
            @Html.Label("Date of Delivery Challan(dd/MM/yyyy)")
        </div>
        <div class="editor-field" style="width: 397px;height:25px;">
            @Html.TextBoxFor(model => model.DelivaryChalanaDate1, "{0:dd/MM/yyyy}", new { @class = "calendar1 required", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "Date of Delivery Challan" })
            @Html.ValidationMessageFor(model => model.DelivaryChalanaDate1)
        </div>
        <div class="editor-label" style="width: 252px; ">
            @*@Html.LabelFor(model => model.EquipmentPhoto)*@

            @Html.Label("Equipment Photo ")
            <br />
            <span style="color:red;">Image size: Min 50kb & Max 300kb. Image format:"JPEG OR PNG"</span>
        </div>
        <div class="editor-field files" style="width: 397px;height: 57px">
            @Html.TextBoxFor(model => model.EquipmentPhoto, new { type = "file", @class = "file" ,@required=true})
            <span style="color: red;"></span><br />
            @if (@Html.DisplayFor(model => model.ViewEquipmentPhoto) != null && @Html.DisplayFor(model => model.ViewEquipmentPhoto).ToString() != "")
            {
                @Html.HiddenFor(model => model.ViewEquipmentPhoto)
               <img src="../Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos/@Html.DisplayFor(model => model.ViewEquipmentPhoto)" style="height: 50px;" />
            }

            @*@Html.HiddenFor(model => model.uploadFile, new { @Value = Model.uploadFile })*@
        </div>

    <div class="editor-label" style="width: 252px;height:57px">
        <span>Delivery Chalana Statement <br />
            <span style="color: blue;">
                (Pdf should be less than 1 MB size)
            </span>
        </span>
       
    </div>
        <div class="editor-field deliverychalanafiles" style="width: 397px;height: 57px">
            @Html.TextBoxFor(model => model.DelivaryChalanaImage, new { type = "file", @class = "deliverychalanafile",@required=true })
            <br />
            <span style="color: red;"></span>
            
            @if (Model != null && Model.ViewDelivaryChalanaImage != null)
            {<br />
                <a href="@Model.ViewDelivaryChalanaImage.Replace("~", "")" target="_blank">Download</a>
                @Html.HiddenFor(model => model.ViewDelivaryChalanaImage)
            }



            @*@if (@Html.DisplayFor(model => model.ViewDelivaryChalanaImage) != null && @Html.DisplayFor(model => model.ViewDelivaryChalanaImage).ToString() != "")
            {
                @Html.HiddenFor(model => model.ViewDelivaryChalanaImage)
                <img src="@Html.DisplayFor(model => model.ViewDelivaryChalanaImage)" style="height: 50px;" />
            }*@
        </div>

        <div class="editor-label" style="width: 252px;height:57px ">
            @Html.Label("Bank Statement ")
            <br />
            <span style="color:blue;"> (Pdf should be less than 1 MB size)</span>
        </div>
    <div class="editor-field bankstatementfiles" style="width: 397px; height: 57px">
        @Html.TextBoxFor(model => model.BankStatementImage, new { type = "file", @class = "bankstatementfile",@required=true })
        <br />
        <span style="color: red;"></span>

              @if (Model != null && Model.ViewBankStatementImage != null)
               {<br />
                  <a href="@Model.ViewBankStatementImage.Replace("~", "")" target="_blank">Download</a>
                  @Html.HiddenFor(model => model.ViewBankStatementImage)
               }
        @*@if (@Html.DisplayFor(model => model.ViewBankStatementImage) != null && @Html.DisplayFor(model => model.ViewBankStatementImage).ToString() != "")
        {
            @Html.HiddenFor(model => model.ViewBankStatementImage)
            <img src="../Content/Upload/EquipmentsPhotos/@Html.DisplayFor(model => model.ViewBankStatementImage)" style="height: 50px;"/>
        }*@
    </div>

        <div class="editor-label" style="width: 252px;height:57px ">
            @Html.Label("Stock Register Entry Statement ")
            <br />
            <span style="color:blue;"> (Pdf should be less than 1 MB size)</span>
        </div>
        <div class="editor-field stockRegisterfiles" style="width: 397px;height: 57px">
            @Html.TextBoxFor(model => model.StockRegisterEntryImage, new { type = "file", @class = "stockRegisterfile", @required = true })
            <br />
            <span style="color: red;"></span>
            
               @if (Model != null && Model.ViewStockRegisterEntryImage != null)
                   {<br />
                    <a href="@Model.ViewStockRegisterEntryImage.Replace("~", "")" target="_blank">Download</a>
                    @Html.HiddenFor(model => model.ViewStockRegisterEntryImage)
                   }
            @*@if (@Html.DisplayFor(model => model.ViewStockRegisterEntryImage) != null && @Html.DisplayFor(model => model.ViewStockRegisterEntryImage).ToString() != "")
            {
                @Html.HiddenFor(model => model.ViewStockRegisterEntryImage)
                <img src="../Content/Upload/EquipmentsPhotos/@Html.DisplayFor(model => model.ViewStockRegisterEntryImage)" style="height: 50px;" />
            }*@
        </div>





    @Html.HiddenFor(model => model.createdOn)
        @Html.HiddenFor(model => model.createdBy)
        <div style="text-align: center">
            <p>
                @*<input type="submit" value="Save" id="btnSave" name="cmd" class="submit" onclick="return Validate();"  />*@
                @if (ViewBag.IsUpdate == true)
                {
                    <input type="submit" value="Update" id="btnUpdate" name="cmd" class="submit" />
                }
                else
                {
                    <input type="submit" value="Save" id="btnSave" name="cmd" class="submit" onclick="return Validate();"  />
                }
            </p>
        </div>
    </div>

}








