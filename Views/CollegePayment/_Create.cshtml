@model UAAAS.Models.CollegePayment
<script src="@Url.Content("~/Scripts/jquery-1.7.1.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>

@using (Ajax.BeginForm("AddEditRecord", "CollegePayment", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "studentDialog" }, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)    
    @Html.HiddenFor(model => model.collegeId, new { @Value = Model.collegeId })
    if (TempData["Error"] != null)
    {
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div>
    }
    if (TempData["Success"] != null)
    {
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div>
    }
    <table class="downloads_table" style="width: 100%;">
        <tr>
            <td class="editor-label1">Total Amount (Lakhs)
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.paymentAmount)
                @Html.ValidationMessageFor(model => model.paymentAmount)
            </td>
        </tr>
        <tr>
            <td class="editor-label1" style="width: 40%;">Payment Date
            </td>
            <td class="editor-field1" style="width: 60%;">
                @Html.TextBoxFor(model => model.date, new { @class = "calendar1", style = "width: 80px", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)" }) (DD/MM/YYYY)
                @Html.ValidationMessageFor(model => model.date)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Payment Mode
            </td>
            <td class="editor-field1">
                @Html.DropDownListFor(model => model.paymentType,
                new SelectList(ViewBag.Modes, "value", "text"),
                "-- Select --", new { id = "paymentType" })
                @Html.ValidationMessageFor(model => model.paymentType)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Cheque/DD Number
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.paymentNumber)
                @Html.ValidationMessageFor(model => model.paymentNumber)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Branch Name
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.paymentBranch)
                @Html.ValidationMessageFor(model => model.paymentBranch)
            </td>
        </tr>
        <tr>
            <td class="editor-label1">Branch Location
            </td>
            <td class="editor-field1">
                @Html.TextBoxFor(model => model.paymentLocation)
                @Html.ValidationMessageFor(model => model.paymentLocation)
            </td>
        </tr>
        @Html.HiddenFor(model => model.createdBy)
        @Html.HiddenFor(model => model.createdOn)
    </table>
    <p>
        @if (ViewBag.IsUpdate == true)
        {
            <input type="submit" value="Update" id="btnUpdate" name="cmd" class="submit" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" />
        }
        else
        {
            <input type="submit" value="Save" id="btnSave" name="cmd" class="submit" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" />
        }
        <input type="button" value="Cancel" id="btnCancel" class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" />
    </p>
}
