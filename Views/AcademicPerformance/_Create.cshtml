@model UAAAS.Models.CollegeAcademicPerformance
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

<style type="text/css">
    .width {
        width: 80%;
    }

    .text_width {
        width: 28%;
        text-align: center;
    }
</style>
<script type="text/javascript">
    function CalculatePassPercentage()
    {
        
        var appearedstudents1=$('#aps1').val();
        var passedstudents1=$('#ps1').val();
        var passpercentage1=$('#pp1').val();
        
        var appearedstudents2=$('#aps2').val();
        var passedstudents2=$('#ps2').val();
        var passpercentage2=$('#pp2').val();
        
        var appearedstudents3=$('#aps3').val();
        var passedstudents3=$('#ps3').val();
        var passpercentage3=$('#pp3').val();

        var appearedstudents4=$('#aps4').val();
        var passedstudents4=$('#ps4').val();
        var passpercentage4=$('#pp4').val();

        if(parseInt(appearedstudents1)<parseInt(passedstudents1))
        {
            passedstudents1= $('#ps1').val('0');
            $('#ps1').val('0').focus();
            $('#pp1').val('0');
            alert('Passed students should be less than or equal to Appeared students');       
          
        }
        else
        {
            passpercentage1=((parseInt(passedstudents1)/parseInt(appearedstudents1))*100).toFixed(2);
            if(parseInt(passedstudents1)==0 && parseInt(appearedstudents1)==0)
            {               
                $('#pp1').val(0);
            }
            else
            {
                $('#pp1').val(passpercentage1);
            }
        }
        if(parseInt(appearedstudents2)<parseInt(passedstudents2))
        {
            passedstudents2= $('#ps2').val('0');
            $('#ps2').val('0').focus();
            $('#pp2').val('0');
            alert('Passed students should be less than or equal to Appeared students');           
          
        }
        else
        {
            passpercentage2=((parseInt(passedstudents2)/parseInt(appearedstudents2))*100).toFixed(2);           
            if(parseInt(passedstudents2)==0 && parseInt(appearedstudents2)==0)
            {               
                $('#pp2').val(0);
            }
            else
            {
                $('#pp2').val(passpercentage2);
            }
        }
        if(parseInt(appearedstudents3)<parseInt(passedstudents3))
        {
            passedstudents3= $('#ps3').val('0');
            $('#ps3').val('0').focus();
            $('#pp3').val('0');
            alert('Passed students should be less than or equal to Appeared students');           
           
        }
        else
        {
            passpercentage3=((parseInt(passedstudents3)/parseInt(appearedstudents3))*100).toFixed(2);
            if(parseInt(passedstudents3)==0 && parseInt(appearedstudents3)==0)
            {               
                $('#pp3').val(0);
            }
            else
            {
                $('#pp3').val(passpercentage3);
            }
        }
        if(parseInt(appearedstudents4)<parseInt(passedstudents4))
        {
            passedstudents4= $('#ps4').val('0');
            $('#ps4').val('0').focus();
            $('#pp4').val('0');
            alert('Passed students should be less than or equal to Appeared students');           
           
        }
        else
        {
            passpercentage4=((parseInt(passedstudents4)/parseInt(appearedstudents4))*100).toFixed(2);
            if(parseInt(passedstudents4)==0 && parseInt(appearedstudents4)==0)
            {               
                $('#pp4').val(0);
            }
            else
            {
                $('#pp4').val(passpercentage4);
            }
        }
       
    }


    $(document).ready(function () {
        GetSpecialization(@Model.DepartmentID);
        $('.calendar').attr("readonly", "true");
        $('.calendar').datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            showOn: "button",
            buttonImage: "@Url.Content("~/Content/themes/base/images/calendar.gif")",
            buttonImageOnly: true
            //showButtonPanel: true
        });
        //$(".calendar, .year").css("width", "75px");

        if ($("#degreeId").val() > 0) {
            GetDepartments($("#degreeId").val());
        }
        
        
        $("#degreeId").change(function () {
            var DegreeID = $(this).val();
            GetDepartments(DegreeID);
        });
        if($("#DepartmentId").val() > 0)
        {
            GetSpecialization($("#DepartmentId").val());
        }
        $("#DepartmentId").change(function() {
            var DepartmentID = $(this).val();
            GetSpecialization(DepartmentID);
        });

        function GetDepartments(DegreeID){
            $.getJSON("/AcademicPerformance/GetDepartments",{ id : DegreeID},
                function(departmentsData){
                    var select = $("#DepartmentId");
                    select.empty();
                    select.append($('<option/>',{
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(departmentsData,function(index, itemdata){
                        select.append($('<option/>',{
                            value: itemdata.Value,
                            text: itemdata.Text,
                            selected: (itemdata.Value == @Model.DepartmentID ? true : false)
                        }));
                    });
                });
            }

        function GetSpecialization(DepartmantID){
            $.getJSON("/AcademicPerformance/GetSpecialization" ,{id : DepartmantID},
                function(specializationdata){
                    var select = $("#specializationId");
                    select.empty();
                    select.append($('<option/>',{
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(specializationdata,function(index, itemdata){
                        select.append($('<option/>',{
                            value: itemdata.Value,
                            text: itemdata.Text,
                            selected: (itemdata.Value == @Model.specializationId ? true : false)
                        }));
                    });
                });
            }
    });
    
   

   

</script>

@using (Ajax.BeginForm("AddEditRecord", "AcademicPerformance", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "CollegeIntakeDialog" }))
{
    @Html.ValidationSummary(true)
    if (TempData["Error"] != null)
    {
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div>
    }
    if (TempData["Success"] != null)
    {
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div>
    }
    if (ViewBag.Count == 0)
    {
    <div class="warning" style="width: 550px; margin: 0 auto;">
        <p>Please select your courses in "College Information" page before filling up this page.</p>
    </div>
    }
    <div class="details_table">
        @if (ViewBag.IsUpdate == true)
        {
            @Html.HiddenFor(model => model.id)
        }
        @Html.HiddenFor(model => model.collegeId, new { @Value = Model.collegeId })
        <div class="editor-label" style="width: 280px">
            @Html.LabelFor(model => model.degreeID)
        </div>
        <div class="editor-field" style="width: 360px">
            @if (ViewBag.IsUpdate == true)
            {
                @Html.DropDownListFor(model => model.degreeID,
            new SelectList(ViewBag.Degree as System.Collections.IEnumerable, "degreeId", "degree"),
                 "-- Select --", new { id = "degreeId", @class = "width", disabled = "true" })
                @Html.ValidationMessageFor(model => model.degreeID)
                @Html.HiddenFor(model => model.degreeID)
            }
            else
            {
               @Html.DropDownListFor(model => model.degreeID,
                  new SelectList(ViewBag.Degree as System.Collections.IEnumerable, "degreeId", "degree"),
                 "-- Select --", new { id = "degreeId", @class = "width" })
                @Html.ValidationMessageFor(model => model.degreeID)
            }
        </div>

        <div class="editor-label" style="width: 280px">
            @Html.LabelFor(model => model.DepartmentID)
        </div>
        <div class="editor-field" style="width: 360px">
            @if (ViewBag.IsUpdate == true)
            {
                @Html.DropDownListFor(model => model.DepartmentID,
                      new SelectList(Enumerable.Empty<SelectListItem>(), "DepartmentId", "Department"),
                 "-- Select --", new { id = "DepartmentId", @class = "width", disabled = "true" })
                @Html.ValidationMessageFor(model => model.DepartmentID)
                @Html.HiddenFor(model => model.DepartmentID)
            }
            else
            {
                @Html.DropDownListFor(model => model.DepartmentID,
                      new SelectList(Enumerable.Empty<SelectListItem>(), "DepartmentId", "Department"),
                 "-- Select --", new { id = "DepartmentId", @class = "width" })
                @Html.ValidationMessageFor(model => model.DepartmentID)
            }
        </div>

        <div class="editor-label" style="width: 280px">
            @Html.LabelFor(model => model.specializationId)
        </div>
        <div class="editor-field" style="width: 360px">
            @if (ViewBag.IsUpdate == true)
            {
                @Html.DropDownListFor(model => model.specializationId,
                      new SelectList(Enumerable.Empty<SelectListItem>(), "specializationId", "specialization"),
                 "-- Select --", new { id = "specializationId", @class = "width", disabled = "true" })
                @Html.ValidationMessageFor(model => model.specializationId)
                @Html.HiddenFor(model => model.specializationId)
            }
            else
            {
                @Html.DropDownListFor(model => model.specializationId,
                      new SelectList(Enumerable.Empty<SelectListItem>(), "specializationId", "specialization"),
                 "-- Select --", new { id = "specializationId", @class = "width" })
                @Html.ValidationMessageFor(model => model.specializationId)
            }
        </div>

        <div class="editor-label" style="width: 280px">
            @Html.LabelFor(model => model.shiftId)
        </div>
        <div class="editor-field" style="width: 360px">
            @if (ViewBag.IsUpdate == true)
            {
                @Html.DropDownListFor(model => model.shiftId,
            new SelectList(ViewBag.Shift as System.Collections.IEnumerable, "id", "shiftName"),
            new { id = "Shift", @style = "width: 50px", disabled = "true" })
                @Html.ValidationMessageFor(model => model.shiftId)
                @Html.HiddenFor(model => model.shiftId)
            }
            else
            {
                @Html.DropDownListFor(model => model.shiftId,
            new SelectList(ViewBag.Shift as System.Collections.IEnumerable, "id", "shiftName"),
            new { id = "Shift", @style = "width: 50px" })
                @Html.ValidationMessageFor(model => model.shiftId)
            }
        </div>
    </div>
    <br />
    <div>
        <div class="editor-label" style="width: 280px; background-color: transparent; padding: 0; margin: 0;">
        </div>
        <div class="editor-field" style="width: 360px; background-color: transparent; padding: 0; margin: 0;">
            <div style="float: left; width: 33%; text-align: center;"><b>Appeared</b></div>
            <div style="float: left; width: 33%; text-align: center;"><b>Passed</b></div>
            <div style="float: left; width: 33%; text-align: center;"><b>%</b></div>
        </div>

        <div class="editor-label" style="width: 280px">
            @ViewBag.FirstYear
        </div>
        <div class="editor-field" style="width: 360px">
            @Html.TextBoxFor(model => model.appearedStudents1, new { @class = "text_width", @id = "aps1", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passedStudents1, new { @class = "text_width", @id = "ps1", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passPercentage1, new { @class = "text_width", @id = "pp1", @readonly = "readonly" })
        </div>

        <div class="editor-label" style="width: 280px">
            @ViewBag.SecondYear
        </div>
        <div class="editor-field" style="width: 360px">
            @Html.TextBoxFor(model => model.appearedStudents2, new { @class = "text_width", @id = "aps2", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passedStudents2, new { @class = "text_width", @id = "ps2", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passPercentage2, new { @class = "text_width", @id = "pp2", @readonly = "readonly" })
        </div>

        <div class="editor-label" style="width: 280px">
            @ViewBag.ThirdYear
        </div>
        <div class="editor-field" style="width: 360px">
            @Html.TextBoxFor(model => model.appearedStudents3, new { @class = "text_width", @id = "aps3", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passedStudents3, new { @class = "text_width", @id = "ps3", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passPercentage3, new { @class = "text_width", @id = "pp3", @readonly = "readonly" })
        </div>

        <div class="editor-label" style="width: 280px">
            @ViewBag.FourthYear
        </div>
        <div class="editor-field" style="width: 360px">
            @Html.TextBoxFor(model => model.appearedStudents4, new { @class = "text_width", @id = "aps4", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passedStudents4, new { @class = "text_width", @id = "ps4", onchange = "CalculatePassPercentage()" })
            @Html.TextBoxFor(model => model.passPercentage4, new { @class = "text_width", @id = "pp4", @readonly = "readonly" })
        </div>

        <div style="text-align: center">
            <p>
                @if (ViewBag.IsUpdate == true)
                {
                    <input type="submit" value="Save" id="btnSave" name="cmd" />                    
                }
                else
                {
                    <input type="submit" value="Add" id="btnAdd" name="cmd" />
                }
            </p>
        </div>
    </div>
}