@model UAAAS.Models.FacultySuppDocsClass
@{
    ViewBag.Title = "Faculty_suppDocs";
    int count = 1;
}

<h2>Submission of Supporting Documents</h2>
<style type="text/css">
     .ui-autocomplete
    {
        overflow:scroll;
        height:260px;
    }
</style>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.plugin.from_html.js")" type="text/javascript"></script>
<br/>
<script type="text/javascript">
    $(document).ready(function () {
        var ugspecializations = @Html.Raw(Json.Encode(Model.ugspecializations.Distinct()));

        $("#DegreeSpecialization").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {

                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(ugspecializations, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();
                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $(".file").change(function () {
            var title = $(this).attr('id');
            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("You can upload only  PDF files");
                $(this).val('');
                return false;
            } else {
                var size = GetFileSize($(this).val(), title);
                //size = size / 1048576;
                size = size / 524228;
                if (size > 1) {
                    alert('Pdf should be less than 500 KB size');
                    $(this).val('');
                }
            }
        });

        $("#AwardedUniversity").change(function () {
            debugger;
            var value = $(this).val();
            if(value != null && value != "")
            {
                $.ajax({
                    type: "Get",
                    url: "/FacultyRequests/GetState?UniversityName=" + value,
                    success: function (data) {
                        debugger;
                        //$("#Place").css({ "display": "block" });
                        $("#Place").val(data.data);
                    },
                    error: function () {
                        alert("state is not found;")
                    }
                });
            }
            else {
                $("#Place").val("");
            }
        });
    });

    function GetFileSize(fileid, title) {
        try {
            var fileSize = 0;
            //for IE
            if ($.browser.msie) {
                //before making an object of ActiveXObject,
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $(".file")[0].files[0].size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
            return fileSize;
        } catch (e) {

            //alert("Error is : " + e);
        }
    }

    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }
</script>
@if (TempData["SUCCESS"] != null)
{
    <div class="success" style="height:15px;">
        <p style="text-align: center;font-weight: bold"><span style="color:green;font-weight:bold;">Success : </span>@TempData["SUCCESS"].ToString()</p>
    </div><br />
}
@if (TempData["ERROR"] != null)
{
    <div class="error">
        <p style="text-align: center;font-weight: bold;"><span style="color:red;font-weight:bold;">Error : </span>@TempData["ERROR"].ToString()</p>
    </div><br />
}



@using (Html.BeginForm("Faculty_suppDocs", "FacultyRequests", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    if (TempData["EditSupportingDocsLink"] == "false")
    {
        <div>
            @Html.HiddenFor(model => model.Id)
            @Html.HiddenFor(model => model.FacultyId)
            <div>
                <div class="editor-label" style="width:15%;">
                    <span>Type of Certificate</span>
                </div>
                <div class="editor-field" style="width:28%;">
                    @Html.DropDownListFor(model => model.CertificateTypeId, new SelectList(ViewBag.CertificateTypes as System.Collections.IEnumerable, "CertificateId", "CertificateType"), "---Select---", new { @style = "width:100%;" })
                </div>
            </div>
            <div>
                <div class="editor-label" style="width:27%;">
                    <span>Degree for which supporting documents are to be uploaded</span>
                </div>
                <div class="editor-field" style="width:25%;">
                    @Html.DropDownListFor(model => model.DegreeId, new SelectList(ViewBag.DegreeTypes as System.Collections.IEnumerable, "DegreeId", "DegreeType"), "---Select---", new { @style = "width:94%;" })
                </div>
            </div><br /><br />
            <div>
                <div class="editor-label" style="width:15%;">
                    <span>Date of Issue of Certificate</span>
                </div>
                <div class="editor-field" style="width:28%;">
                    @Html.TextBoxFor(model => model.facultyCertificateIssuedDate, new { @class = "calendar", style = "width:55%;", @onblur = "IsValidDate(this,event.keyCode,0,0,0)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "Select Certificate Issued Date" })
                    @Html.ValidationMessageFor(model => model.facultyCertificateIssuedDate)
                </div>
            </div>
            <div>
                <div class="editor-label" style="width:27%;">
                    <span>Supporting Documents to be uploaded</span>
                </div>
                <div class="editor-field" style="width:25%;">
                    @Html.TextBoxFor(model => model.Certificate, new { type = "file", @class = "file required", @style = "vertical-align: top;" }) &nbsp;&nbsp;&nbsp;
                    @Html.HiddenFor(model => model.facultyCertificate)
                </div>
            </div><br /><br />
            <div>
                <div class="editor-label" style="width:15%;">
                    <span>Specialization</span>
                </div>
                <div class="editor-field" style="width:28%;">
                    @Html.TextBoxFor(model => model.Specialization, new { @id = "DegreeSpecialization", @class = "DegreeSpecialization", style = "width:90%;", @placeholder = "Enter your Specialization" })
                    @Html.ValidationMessageFor(model => model.Specialization)
                </div>
            </div>
            <div>
                <div class="editor-label" style="width:27%;">
                    <span>Year of passing the Degree</span>
                </div>
                <div class="editor-field" style="width:25%;">
                    @Html.DropDownListFor(model => model.AwardedYear, new SelectList(ViewBag.years as System.Collections.IEnumerable, "Value", "Text"), "---Select---", new { @style = "width:40%;" })
                    @*@Html.TextBoxFor(model => model.AwardedYear, new { @class = "", @style = "vertical-align: top;",  @placeholder = "Select Year"}) &nbsp;&nbsp;&nbsp;*@
                    @Html.HiddenFor(model => model.AwardedYear)
                </div>
            </div><br /><br />
            <div>
                <div class="editor-label" style="width:15%;">
                    <span>Degree Awarded University</span>
                </div>
                <div class="editor-field" style="width:28%;">
                    @Html.DropDownListFor(model => model.AwardedUniversity, new SelectList(ViewBag.Universitys as System.Collections.IEnumerable, "UId", "University"), "---Select---", new { @style = "width:94%;" })
                    @Html.ValidationMessageFor(model => model.AwardedUniversity)
                </div>
            </div>
            <div>
                <div class="editor-label" style="width:27%;">
                    <span>University Location</span>
                </div>
                <div class="editor-field" style="width:25%;">
                    @Html.TextBoxFor(model => model.PlaceOfEducation, new { @id = "Place" ,@placeholder = "Place od Education" })
                   @*@Html.DropDownListFor(model => model.PlaceOfEducation, new SelectList(ViewBag.Places as System.Collections.IEnumerable, "SId", "State"), "---Select---", new { @style = "width:94%;" })
                    @Html.HiddenFor(model => model.PlaceOfEducation)*@
                </div>
            </div><br /><br />
            <div style="float:right;margin-right:20px;">
                <input type="submit" value="Sumbit" />
            </div>
            <br /><br /><br />
        </div>
    }


    if (ViewBag.DocumentsList != null)
    {
        <table width="100%" border="0" class="webGrid">
            <thead>
                <tr style="background-color:#C1D4E6;">
                    <th>S.No</th>
                    <th>Type of Certificate</th>
                    <th>Degree</th>
                    <th>Date of Issue of Certificate</th>
                    <th>Specialization</th>
                    <th>Year of passing the Degree</th>
                    <th>Degree Awarded University</th>
                    <th>University Location</th>
                    <th>Supporting Documents</th>
                    <th>Status</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in ViewBag.DocumentsList)
                {
                    <tr style="background-color:#FCF1D1;">
                        <td>@(count++)</td>
                        <td>@item.CertificateType</td>
                        <td>@item.Degree</td>
                        <td>@item.facultyCertificateIssuedDate</td>
                        <td>@item.Specialization</td>
                        <td>@item.AwardedYear</td>
                        <td>@item.AwardedUniversity</td>
                        <td>@item.PlaceOfEducation</td>
                        <td>
                            @if (item.facultyCertificate != null)
                            {
                                <a href="../Content/Upload/Faculty/SupportDocuments/@item.facultyCertificate" target="_blank">
                                    <span style="color:red;font-weight:bold;">View</span>
                                </a>
                            }
                       
                        </td>
                        <td>
                            @if (item.isApproved == 0)
                            {
                                <span>Pending</span>
                            }
                            else if (item.isApproved == 1)
                            {
                                <span>Approved</span>
                            }
                            else if (item.isApproved == 2)
                            {
                                <span>Not Approved</span>
                            }
                        </td>

                    </tr>
                }
            </tbody>
        </table>
    }
}
