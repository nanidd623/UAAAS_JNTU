@model UAAAS.Models.FacultyEditFieldnames
@{
    ViewBag.Title = "EditfieldsRequests";
    int count = 1;
    var educationlistdata = Model.EditEducationCheckboxs.Where(s => s.FieldId == 33 || s.FieldId == 34).Select(q => q).ToList();
    Model.EditEducationCheckboxs.RemoveAt(0);
    Model.EditEducationCheckboxs.RemoveAt(0);
    foreach (var t in educationlistdata)
    {
        Model.EditEducationCheckboxs.Add(t);
    }
}

@*<h2>Edit Faculty Requests</h2>*@
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.plugin.from_html.js")" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {

        var depts = @Html.Raw(Json.Encode(Model.Depts.Distinct()));
        var design = @Html.Raw(Json.Encode(Model.Design.Distinct()));
        var ugspecializations = @Html.Raw(Json.Encode(Model.ug_specializations.Distinct()));
        var pgspecializations = @Html.Raw(Json.Encode(Model.pg_specializations.Distinct()));
        var universitys = @Html.Raw(Json.Encode(Model.universitys.Distinct()));
        var places = @Html.Raw(Json.Encode(Model.places.Distinct()));
        var Courses = @Html.Raw(Json.Encode(Model.Courses.Distinct()));

        $("#Department").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(depts, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $("#Designation").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(design, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $(".BoardorUniversity").on("keydown", function (event) {
            
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(universitys, extractLast(request.term));
                response(results);
            },
            scroll : true,
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var CurrentUniversity = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentUniversity).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });
        //#txt_PESSC, #txt_PEUG, #txt_PEPG, #txt_PEMPhil, #txt_PEPhD
        $(".PlaceofEducation").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(places, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $(".Specialization").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {

                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(ugspecializations, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();
                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $(".Specialization").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {

                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(pgspecializations, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $(".Coursestudied").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(Courses, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        
        $("#PhotoMessage").hover(function () {
            $("#PhotoMessage").attr("title", "Minimum 200x200 pixels and less than 100 KB size");
        });
        $("#AadhaarDocumentMessage").hover(function () {
            $("#AadhaarDocumentMessage").attr("title", "Minimum 200x200 pixels and less than 100 KB size");
        });
        $("#PANDocumentMessage").hover(function () {
            $("#PANDocumentMessage").attr("title", "Minimum 200x200 pixels and less than 100 KB size");
        });
        $("#Form16Message").hover(function () {
            $("#Form16Message").attr("title", "Minimum 200x200 pixels and less than 100 KB size");
        });
        $("#CeritificateMessage").hover(function () {
            $("#CeritificateMessage").attr("title", "Minimum 600x800 pixels and less than 100 KB size");
        });

        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $("#btnsubmit").click(function () {
            debugger;
            var Status = "";
            var FalseFieldsCount = 0;
            var TrueFieldsCount = 0;
            var CheckedBoxes = $('input[type="checkbox"]:checked');
            var CheckedBoxesCount = $('input[type="checkbox"]:checked').length;
            if(CheckedBoxesCount == 0)
                return true;
            else{
                $(CheckedBoxes).each(function (index) {
                    debugger;
                    var Splitcheck = CheckedBoxes[index].id;
                    var textid = Splitcheck.split("_")[1];

                    if (textid == "SSC" || textid == "UG" || textid == "PG" || textid == "MPhil" || textid == "PhD") {
                        var cs = $(".txt_CS" + textid).val();
                        var sp = $(".txt_SP" + textid).val();
                        var py = $(".txt_PY" + textid).val();
                        var mp = $(".txt_MP" + textid).val();
                        var di = $(".txt_DI" + textid).val();
                        var bu = $(".txt_BU" + textid).val();
                        var pe = $(".txt_PE" + textid).val();
                        var ec = $(".txt_EC" + textid).val();
                        var edupathfile = $("#filepath_" + textid).val();
                        if(cs == "" || cs == null)
                        {
                            $(".txt_CS" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_CS" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if (sp == "" || sp == null) {
                            $(".txt_SP" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_SP" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if (py == "" || py == null) {
                            $(".txt_PY" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_PY" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if (mp == "" || mp == null || mp == "0") {
                            $(".txt_MP" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_MP" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if (di == "" || di == null) {
                            $(".txt_DI" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_DI" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if (bu == "" || bu == null) {
                            $(".txt_BU" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_BU" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if (pe == "" || pe == null) {
                            $(".txt_PE" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_PE" + textid).removeClass("required").css("background-color", "white");
                            Status = "true";
                        }

                        if ((ec == "" || ec == null) && (edupathfile == "" || edupathfile == null)) {
                            $(".txt_EC" + textid).addClass("required").css("background-color", "#fc6a6c");
                            Status = "false";
                        }
                        else {
                            $(".txt_EC" + textid).removeClass("required").css("background-color", "#FCF1D1");
                            Status = "true";
                        }
                    }
                    else {
                        var browseid = Splitcheck.split("_")[3];
                        var textField = $("#" + textid).val();
                        var browseFile = $("#" + browseid).val();
                        var pathfile = $("#filepath_" + browseid).val();
                        if ((textField == "" || textField == null) && ((pathfile == "" || pathfile == null) && (browseFile == "" || browseFile == null))) {
                            if (textField == "" || textField == null) {
                                $("#" + textid).addClass("required").css("background-color", "#fc6a6c");
                                Status = "false";
                            }
                            else {
                                $("#" + textid).removeClass("required").css("background-color", "white");
                                Status = "true";
                            }

                            if (browseFile == "" || browseFile == null) {
                                if (pathfile == "" || pathfile == null) {                                  
                                    $(".browse_" + browseid).addClass("required").css("background-color", "#fc6a6c");
                                    Status = "false";
                                }
                                else {                                   
                                    $(".browse_" + browseid).removeClass("required").css("background-color","#FCF1D1");
                                    Status = "true";
                                }
                            }
                            else {                              
                                $(".browse_" + browseid).removeClass("required").css("background-color","#FCF1D1");
                                Status = "true";
                            }
                           
                        } else {
                            $("#" + textid).removeClass("required").css("background-color", "white");
                            $("#div_" + browseid).text("");
                            Status = "true"; 
                        }
                    }

                    if (Status == "true")
                        TrueFieldsCount++;
                    else
                        FalseFieldsCount++;
                });
                if (Status == "true" && CheckedBoxesCount == TrueFieldsCount && FalseFieldsCount == 0) {
                    return true;
                } else
                    return false;
            }
          
        });
    });

    $(function () {
        $(".selectdocumentpdf").change(function () {
            var title =  $(this).attr('id');
            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("You can upload only  PDF files");
                $(this).val('');
                return false;
            } else {
                var size = GetFileSize($(this).val() , title);
                //size = size / 1048576;
                size = size / 1048576;
                if (size > 1) {
                    alert('Pdf should be less than 1 MB size');
                    $(this).val('');
                }
            }
        });
    });

    $(function () {
      
        $(".selectdocumentjpg").change(function () {           
            var title =  this.className.split(' ')[1];
            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'jpg':
                    case 'JPG':
                    case 'jpeg':
                    case 'JPEG':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("document should be in JPEG format only");
                $(this).val('');
                return false;
            } else {
                var size = GetJPGFileSize(this.id,title);
                if (size > 102400) {
                    alert("document size should not exceed 100 KB in Size");
                    $(this).val('');
                }
            }
        });
    });


    function GetJPGFileSize(fileid, title) {
        try {
            var fileSize = 0;
            //for IE
            if ($.browser.msie) {
                //before making an object of ActiveXObject,
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $("." + title)[0].files[0].size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
            return fileSize;
        } catch (e) {

            //alert("Error is : " + e);
        }
    }

    function GetFileSize(fileid, title) {
        try {
            var fileSize = 0;
            //for IE
            if ($.browser.msie) {
                //before making an object of ActiveXObject,
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $("#" + title)[0].files[0].size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
            return fileSize;
        } catch (e) {

            //alert("Error is : " + e);
        }
    }

    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        } else {
            return strName[0];
        }
    }

    function clickfun(item) {
        debugger;
        var check = $(item).attr('id').split("_")[1];
        var errormsg = $(item).attr('id').split("_")[3];
        var jkkfg = $("#" + check).css('display');
        if ($("#" + check).css('display') == "none")
            $("#" + check).css({ "display": "block" });
        else if ($("#" + check).css('display') == "block" || $("#" + check).css('display') == "inline-block") {
            $("#" + check).css({ "display": "none" });
            $("#div_" + errormsg).text("");
        }

        var checkorg = $(item).attr('id').split("_")[2];
        var jkkfgorg = $("#" + checkorg).css('display');
        if ($("#" + checkorg).css('display') == "none")
            $("#" + checkorg).css({ "display": "block" });
        else if ($("#" + checkorg).css('display') == "block" || $("#" + checkorg).css('display') == "inline-block")
            $("#" + checkorg).css({ "display": "none" });

        var checksupp = $(item).attr('id').split("_")[3];
        var jkkfgsupp = $("#" + checksupp).css('display');
        if ($("#" + checksupp).css('display') == "none")
            $("#" + checksupp).css({ "display": "block" });
        else if ($("#" + checksupp).css('display') == "block" || $("#" + checksupp).css('display') == "inline-block")
            $("#" + checksupp).css({ "display": "none" });

        var checksViewPath = $(item).attr('id').split("_")[1];
        var jkdhfjsd =  $(".View_" + checksViewPath).css('display');
        if ($(".View_" + checksViewPath).css('display') == "none")
            $(".View_" + checksViewPath).css({ "display": "block" });
        else if ($(".View_" + checksViewPath).css('display') == "block" || $(".View_" + checksViewPath).css('display') == "inline-block" || $(".View_" + checksViewPath).css('display') == "inline")
            $(".View_" + checksViewPath).css({ "display": "none" });

        //Education Details
        var checkid = $(item).attr('id').split("_")[1];
        var jkkfgid = $(".txt_" + checkid).css('display');
        if ($(".txt_CS" + checkid).css('display') == "none")
            $(".txt_CS" + checkid).css({ "display": "block" });
        else if ($(".txt_CS" + checkid).css('display') == "block" || $(".txt_CS" + checkid).css('display') == "inline-block")
            $(".txt_CS" + checkid).css({ "display": "none" });

        if ($(".txt_SP" + checkid).css('display') == "none")
            $(".txt_SP" + checkid).css({ "display": "block" });
        else if ($(".txt_SP" + checkid).css('display') == "block" || $(".txt_SP" + checkid).css('display') == "inline-block")
            $(".txt_SP" + checkid).css({ "display": "none" });

        if ($(".txt_PY" + checkid).css('display') == "none")
            $(".txt_PY" + checkid).css({ "display": "block" });
        else if ($(".txt_PY" + checkid).css('display') == "block" || $(".txt_PY" + checkid).css('display') == "inline-block")
            $(".txt_PY" + checkid).css({ "display": "none" });

        if ($(".txt_MP" + checkid).css('display') == "none")
            $(".txt_MP" + checkid).css({ "display": "block" });
        else if ($(".txt_MP" + checkid).css('display') == "block" || $(".txt_MP" + checkid).css('display') == "inline-block")
            $(".txt_MP" + checkid).css({ "display": "none" });

        if ($(".txt_DI" + checkid).css('display') == "none")
            $(".txt_DI" + checkid).css({ "display": "block" });
        else if ($(".txt_DI" + checkid).css('display') == "block" || $(".txt_DI" + checkid).css('display') == "inline-block")
            $(".txt_DI" + checkid).css({ "display": "none" });

        if ($(".txt_BU" + checkid).css('display') == "none")
            $(".txt_BU" + checkid).css({ "display": "block" });
        else if ($(".txt_BU" + checkid).css('display') == "block" || $(".txt_BU" + checkid).css('display') == "inline-block")
            $(".txt_BU" + checkid).css({ "display": "none" });

        if ($(".txt_PE" + checkid).css('display') == "none")
            $(".txt_PE" + checkid).css({ "display": "block" });
        else if ($(".txt_PE" + checkid).css('display') == "block" || $(".txt_PE" + checkid).css('display') == "inline-block")
            $(".txt_PE" + checkid).css({ "display": "none" });

        if ($(".txt_EC" + checkid).css('display') == "none")
            $(".txt_EC" + checkid).css({ "display": "block" });
        else if ($(".txt_EC" + checkid).css('display') == "block" || $(".txt_EC" + checkid).css('display') == "inline-block")
            $(".txt_EC" + checkid).css({ "display": "none" });

        if ($(".eduView_" + checkid).css('display') == "none")
            $(".eduView_" + checkid).css({ "display": "block" });
        else if ($(".eduView_" + checkid).css('display') == "block" || $(".eduView_" + checkid).css('display') == "inline-block" || $(".eduView_" + checkid).css('display') == "inline")
            $(".eduView_" + checkid).css({ "display": "none" });
    }

    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }

    function ValidateFileSize(fileid) {
        try {
            var fileSize = 0;
            if (navigator.userAgent.match(/msie/i)) {
                var obaxo = new ActiveXObject("Scripting.FileSystemObject");
                var filePath = $("#" + fileid)[0].value;
                var objFile = obaxo.getFile(filePath);
                var fileSize = objFile.size;
                fileSize = fileSize / 1048576;
            }
            else {
                fileSize = $(fileid)[0].files[0].size
                fileSize = fileSize / 1048576;
            }

            return fileSize;
        }
        catch (e) {
            alert("Error is :" + e);
        }
    }

    function checkSpcialChar(event) {
        var e = window.event || event
        var keyunicode = e.charCode || e.keyCode
        //Allow alphabetical keys, plus BACKSPACE and SPACE
        return ((keyunicode >= 65 && keyunicode <= 122) || (keyunicode >= 48 && keyunicode <= 57) || keyunicode == 8 || keyunicode == 32) ? true : false
        return;
        event.returnValue = true;
    }

    function isNumberKeyForPercentage(evt) {

        var len = $('.txtPercentage').val().length;
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57 || len > 6) && charCode != 46)
            return false;
        else if (len >= 3) {
            return true;
        }
        else {

            var index = $('.txtPercentage').val().indexOf('.');

            if (index > 0 && charCode == 46) {
                return false;
            }
            if (index > 0) {
                var CharAfterdot = (len + 1) - index;
                if (CharAfterdot > 3 && charCode != 8) {
                    return false;
                }
            }

        }
        return true;
    }
</script>

<style>
    .colleft {
        width: 25%;
        padding: 8px 5px 2px 5px;
        text-align: left;
        /*border: solid #bbb;*/
        background-color: #E8EFF3;
    }

    .colright {
        width: 25%;
        padding: 8px 5px 2px 5px;
        text-align: left;
        /*border: solid #bbb;*/
        background-color: #FCF1D1;
    }

    .educolright {
        padding: 6px;
        text-align: left;
        /*border: solid #bbb;*/
        background-color: #FCF1D1;
    }

    .ui-autocomplete {
        overflow: scroll;
        height: 260px;
    }
</style>

@if (TempData["SUCCESS"] != null)
{
    <div class="success" style="height:15px;">
        <p style="text-align: center;font-weight: bold"><span style="color:green;font-weight:bold;">Success : </span>@TempData["SUCCESS"].ToString()</p>
    </div><br />
}
@if (TempData["ERROR"] != null)
{
    <div class="error">
        <p style="text-align: center;font-weight: bold;"><span style="color:red;font-weight:bold;">Error : </span>@TempData["ERROR"].ToString()</p>
    </div><br />
}
<div style="font-family: Arial">
    @using (Html.BeginForm("EditfieldsRequests", "FacultyRequests", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(model => model.facultyId)
        @*<div style="display:inline-block;">*@
        <table style="margin:1em auto;">
            <tr>
                <td class="row" colspan="4">
                    <b>Faculty Information</b>
                </td>
            </tr>
            <tr>
                
                <th class="row" style="text-align:center;">Field Name</th>
                <th class="row" style="text-align:center;">Existing Data</th>
                <th class="row" style="text-align:center;">To be modified As</th>
                
            </tr>
            @for (int i = 0; i < Model.EditCheckboxs.Count; i++)
            {
                var FieldName = Model.EditCheckboxs[i].Field;
                var FieldId = Model.EditCheckboxs[i].FieldId;
                var orgFieldNameval = Model.EditCheckboxs[i].Field + Model.EditCheckboxs[i].FieldId;
                var supportid = Model.EditCheckboxs[i].FieldId + Model.EditCheckboxs[i].Field;
                var FieldMessage = Model.EditCheckboxs[i].Field + "Message";
                var LabelFieldname = "label" + FieldName;
                var TextFieldname = "TextBox" + FieldName;
                <tr>
                    @*<td style="background-color:#E8EFF3;text-align:center;">@(count++)</td>*@
                    <td class="colleft">
                        @Html.HiddenFor(m => Model.EditCheckboxs[i].Id)
                        @Html.HiddenFor(m => Model.EditCheckboxs[i].Field)
                        @Html.HiddenFor(m => Model.EditCheckboxs[i].FieldId)
                        @Html.CheckBoxFor(m => Model.EditCheckboxs[i].isSelect, new { id = "chk_" + FieldName + "_" + orgFieldNameval + "_" + supportid + "_" + FieldId, @class = "Checkbox", onclick = "clickfun(this);" })
                        <span>&nbsp;</span>
                        @if (Model.EditCheckboxs[i].FieldId == 12 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 14 || Model.EditCheckboxs[i].FieldId == 15)
                        {
                            <span style="width: 25%">@Model.EditCheckboxs[i].FieldDesc &nbsp;&nbsp;&nbsp;<img id="@FieldMessage" src="../Content/images/question-mark-1750942_1280.png" /></span>
                        }
                        else
                        {
                            <span style="width: 25%">@Model.EditCheckboxs[i].FieldDesc</span>
                        }
                        
                    </td>
                    <td class="colright">
                        @if (Model.EditCheckboxs[i].isSelect == true)
                        {
                            if (Model.EditCheckboxs[i].FieldId == 12 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 14 || Model.EditCheckboxs[i].FieldId == 15)
                            {
                                if (Model.EditCheckboxs[i].Fieldorginal != null)
                                {
                                    <a href="@Model.EditCheckboxs[i].Fieldorginal" target="_blank" class="View_@FieldName">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                }
                                else
                                {
                                    <span>&nbsp;</span>
                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Fieldorginal, new { id = orgFieldNameval, @style = "width:100%;", @maxlength = "500", disabled = "false" })
                            }
                        }
                        else
                        {
                            if (Model.EditCheckboxs[i].FieldId == 12 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 14 || Model.EditCheckboxs[i].FieldId == 15)
                            {
                                if (Model.EditCheckboxs[i].Fieldorginal != null)
                                {
                                    <a href="@Model.EditCheckboxs[i].Fieldorginal" target="_blank" id="@orgFieldNameval" style="display:none;">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                }
                                else
                                {
                                    <span>&nbsp;</span>
                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Fieldorginal, new { id = orgFieldNameval, @style = "display:none;width:100%;", @maxlength = "500", disabled = "false" })
                            }
                        }
                    </td>
                    <td class="colright">
                        @if (Model.EditCheckboxs[i].isSelect == true)
                        {
                            if (Model.EditCheckboxs[i].FieldId == 12 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 14 || Model.EditCheckboxs[i].FieldId == 15)
                            {
                                if (Model.EditCheckboxs[i].SuportdocumentView != null)
                                {
                                    <a href="../Content/Upload/Faculty/FieldEditSupportDocuments/@Model.EditCheckboxs[i].SuportdocumentView" target="_blank" class="View_@FieldName">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                    if (Model.EditCheckboxs[i].FieldId == 15)
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg" })
                                    }
                                    
                                    @Html.HiddenFor(m => Model.EditCheckboxs[i].SuportdocumentView, new { id = "filepath_" + supportid })
                                }
                                else
                                {
                                    if (Model.EditCheckboxs[i].FieldId == 15)
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf browse_" + supportid, @style = "display:none;" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg browse_" + supportid, @style = "display:none;" })
                                    }

                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = FieldName, @style = "width:100%;", @maxlength = "500" })
                            }
                        }
                        else
                        {
                            if (Model.EditCheckboxs[i].FieldId == 12 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 14 || Model.EditCheckboxs[i].FieldId == 15)
                            {
                                if (Model.EditCheckboxs[i].SuportdocumentView != null)
                                {
                                    <a href="../Content/Upload/Faculty/FieldEditSupportDocuments/@Model.EditCheckboxs[i].SuportdocumentView" target="_blank" class="View_@FieldName">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                    if (Model.EditCheckboxs[i].FieldId == 15)
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg" })
                                    }

                                    @Html.HiddenFor(m => Model.EditCheckboxs[i].SuportdocumentView, new { id = "filepath_" + supportid })
                                }
                                else
                                {
                                    if(Model.EditCheckboxs[i].FieldId == 15)
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf browse_" + supportid, @style = "display:none;" })
                                    }
                                    else
                                    {
                                        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg browse_" + supportid, @style = "display:none;" })
                                    }
                                }
                            }
                            else
                            {
                                if (Model.EditCheckboxs[i].FieldId == 8 || Model.EditCheckboxs[i].FieldId == 18)
                                {
                                    @*@Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, @class = "calendar", style = "display:none;width:60%;", @onblur = "IsValidDate(this,event.keyCode,0,0,0)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "Select Date of Birth" })*@
                                    @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = "DD/MM/YYYY", @style = "display:none;width:100%;", @maxlength = "500" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = FieldName, @style = "display:none;width:100%;", @maxlength = "500" })
                                }

                            }

                        }
                    </td>
                    @*<td class="colright">
                        @if (Model.EditCheckboxs[i].FieldId == 10 || Model.EditCheckboxs[i].FieldId == 11)
                        {
                            if (Model.EditCheckboxs[i].isSelect == true)
                            {
                                if (Model.EditCheckboxs[i].SuportdocumentView != null)
                                {
                                    <a href="../Content/Upload/Faculty/FieldEditSupportDocuments/@Model.EditCheckboxs[i].SuportdocumentView" target="_blank" class="View_@FieldName">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                    @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg" })
                                    @Html.HiddenFor(m => Model.EditCheckboxs[i].SuportdocumentView, new { id = "filepath_" + supportid })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg browse_" + supportid, @style = "display:none;" })
                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg browse_" + supportid, @style = "display:none;" })
                            }
                        }
                        else
                        {
                            if (Model.EditCheckboxs[i].isSelect == true)
                            {
                                if (Model.EditCheckboxs[i].SuportdocumentView != null)
                                {
                                    <a href="../Content/Upload/Faculty/FieldEditSupportDocuments/@Model.EditCheckboxs[i].SuportdocumentView" target="_blank" class="View_@FieldName">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                    @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf" })
                                    @Html.HiddenFor(m => Model.EditCheckboxs[i].SuportdocumentView, new { id = "filepath_" + supportid })
                                }
                                else
                                {
                                    @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf browse_" + supportid, @style = "display:none;" })
                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf browse_" + supportid, @style = "display:none;" })
                            }
                        }
                        <div id="div_@supportid" style="color:red;">
                        </div>
                    </td>*@
                </tr>
            }
        </table>
        <div>
            <table style="margin:1em auto;">
                <tr>
                    <td class="row" colspan="10">
                        <b>Educational Qualifications</b>
                    </td>
                </tr>
                <tr>
                    <td class="row" style="text-align: center; width: 100px;">Education</td>
                    @*<td class="row" style="text-align: center; width: 125px;">HallTicket /Roll Number</td>*@
                    <td class="row" style="text-align: center; width: 125px;">Course Studied</td>
                    <td class="row" style="text-align: center; width: 125px;">Branch / Specialization</td>
                    <td class="row" style="text-align: center; width: 100px;">Year of Passing (YYYY)</td>
                    <td class="row" style="text-align: center; width: 80px;">
                        % of
                        <br />
                        Marks / CGPA
                    </td>
                    <td class="row" style="text-align: center; width: 80px;">Division</td>
                    <td class="row" style="text-align: center;width: 180px;">Board/University</td>
                    <td class="row" style="text-align: center; width: 180px;">Place</td>
                    <td class="row" style="text-align: center; width: 200px !important;">
                        Scanned Certificate
                        &nbsp;&nbsp;<img id="CeritificateMessage" src="../Content/images/question-mark-1750942_1280.png" />
                    </td>
                </tr>

                @for (int i = 0; i < Model.EditEducationCheckboxs.Count; i++)
                {
                    var FieldName = Model.EditEducationCheckboxs[i].Field;
                    var FieldId = Model.EditEducationCheckboxs[i].FieldId;
                    var orgFieldNameval = Model.EditEducationCheckboxs[i].Field + Model.EditEducationCheckboxs[i].FieldId;
                    var supportid = Model.EditEducationCheckboxs[i].FieldId + Model.EditEducationCheckboxs[i].Field;
                    var LabelFieldname = "label" + FieldName;
                    var TextFieldname = "TextBox" + FieldName;
                    <div>
                        @Html.HiddenFor(m => Model.EditEducationCheckboxs[i].Id)
                        @Html.HiddenFor(m => Model.EditEducationCheckboxs[i].Field)
                        @Html.HiddenFor(m => Model.EditEducationCheckboxs[i].FieldId)
                        @Html.HiddenFor(m => Model.EditEducationCheckboxs[i].Educationid)
                    </div>
                    <div id="@FieldId" style="display: none; width: 100%;"></div>
                    <tr>
                        <td class="educolright" style="text-align: center; width: 100px;">
                            @Html.CheckBoxFor(m => Model.EditEducationCheckboxs[i].isSelect, new { id = "chk_" + FieldName + "_" + orgFieldNameval + "_" + supportid + "_" + FieldId, @class = "Checkbox", onclick = "clickfun(this);" })
                            <span style="width: 25%">@Model.EditEducationCheckboxs[i].FieldDesc</span>
                        </td>
                        <td class="educolright" style="text-align: center; width: 125px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Coursestudied, new { id = "id_" + FieldName, @class = "Coursestudied txt_CS" + FieldName, @style = "width:97%;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Coursestudied, new { id = "id_" + FieldName, @class = "Coursestudied txt_CS" + FieldName, @style = "width:97%;display:none;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                        </td>
                        <td class="educolright" style="text-align: center; width: 125px;">

                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Specialization, new { @class = "Specialization txt_SP" + FieldName, @style = "width:97%;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Specialization, new { @class = "Specialization txt_SP" + FieldName, @style = "width:97%;display:none;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }

                        </td>
                        <td class="educolright" style="text-align: center; width: 100px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].PassedYear, new { @class = "txt_PY" + FieldName, @style = "width:97%;" })
                                @*@Html.DropDownListFor(m => Model.EditEducationCheckboxs[i].PassedYear, new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"), "---Select---", new { @class = "txt_PY" + FieldName, id = "PassedYear", @style = "width:97%;" })*@
                            }
                            else
                            {
                                @Html.DropDownListFor(m => Model.EditEducationCheckboxs[i].PassedYear, new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"), "---Select---", new { @class = "txt_PY" + FieldName, @style = "width:97%;display:none;", @maxlength = "500" })
                            }
                        </td>
                        <td class="educolright" style="text-align: center; width: 80px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].MarkasPercentage, new { @class = "txt_MP" + FieldName, @style = "width:97%;", @maxlength = "500", @onkeypress = "return isNumberKeyForPercentage(event)" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].MarkasPercentage, new { @class = "txt_MP" + FieldName, @style = "width:97%;display:none;", @maxlength = "500", @onkeypress = "return isNumberKeyForPercentage(event)" })
                            }
                        </td>
                        <td class="educolright" style="text-align: center; width: 80px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Division, new { @class = "txt_DI" + FieldName, @style = "width:97%;" })
                                @*@Html.DropDownListFor(m => Model.EditEducationCheckboxs[i].Division, new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"), "---Select---", new { @class = "txt_DI" + FieldName, @style = "width:97%;" })*@
                            }
                            else
                            {
                                @Html.DropDownListFor(m => Model.EditEducationCheckboxs[i].Division, new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"), "---Select---", new { @class = "txt_DI" + FieldName, @style = "width:97%;display:none;", @maxlength = "500" })
                            }
                        </td>
                        <td class="educolright" style="text-align: center; width: 180px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].BoardorUniversity, new { @class = "BoardorUniversity txt_BU" + FieldName, @style = "width:97%;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].BoardorUniversity, new { @class = "BoardorUniversity txt_BU" + FieldName, @style = "width:97%;display:none;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                        </td>
                        <td class="educolright" style="text-align: center; width: 180px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].PlaceofEducation, new { @class = "PlaceofEducation txt_PE" + FieldName, @style = "width:97%;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].PlaceofEducation, new { @class = "PlaceofEducation txt_PE" + FieldName, @style = "width:97%;display:none;", @maxlength = "500", @onkeypress = "return checkSpcialChar(event)" })
                            }
                        </td>
                        <td class="educolright" style="text-align: center; width: 200px;">
                            @if (Model.EditEducationCheckboxs[i].isSelect == true)
                            {
                                if (Model.EditEducationCheckboxs[i].EducationcertificateView != null)
                                {
                                    <a href="../Content/Upload/Faculty/FieldEditSupportDocuments/@Model.EditEducationCheckboxs[i].EducationcertificateView" target="_blank" class="eduView_@FieldName">
                                        <span style="color:red;font-weight:bold;">View</span>
                                    </a>
                                    @Html.HiddenFor(m => Model.EditEducationCheckboxs[i].EducationcertificateView, new { id = "filepath_" + FieldName })
                                    @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Educationcertificate, new { type = "file", @class = "selectdocumentjpg txt_EC" + FieldName, @style = "width:100%;" })
                                }
                            }
                            else
                            {
                                @Html.TextBoxFor(m => Model.EditEducationCheckboxs[i].Educationcertificate, new { type = "file", @class = "selectdocumentjpg txt_EC" + FieldName, @style = "display:none;width:100%;" })
                            }
                        </td>
                    </tr>

                }
            </table>

            <div style="display:flex;margin-left:350px;">
                <div class="col1" style="width:35%">
                    <span>All Relavant Supporting Document in PDF</span>
                </div>
                <div class="col2" style="width:35%">
                    @if (Model.AllSuportdocumentView != null)
                    {
                        <a href="../Content/Upload/Faculty/FieldEditSupportDocuments/AllSuppDocPDF/@Model.AllSuportdocumentView" target="_blank">
                            <span style="color:red;font-weight:bold;">View</span>
                        </a>
                        @Html.HiddenFor(m => Model.AllSuportdocumentView)
                    }
                    else
                    {
                        @Html.TextBoxFor(m => Model.AllSuportdocument, new { type = "file", @class = "selectdocumentpdf required", @style = "width:100%;" })
                        @Html.ValidationMessageFor(m => Model.AllSuportdocument)
                        
                    }
                    
                </div>
            </div>

            @if (TempData["UpdateButton"] == "false")
            {
                <div style="float: right">
                    <input type="submit" value="Update" id="btnsubmit" />
                </div>
                <br /><br />
            }
           
        </div>
    }
