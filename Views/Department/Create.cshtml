@model UAAAS.Models.jntuh_department
@{
    ViewBag.Title = "Add Department";
}

<h2>Add Department</h2>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)
    if (TempData["Error"] != null)
    {
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div>
    }
    if (TempData["Success"] != null)
    {
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div>
    }
    

    <div class="editor-label">
        @Html.LabelFor(model => model.degreeId)
    </div>
    <div class="editor-field">
        @Html.DropDownListFor(model => model.degreeId,
            new SelectList(ViewBag.Degree as System.Collections.IEnumerable, "id", "degree"),
            "-- Select --", new { id = "Degree", @style = "width:180px" })
        @Html.ValidationMessageFor(model => model.degreeId)
    </div>
    <div class="details_table">
        <div class="editor-label">
            @Html.LabelFor(model => model.departmentName)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.departmentName)
            @Html.ValidationMessageFor(model => model.departmentName)
        </div>
        <div class="editor-label">
            @Html.LabelFor(model => model.departmentDescription)
        </div>
        <div class="editor-field">
            @Html.TextAreaFor(model => model.departmentDescription)
            @Html.ValidationMessageFor(model => model.departmentDescription)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.isActive)
        </div>
        <div class="editor-field">
            @* @Html.EditorFor(model => model.isActive)*@
            <label>@Html.RadioButtonFor(model => model.isActive, true) Active</label>
            <label>@Html.RadioButtonFor(model => model.isActive, false) Inactive</label>
            @Html.ValidationMessageFor(model => model.isActive)
        </div>
        @Html.HiddenFor(model => model.createdOn, new { Value = DateTime.Now })
        @Html.HiddenFor(model => model.createdBy, new { Value = Convert.ToInt32(Membership.GetUser(HttpContext.Current.User.Identity.Name).ProviderUserKey) })
        @* <div class="editor-label">
            @Html.LabelFor(model => model.createdOn)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.createdOn)
            @Html.ValidationMessageFor(model => model.createdOn)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.createdBy, "my_aspnet_users")
        </div>
        <div class="editor-field">
            @Html.DropDownList("createdBy", String.Empty)
            @Html.ValidationMessageFor(model => model.createdBy)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.updatedOn)
        </div>
        <div class="editor-field">
            @Html.EditorFor(model => model.updatedOn)
            @Html.ValidationMessageFor(model => model.updatedOn)
        </div>

        <div class="editor-label">
            @Html.LabelFor(model => model.updatedBy, "my_aspnet_users1")
        </div>
        <div class="editor-field">
            @Html.DropDownList("updatedBy", String.Empty)
            @Html.ValidationMessageFor(model => model.updatedBy)
        </div>

        <p>
            <input type="submit" value="Create" />
        </p>
    </fieldset>*@
        <div class="editor-label last-row">
            &nbsp;
        </div>
        <div class="editor-field last-row">
            <p>
                @Html.ActionLink("Back", "Index", null, new { @class = "back_button" })
                <input type="submit" value="Add" />
            </p>
        </div>
        <div class="clear"></div>
    </div>
}

@*<div>
    @Html.ActionLink("Back to List", "Index")
</div>*@
