@model UAAAS.Models.Jntuheventtype
@{
    Layout = "~/Views/Shared/_LayoutLeftMenu.cshtml";
    ViewBag.Title = "College Events";

    string[] otherdesignations = { "Others1", "Others2", "Others3", "Others4" };
}

<h2>College Events (Co-curricular & Extra curricular)</h2>
@if (TempData["Error"] != null)
{
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div><br />
}
@if (TempData["Success"] != null)
{
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div><br />
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>

<script type="text/javascript">
    $(document).ready(function () {


        $("#todate").on('change', function () {
            debugger

            var startDate = $("#fromdate").val();
            var endDate = $("#todate").val();

            if (startDate == "" || endDate == "") {
                alert("from date and to date should not be empty.");
                isValidDate = false;
                $("#todate").val("");
                $("#todate").focus();
                return isValidDate;
            }
            if (startDate != " " && endDate != " ") {
                var fromDate = startDate.substr(6, 4) + startDate.substr(3, 2) + startDate.substr(0, 2);
                var toDate = endDate.substr(6, 4) + endDate.substr(3, 2) + endDate.substr(0, 2);
                if (toDate < fromDate) {
                    alert("from date should be less than to date.");
                    isValidDate = false;
                    $("#todate").val("");
                    $("#todate").focus();
                } else {
                    isValidDate = true;
                }
            }
            return isValidDate;
        });

        $(".Supportingfile").change(function () {

            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("You can upload only  PDF files");
                $(this).val('');
                return false;
            } else {
                var size = GetFileSize(file, "Documentfile");
                size = size / 1048576;
                if (size > 0.2000000000000000) {
                    alert("Document should not exceed 1 MB in Size");
                    $(this).val('');
                } else {
                }
            }
        });

        //get file size
        function GetFileSize(fileid, title) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject,
                    //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#" + title)[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }

                return fileSize;
            } catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            } else {
                return strName[0];
            }
        }
    });
</script>

<table style="width: 100%;">
    <tr>
        <td class="create_link_right" style="width: 200px;">
            @Html.ActionLink("View Events", "jntuheventview", "Jntuhcollegeevents", new { target = "_blank", @class = "create_button" })
        </td>
    </tr>
    <tr style="width: 200px"></tr>
</table>
<br />
@using (Html.BeginForm("SaveEvent", "Jntuhcollegeevents", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <table width="100%" class="four_columns">
        <thead>
            <tr>
                <td class="col1">

                    Type of Event
                </td>
                <td class="col2">

                    @Html.DropDownListFor(model => model.eventid,
new SelectList(ViewBag.eventtype, "id", "eventtype"),
     "-- Select --", new { id = "eventtypeName" })
                    @Html.ValidationMessageFor(model => model.eventid)

                </td>
            </tr>
            <tr>
                <td class="col11">

                    From Date
                </td>
                <td class="col2">
                    @Html.TextBoxFor(x => x.fromdate, new { @class = "calendar  required", @placeholder = "DD/MM/YYYY", @style = "width: 170Px" })
                    @Html.ValidationMessageFor(model => model.fromdate)

                </td>

            </tr>
            <tr>
                <td class="col11">

                    To Date
                </td>
                <td class="col2">
                    @Html.TextBoxFor(x => x.todate, new { @class = "calendar  required", @placeholder = "DD/MM/YYYY", @style = "width: 170Px" })
                    @Html.ValidationMessageFor(model => model.todate)
                </td>

            </tr>
            <tr>
                <td class="col11">

                    Supporting Document
                </td>
                <td class="col2">
                    @Html.TextBoxFor(x => x.SupportingDocument, new { type = "file", @class = "Supportingfile required " })
                    @Html.ValidationMessageFor(model => model.SupportingDocument)
                </td>

            </tr>
            <tr>
                <td class="col11">

                    Remarks
                </td>
                <td class="col2" width="20%">
                    @Html.TextAreaFor(x => x.remarks, new { maxlength = "1000", @class = "required " })
                </td>
            </tr>
        </thead>
    </table>
    <p class="create_link_right">
        <input type="submit" value="Save" />
    </p>
}
