@model UAAAS.Models.CollegeIntakeExisting
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>

<style type="text/css">
    .width {
        width: 80%;
    }

    .text_width {
        width: 38%;
        text-align: center;
    }
</style>
<script type="text/javascript">
    function ValidateAddmissions()
    {
        // approvedIntake1
        // admittedIntake5
        var api1=$('#api1').val();
        var api2=$('#api2').val();
        var api3=$('#api3').val();
        var api4=$('#api4').val();
        var api5=$('#api5').val();

        var adi1=$('#adi1').val();
        var adi2=$('#adi2').val();
        var adi3=$('#adi3').val();
        var adi4=$('#adi4').val();
        var adi5=$('#adi5').val();
        if(parseInt(api1)<parseInt(adi1))
        {
            alert('Admitted should be less than or equal to Approved');            
            $('#adi1').val('0');
            $('#adi1').val('');
            $('#adi1').focus()
            //return false;
        }
        if(parseInt(api2)<parseInt(adi2))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi2').val('0');
            $('#adi2').focus()
            //return false;
        }
        if(parseInt(api3)<parseInt(adi3))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi3').val('0');
            $('#adi3').focus()
            // return false;
        }
        if(parseInt(api4)<parseInt(adi4))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi4').val('0');
            $('#adi4').focus()
            // return false;
        }
        if(parseInt(api5)<parseInt(adi5))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi5').val('0');
            $('#adi5').focus()
            // return false;
        }

       
    }
    $(document).ready(function () {
        GetSpecialization(@Model.DepartmentID);
        $('.calendar').attr("readonly", "true");
        $('.calendar').datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            showOn: "button",
            buttonImage: "@Url.Content("~/Content/themes/base/images/calendar.gif")",
            buttonImageOnly: true
            //showButtonPanel: true
        });
        //$(".calendar, .year").css("width", "75px");

        if ($("#Degree").val() > 0) {
            GetDepartments($("#Degree").val());
        }
        
        
        $("#Degree").change(function () {
            var DegreeID = $(this).val();
            GetDepartments(DegreeID);
        });
        if($("#Department").val() > 0)
        {
            GetSpecialization($("#Department").val());
        }
        $("#Department").change(function(){
            var DepartmentID = $(this).val();
            GetSpecialization(DepartmentID);
        });

        function GetDepartments(DegreeID){
            $.getJSON("/CollegeIntakeProposed/GetDepartments",{ id : DegreeID},
                function(DepartmentsData){
                    var select = $("#Department");
                    select.empty();
                    select.append($('<option/>',{
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(DepartmentsData,function(index, itemdata){
                        select.append($('<option/>',{
                            value: itemdata.Value,
                            text: itemdata.Text,
                            selected: (itemdata.Value == @Model.DepartmentID ? true : false)
                        }));
                    });
                });
            }

        function GetSpecialization(DepartmantID){
            $.getJSON("/CollegeIntakeProposed/GetSpecialization" ,{id : DepartmantID},
                function(Specializationdata){
                    var select = $("#Specialization");
                    select.empty();
                    select.append($('<option/>',{
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(Specializationdata,function(index, itemdata){
                        select.append($('<option/>',{
                            value: itemdata.Value,
                            text: itemdata.Text,
                            selected: (itemdata.Value == @Model.specializationId ? true : false)
                        }));
                    });
                });
        }
        if($('#AICTEApprovalLettr').val()!='')
        {
            //alert('a');
            $('#api0').removeAttr('disabled');
        }
        else if($('#AICTEApprovalLettr').val()=='')
        {
            $('#api0').attr('disabled', 'disabled');
        }

        $('.btnclass').click(function(){
            if($('#AICTEApprovalLettr').val()!='')
            {
                //alert('a');
                $('#api0').addClass('required');
               
                $('#prop0').removeClass('required');
            }
            else if($('#AICTEApprovalLettr').val()=='')
            {
                //alert('p');               
                $('#prop0').addClass('required');
                $('#api0').removeClass('required');
            }
        });


    });

</script>

@using (Html.BeginForm("AddEditCollegeIntake", "FacultyVerificationNew"))
{
    @Html.ValidationSummary(true)
    if (TempData["Error"] != null)
    {
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div>
    }
    if (TempData["Success"] != null)
    {
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div>
    }
    if (ViewBag.Count == 0)
    {
    <div class="warning" style="width: 550px; margin: 0 auto;">
        <p>Please select your courses in "College Information" page before filling up this page.</p>
    </div>
    }
    <div class="details_table">
        @if (ViewBag.IsUpdate == true)
        {
            @Html.HiddenFor(model => model.id)
        }
        @Html.HiddenFor(model => model.collegeId, new { @Value = Model.collegeId })
        @Html.HiddenFor(model=>model.AICTEApprovalLettr)
        <div class="editor-label" style="width: 350px">
            @Html.LabelFor(model => model.degreeID)
        </div>
        <div class="editor-field" style="width: 380px">
            @if (ViewBag.IsUpdate == true)
            {
                @Html.HiddenFor(model => model.degreeID)
                @Html.DropDownListFor(model => model.degreeID,
            new SelectList(ViewBag.Degree as System.Collections.IEnumerable, "degreeId", "degree"),
            "-- Select --", new { id = "Degree", @class = "width", disabled = "true" })
            }
            else
            {
                @Html.DropDownListFor(model => model.degreeID,
            new SelectList(ViewBag.Degree as System.Collections.IEnumerable, "degreeId", "degree"),
            "-- Select --", new { id = "Degree", @class = "width" })
            }
            @Html.ValidationMessageFor(model => model.degreeID)
        </div>

        <div class="editor-label" style="width: 350px">
            @Html.LabelFor(model => model.DepartmentID)
        </div>
        <div class="editor-field" style="width: 380px">
            @if (ViewBag.IsUpdate == true)
            {
                @Html.HiddenFor(model => model.DepartmentID)
                @Html.DropDownListFor(model => model.DepartmentID,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "departmentName"),
            "-- Select --", new { id = "Department", @class = "width", disabled = "true" })
                @Html.ValidationMessageFor(model => model.DepartmentID)
            }
            else
            {
                @Html.DropDownListFor(model => model.DepartmentID,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "departmentName"),
            "-- Select --", new { id = "Department", @class = "width" })
            }
            @Html.ValidationMessageFor(model => model.DepartmentID)
        </div>

        <div class="editor-label" style="width: 350px">
            @Html.LabelFor(model => model.specializationId)
        </div>
        <div class="editor-field" style="width: 380px">
            @if (ViewBag.IsUpdate == true)
            {            
                @Html.DropDownListFor(model => model.specializationId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "specializationName"),
            "-- Select --", new { id = "Specialization", @class = "width", disabled = "true" })
                @Html.ValidationMessageFor(model => model.specializationId)
                @Html.HiddenFor(model => model.specializationId)            
            }
            else
            {
                @Html.DropDownListFor(model => model.specializationId,
            new SelectList(Enumerable.Empty<SelectListItem>(), "id", "specializationName"),
            "-- Select --", new { id = "Specialization", @class = "width" })
                @Html.ValidationMessageFor(model => model.specializationId)
            }
        </div>

        <div class="editor-label" style="width: 350px">
            @Html.LabelFor(model => model.shiftId)
        </div>
        <div class="editor-field" style="width: 380px">
            @if (ViewBag.IsUpdate == true)
            {            
                @Html.DropDownListFor(model => model.shiftId,
            new SelectList(ViewBag.Shift as System.Collections.IEnumerable, "id", "shiftName"),
            new { id = "Shift", @style = "width: 50px", disabled = "true" })
                @Html.ValidationMessageFor(model => model.shiftId) 
                @Html.HiddenFor(model => model.shiftId)    
            }
            else
            {
                @Html.DropDownListFor(model => model.shiftId,
            new SelectList(ViewBag.Shift as System.Collections.IEnumerable, "id", "shiftName"),
            new { id = "Shift", @style = "width: 50px" })
                @Html.ValidationMessageFor(model => model.shiftId)   
            }

        </div>     

        <div class="editor-label" style="width: 350px; font-size: 12px;">
            AICTE @Html.LabelFor(model => model.ApprovedIntake) @ViewBag.NextYear
        </div>
        <div class="editor-field" style="width: 380px">
            @Html.TextBoxFor(model => model.ApprovedIntake, new { @class = "required text_width", @id = "api0", onchange = "ValidateAddmissions()", Value = Model.ApprovedIntake.Equals(0) ? "" : Model.ApprovedIntake.ToString() })
        </div>

        <div class="editor-label" style="width: 350px; font-size: 12px; min-height: 50px;">
            @Html.LabelFor(model => model.ProposedIntake) for A.Y. @ViewBag.NextYear
        </div>
        <div class="editor-field" style="width: 380px; min-height: 50px;">
            @Html.TextBoxFor(model => model.ProposedIntake, new { @class = "required text_width", @id = "prop0", onchange = "ValidateAddmissions()", Value = Model.ProposedIntake.Equals(0) ? "" : Model.ProposedIntake.ToString() })
        </div>
    </div>
    <br />
    <div>
        <div class="editor-label" style="width: 350px; background-color: transparent; padding: 0; margin: 0;">
        </div>
        <div class="editor-field" style="width: 380px; background-color: transparent; padding: 0; margin: 0;">
            <div style="float: left; width: 45%; text-align: center;"><b>Approved</b></div>
            <div style="float: left; width: 40%; text-align: center;"><b>Admitted</b></div>
        </div>

        @* <div class="editor-label" style="width: 350px; min-height: 50px; background-color: lightgreen; font-weight: bold;">
            @Html.LabelFor(model => model.ProposedIntake) for A.Y. @ViewBag.NextYear
        </div>
        <div class="editor-field" style="width: 380px; min-height: 50px; background-color: lightgreen; font-weight: bold;">

            @Html.TextBoxFor(model => model.ProposedIntake, new { @class = "text_width", @id = "api0", onchange = "ValidateAddmissions()", Value = Model.ProposedIntake.Equals(0) ? "" : Model.ProposedIntake.ToString() })

            <span style="width: 150px; text-align: center; display: inline-block;">- </span>
        </div>*@
        <div class="editor-label" style="width: 350px">
            @Html.LabelFor(model => model.approvedIntake1) @ViewBag.FirstYear
        </div>
        <div class="editor-field" style="width: 380px">

            @Html.TextBoxFor(model => model.approvedIntake1, new { @class = "text_width", @id = "api1", onchange = "ValidateAddmissions()", Value = Model.approvedIntake1.Equals(0) ? "" : Model.approvedIntake1.ToString() })
            @if (ViewBag.IsUpdate == true)
            { 
                @Html.TextBoxFor(model => model.admittedIntake1, new { @class = "text_width", @id = "adi1", onchange = "ValidateAddmissions()", Value = Model.admittedIntake1.Equals(0) ? "" : Model.admittedIntake1.ToString() })
            }
            else
            {
                @Html.TextBoxFor(model => model.admittedIntake1, new { @class = "text_width", @id = "adi1", onchange = "ValidateAddmissions()", Value = Model.admittedIntake1.Equals(0) ? "" : Model.admittedIntake1.ToString() })
            }

        </div>

        @* NOT EDITABLE *@
       @* @Html.HiddenFor(model => model.approvedIntake2)
        @Html.HiddenFor(model => model.approvedIntake3)
        @Html.HiddenFor(model => model.approvedIntake4)
        @Html.HiddenFor(model => model.approvedIntake5)*@

        <div style="display: block">
            <div class="editor-label" style="width: 350px">
                @Html.LabelFor(model => model.approvedIntake2) @ViewBag.SecondYear
            </div>
            <div class="editor-field" style="width: 380px">

                @Html.TextBoxFor(model => model.approvedIntake2, new { @class = "text_width", @id = "api2", onchange = "ValidateAddmissions()" })
                @Html.TextBoxFor(model => model.admittedIntake2, new { @class = "text_width", @id = "adi2", onchange = "ValidateAddmissions()" })

            </div>

            <div class="editor-label" style="width: 350px">
                @Html.LabelFor(model => model.approvedIntake3) @ViewBag.ThirdYear
            </div>
            <div class="editor-field" style="width: 380px">

                @Html.TextBoxFor(model => model.approvedIntake3, new { @class = "text_width", @id = "api3", onchange = "ValidateAddmissions()" })
                @Html.TextBoxFor(model => model.admittedIntake3, new { @class = "text_width", @id = "adi3", onchange = "ValidateAddmissions()" })

            </div>

            <div class="editor-label" style="width: 350px">
                @Html.LabelFor(model => model.approvedIntake4) @ViewBag.FourthYear
            </div>
            <div class="editor-field" style="width: 380px">

                @Html.TextBoxFor(model => model.approvedIntake4, new { @class = "text_width", @id = "api4", onchange = "ValidateAddmissions()" })
                @Html.TextBoxFor(model => model.admittedIntake4, new { @class = "text_width", @id = "adi4", onchange = "ValidateAddmissions()" })

            </div>

            <div class="editor-label" style="width: 350px">
                @Html.LabelFor(model => model.approvedIntake5) @ViewBag.FifthYear
            </div>
            <div class="editor-field" style="width: 380px">

                @Html.TextBoxFor(model => model.approvedIntake5, new { @class = "text_width", @id = "api5", onchange = "ValidateAddmissions()" })
                @Html.TextBoxFor(model => model.admittedIntake5, new { @class = "text_width", @id = "adi5", onchange = "ValidateAddmissions()" })

            </div>
        </div>

        <div class="editor-label" style="width: 350px">
            @Html.LabelFor(model => model.nbaFrom) <span>(DD/MM/YYYY)</span>
        </div>
        <div class="editor-field" style="width: 380px">
            @Html.TextBoxFor(model => model.nbaFromDate, new { @class = "calendar1", style = "width: 80px", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "From date" })
            @Html.TextBoxFor(model => model.nbaToDate, new { @class = "calendar1", style = "width: 80px", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "To date" })
        </div>
        @Html.HiddenFor(model => model.createdBy)
        @Html.HiddenFor(model => model.createdOn)

        <div style="text-align: center">
            <p>
                @if (ViewBag.IsUpdate == true)
                {
                    <input type="submit" value="Save" id="btnSave" name="cmd" class="btnclass" />                    
                }
                else
                {
                    <input type="submit" value="Add" id="btnAdd" name="cmd" class="btnclass"/>
                }
            </p>
        </div>
    </div>
}
