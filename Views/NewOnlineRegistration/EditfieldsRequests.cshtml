@model UAAAS.Models.FacultyEditFieldnames
@{
    ViewBag.Title = "EditfieldsRequests";
    int count = 0;
}

<h2>Edit Faculty Requests</h2>
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.plugin.from_html.js")" type="text/javascript"></script>
<script type="text/javascript">

    $(document).ready(function () {
        $("#btnsubmit").click(function () {
            debugger;
            var Status = "";
            var FalseFieldsCount = 0;
            var TrueFieldsCount = 0;
            var CheckedBoxes = $('input[type="checkbox"]:checked');
            var CheckedBoxesCount = $('input[type="checkbox"]:checked').length;
            $(CheckedBoxes).each(function (index) {
                debugger;
                var Splitcheck = CheckedBoxes[index].id;
                var textid = Splitcheck.split("_")[1];
                var browseid = Splitcheck.split("_")[3];
                var textField = $("#" + textid).val();
                if (textField == "" || textField == null) {
                    $("#" + textid).addClass("required").css("background-color", "#fc6a6c");
                    Status = "false";
                    FalseFieldsCount++;
                } else {
                    $("#" + textid).removeClass("required").css("background-color", "white");
                    Status = "true";
                    TrueFieldsCount++;
                }

            });
            if (Status == "true" && CheckedBoxesCount == TrueFieldsCount && FalseFieldsCount == 0) {
                return true;
            } else
                return false;
        });
    });

    $(function () {
        $(".selectdocumentpdf").change(function () {
            debugger;
            var file = getNameFromPath($(this).val());


            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {

                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                //$(".AppealSCMApprovalLetterfiles > span").text("You can upload only  PDF files");
                alert("You can upload only  PDF files");
                $(this).val('');
                return false;
            } else {
                var size = GetCertificateSize($(this).val()); //GetAppealSCMApprovalLetterfileSize(file)
                size = size / 1048576;
                if (size > 1) {
                    alert('Pdf should be less than 1 MB size');
                    $(this).val('');
                } else {

                }
            }

        });
    });

   

    $(function () {
        $(".Suportdocument").change(function () {
            debugger;
            alert($(this).val());
            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'jpg':
                    case 'JPG':
                    case 'jpeg':
                    case 'JPEG':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("document should be in JPEG format only");
                $(this).val('');
                return false;
            } else {
                var size = GetCertificateSize(this.id);

                if (size > 102400) {
                    alert("document size should not exceed 100 KB in Size");
                    $(this).val('');
                }

            }
        });
    });
    function GetCertificateSize(fileid) {

        try {
            var fileSize = 0;
            //for IE

            if ($.browser.msie) {
                //before making an object of ActiveXObject,
                //please make sure ActiveX is enabled in your IE browser
                var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                var filePath = $("#" + fileid)[0].value;
                var objFile = objFSO.getFile(filePath);
                var fileSize = objFile.size; //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }
                //for FF, Safari, Opeara and Others
            else {
                fileSize = $("#" + fileid)[0].files[0].size //size in kb
                //fileSize = fileSize / 1048576; //size in mb
            }

            return fileSize;
        }
        catch (e) {

            //alert("Error is : " + e);
        }
    }

    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        } else {
            return strName[0];
        }
    }

    function clickfun(item) {
        debugger;
        var check = $(item).attr('id').split("_")[1];
        var jkkfg = $("#" + check).css('display');
        if ($("#" + check).css('display') == "none")
            $("#" + check).css({ "display": "block" });
        else if ($("#" + check).css('display') == "block" || $("#" + check).css('display') == "inline-block")
            $("#" + check).css({ "display": "none" });

        var checkorg = $(item).attr('id').split("_")[2];
        var jkkfgorg = $("#" + checkorg).css('display');
        if ($("#" + checkorg).css('display') == "none")
            $("#" + checkorg).css({ "display": "block" });
        else if ($("#" + checkorg).css('display') == "block" || $("#" + checkorg).css('display') == "inline-block")
            $("#" + checkorg).css({ "display": "none" });

        var checksupp = $(item).attr('id').split("_")[3];
        var jkkfgsupp = $("#" + checksupp).css('display');
        if ($("#" + checksupp).css('display') == "none")
            $("#" + checksupp).css({ "display": "block" });
        else if ($("#" + checksupp).css('display') == "block" || $("#" + checksupp).css('display') == "inline-block")
            $("#" + checksupp).css({ "display": "none" });

        //var checkid = $(item).attr('id').split("_")[4];
        //if (checkid == 11 || checkid == 13 || checkid == 15 || checkid == 18) {
        //    $("#" + checksupp).addClass("required");
        //    $("#" + checksupp).addClass("selectdocumentjpg");
        //} else {
        //    $("#" + checksupp).addClass("required");
        //    $("#" + checksupp).addClass("selectdocumentpdf");
        //}
    }


    function ValidateFile(value) {
        debugger;
        var file = getNameFromPath($(value).val());
        if (file != null) {
            var extension = file.substr((file.lastIndexOf('.') + 1));
            switch (extension) {
                case 'jpg':
                case 'jpeg':
                case 'png':
                case 'pdf':
                    flag = true;
                    break;
                default:
                    flag = false;
            }
        }

        if (flag == false) {

            var str = value.name;
            var res = str.split("_");
            var data = "_val" + res[1];
            $("#" + data).text("You can upload only jpg, jpeg, png, pdf extension file Only");
            $("#" + value.name).val('');
            return false;
        }
        else {
            var size = ValidateFileSize(value);
            var str = value.name;
            var res = str.split("_");
            var data = "_val" + res[1];
            if (size > 1) {
                $("#" + data).text("You Can Upload file Size Up to 1 MB.");
                $("#" + value.name).val('');
            }
            else {
                $("#" + data).text("");
            }
        }
    }

    function getNameFromPath(strFilepath) {
        var objRE = new RegExp(/([^\/\\]+)$/);
        var strName = objRE.exec(strFilepath);

        if (strName == null) {
            return null;
        }
        else {
            return strName[0];
        }
    }

    function ValidateFileSize(fileid) {
        try {
            var fileSize = 0;
            if (navigator.userAgent.match(/msie/i)) {
                var obaxo = new ActiveXObject("Scripting.FileSystemObject");
                var filePath = $("#" + fileid)[0].value;
                var objFile = obaxo.getFile(filePath);
                var fileSize = objFile.size;
                fileSize = fileSize / 1048576;
            }
            else {
                fileSize = $(fileid)[0].files[0].size
                fileSize = fileSize / 1048576;
            }

            return fileSize;
        }
        catch (e) {
            alert("Error is :" + e);
        }
    }
</script>
<style>
    .colleft {
        width: 25%;
        padding: 8px 5px 2px 5px;
        text-align: left;
        /*border: solid #bbb;*/
        background-color: #E8EFF3;
    }

    .colright {
        width: 25%;
        padding: 8px 5px 2px 5px;
        text-align: left;
        /*border: solid #bbb;*/
        background-color: #FCF1D1;
    }
</style>
@if (TempData["SUCCESS"] != null)
{
    <div class="success" style="height:15px;">
        <p style="text-align: center;font-weight: bold"><span style="color:green;font-weight:bold;">Success : </span>@TempData["SUCCESS"].ToString()</p>
    </div><br />
}
@if (TempData["ERROR"] != null)
{
    <div class="error">
        <p style="text-align: center;font-weight: bold;"><span style="color:red;font-weight:bold;">Error : </span>@TempData["ERROR"].ToString()</p>
    </div><br />
}
<div style="font-family: Arial">
    @using (Html.BeginForm("EditfieldsRequests", "NewOnlineRegistration", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.HiddenFor(model => model.facultyId)
        @*<div style="display:inline-block;">*@
        <table>
            @for (int i = 0; i < Model.EditCheckboxs.Count; i++)
            {
                var FieldName = Model.EditCheckboxs[i].Field;
                var FieldId = Model.EditCheckboxs[i].FieldId;
                var orgFieldNameval = Model.EditCheckboxs[i].Field + Model.EditCheckboxs[i].FieldId;
                var supportid = Model.EditCheckboxs[i].FieldId + Model.EditCheckboxs[i].Field;
                var LabelFieldname = "label" + FieldName;
                var TextFieldname = "TextBox" + FieldName;
                <tr>
                    <td class="colleft">
                        @Html.HiddenFor(m => Model.EditCheckboxs[i].Id)
                        @Html.HiddenFor(m => Model.EditCheckboxs[i].Field)
                        @Html.HiddenFor(m => Model.EditCheckboxs[i].FieldId)
                        @Html.CheckBoxFor(m => Model.EditCheckboxs[i].isSelect, new { id = "chk_" + FieldName + "_" + orgFieldNameval + "_" + supportid + "_" + FieldId, @class = "Checkbox", onclick = "clickfun(this);" })
                        <span>&nbsp;</span>
                        <span style="width: 25%">@Model.EditCheckboxs[i].FieldDesc</span>
                    </td>
                    <td class="colright">
                        @if (Model.EditCheckboxs[i].isSelect == true)
                        {
                            @Html.TextBoxFor(m => Model.EditCheckboxs[i].Fieldorginal, new { id = orgFieldNameval, @style = "width:100%;", @maxlength = "500", disabled = "false" })
                        }
                        else
                        {
                            @Html.TextBoxFor(m => Model.EditCheckboxs[i].Fieldorginal, new { id = orgFieldNameval, @style = "display:none;width:100%;", @maxlength = "500", disabled = "false" })
                        }
                    </td>
                    <td class="colright">

                        @if (Model.EditCheckboxs[i].isSelect == true)
                        {
                            @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = FieldName, @style = "width:100%;", @maxlength = "500" })
                        }
                        else
                        {
                            @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = FieldName, @style = "display:none;width:100%;", @maxlength = "500" })
                        }

                    </td>
                    <td class="colright">
                        @if(Model.EditCheckboxs[i].isSelect==true)
                       {
            if (Model.EditCheckboxs[i].FieldId == 10 || Model.EditCheckboxs[i].FieldId == 11 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 15 || Model.EditCheckboxs[i].FieldId == 18)
            {
                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg" })<br/>
            }
            else
            {
                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf" })<br/>
            }
        }
        else
        {
            if (Model.EditCheckboxs[i].FieldId == 10||Model.EditCheckboxs[i].FieldId == 11 || Model.EditCheckboxs[i].FieldId == 13 || Model.EditCheckboxs[i].FieldId == 15 || Model.EditCheckboxs[i].FieldId == 18)
            {
                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentjpg", @style = "display:none;" })<br/>
            }
            else
            {
                @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { id = supportid, type = "file", @class = "selectdocumentpdf", @style = "display:none;" })<br/>

            }
        }
                    </td>
                </tr>
            }
        </table>
        <div style="float: right">
            <input type="submit" value="Update" id="btnsubmit" />
        </div>
        <br /><br /><br />
    }
</div>

@*var FieldName = Model.EditCheckboxs[i].Field;
                    var orgFieldNameval = Model.EditCheckboxs[i].Fieldorginal;
                    var LabelFieldname = "label" + FieldName;
                    var TextFieldname = "TextBox" + FieldName;
    <div class="editor-label" style="width: 10%;">
        @Html.HiddenFor(m => Model.EditCheckboxs[i].Id)
        @Html.HiddenFor(m => Model.EditCheckboxs[i].Field)
        @Html.HiddenFor(m => Model.EditCheckboxs[i].FieldId)
        @Html.CheckBoxFor(m => Model.EditCheckboxs[i].isSelect, new { id = "chk_" + FieldName, @class = "Checkbox", onclick = "clickfun(this);" })
        <span>&nbsp;</span>
        <span>@Model.EditCheckboxs[i].FieldDesc</span>
    </div>
    <div class="editor-field" style="width:10%;">
        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Fieldorginal, new { id = orgFieldNameval, placeholder = orgFieldNameval, @style = "display:none;width:98%;", @maxlength = "500", disabled = "false" })
    </div>
    <div class="editor-field" style="width: 10%;">

        @if (Model.EditCheckboxs[i].isSelect == true)
        {
            @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = FieldName, @style = "width:98%;", @maxlength = "500" })
        }
        else
        {
            @Html.TextBoxFor(m => Model.EditCheckboxs[i].requestReason, new { id = FieldName, placeholder = FieldName, @style = "display:none;width:98%;", @maxlength = "500" })
        }
    </div>
    <div class="editor-field" style="width: 17%;">
        @Html.TextBoxFor(m => Model.EditCheckboxs[i].Suportdocument, new { type = "file", @class = "required" })<br />
    </div>*@
