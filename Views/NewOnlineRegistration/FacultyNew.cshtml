@using System.Activities.Expressions
@using System.Collections.Concurrent
@model UAAAS.Models.FacultyRegistration
@{
    ViewBag.Title = "New Registration";
    Layout = "~/Views/Shared/_LayoutHome.cshtml";
}
<h2>Online Registration</h2><br />
@*<div class="alerttext" style="background-color: red; border: 1px solid #f49820; color: white">
    <p>
        <b>Dear Candidate,<br />The PAN Card details entered by you will be verified by the University at a later stage in order to enable the Registration process. If PAN Card details uploaded are found to be incorrect then your Registration Id will be cancelled without intimation.</b>
    </p>
</div><br />*@
<style type="text/css">
    #PhotoPreview {
        width: 200px;
        height: 230px;
        background-position: center center;
        background-size: cover;
        -webkit-box-shadow: 0 0 1px 1px rgba(0, 0, 0, .3);
        display: inline-block;
    }

    .ui-autocomplete {
        overflow: scroll;
        height: 260px;
    }
</style>

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jspdf.plugin.from_html.js")" type="text/javascript"></script>

<script type="text/javascript">
    function CompareDOB() {

        if ($(".ifAdj").is(":checked")) {
            var dob = document.getElementById("facultyDateOfBirth").value;
            var compareDate = new Date();
            var month = compareDate.getMonth();
            var date = compareDate.getDate;
            var year = compareDate.getFullYear() - 70;

            if ((year > new Date(dob).getFullYear())) {
                alert("As per AICTE norms, you are not eligible for Adjunct faculty as age is above 70years.");
                $("#facultyDateOfBirth").val("");
            }
        }
    }

    $(document).ready(function () {

        var ugspecializations = @Html.Raw(Json.Encode(Model.ug_specializations.Distinct()));
        var pgspecializations = @Html.Raw(Json.Encode(Model.pg_specializations.Distinct()));
        var universitys = @Html.Raw(Json.Encode(Model.universitys.Distinct()));
        var places = @Html.Raw(Json.Encode(Model.places.Distinct()));
        var Courses = @Html.Raw(Json.Encode(Model.Courses.Distinct()));

        //  $("#Email").tooltip();
        $("input[name='Type']").val("ExistFaculty");

        $(".Terms").click(function () {

            if ($(this).val() == "True") {
                $(".submitButton").show();
                $(".rbtn").css("background-color", "#E8EFF3");
            }
            else {
                $(".submitButton").hide();
            }
        });

        $('#department').change(function () {

            //Others id=62
            if ($('#department').val() == 62) {
                $('#divDept').show();
            }
            else {
                $('#divDept').hide();
            }
        });

        $('#designation').change(function () {

            //Other id=4
            if ($('#designation').val() == 4) {
                $('#divDesig').show();
            }
            else {
                $('#divDesig').hide();
            }
        });

        //get file size
        function GetFileSize(fileid, title) {

            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject,
                    //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#" + title)[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }

                return fileSize;
            } catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            }
            else {
                return strName[0];
            }
        }

        //get file size
        function GetCertificateSize(fileid) {

            try {
                var fileSize = 0;
                //for IE

                if ($.browser.msie) {
                    //before making an object of ActiveXObject,
                    //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#" + fileid)[0].files[0].size //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }

                return fileSize;
            }
            catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get pdf file size
        function GetIncomeTaxFileSize(fileid) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //alert(fileSize);
                    //fileSize = fileSize / 1048576; //size in mb
                    alert(fileSize);
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#IncomeTaxFileUpload")[0].files[0].size; //size in kb

                }
                return fileSize;
            } catch (e) {

                //alert("Error is : " + e);
            }
        }

        $("#SSC_university, #UG_university, #PG_university, #MPhil_university, #PhD_university").on("keydown", function (event) {
            debugger;
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(universitys, extractLast(request.term));
                response(results);
            },
            scroll : true,
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var CurrentUniversity = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentUniversity).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $("#SSC_place, #UG_place, #PG_place, #MPhil_place, #PhD_place").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(places, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $("#SSC_specialization, #UG_specialization").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {

                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(ugspecializations, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();
                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $("#PG_specialization, #MPhil_specialization, #PhD_specialization").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {

                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(pgspecializations, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $("#UG_studiedEducation, #PG_studiedEducation, #MPhil_studiedEducation, #PhD_studiedEducation").on("keydown", function (event) {
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(Courses, extractLast(request.term));
                response(results);
            },
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {

                var CurrentPlace = $(this).val();
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + CurrentPlace).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        //change function for pdf doc
        $(function () {
            $(".IncomeTaxFileUpload").change(function () {
                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {
                        case 'pdf':
                        case 'PDF':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".IncomeTaxFileUploads > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                } else {
                    var size = GetIncomeTaxFileSize(file);
                    size = size / 1048576;
                    if (size > 1) {
                        $(".IncomeTaxFileUploads > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    } else {

                        $(".IncomeTaxFileUploads > span").text("");
                    }
                }
            });

            $(".SelectionCommitteeProceedingsDocument").change(function () {
                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {

                        case 'pdf':
                        case 'PDF':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    alert("You can upload only  PDF files");
                    //$(".SelectionCommitteeProceedingsDocument > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                } else {
                    var size = GetFileSize(file, "SelectionCommitteeProceedingsDocument");
                    size = size / 1048576;
                    if (size > 1) {
                        alert("Document should not exceed 1 MB in Size");
                        //$(".SelectionCommitteeProceedingsDocument > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    } else {
                        $(".SelectionCommitteeProceedingsDocument > span").text("");
                    }
                }

            });

            $(".All_Certificates").change(function () {
                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {
                        case 'pdf':
                        case 'PDF':
                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    alert("You can upload only  PDF files");
                    //$(".IncomeTaxFileUploads > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                } else {
                    var size = GetFileSize(file, "All_Certificates");
                    size = size / 1048576;
                    if (size > 1) {
                        alert("Document should not exceed 1 MB in Size");
                        //$(".IncomeTaxFileUploads > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    } else {
                        $(".All_Certificates > span").text("");
                    }
                }

            });

        });

        $(function () {

            $("#PhotoPreview").css("display", "none");

            $("#Photo").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readPhoto(F[i]);
            });

            function readPhoto(file) {

                var reader = new FileReader();
                var image = new Image();
                var showImage = 1;

                reader.readAsDataURL(file);
                reader.onload = function (_file) {

                    image.src = _file.target.result;              // url.createObjectURL(file);
                    image.onload = function () {

                        var w = this.width,
                            h = this.height,
                            t = file.type,                           // ext only: // file.type.split('/')[1],
                            n = file.name,
                            s = ~~(file.size / 1024) + 'KB';

                        //alert(w+'x'+h+' '+s+' '+t+' '+n);

                        if (w > 200 || w < 150 || h < 150 || h > 230 || s > 50) {

                            alert('Photo should be Minimum - 150x150 pixels, Maximum - 200x230 pixels and less than 50 KB size');
                            showImage = 0;
                            $("#PhotoPreview").css("display", "none");
                            $("#PhotoPreview").css("background-image", "none");
                            var filephoto = $('#Photo');
                            file.replaceWith(filephoto.val('').clone(true));
                            return false;
                        }

                        if (t != 'image/jpeg') {
                            alert("Photo should be in JPEG/JPG format only");
                            showImage = 0;
                            $("#PhotoPreview").css("display", "none");
                            $("#PhotoPreview").css("background-image", "none");
                            var filephoto = $('#Photo');
                            file.replaceWith(filephoto.val('').clone(true));
                            return false;
                        }
                    };
                    image.onerror = function () {
                        // alert('Invalid file type: ' + file.type);
                        alert("Photo should be in JPEG/JPG format only");
                        showImage = 0;
                        $("#PhotoPreview").css("display", "none");
                        $("#PhotoPreview").css("background-image", "none");
                        var filephoto = $('#Photo');
                        file.replaceWith(filephoto.val('').clone(true));
                        return false;
                    };
                };
                reader.onloadend = function () { // set image data as background of div
                    if (showImage == 1) {
                        $("#PhotoPreview").css("display", "inline-block");
                        $("#PhotoPreview").css("background-image", "url(" + this.result + ")");
                    }
                    else {
                        $("#PhotoPreview").css("display", "none");
                        $("#PhotoPreview").css("background-image", "none");
                    }
                }
            }

            $(".panfile").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '300x250', '100', 'PAN Card Document');

            });

            $(".aadhaarfile").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '200x200', '100', 'Aadhaar Card Document');

            });

            $("#SSC_certificate").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '600x800', '100', '10th Or Equivalent Document');

            });
            $("#UG_certificate").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '600x800', '100', 'UG Document');

            });
            $("#PG_certificate").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '600x800', '100', 'PG Document');

            });
            $("#MPhil_certificate").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '600x800', '100', 'M.Phil Document');

            });
            $("#PhD_certificate").change(function (e) {

                if (this.disabled) return alert('File upload not supported!');
                var F = this.files;
                if (F && F[0]) for (var i = 0; i < F.length; i++) readDocument(F[i], '600x800', '100', 'Ph.D Document');

            });

            function readDocument(file, minimum, fsize, title) {

                var reader = new FileReader();
                var image = new Image();

                reader.readAsDataURL(file);
                reader.onload = function (_file) {

                    image.src = _file.target.result;              // url.createObjectURL(file);
                    image.onload = function () {
                        var w = this.width,
                            h = this.height,
                            t = file.type,                           // ext only: // file.type.split('/')[1],
                            n = file.name,
                            s = ~~(file.size / 1024); //s = ~~(file.size/1024) +'KB';


                        if (w < minimum.split('x')[0] || h < minimum.split('x')[1] || s > fsize) {

                            alert(title + " should be Minimum - " + minimum + " pixels and less than " + fsize + " KB size");

                            var filephoto;

                            if (title == 'PAN Card Document') {
                                filephoto = $('.panfile');
                            }

                            if (title == 'Aadhaar Card Document') {
                                filephoto = $('.aadhaarfile');
                            }

                            //if (title == 'Proceedings Document') {
                            //    filephoto = $('.SelectionCommitteeProceedingsDocument');
                            //}

                            if (title == '10th Or Equivalent Document') {
                                filephoto = $('#SSC_certificate');
                            }

                            if (title == 'UG Document') {
                                filephoto = $('#UG_certificate');
                            }

                            if (title == 'PG Document') {
                                filephoto = $('#PG_certificate');
                            }

                            if (title == 'M.Phil Document') {
                                filephoto = $('#MPhil_certificate');
                            }

                            if (title == 'Ph.D Document') {
                                filephoto = $('#PhD_certificate');
                            }

                            file.replaceWith(filephoto.val('').clone(true));
                            return false;
                        }

                        if (t != 'image/jpeg') {

                            alert(title + " should be in JPEG/JPG format only");

                            var filephoto;

                            if (title == 'PAN Card Document') {
                                filephoto = $('.panfile');
                            }

                            if (title == 'Aadhaar Card Document') {
                                filephoto = $('.aadhaarfile');
                            }

                            //if (title == 'Proceedings Document') {
                            //    filephoto = $('.SelectionCommitteeProceedingsDocument');
                            //}

                            if (title == '10th Or Equivalent Document') {
                                filephoto = $('#SSC_certificate');
                            }

                            if (title == 'UG Document') {
                                filephoto = $('#UG_certificate');
                            }

                            if (title == 'PG Document') {
                                filephoto = $('#PG_certificate');
                            }

                            if (title == 'M.Phil Document') {
                                filephoto = $('#MPhil_certificate');
                            }

                            if (title == 'Ph.D Document') {
                                filephoto = $('#PhD_certificate');
                            }

                            file.replaceWith(filephoto.val('').clone(true));
                            return false;
                        }
                    };
                    image.onerror = function () {
                        alert(title + " should be in JPEG/JPG format only");

                        var filephoto;

                        if (title == 'PAN Card Document') {
                            filephoto = $('.panfile');
                        }

                        if (title == 'Aadhaar Card Document') {
                            filephoto = $('.aadhaarfile');
                        }

                        //if (title == 'Proceedings Document') {
                        //    filephoto = $('.SelectionCommitteeProceedingsDocument');
                        //}

                        if (title == '10th Or Equivalent Document') {
                            filephoto = $('#SSC_certificate');
                        }

                        if (title == 'UG Document') {
                            filephoto = $('#UG_certificate');
                        }

                        if (title == 'PG Document') {
                            filephoto = $('#PG_certificate');
                        }

                        if (title == 'M.Phil Document') {
                            filephoto = $('#MPhil_certificate');
                        }

                        if (title == 'Ph.D Document') {
                            filephoto = $('#PhD_certificate');
                        }

                        file.replaceWith(filephoto.val('').clone(true));
                        return false;
                    };
                };
            }

        });

        $('#btnRegister').click(function () {
            if ($('#AadhaarNumber').val() != '') {
                $('.aadhaarfile').addClass("required");
            }

            if ($("#department").val() == '') {
                $("#department").addClass("required");
            }

            if ($('#department').val() == 62) {
                if ($("#OtherDepartment").val() == '') {
                    $("#OtherDepartment").addClass("required");
                }
            }

            if ($("#category").val() == '' || $("#category").val() == '0') {
                $("#category").addClass("required");
            }

            if ($("#designation").val() == '') {
                $("#designation").addClass("required");
            }

            if ($('#designation').val() == 4) {
                if ($("#OtherDesignation").val() == '') {
                    $("#OtherDesignation").addClass("required");
                }
            }

            //if ($("#facultyDateOfAppointment").val() == '') {
            //    $("#facultyDateOfAppointment").addClass("required");
            //}

            if ($("#TotalExperience").val() == '') {
                $("#TotalExperience").addClass("required");
            }

            if ($("#TotalExperiencePresentCollege").val() == '') {
                $("#TotalExperiencePresentCollege").addClass("required");
            }

            var terms = $('input[name=Terms]:checked').val();
            if (terms == undefined) {
                var terms = $('input[name=Terms]:checked').val();

                if (terms == undefined) {
                    // alert('You must agree Terms & Conditions before Register');
                    $(".rbtn").css("background-color", "red");
                    return false;
                }
                else {
                    $(".rbtn").css("background-color", "#E8EFF3");
                }
            }
        });

        var radiobuttonstatus = $("input[name='PhdUndertakingDocumentstatus']").prop('checked');
        if (radiobuttonstatus === true) {
            // $("#dvBrowse").show();
            $("#dvTextbox").hide();
            $("#txtphdformat").show();
            $("#lblphdtext").text("PHD Undertaking Document * ");
        } else if (radiobuttonstatus === false) {
            $("#dvTextbox").show();
            $("#txtphdformat").hide();
            $("#PHDUndertakingDocument").removeClass(".input-validation-error");
            $("#lblphdtext").text("Document(if any)");
            //  $("#dvBrowse").hide();
        }

        //get pdf file size of Phd Undertaking
        function GetPhdUndertakingFileSize(fileid) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    alert(fileSize);
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#PHDUndertakingDocument")[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                return fileSize;
            } catch (e) {

                //alert("Error is : " + e);
            }
        }

        //change function for pdf Phd Undertaking Document
        $(function () {
            $(".PhdUndertakingfile").change(function () {

                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {

                        case 'pdf':
                        case 'PDF':

                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".PhdUndertakingfiles > span").text("You can upload only  PDF files");
                    $(this).val('');
                    return false;
                } else {
                    var size = GetPhdUndertakingFileSize(file);
                    size = size / 1048576;
                    if (size > 1) {
                        $(".PhdUndertakingfiles > span").text("Document should not exceed 1 MB in Size");
                        $(this).val('');
                    } else {

                        $(".PhdUndertakingfiles > span").text("");
                    }
                }

            });
        });

        $("#PhotoMessage").hover(function () {

            $("#PhotoMessage").attr("title", "Latest self colour photo with Minimum - 150x150 pixels, Maximum - 200x230 pixels and less than 50 KB size");
        });

        $("#DOBMessage").hover(function () {

            $("#DOBMessage").attr("title", "As Per SSC Certificate");
        });

        $("#AadhaarMessage").hover(function () {

            $("#AadhaarMessage").attr("title", "Minimum 200x200 pixels and less than 100 KB size");
        });

        $("#PANMessage").hover(function () {

            $("#PANMessage").attr("title", "Minimum 300x250 pixels and less than 100 KB size");
        });

        $("#Form16Message").hover(function () {

            $("#Form16Message").attr("title", "PDF should be less than 1MB size");
        });

        $("#SCMMessage").hover(function () {

            $("#SCMMessage").attr("title", "Minimum 600x800 pixels and less than 100 KB size");
        });

        $("#CeritificateMessage").hover(function () {

            $("#CeritificateMessage").attr("title", "Minimum 600x800 pixels and less than 100 KB size");
        });

        $("#PhotoPreview").hover(
          function () {

              $(this).animate({ width: "250px", height: "250px" }, "500");
          },
            function () {

                $(this).animate({ width: "50px", height: "50px" }, "500");
            }
        );

    });

    function Update() {

        var phdstatus = $("input[name='PhdUndertakingDocumentstatus']").prop('checked');
        if (phdstatus === true) {
            var phddocview = $("#PHDUndertakingDocumentView").val();
            if (phddocview === '') {
                $("#PHDUndertakingDocument").addClass("required");
            } else {
                $("#PHDUndertakingDocument").removeClass("required");
            }
        }
        else {
            var phdtext = $("#PhdUndertakingDocumentText").val();
            if (phdtext === '') {
                $("#PhdUndertakingDocumentText").addClass("required");
                $("#PHDUndertakingDocument").removeClass("required");
            } else {
                $("#PhdUndertakingDocumentText").removeClass("required");
                $("#PHDUndertakingDocument").removeClass("required");
            }
        }
    }

    function isNumberKeyForPercentage(evt) {

        var len = $('.txtPercentage').val().length;
        var charCode = (evt.which) ? evt.which : event.keyCode
        if (charCode > 31 && (charCode < 48 || charCode > 57 || len > 6) && charCode != 46)
            return false;
        else if(len >=3)
        {
            return true;
        }
        else {
            var index = $('.txtPercentage').val().indexOf('.');
            if (index > 0 && charCode == 46) {
                return false;
            }
            if (index > 0) {
                var CharAfterdot = (len + 1) - index;
                if (CharAfterdot > 3 && charCode != 8) {
                    return false;
                }
            }
        }
        return true;
    }

    function checkSpcialChar(event) {

        var e = window.event || event
        var keyunicode = e.charCode || e.keyCode
        //Allow alphabetical keys, plus BACKSPACE and SPACE
        return ((keyunicode >= 65 && keyunicode <= 122) || (keyunicode >= 48 && keyunicode <= 57) || keyunicode == 8 || keyunicode == 32) ? true : false
        return;
        event.returnValue = true;
    }

    //function isNumeric(evt) {
    //    var len = $('#GrossSalary').val().length;
    //    var charCode = (evt.which) ? evt.which : event.keyCode
    //    if (charCode > 31 && (charCode < 48 || charCode > 57 || len > 7) && charCode != 46)
    //        return false;
    //    else
    //        return true;
    //}

    //function isNumericForMobile(evt) {
    //    debugger;
    //    var len = $('#Mobile').val().length;
    //    var charCode = (evt.which) ? evt.which : event.keyCode
    //    if (charCode > 31 && (charCode < 48 || charCode > 57 || len > 10) && charCode != 46)
    //        return false;
    //    else if(charCode == 46)
    //        return false;
    //    else
    //        return true;
    //}

    //function isNumericForAadhaar(evt) {
    //    debugger;
    //    var len = $('#AadhaarNumber').val().length;
    //    var charCode = (evt.which) ? evt.which : event.keyCode
    //    if (charCode > 31 && (charCode < 48 || charCode > 57 || len > 12) && charCode != 46)
    //        return false;
    //    else if(charCode == 46)
    //        return false;
    //    else
    //        return true;
    //}

    var doc = new jsPDF();
    var specialElementHandlers = {
        '#editor': function (element, renderer) {
            return true;
        }
    };

    $(function () {

        $("input[name='PhdUndertakingDocumentstatus']").change(function () {

            if ($("#PhdUndertakingDocumentstatus").is(":checked")) {

                // $("#dvBrowse").show();
                $("#dvTextbox").hide();
                $("#txtphdformat").show();
                $("#lblphdtext").text("PHD Undertaking Document * ");
                $(".PhdUndertakingfiles span").text("");
            } else {
                $("#PhdUndertakingDocumentText").removeClass("input-validation-error");
                $("#PhdUndertakingDocumentText").removeClass("required");
                $("#dvTextbox").show();
                $("#PHDUndertakingDocument").removeClass("input-validation-error");
                $("#PHDUndertakingDocument").removeClass("required");
                $("#txtphdformat").hide();
                $("#lblphdtext").text("Document(if any)");
                $(".PhdUndertakingfiles span").text("");
                // $("#dvBrowse").hide();
            }
        });
    });

</script>

<div id="dialog-view" style="display:none"></div>

@if (TempData["SUCCESS"] != null)
{
    <div class="success" style="background-color: gold; border: 1px solid #f49820;">
        <p style="text-align: center;font-weight: bold"><strong>Success:</strong> @TempData["SUCCESS"].ToString()</p>
    </div>
}
@if (TempData["ERROR"] != null)
{
    <div class="error" style="background-color: red; border: 1px solid #f49820;">
        <p style="text-align: center;font-weight: bold;color:white;"><strong>Error:</strong> @TempData["ERROR"].ToString()</p>
    </div>
}

<div id="div_print">

    @using (Html.BeginForm("FacultyNew", "NewOnlineRegistration", FormMethod.Post, new { enctype = "multipart/form-data" }))
    {
        @Html.ValidationSummary(true)

        <div id="divNewFaculty">
            <table class="faculty_table" style="border-collapse:collapse;">
                <tr>
                    <td class="col1" colspan="6">
                        <b>Login Information</b>
                    </td>
                </tr>
                <tr>
                    <td class="col1" style="width: 15% !important; vertical-align: top;">
                        @Html.LabelFor(model => model.Email)
                        <span style="color: blue;">(Login ID)</span> <span class="mandatory">*</span>
                    </td>
                    <td class="col2 focus" style="width: 25% !important; vertical-align: top;">
                        @Html.TextBoxFor(model => model.Email, new { style = "width: 96%;", @title = "Enter your Email ID", @maxlength = "50" })
                        @Html.ValidationMessageFor(model => model.Email)
                    </td>
                    <td class="col1" style="width: 6% !important; vertical-align: top;">
                        <span>Password</span> <span class="mandatory">*</span>
                    </td>
                    <td class="col2" style="width: 20% !important; vertical-align: top;">
                        @Html.PasswordFor(model => model.NewPassword, new { style = "width: 95%;", @placeholder = "Enter your Password", @maxlength = "10" })
                        @Html.ValidationMessageFor(model => model.NewPassword)
                    </td>
                    <td class="col1" style="width: 10% !important; vertical-align: top;">
                        <span>Confirm Password</span> <span class="mandatory">*</span>
                    </td>
                    <td class="col2" style="width: 20% !important; vertical-align: top;">
                        @Html.PasswordFor(model => model.ConfirmPassword, new { style = "width: 95%;", @placeholder = "Confirm your Password", @maxlength = "10" })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword)
                    </td>
                </tr>
            </table>
            <br />
            <table class="faculty_table" style="border-collapse:collapse;">
                <tr>
                    <td class="col1" colspan="4">
                        <b>Faculty Personal Information</b>
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        @Html.LabelFor(model => model.PANNumber) <span class="mandatory">*</span>
                    </td>
                    <td class="col2">
                        @Html.TextBoxFor(model => model.PANNumber, new { @id = "PANNumber", @placeholder = "Enter PAN Number", @maxlength = "10", @class = "clsPanNumber" })
                        @Html.ValidationMessageFor(model => model.PANNumber)
                    </td>
                    <td class="col3">
                        <span>First Name</span><br />
                    </td>
                    <td class="col4">
                        @Html.LabelFor(model => model.FirstName, " ", new { id = "FirstName" })
                        @*@Html.TextBoxFor(model => model.FirstName, new { @placeholder = "Enter your First Name", @maxlengeh = "50", @onkeypress = "return checkSpcialChar(event)", @style = "text-transform:uppercase" })*@
                        @Html.HiddenFor(model => model.FirstName, new { id = "FirstName" })
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        <span>Middle Name</span><br />
                    </td>
                    <td class="col2">
                        @Html.LabelFor(model => model.MiddleName, " ", new { id = "MiddleName" })
                        @*@Html.TextBoxFor(model => model.MiddleName, new { @placeholder = "Enter your Middle Name", @maxlengeh = "50", @onkeypress = "return checkSpcialChar(event)", @style = "text-transform:uppercase" })*@
                        @Html.HiddenFor(model => model.MiddleName, new { id = "MiddleName" })
                    </td>
                    <td class="col3">
                        <span>Last Name</span><br />
                    </td>
                    <td class="col4">
                        @Html.LabelFor(model => model.LastName, " ", new { id = "LastName" })
                        @*@Html.TextBoxFor(model => model.LastName, new { @placeholder = "Enter your Last Name", @maxlengeh = "50", @onkeypress = "return checkSpcialChar(event)", @style = "text-transform:uppercase" })*@
                        @Html.HiddenFor(model => model.LastName, new { id = "LastName" })
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        <span>Father's Name / Husband's Name</span> <span class="mandatory">*</span>
                    </td>
                    <td class="col2">
                        @Html.TextBoxFor(model => model.FatherOrhusbandName, new { @placeholder = "Enter your Father's / Husband's Name", @maxlengeh = "50", @onkeypress = "return checkSpcialChar(event)" })
                        @Html.ValidationMessageFor(model => model.FatherOrhusbandName)
                    </td>
                    <td class="col3">
                        @Html.LabelFor(model => model.MotherName) <span class="mandatory">*</span>
                    </td>
                    <td class="col4">
                        @Html.TextBoxFor(model => model.MotherName, new { @placeholder = "Enter your Mother's Name", @maxlengeh = "25", @onkeypress = "return checkSpcialChar(event)" })
                        @Html.ValidationMessageFor(model => model.MotherName)
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        @Html.LabelFor(model => model.GenderId) <span class="mandatory">*</span>
                    </td>
                    <td class="col2">
                        <label>@Html.RadioButtonFor(model => model.GenderId, 1) Male </label>
                        <label>@Html.RadioButtonFor(model => model.GenderId, 0) Female </label>
                        @Html.ValidationMessageFor(model => model.GenderId)
                    </td>
                    <td class="col3">
                        @Html.LabelFor(model => model.DateOfBirth) <span class="mandatory">* &nbsp;&nbsp;<img id="DOBMessage" src="../Content/images/question-mark-1750942_1280.png" /></span><br />

                    </td>
                    <td class="col4">
                        @Html.TextBoxFor(model => model.facultyDateOfBirth, new { @class = "calendar", style = "", @onblur = "IsValidDate(this,event.keyCode,0,0,0)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "Select Date of Birth" })
                        @Html.ValidationMessageFor(model => model.facultyDateOfBirth)
                    </td>
                </tr>
                <tr>
                    <td class="col1" style="vertical-align: top;">
                        @Html.LabelFor(model => model.Mobile) <span class="mandatory">*</span>
                    </td>
                    <td class="col2" style="vertical-align: top;">
                        @Html.TextBoxFor(model => model.Mobile, new { @placeholder = "Enter 10 digit Mobile Number", @maxlength = "10", @onkeypress = "return isNumeric(event)" })
                        @Html.ValidationMessageFor(model => model.Mobile)
                    </td>
                    <td class="col3" style="vertical-align: top;">
                        <span>Photo</span> <span class="mandatory">*&nbsp;&nbsp;<img id="PhotoMessage" src="../Content/images/question-mark-1750942_1280.png" /></span>
                    </td>
                    <td class="col4 files" style="vertical-align: top;">
                        <div class="ratifed">
                            @Html.TextBoxFor(model => model.Photo, new { type = "file", @class = "file required", @style = "vertical-align: top;" }) &nbsp;&nbsp;&nbsp;
                            <div id="PhotoPreview" style="width:50px;height:50px;"></div>
                        </div>
                    </td>
                </tr>
                <tr>

                    <td class="col1">
                        @Html.LabelFor(model => model.AadhaarNumber)<span class="mandatory">*</span>
                    </td>
                    <td class="col2">
                        @Html.TextBoxFor(model => model.AadhaarNumber, new { @id = "AadhaarNumber", @placeholder = "Enter Aadhaar Number", @maxlength = "12", @class = "required", @onkeypress = "return isNumeric(event)" })
                        @Html.ValidationMessageFor(model => model.AadhaarNumber)
                    </td>
                    <td class="col3" style="vertical-align: top;">
                        <span>Aadhaar Card Document </span><span class="mandatory">*&nbsp;&nbsp;<img id="AadhaarMessage" src="../Content/images/question-mark-1750942_1280.png" /></span>
                    </td>
                    <td class="col4 aadhaarfiles" style="vertical-align: top;">
                        @Html.TextBoxFor(model => model.AadhaarCardDocument, new { type = "file", @class = "aadhaarfile required" })
                    </td>
                </tr>
                <tr>
                    <td class="col1" style="vertical-align: top;">
                        <span>PAN Card Document</span> <span class="mandatory">* &nbsp;&nbsp;<img id="PANMessage" src="../Content/images/question-mark-1750942_1280.png" /></span>
                    </td>
                    <td class="col2 panfiles" style="vertical-align: top;">
                        @Html.TextBoxFor(model => model.PANCardDocument, new { type = "file", @class = "panfile required" })
                    </td>
                    @*<td class="col3">
                            <span>Form16 &nbsp;&nbsp;<img id="Form16Message" src="../Content/images/question-mark-1750942_1280.png" /></span>
                        </td>
                        <td class="col4 IncomeTaxFileUploads">
                            @Html.TextBoxFor(model => model.IncomeTaxFileUpload, new { @type = "file", @class = "IncomeTaxFileUpload" }) <span style="color: red;"></span>
                        </td>*@
                    <td class="col3">
                        @Html.LabelFor(model => model.facultyCategory)<span class="mandatory">*</span>
                    </td>
                    <td class="col4">
                        @Html.DropDownListFor(model => model.facultyCategory, new List<SelectListItem>
                 {
                        //new SelectListItem{ Text="--Select--", Value = "0" },
                        new SelectListItem{ Text="OC", Value = "OC" },
                        new SelectListItem{ Text="BC-A", Value = "BC-A" },
                        new SelectListItem{ Text="BC-B", Value = "BC-B" },
                         new SelectListItem{ Text="BC-C", Value = "BC-C" },
                         new SelectListItem{ Text="BC-D", Value = "BC-D" },
                         new SelectListItem{ Text="BC-E", Value = "BC-E" },
                         new SelectListItem{ Text="SC", Value = "SC" },
                         new SelectListItem{ Text="ST", Value = "ST" },
                         new SelectListItem{ Text="Minority", Value = "Minority" }
                 }, "-- Select --", new { id = "category", style = "" })
                        @Html.ValidationMessageFor(model => model.facultyCategory)
                    </td>
                </tr>
            </table>
            <br />
            <table class="faculty_table" style="width: 100%;border-collapse:collapse;">
                <tr>
                    <td class="col1" colspan="4">
                        <b>Faculty Professional Information</b>
                    </td>
                </tr>
                <tr>
                    <td class="col1" style="vertical-align: top;">
                        <div class="working">
                            @Html.Label("Name of the College presently working in") <span class="mandatory"></span>
                        </div>
                    </td>
                    <td class="col2" style="vertical-align: top;" colspan="3">
                        @Html.DropDownListFor(model => model.CollegeId, new SelectList(ViewBag.Institutions as System.Collections.IEnumerable, "CollegeId", "CollegeName"),
                                    "--Select--", new { id = "CollegeName", style = "" })
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        @Html.LabelFor(model => model.DepartmentId) <span class="mandatory">*</span>
                    </td>
                    <td class="col2">

                        @Html.DropDownListFor(model => model.DepartmentId, new SelectList(ViewBag.department as System.Collections.IEnumerable, "id", "departmentName"), "-- Select --", new { id = "department", style = "" })
                        @Html.ValidationMessageFor(model => model.DepartmentId)

                        @if (Model.department == "Others")
                        { <br />
                            @Html.TextBoxFor(model => model.OtherDepartment, new { @placeholder = "Specify your department name" })
                        }
                        else if (Model.department == null)
                        {
                            <div id="divDept" style="display: none">
                                <br />
                                @Html.TextBoxFor(model => model.OtherDepartment, new { @id = "OtherDepartment", @placeholder = "Specify your department name" })
                            </div>
                        }

                    </td>
                    <td class="col3">
                        @Html.LabelFor(model => model.DesignationId) <span class="mandatory">*</span>
                    </td>
                    <td class="col4">

                        @Html.DropDownListFor(model => model.DesignationId, new SelectList(ViewBag.designation as System.Collections.IEnumerable, "id", "designation"), "-- Select --", new { id = "designation", style = "" })
                        @Html.ValidationMessageFor(model => model.DesignationId)

                        @if (Model.designation == "Others")
                        {
                            <br />
                            @Html.TextBoxFor(model => model.OtherDesignation, new { @placeholder = "Specify your designation name" })
                        }
                        else if (Model.designation == null)
                        {
                            <div id="divDesig" style="display: none">
                                <br />
                                @Html.TextBoxFor(model => model.OtherDesignation, new { @placeholder = "Specify your designation name" })
                            </div>
                        }

                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        @Html.LabelFor(model => model.DateOfAppointment) <span>in the present Institution</span> <span class="mandatory"></span>
                    </td>
                    <td class="col2">
                        @Html.TextBoxFor(model => model.facultyDateOfAppointment, new { @class = "calendar", style = "width: 247px;", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "Enter Date of Appointment" })
                        @Html.ValidationMessageFor(model => model.facultyDateOfAppointment)
                    </td>
                    <td class="col3">Experience in the present Institution (years) <span class="mandatory">*</span></td>
                    <td class="col4">
                        @Html.DropDownListFor(model => model.TotalExperiencePresentCollege, new SelectList(ViewBag.prevExperience as System.Collections.IEnumerable, "value", "text"), "-- Select --", new { id = "TotalExperiencePresentCollege", style = "" })
                        @Html.ValidationMessageFor(model => model.TotalExperiencePresentCollege)
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        @Html.LabelFor(model => model.TotalExperience) (years)<span class="mandatory">*</span>
                    </td>
                    <td class="col2">

                        @Html.DropDownListFor(model => model.TotalExperience,
                                                        new SelectList(ViewBag.prevExperience as System.Collections.IEnumerable, "value", "text"),
                                                        "-- Select --", new { id = "TotalExperience", style = "" })
                        @Html.ValidationMessageFor(model => model.TotalExperience)

                    </td>
                    <td class="col3">
                        <div class="ratifed">
                            College Selection Committee Proceedings Document &nbsp;&nbsp;<img id="SCMMessage" src="../Content/images/question-mark-1750942_1280.png" />
                        </div>
                    </td>
                    <td class="col4">
                        <div class="ratifed">
                            @Html.TextBoxFor(model => model.ProceedingsNo, new { @placeholder = "Enter Proceedings Number", style = "width: 175px;" })
                            @Html.ValidationMessageFor(model => model.ProceedingsNo)
                            &nbsp;&nbsp; @Html.TextBoxFor(model => model.SelectionCommitteeProceedingsDocument, new { type = "file", @class = "SelectionCommitteeProceedingsDocument" })
                        </div>
                    </td>
                </tr>
                <tr>
                    <td class="col1">
                        <div class="ratifed">
                            @Html.LabelFor(model => model.AICTEFacultyId)
                        </div>
                    </td>
                    <td class="col2">
                        <div class="ratifed">
                            @Html.TextBoxFor(model => model.AICTEFacultyId, new { @placeholder = "Enter AICTE faculty Id" })
                            @Html.ValidationMessageFor(model => model.AICTEFacultyId)
                        </div>
                    </td>
                    <td class="col3">Gross Salary Last Drawn</td>
                    <td class="col4">
                        @Html.TextBoxFor(model => model.GrossSalary, new { @maxlength = "7", @placeholder = "Enter Gross Salary Last Drawn", @style = "width: 250px;", @onkeypress = "return isNumeric(event)" })
                        @Html.ValidationMessageFor(model => model.GrossSalary)
                    </td>
                </tr>
            </table>

            <br />

            <table class="faculty_table education" id="tblQualification" style="border: solid 1px #ccc;border-collapse:collapse;">
                <thead>
                    <tr>
                        <td class="row" colspan="10">
                            <b>Educational Qualifications</b>
                        </td>
                    </tr>
                    <tr>
                        <td class="row" style="text-align: center; width: 100px;"></td>
                        <td class="row" style="text-align: center; width: 125px;">HallTicket /Roll Number</td>
                        <td class="row" style="text-align: center; width: 125px;">Course Studied</td>
                        <td class="row" style="text-align: center; width: 125px;">Branch / Specialization</td>
                        <td class="row" style="text-align: center; width: 100px;">Year of Passing (YYYY)</td>
                        <td class="row" style="text-align: center; width: 80px;">
                            % of
                            <br />
                            Marks / CGPA
                        </td>
                        <td class="row" style="text-align: center; width: 80px;">Division</td>
                        <td class="row" style="text-align: center;">Board/University</td>
                        <td class="row" style="text-align: center; width: 180px;">Place</td>
                        <td class="row" style="text-align: center; width: 200px !important;">
                            Scanned Certificate
                            &nbsp;&nbsp;<img id="CeritificateMessage" src="../Content/images/question-mark-1750942_1280.png" />
                            @*<br />
                                <span style="color: blue;">
                                    (Minimum 600x800 pixels
                                    <br />
                                    and less than 100 KB size)
                                </span>*@
                        </td>
                    </tr>
                </thead>
                <tbody>
                    @for (int i = 1; i <= 9; i++)
                    {
                        var style = "alt_row";
                        var year = "yr_" + i;
                        var divs = "division_" + i;

                        //SSC Details
                        if (i == 1)
                        {
                            <tr>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    <span>10th / Equivalent</span>
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.SSC_HallticketNo, new { style = "width: 95%;text-transform:uppercase", @maxlength = "50", @class = "required", @placeholder = "SSC HallTicketNo" })
                                    @*@Html.ValidationMessageFor(model => model.SSC_HallticketNo)*@
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.HiddenFor(model => model.SSC_studiedEducation, new { @Value = "SSC" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.HiddenFor(model => model.SSC_specialization, new { @Value = "SSC" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.SSC_passedYear,
                                new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = year, style = "width: 100%;", @class = "required" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.SSC_percentage, new { style = "width: 85%; text-align: center;", Value = "", @class = "txtPercentage required", @onkeypress = "return isNumberKeyForPercentage(event)", @placeholder = "% of Marks / CGPA" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.SSC_division,
                                new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = divs, style = "width: 100%;", @class = "required" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.SSC_university, new { style = "width: 95%", @maxlength = "100", @class = "required", @placeholder = "University", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.SSC_place, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Place", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.SSC_certificate, new { type = "file", @style = "width: 180px;", @class = " required" })
                                </td>
                            </tr>
                        }
                        //UG Details
                        else if (i == 2)
                        {
                            <tr>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    <span>UG</span>
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_HallticketNo, new { style = "width: 95%;text-transform:uppercase", @maxlength = "50", @class = "required", @placeholder = "UG HallTicketNo" })
                                    @*@Html.ValidationMessageFor(model => model.SSC_HallticketNo)*@
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_studiedEducation, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Course Studied", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_specialization, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Branch/Specialization", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.UG_passedYear,
                                new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = year, style = "width: 100%;", @class = "required" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_percentage, new { style = "width: 85%; text-align: center;", Value = "", @class = "txtPercentage required", @onkeypress = "return isNumberKeyForPercentage(event)", @placeholder = "% of Marks / CGPA" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.UG_division,
                                new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = divs, style = "width: 100%;", @class = "required" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_university, new { style = "width: 95%", @maxlength = "100", @class = "required", @placeholder = "University", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_place, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Place", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.UG_certificate, new { type = "file", @style = "width: 180px;", @class = " required" })
                                </td>
                            </tr>
                        }
                        //PG Details
                        else if (i == 3)
                        {
                            <tr>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    <span>PG</span>
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_HallticketNo, new { style = "width: 95%;text-transform:uppercase", @maxlength = "50", @class = "required", @placeholder = "PG HallTicketNo" })
                                    @*@Html.ValidationMessageFor(model => model.SSC_HallticketNo)*@
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_studiedEducation, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Course Studied", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_specialization, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Branch/Specialization", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.PG_passedYear,
                                new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = year, style = "width: 100%;", @class = "required" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_percentage, new { style = "width: 85%; text-align: center;", Value = "", @class = "txtPercentage required", @onkeypress = "return isNumberKeyForPercentage(event)", @placeholder = "% of Marks / CGPA" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.PG_division,
                                new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = divs, style = "width: 100%;", @class = "required" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_university, new { style = "width: 95%", @maxlength = "100", @class = "required", @placeholder = "University", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_place, new { style = "width: 90%", @maxlength = "50", @class = "required", @placeholder = "Place", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.PG_certificate, new { type = "file", @style = "width: 180px;", @class = " required" })
                                </td>
                            </tr>
                        }
                        //MPhil Details
                        else if (i == 4)
                        {
                            <tr>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    <span>M.Phil / Other PG Degree</span>
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_HallticketNo, new { style = "width: 95%;text-transform:uppercase", @maxlength = "50", @class = "", @placeholder = "MPhil HallTicketNo" })
                                    @*@Html.ValidationMessageFor(model => model.SSC_HallticketNo)*@
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_studiedEducation, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Course Studied", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_specialization, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Branch/Specialization", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.MPhil_passedYear,
                                new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = year, style = "width: 100%;", @class = "" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_percentage, new { style = "width: 85%; text-align: center;", Value = "", @class = "txtPercentage", @onkeypress = "return isNumberKeyForPercentage(event)", @placeholder = "% of Marks / CGPA" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.MPhil_division,
                                new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = divs, style = "width: 100%;", @class = "" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_university, new { style = "width: 95%", @maxlength = "100", @class = "", @placeholder = "University", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_place, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Place", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.MPhil_certificate, new { type = "file", @style = "width: 180px;", @class = "" })
                                </td>
                            </tr>
                        }
                        //NET/SLET Details
                        else if (i == 5)
                        {
                            <tr>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    <span>NET/SLET</span>
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.NET_HallticketNo, new { style = "width: 95%;text-transform:uppercase", @maxlength = "50", @class = "", @placeholder = "NET/SLET HallTicketNo" })
                                    @*@Html.ValidationMessageFor(model => model.SSC_HallticketNo)*@
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.NET_studiedEducation, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Course Studied", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.NET_specialization, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Branch/Specialization", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.DropDownListFor(model => model.NET_passedYear,
                                new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"),
                                "-- Select --", new { id = year, style = "width: 100%;", @class = "" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;"></td>
                                <td class="@style" style="text-align: center; vertical-align: top;"></td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.NET_university, new { style = "width: 95%", @maxlength = "100", @class = "", @placeholder = "University", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.NET_place, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Place", @onkeypress = "return checkSpcialChar(event)" })
                                </td>
                                <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.NET_certificate, new { type = "file", @style = "width: 180px;", @class = "" })
                                </td>
                            </tr>
                        }

                        //Ph.D Details
                        @*else if (i == 5)
                            {
                                <tr>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        <span>Ph.D</span>
                                    </td>
                                   <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_HallticketNo, new { style = "width: 95%;text-transform:uppercase", @maxlength = "50", @class = "required", @placeholder = "PhD HallTicketNo" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_studiedEducation, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Course Studied", @onkeypress = "return checkSpcialChar(event)" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_specialization, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Branch/Specialization", @onkeypress = "return checkSpcialChar(event)" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.DropDownListFor(model => model.PhD_passedYear,
                                    new SelectList(ViewBag.years as System.Collections.IEnumerable, "value", "text"),
                                    "-- Select --", new { id = year, style = "width: 100%;", @class = "" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_percentage, new { style = "width: 85%; text-align: center;", Value = "", @class = "txtPercentage", @onkeypress = "return isNumberKey(event)", @placeholder = "% of Marks / CGPA" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.DropDownListFor(model => model.PhD_division,
                                    new SelectList(ViewBag.division as System.Collections.IEnumerable, "value", "text"),
                                    "-- Select --", new { id = divs, style = "width: 100%;", @class = "" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_university, new { style = "width: 95%", @maxlength = "50", @class = "", @placeholder = "University", @onkeypress = "return checkSpcialChar(event)" })
                                    </td>
                                    <td class="@style" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_place, new { style = "width: 90%", @maxlength = "50", @class = "", @placeholder = "Place", @onkeypress = "return checkSpcialChar(event)" })
                                    </td>
                                    <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                        @Html.TextBoxFor(model => model.PhD_certificate, new { type = "file", @style = "width: 180px;", @class = " " })
                                    </td>
                                </tr>
                            }*@
                        //All Certificates Details
                        else if (i == 6)
                        {
                            <tr>
                                <td class="@style" style="text-align: center; vertical-align: top;">
                                    <span>Others</span>
                                </td>
                                <td class="@style" style="text-align: center; vertical-align: top;" colspan="8">
                                    <span>Faculty has to upload original scanned copies of all UG,PG certificates in single Pdf.</span>
                                </td>
                                <td class="@style certificates" style="text-align: center; vertical-align: top;">
                                    @Html.TextBoxFor(model => model.All_Certificates, new { type = "file", @style = "width: 180px;", @class = "All_Certificates", @id = "All_Certificates" })
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
            <br />
            <table class="faculty_table" style="border-collapse:collapse;">
                <tr>
                    <td class="col1" colspan="2">
                        <b>Publications</b>
                    </td>
                </tr>
                <tr>
                    <td class="col1" style="width: 10% !important; vertical-align: top;">
                        @Html.LabelFor(model => model.National)
                    </td>
                    <td class="col2" style="width: 90% !important; vertical-align: top;">
                        @Html.TextAreaFor(model => model.National, new { style = "width: 99%; resize:none;height:70px;", @placeholder = "National", @maxlength = "1000", @onkeypress = "return checkSpcialChar(event)" })
                        @Html.ValidationMessageFor(model => model.National)

                    </td>
                </tr>
                <tr>
                    <td class="col1" style="vertical-align: top;">
                        @Html.LabelFor(model => model.InterNational)
                    </td>
                    <td class="col2" style="vertical-align: top;">

                        @Html.TextAreaFor(model => model.InterNational, new { style = "width: 99%; resize:none;height:70px;", @placeholder = "InterNational", @maxlength = "1000", @onkeypress = "return checkSpcialChar(event)" })
                        @Html.ValidationMessageFor(model => model.InterNational)

                    </td>
                </tr>

                <tr>
                    <td class="col1" style="vertical-align: top;">
                        @Html.LabelFor(model => model.Citation)
                    </td>
                    <td class="col2" style="vertical-align: top;">

                        @Html.TextAreaFor(model => model.Citation, new { style = "width: 99%; resize:none;height:70px;", @placeholder = "Citation", @maxlength = "1000", @onkeypress = "return checkSpcialChar(event)" })
                        @Html.ValidationMessageFor(model => model.Citation)

                    </td>
                </tr>
                <tr>
                    <td class="col1" style="vertical-align: top;">
                        @Html.LabelFor(model => model.Awards)
                    </td>
                    <td class="col2" style="vertical-align: top;">

                        @Html.TextAreaFor(model => model.Awards, new { style = "width: 99%; resize:none;height:70px;", @placeholder = "Awards", @maxlength = "1000" })
                        @Html.ValidationMessageFor(model => model.Awards)

                    </td>
                </tr>
            </table>
            <br />

            <div class="col1" style="width: 99%;">
                <b>Declaration:</b>
                <br />
                <br />
                I hereby declare that all the information submitted in the Registration form is true to the best of my knowledge and belief.
                In case at a later date, it is found that I have furnished false/wrong information, I am aware that I am liable for prosecution & legal action by the University.
                <br />
                <br />
                <div style="text-align: center; font-weight: bold;" class="rbtn">
                    <label>@Html.RadioButton("Terms", true, new { @id = "Agree", @class = "Terms Agree" }) I Agree the Terms & Conditions </label>
                    <label>@Html.RadioButton("Terms", false, new { @id = "Agree", @class = "Terms Disagree" }) I Disagree the Terms & Conditions </label>
                </div>
            </div>

            <div style="line-height: 1.2rem;" class="right_buttons submitButton">
                <input type="submit" id="btnRegister" value="Register" class="submit" name="Command" />
            </div>
        </div>
    }
</div>



<script type="text/javascript">

    $(document).ready(function () {

        $('.clsPanNumber').attr("style", "text-transform:uppercase");
        $('.clsPanNumber').keyup(function (event) {
            debugger;
            $(this).val($(this).val().replace(/([a-z])/, function (s) { return s.toUpperCase() }));

        });
        $('.clsPanNumber').blur(function (event) {
            debugger;
            $(this).val(($(this).val()).toUpperCase());

        });
        window.setInterval(changeerror, 1000);
    });

    $("#PANNumber").blur(function () {
        debugger;
        if ($('#PANNumber').val() != "") {
            $.ajax({
                url: '/NewOnlineRegistration/GetDetailsBasedonPANNumber',
                dataType: 'json',
                type: 'post',
                contentType: 'application/json',
                data: JSON.stringify({ "PANNo": $('#PANNumber').val() }),
                success: function (data, textStatus, jQxhr) {
                    $("label[for='FirstName']").text("");
                    $("input[name='FirstName']").val("");

                    $("label[for='MiddleName']").text("");
                    $("input[name='MiddleName']").val("");

                    $("label[for='LastName']").text("");
                    $("input[name='LastName']").val("");


                    //console.log(data);
                    if (data.Details != "") {
                        var details = data.Details;
                        var Alldata = details.split(",");

                        $("label[for='FirstName']").text(Alldata[2]);
                        $("input[name='FirstName']").val(Alldata[2]);

                        $("label[for='MiddleName']").text(Alldata[4]);
                        $("input[name='MiddleName']").val(Alldata[4]);

                        $("label[for='LastName']").text(Alldata[3]);
                        $("input[name='LastName']").val(Alldata[3]);

                        if (Alldata[2] == "" || Alldata[2] == null) {
                            $("label[for='FirstName']").text(Alldata[3]);
                            $("input[name='FirstName']").val(Alldata[3]);
                        }
                        if (Alldata[3] == "" || Alldata[3] == null) {
                            $("label[for='LastName']").text(Alldata[2]);
                            $("input[name='LastName']").val(Alldata[2]);
                        }
                    }
                },

                error: function (jqXhr, textStatus, errorThrown) {
                    //console.log(errorThrown);
                }

            });
        }
        else {
            $("label[for='FirstName']").text("");
            $("input[name='FirstName']").val("");

            $("label[for='MiddleName']").text("");
            $("input[name='MiddleName']").val("");

            $("label[for='LastName']").text("");
            $("input[name='LastName']").val("");
            alert("Please Enter PAN Number");
        }

    });


    var c = 1;

    function changeerror() {

        switch (c) {
            case 0:
                $(".error p").css("color", "red");
                //$(".error p").attr({"color": "red","text-align"});
                c = 1;
                break;
            case 1:
                $(".error p").css("color", "black");
                c = 0;
                break;
        }
    }
</script>
