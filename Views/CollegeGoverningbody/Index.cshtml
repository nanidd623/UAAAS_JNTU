@model IList<UAAAS.Models.Governingbody>
@{
    ViewBag.Title = "Governing Body Committee";
    int count = 1;
    string[] otherdesignations = { "Others1", "Others2", "Others3", "Others4" };
}
<h2>Governing body committee</h2>
@if (TempData["Error"] != null)
{
    <div class="error">
        <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
    </div><br />
}
@if (TempData["Success"] != null)
{
    <div class="success">
        <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
    </div><br />
}

<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>
<style type="text/css">
    .memberbodywidth {
        width: 95%;
    }

    .ui-autocomplete {
        overflow: scroll;
        height: 260px;
    }
</style>
<script type="text/javascript">
    $(document).ready(function () {

        var collegeslist = @Html.Raw(Json.Encode(ViewBag.Collegeslist));
        var Designationslist = @Html.Raw(Json.Encode(ViewBag.Designationslist));

        $(".college").on("keydown", function (event) {
            debugger;
           // var currentvl = $(this).attr('id');
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(collegeslist, extractLast(request.term));
                response(results);
            },
            scroll: true,
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var Currentcollege = $(this).attr('id');
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + Currentcollege).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        $(".designation").on("keydown", function (event) {
            debugger;
            // var currentvl = $(this).attr('id');
            if (event.keyCode === $.ui.keyCode.TAB && $(this).autocomplete("instance").menu.active) {
                event.preventDefault();
            }
            else if (event.keyCode == 188) {
                return false;
            }
        }).autocomplete({
            minLength: 0,
            source: function (request, response) {
                // delegate back to autocomplete, but extract the last term
                var results = $.ui.autocomplete.filter(Designationslist, extractLast(request.term));
                response(results);
            },
            scroll: true,
            focus: function () {
                // prevent value inserted on focus
                return false;
            },
            select: function (event, ui) {
                var Currentdesignation = $(this).attr('id');
                var terms = split(this.value);
                if (terms.length <= 1) {
                    // remove the current input
                    terms.pop();
                    // add the selected item
                    terms.push(ui.item.value);
                    // add placeholder to get the comma-and-space at the end
                    terms.push("");
                    this.value = terms.join("");
                    //this.value = terms;
                    $('#' + Currentdesignation).focus();

                    return false;
                }
                else {
                    var last = terms.pop();
                    $(this).val(this.value.substr(0, this.value.length - last.length - 2)); // removes text from input
                    $(this).effect("highlight", {}, 1000);
                    $(this).addClass("red");
                    $("#warnings").html("<span style='color:red;'>Max people reached</span>");
                    return false;
                }
            }
        });

        function split(val) {
            return val.split(/,\s*/);
        }
        function extractLast(term) {
            return split(term).pop();
        }

        $(".Supportingfile").change(function () {

            var file = getNameFromPath($(this).val());
            var flag;
            if (file != null) {
                var extension = file.substr((file.lastIndexOf('.') + 1));
                switch (extension) {
                    case 'pdf':
                    case 'PDF':
                        flag = true;
                        break;
                    default:
                        flag = false;
                }
            }

            if (flag == false) {
                alert("You can upload only  PDF files");
                $(this).val('');
                return false;
            } else {
                var size = GetFileSize(file, "Documentfile");
                size = size / 1048576;
                if (size > 0.2000000000000000) {
                    alert("Document should not exceed 200 KB in Size");
                    $(this).val('');
                } else {

                }
            }

        });

        //get file size
        function GetFileSize(fileid, title) {

            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject,
                    //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject");
                    var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#" + title)[0].files[0].size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }

                return fileSize;
            } catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            } else {
                return strName[0];
            }
        }

       

    });
</script>

@using (Html.BeginForm("Index", "CollegeGoverningbody", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    <table width="100%" class="four_columns">
        <tr>
            <th style="width:3%" class="col11">
                S.No
            </th>
            <th style="width:17%" class="col11">
                Name of the Governing Body Member
            </th>
            <th style="width:17%" class="col11">
                Governing Body Member Designation
            </th>
            <th style="width:18%" class="col11">
                Parent Organization where working
            </th>
            <th style="width:20%" class="col11">
                Designation of the member where
                working at parent Organization
            </th>
            <th style="width:12%" class="col11">
                Date of Appointment
            </th>
            <th style="width:12%" class="col11">
                Appointment Order / Proceedings
            </th>
        </tr>
        <tbody>
            @if (Model != null)
            {

                for (int i = 0; i < Model.Count; i++)
                {
                    <tr class="col21">

                        <td>
                            @(count++)
                        </td>
                        <td style="padding: 4px;">
                            @if (Model[i].GoverningBodyMemberDesignation == "Member Secretary [Principal(ex-officio)]")
                            {
                                @Html.TextBoxFor(x => Model[i].NameoftheGoverningBodyMember, new { @class = "required", @style = "width: 95%", @disabled = "true" })
                                @Html.HiddenFor(x => Model[i].NameoftheGoverningBodyMember)
                            }
                            else
                            {
                                if (otherdesignations.Contains(Model[i].GoverningBodyMemberDesignation))
                                {
                                    @Html.TextBoxFor(x => Model[i].NameoftheGoverningBodyMember, new { @Style = "width: 95%" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => Model[i].NameoftheGoverningBodyMember, new { @class = "required", @style = "width: 95%" })
                                }
                            }


                        </td>
                        <td class="col11" style="font-weight: bold">

                            @Html.DisplayFor(model => Model[i].GoverningBodyMemberDesignation)
                            @Html.HiddenFor(model => Model[i].MemberDesignationId)

                        </td>
                        <td>
                            @if (Model[i].GoverningBodyMemberDesignation == "Member Secretary [Principal(ex-officio)]")
                            {
                                @Html.TextBoxFor(x => Model[i].ParentOrganizationwhereworking, new { @class = "college required",  @disabled = "true", @onkeypress = "return checkSpcialChar(event)" })
                                @Html.HiddenFor(x => Model[i].ParentOrganizationwhereworking)
                            }
                            else
                            {
                                if (otherdesignations.Contains(Model[i].GoverningBodyMemberDesignation))
                                {
                                    @Html.TextBoxFor(x => Model[i].ParentOrganizationwhereworking, new { @class = "college", @id = i + "_college" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => Model[i].ParentOrganizationwhereworking, new { @class = "college required", @id = i+"_college"})
                                }
                            }
                        </td>
                        <td>
                            @if (Model[i].GoverningBodyMemberDesignation == "Member Secretary [Principal(ex-officio)]")
                            {
                                @Html.TextBoxFor(x => Model[i].DesignationofthememberwhereworkingatparentOrganization, new { @class = "designation required", @disabled = "true" })
                                @Html.HiddenFor(x => Model[i].DesignationofthememberwhereworkingatparentOrganization)
                            }
                            else
                            {
                                if (otherdesignations.Contains(Model[i].GoverningBodyMemberDesignation))
                                {
                                    @Html.TextBoxFor(x => Model[i].DesignationofthememberwhereworkingatparentOrganization, new { @class = "designation", @id = i + "_designation" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => Model[i].DesignationofthememberwhereworkingatparentOrganization, new { @class = "designation required", @id = i + "_designation" })
                                }
                            }
                        </td>
                        <td>                            
                            @if (otherdesignations.Contains(Model[i].GoverningBodyMemberDesignation))
                            {
                                @Html.TextBoxFor(x => Model[i].DateofappointmentasGoverningBodymember, new {@class = "calendar"})
                            }
                            else
                            {
                                @Html.TextBoxFor(x => Model[i].DateofappointmentasGoverningBodymember, new {@class = "calendar required"})
                            }

                        </td>
                        <td>
                            @if (otherdesignations.Contains(Model[i].GoverningBodyMemberDesignation))
                            {
                                @Html.TextBoxFor(x => Model[i].SupportingDocument, new { type = "file", @class = "Supportingfile" })
                            }
                            else
                            {
                                @Html.TextBoxFor(x => Model[i].SupportingDocument, new { type = "file", @class = "Supportingfile required" })
                            }
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
    <p class="create_link_right">
        <input type="submit" id="btnsave" value="Save" />
    </p>
}
