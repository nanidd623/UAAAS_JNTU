@model UAAAS.Models.CollegeIntakeExisting
<script src="@Url.Content("~/Scripts/jquery.validate.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/jquery.validate.unobtrusive.min.js")" type="text/javascript"></script>
<script src="@Url.Content("~/Scripts/Validations.js")" type="text/javascript"></script>

<style type="text/css">
    .width {
        width: 80%;
    }

    .text_width {
        width: 22%;
        text-align: center;
    }

    .left_width {
        width: 250px;
    }

    .right_width {
        width: 380px;
    }

    .left_width_down {
        width: 250px;
    }

    .right_width_down {
        width: 380px;
    }
</style>
<script type="text/javascript">
    function ValidateAddmissions()
    {
        //approvedIntake1
        //admittedIntake5
        //AICTEApproved
        var api1=$('#api1').val();
        var api2=$('#api2').val();
        var api3=$('#api3').val();
        var api4=$('#api4').val();
        var api5=$('#api5').val();

        var adi1=$('#adi1').val();
        var adi2=$('#adi2').val();
        var adi3=$('#adi3').val();
        var adi4=$('#adi4').val();
        var adi5=$('#adi5').val();
        var crsStatus= $("#courseStatus").val();

        if(crsStatus=="New")
        {
            $('#adi1').val('0');
        }
        var aapi1=$('#aapi1').val();
        var aapi2=$('#aapi2').val();
        var aapi3=$('#aapi3').val();
        var aapi4=$('#aapi4').val();
        var aapi5=$('#aapi5').val();
        var degreeid=$("#Degree").val();
        if (crsStatus == "Closure") {

        } else {
            if (degreeid==1) {
                if (parseInt(aapi1)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi1').val('');
                    $('#aapi1').focus();
                    return false;
                }
            } else {
                if (parseInt(aapi1)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi1').val('');
                    $('#aapi1').focus();
                    return false;
                }
                if (parseInt(aapi2)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi2').val('');
                    //    //$('#adi1').val('');
                    $('#aapi2').focus();
                    return false;
                }
                if (parseInt(aapi3)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi3').val('');
                    //    //$('#adi1').val('');
                    $('#aapi3').focus();
                    return false;
                }
            }
        }

        if(parseInt(api1)<parseInt(adi1))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi1').val('');
            //$('#adi1').val('');
            $('#adi1').focus()
            //return false;
        }
        if(parseInt(api2)<parseInt(adi2))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi2').val('');
            $('#adi2').focus()
            //return false;
        }
        if(parseInt(api3)<parseInt(adi3))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi3').val('');
            $('#adi3').focus()
            // return false;
        }
        if(parseInt(api4)<parseInt(adi4))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi4').val('');
            $('#adi4').focus()
            // return false;
        }
        if(parseInt(api5)<parseInt(adi5))
        {
            alert('Admitted should be less than or equal to Approved');
            $('#adi5').val('');
            $('#adi5').focus()
            // return false;
        }


    }
    $(document).ready(function () {
        GetSpecialization(@Model.DepartmentID);
        $('.calendar').attr("readonly", "true");
        $('.calendar').datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            showOn: "button",
            buttonImage: "@Url.Content("~/Content/themes/base/images/calendar.gif")",
            buttonImageOnly: true
            //showButtonPanel: true
        });
        //$(".calendar, .year").css("width", "75px");

        if ($("#Degree").val() > 0) {
            GetDepartments($("#Degree").val());
        }


        $("#Degree").change(function () {
            var DegreeID = $(this).val();
            GetDepartments(DegreeID);
        });
        if($("#Department").val() > 0)
        {
            GetSpecialization($("#Department").val());
        }
        $("#Department").change(function(){
            var DepartmentID = $(this).val();
            GetSpecialization(DepartmentID);
        });

        function GetDepartments(DegreeID){
            $.getJSON("/CollegeIntakeProposed/GetDepartments",{ id : DegreeID},
                function(DepartmentsData){
                    var select = $("#Department");
                    select.empty();
                    select.append($('<option/>',{
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(DepartmentsData,function(index, itemdata){
                        select.append($('<option/>',{
                            value: itemdata.Value,
                            text: itemdata.Text,
                            selected: (itemdata.Value == @Model.DepartmentID ? true : false)
                        }));
                    });
                });
        }

        function GetSpecialization(DepartmantID){
            $.getJSON("/CollegeIntakeProposed/GetSpecialization" ,{id : DepartmantID},
                function(Specializationdata){
                    var select = $("#Specialization");
                    select.empty();
                    select.append($('<option/>',{
                        value: '',
                        text: '-- Select --'
                    }));
                    $.each(Specializationdata,function(index, itemdata){
                        select.append($('<option/>',{
                            value: itemdata.Value,
                            text: itemdata.Text,
                            selected: (itemdata.Value == '@Model.specializationId' ? true : false)
                        }));
                    });
                });
        }
        if($('#AICTEApprovalLettr').val()!='')
        {
            //alert('a');
            $('#api0').removeAttr('disabled');
        }
        else if($('#AICTEApprovalLettr').val()=='')
        {
            $('#api0').attr('disabled', 'disabled');
        }

        $('.btnclass').click(function(){
            if($('#AICTEApprovalLettr').val()!='')
            {
                //alert('a');
                $('#api0').addClass('required');

                $('#prop0').removeClass('required');
            }
            else if($('#AICTEApprovalLettr').val()=='')
            {
                //alert('p');
                $('#prop0').addClass('required');
                $('#api0').removeClass('required');
            }
        });


    });

</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('.calendar1').attr("readonly", "true");
        $('.calendar1').datepicker({
            dateFormat: 'dd/mm/yy',
            changeMonth: true,
            changeYear: true,
            //minDate:'-2016/01/02', //yesterday is minimum date
            //maxDate: "+2Y", //tomorrow is maximum date
            maxDate: "+180M",
            yearRange:'2000:2050',
            showOn: "button",
            buttonImage: "@Url.Content("~/Content/themes/base/images/calendar.gif")",
            buttonImageOnly: true
        });
        //alert('Test');
        //var value = $('#courseStatus').val();
        //alert(value);
        //if(value.toLowerCase() == 'closure')
        //{
        //    alert('Test');
        //    $('#prop0').attr('disabled', true);
        //}
        $('.submit').click(function (event, args) {
            if ($('#scannedCopy').val() == undefined && $('#NBAApproveLetter').val() == '') {
                alert("Please select photo")

                //if($('#prop0').val() == '')
                //{
                //    alert("Please Give Proposed Intake  Value")

                //}
                return false;
            }
            else {
                return true;
            }
        });

        //get file size
        function GetFileSize(fileid) {
            try {
                var fileSize = 0;
                //for IE
                if ($.browser.msie) {
                    //before making an object of ActiveXObject, //please make sure ActiveX is enabled in your IE browser
                    var objFSO = new ActiveXObject("Scripting.FileSystemObject"); var filePath = $("#" + fileid)[0].value;
                    var objFile = objFSO.getFile(filePath);
                    var fileSize = objFile.size; //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                    //for FF, Safari, Opeara and Others
                else {
                    fileSize = $("#NBAApproveLetter")[0].files[0].size //size in kb
                    //fileSize = fileSize / 1048576; //size in mb
                }
                return fileSize;
            }
            catch (e) {

                //alert("Error is : " + e);
            }
        }

        //get file path from client system
        function getNameFromPath(strFilepath) {
            var objRE = new RegExp(/([^\/\\]+)$/);
            var strName = objRE.exec(strFilepath);

            if (strName == null) {
                return null;
            }
            else {
                return strName[0];
            }
        }

        $(function () {
            $(".file").change(function () {
                var file = getNameFromPath($(this).val());
                var flag;
                if (file != null) {
                    var extension = file.substr((file.lastIndexOf('.') + 1));
                    switch (extension) {
                        case 'PDF':
                        case 'pdf':
                            flag = true;
                            break;
                        default:
                            flag = false;
                    }
                }

                if (flag == false) {
                    $(".files > span").text("You can upload only PDF files");
                    $(this).val('');
                    return false;
                }
                else {
                    var size = GetFileSize(file);
                    size = size / 1048576;
                    if (size > 1) {
                        $(".files > span").text("PDF should not exceed 1 MB in Size");
                        $(this).val('');
                    }
                    else {
                        $(".files > span").text("");
                    }
                }

            });
        });

        $("#nbaToDate").on('change', function () {
            var startDate = $("#nbaFromDate").val();
            var endDate = $("#nbaToDate").val();

            if (startDate == "" || endDate == "") {
                alert("from date and to date should not be empty.");
                isValidDate = false;
                $("#nbaToDate").val("");
                $("#nbaToDate").focus();
                return isValidDate;
                alert(startDate);
            }
            if (startDate != " " && endDate != " ") {
                var fromDate = startDate.substr(6, 4) + startDate.substr(3, 2) + startDate.substr(0, 2);
                var toDate = endDate.substr(6, 4) + endDate.substr(3, 2) + endDate.substr(0, 20);
                if (toDate < fromDate) {
                    alert("from date should be less than to date.");
                    isValidDate = false;
                    $("#nbaToDate").val("");
                    $("#nbaToDate").focus();
                }
                else {
                    isValidDate = true;
                }
            }



            return isValidDate;



        });
    });
    var crsStatus='@Model.courseStatus';

    var affiliated='@Model.courseAffiliatedStatus';
    //alert(affiliated)
    $("#courseStatus").val(crsStatus);
    if (affiliated=="True") {
        $("#y_Affiliated").attr("checked","checked");
    }
    else  if (affiliated=="false"){
        $("#n_Affiliated").attr("checked","checked");
    }
    //validation function 07-2-2016 nagamallesh
    function Validation(){
        debugger;
        var aapi1=$('#aapi1').val();
        var aapi2=$('#aapi2').val();
        var aapi3=$('#aapi3').val();
        var aapi4=$('#aapi4').val();
        var aapi5=$('#aapi5').val();
        var degreeid=$("#Degree").val();
        var crsStatus= $("#courseStatus").val();
        if (crsStatus == "Closure") {

        } else {
            if (degreeid==1) {
                if (parseInt(aapi1)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi1').val('');
                    //    //$('#adi1').val('');
                    $('#aapi1').focus();
                    return false;
                }
            } else {
                if (parseInt(aapi1)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi1').val('');
                    //    //$('#adi1').val('');
                    $('#aapi1').focus();
                    return false;
                }
                if (parseInt(aapi2)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi2').val('');
                    //    //$('#adi1').val('');
                    $('#aapi2').focus();
                    return false;
                }
                if (parseInt(aapi3)==0) {
                    alert('AICTE Sanctioned Intake Should not be Zero');
                    $('#aapi3').val('');
                    //    //$('#adi1').val('');
                    $('#aapi3').focus();
                    return false;
                }
            }
        }

        var prop0= $("#prop0").val();
        var api1=$("#api1").val();
        var frmDt= $("#nbaFromDate").val();
        var toDt= $("#nbaToDate").val();
        //$('hdn_NBAApproveLetter').val()==''
        if (frmDt!=""&toDt!="")
        {
            var fromDate = frmDt.substr(6, 4) + frmDt.substr(3, 2) + frmDt.substr(0, 2);
            var toDate = toDt.substr(6, 4) + toDt.substr(3, 2) + toDt.substr(0, 2);
            if (toDate < fromDate) {

                alert("from date should be less than to date.");
                return false;
            }
            var NBAApprvltr= $("#hdn_NBAApproveLetter").val();
            //if (NBAApprvltr==""|NBAApprvltr==null)
            if ( $('#NBAApproveLetter').val() == '' &&$('#UploadNBAApproveLetter').val()=='')
            {              $('#NBAApproveLetter').addClass("required");
                $("#err_NBAAprvLtr").show();
                $("#err_NBAAprvLtr").text('Please select file');
                return false;
            }
            else
            {
                $('#NBAApproveLetter').removeClass("required");
                $("#err_NBAAprvLtr").hide();
            }
        }
        return true;
    }
</script>
<script type="text/javascript">
    var isUpdate = '@ViewBag.IsUpdate';
    $(function(){
        if(isUpdate.toLowerCase() == 'false')
        {
            //$('#courseStatus').val('New');
            //$('#courseStatus').attr('disabled', 'disabled');
        }else{
            $('#courseStatus option[value="New"]').css('display', 'none');
        }

        $('#courseStatus').on('change', function(){
            if(isUpdate.toLowerCase() == 'false')
            {
                $('#courseStatus').val('New');
                return;
            }

            var value = $('#courseStatus').val();
            if(value.toLowerCase() == 'closure')
            {
                $('#prop0').val('0');
                $('#prop0').attr('disabled', true);

                //AICTE Intake can take Zeros also

            }
            else
            {
                $('#prop0').removeAttr('disabled');
                $('#prop0').removeAttr('readonly');

            }
        });
    });
</script>

@*<div style="border: 1px solid orange; background: white; color: #de1c85; text-align: left">
        <span style="font-family: 'Times New Roman'; font-size: 14px;"><b>&nbsp;&nbsp;&nbsp;NOTE :</b><b> Admitted Intake as per Exam Branch. (R - Regular Entery, L - Lateral Entery)</b></span>
    </div>*@
<br />
@using (Ajax.BeginForm("AddEditRecord", "CollegeNBAAccredited", new AjaxOptions { HttpMethod = "POST", UpdateTargetId = "CollegeIntakeDialog" }, new { enctype = "multipart/form-data" }))
{
    @Html.ValidationSummary(true)
    @*if (TempData["Error"] != null)
        {
            <div class="error">
                <p><strong>Error:</strong> @TempData["Error"].ToString()</p>
            </div>
        }
        if (TempData["Success"] != null)
        {
            <div class="success">
                <p><strong>Success:</strong> @TempData["Success"].ToString()</p>
            </div>
        }*@
    if (ViewBag.Count == 0)
    {
        <div class="warning" style="width: 550px; margin: 0 auto;">
            <p>Please select your courses in "College Information" page before filling up this page.</p>
        </div>
    }
    <div class="details_table">
        <div class="editor-label left_width_down" style="min-height: 38px;">
            @Html.LabelFor(model => model.nbaFrom) <span><br />(DD/MM/YYYY)</span>
        </div>
        <div class="editor-field right_width_down" style="min-height: 38px; ">
            @Html.TextBoxFor(model => model.nbaFromDate, new { @class = "calendar1  required", @placeholder = "DD/MM/YYYY" })
            @Html.TextBoxFor(model => model.nbaToDate, new { @class = "calendar1  required", @placeholder = "DD/MM/YYYY" })
            @*@Html.TextBoxFor(model => model.nbaFromDate, new { style = "width:80px", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "From date", @class = "required" })
                @Html.TextBoxFor(model => model.nbaToDate, new { style = "width:80px;", @onblur = "IsValidDate(this,event.keyCode,0,0,1)", @onkeydown = "return IsValidFormat(this,event.keyCode)", @placeholder = "To date", @class = "required" })*@
        </div>

        <div class="editor-label left_width_down" style="height:39px;">
            NBA Approve Letter
        </div>
        <div class="editor-field files right_width_down">
            <input type="hidden" id="hdn_NBAApproveLetter" value="@ViewBag.NBAApprovedLetter" />
            @*@if (ViewBag.IsUpdate == true)*@
            @if (false)
            {
                <input type="file" value="@ViewBag.NBAApprovedLetter" accept=".pdf" id="NBAApproveLetter" name="NBAApproveLetter" class="file"> <br />
                if (!String.IsNullOrEmpty(@ViewBag.NBAApprovedLetter))
                {
                    <a href="../Content/Upload/College/NBAAccredited_Latest/@ViewBag.NBAApprovedLetter" target="_blank"><span style="color: red;font-weight: bold ">View</span></a>
                }
                @*<img src="@Url.Content("~/Content/images/pdf.png")">*@ <span id="err_NBAAprvLtr" style="color:red" class="hide"></span>
            }
            else
            {
                @Html.TextBoxFor(model => model.NBAApproveLetter, new { type = "file", @class = "file", accept = ".pdf" })
                <span id="err_NBAAprvLtr" style="color:red" class="hide"></span>
            }
            <br />
            @*<span style="color: red;"></span>*@
            @Html.HiddenFor(model => model.UploadNBAApproveLetter)
        </div>


        @Html.HiddenFor(model => model.createdBy)
        @Html.HiddenFor(model => model.createdOn)
        @Html.HiddenFor(model => model.id)
        @Html.HiddenFor(model => model.academicYearId)
        @Html.HiddenFor(model => model.specializationId)

        <div style="text-align: center">
            <p>
                @if (ViewBag.IsUpdate == true)
                {
                    <input type="submit" value="Save" id="btnSave" name="cmd" class="btnclass" onclick="return Validation();" />
                }
                else
                {
                    <input type="submit" value="Add" id="btnAdd" name="cmd" class="btnclass" />
                }
            </p>
        </div>
    </div>
}
