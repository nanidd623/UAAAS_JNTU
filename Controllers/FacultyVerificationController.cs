using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.Entity.Validation;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Web;
using System.Web.Configuration;
using System.Web.Mvc;
using System.Web.Security;
using iTextSharp.text;
using iTextSharp.text.html.simpleparser;
using iTextSharp.text.pdf;
using UAAAS.Models;
using Utilities = UAAAS.Models.Utilities;
using System.Configuration;

namespace UAAAS.Controllers
{
    [ErrorHandling]
    public class FacultyVerificationController : BaseController
    {
        private uaaasDBContext db = new uaaasDBContext();
        private string bpharmacycondition;
        private string pharmdcondition;
        private string pharmadpbcondition;
        private decimal pharmadpbrequiredfaculty;
        private decimal BpharmacyrequiredFaculty;
        private decimal PharmDRequiredFaculty;
        private decimal PharmDPBRequiredFaculty;
        private int TotalcollegeFaculty;
        private int Group1PharmacyFaculty;
        private int Group2PharmacyFaculty;
        private int Group3PharmacyFaculty;
        private int Group4PharmacyFaculty;
        private int Group5PharmacyFaculty;
        private int Group6PharmacyFaculty;
        private int Allgroupscount;
        private string PharmacyandPharmDMeet = "";

        public ActionResult FacultyVericicationPreamble()
        {
            return View();
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult Index(int? collegeid)
        {
            #region Teaching Faculty Logic Wrong Comare to College Teaching faculty Commented By Srinivas
            ViewBag.Colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { collegeId = c.id, collegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.collegeName).ToList();

            var jntuh_department = db.jntuh_department.ToList();
            List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();

            if (collegeid != null)
            {
                List<jntuh_college_faculty_registered> jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeid).Select(cf => cf).ToList();
                string[] strRegNoS = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeid).Select(cf => cf.RegistrationNumber).ToArray();

                List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
                jntuh_registered_faculty = db.jntuh_registered_faculty
                                             .Where(rf => strRegNoS.Contains(rf.RegistrationNumber))  //&& (rf.collegeId == null || rf.collegeId == collegeid)
                                             .ToList();

                var data = jntuh_registered_faculty.Select(a => new FacultyRegistration
                {
                    id = a.id,
                    Type = a.type,
                    CollegeId = collegeid,
                    RegistrationNumber = a.RegistrationNumber,
                    UniqueID = a.UniqueID,
                    FirstName = a.FirstName,
                    MiddleName = a.MiddleName,
                    LastName = a.LastName,
                    GenderId = a.GenderId,
                    Email = a.Email,
                    facultyPhoto = a.Photo,
                    Mobile = a.Mobile,
                    PANNumber = a.PANNumber,
                    AadhaarNumber = a.AadhaarNumber,
                    isActive = a.isActive,
                    isApproved = a.isApproved,
                    department = jntuh_department.Where(d => d.id == a.DepartmentId).Select(d => d.departmentName).FirstOrDefault(),
                    SamePANNumberCount = jntuh_registered_faculty.Where(f => f.PANNumber == a.PANNumber).ToList().Count(),
                    SameAadhaarNumberCount = jntuh_registered_faculty.Where(f => f.AadhaarNumber == a.AadhaarNumber).ToList().Count(),
                    isVerified = isFacultyVerified(a.id),
                    DeactivationReason = a.DeactivationReason,
                    updatedOn = a.updatedOn,
                    createdOn = jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == a.RegistrationNumber).Select(f => f.createdOn).FirstOrDefault(),
                    jntuh_registered_faculty_education = a.jntuh_registered_faculty_education
                }).ToList();

                teachingFaculty.AddRange(data);
                teachingFaculty = teachingFaculty.Where(m => m.isActive == true).OrderBy(f => f.updatedOn).ThenBy(f => f.department).ToList();
                return View(teachingFaculty);
            }

            return View(teachingFaculty);
            #endregion




        }
        //Commented on 18-06-2018 by Narayana Reddy
        #region Written by Srinivas
        //[Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        //public ActionResult FacultyUGVerification(int? collegeid)
        //{
        //    #region Teaching Faculty Logic Wrong Comare to College Teaching faculty Commented By Srinivas

        //    string[] UGREGNO = db.jntuh_ugregistrationnumbers.Select(R => R.RegistrationNumber).ToArray();
        //    int[] CollegeIDs = db.jntuh_college_faculty_registered.Where(C => UGREGNO.Contains(C.RegistrationNumber)).Select(C => C.collegeId).ToArray();
        //    ViewBag.Colleges = db.jntuh_college.Where(c => c.isActive == true && CollegeIDs.Contains(c.id)).Select(c => new { collegeId = c.id, collegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.collegeName).ToList();

        //    var jntuh_department = db.jntuh_department.ToList();
        //    List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();

        //    if (collegeid != null)
        //    {

        //        List<jntuh_college_faculty_registered> jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeid && UGREGNO.Contains(cf.RegistrationNumber)).Select(cf => cf).ToList();
        //        string[] strRegNoS = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeid && UGREGNO.Contains(cf.RegistrationNumber)).Select(cf => cf.RegistrationNumber).ToArray();

        //        List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
        //        jntuh_registered_faculty = db.jntuh_registered_faculty
        //                                     .Where(rf => strRegNoS.Contains(rf.RegistrationNumber))  //&& (rf.collegeId == null || rf.collegeId == collegeid)
        //                                     .ToList();

        //        var data = jntuh_registered_faculty.Select(a => new FacultyRegistration
        //        {
        //            id = a.id,
        //            Type = a.type,
        //            CollegeId = collegeid,
        //            RegistrationNumber = a.RegistrationNumber,
        //            UniqueID = a.UniqueID,
        //            FirstName = a.FirstName,
        //            MiddleName = a.MiddleName,
        //            LastName = a.LastName,
        //            GenderId = a.GenderId,
        //            Email = a.Email,
        //            facultyPhoto = a.Photo,
        //            Mobile = a.Mobile,
        //            PANNumber = a.PANNumber,
        //            AadhaarNumber = a.AadhaarNumber,
        //            isActive = a.isActive,
        //            isApproved = a.isApproved,
        //            department = jntuh_department.Where(d => d.id == a.DepartmentId).Select(d => d.departmentName).FirstOrDefault(),
        //            SamePANNumberCount = jntuh_registered_faculty.Where(f => f.PANNumber == a.PANNumber).ToList().Count(),
        //            SameAadhaarNumberCount = jntuh_registered_faculty.Where(f => f.AadhaarNumber == a.AadhaarNumber).ToList().Count(),
        //            isVerified = isFacultyVerified(a.id),
        //            DeactivationReason = a.DeactivationReason,
        //            updatedOn = a.updatedOn,
        //            createdOn = jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == a.RegistrationNumber).Select(f => f.createdOn).FirstOrDefault(),
        //            jntuh_registered_faculty_education = a.jntuh_registered_faculty_education
        //        }).ToList();

        //        teachingFaculty.AddRange(data);
        //        teachingFaculty = teachingFaculty.Where(m => m.isActive == true).OrderBy(f => f.updatedOn).ThenBy(f => f.department).ToList();
        //        return View(teachingFaculty);
        //    }

        //    return View(teachingFaculty);
        //    #endregion




        //}
        #endregion

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult FacultyVerification(string fid)
        {

            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                jntuh_registered_faculty faculty = db.jntuh_registered_faculty.Find(fID);

                regFaculty.id = fID;
                regFaculty.Type = faculty.type;
                regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == faculty.UserId).Select(u => u.name).FirstOrDefault();
                regFaculty.Email = faculty.Email;
                regFaculty.UniqueID = faculty.UniqueID;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                regFaculty.MotherName = faculty.MotherName;
                regFaculty.GenderId = faculty.GenderId;
                if (faculty.DateOfBirth != null)
                {
                    regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                }
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.facultyPhoto = faculty.Photo;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.facultyPANCardDocument = faculty.PANDocument;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                //regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.TotalExperience = faculty.TotalExperience;
                regFaculty.OrganizationName = faculty.OrganizationName;
                regFaculty.CollegeId = db.jntuh_college_faculty_registered.Where(f=>f.RegistrationNumber==regFaculty.RegistrationNumber).Select(s=>s.collegeId).FirstOrDefault();
                if (regFaculty.CollegeId!=0)
                {
                    regFaculty.CollegeName = db.jntuh_college.Find(regFaculty.CollegeId).collegeName;
                }
                
                if (faculty.DepartmentId != null)
                {
                    regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                }
                regFaculty.DepartmentId = faculty.DepartmentId;
                regFaculty.OtherDepartment = faculty.OtherDepartment;

                if (faculty.DesignationId != null)
                {
                    regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                }
                regFaculty.DesignationId = faculty.DesignationId;
                regFaculty.OtherDesignation = faculty.OtherDesignation;

                if (faculty.DateOfAppointment != null)
                {
                    regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                }
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                if (faculty.DateOfRatification != null)
                {
                    regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                }
                regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.GrossSalary = faculty.grosssalary;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.isActive = faculty.isActive;
                regFaculty.isApproved = faculty.isApproved;
                regFaculty.isView = true;
                regFaculty.DeactivationReason = faculty.DeactivationReason;


                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                            .Select(e => new RegisteredFacultyEducation
                                                            {
                                                                educationId = e.id,
                                                                educationName = e.educationCategoryName,
                                                                studiedEducation = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                                specialization = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.specialization).FirstOrDefault(),
                                                                passedYear = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.passedYear).FirstOrDefault(),
                                                                percentage = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                                division = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.division).FirstOrDefault(),
                                                                university = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                                place = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                                facultyCertificate = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.certificate).FirstOrDefault(),
                                                            }).ToList();

                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }

                string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
                int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
                //int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();
                int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);

                //bool isValid = ShowHideLink(fID);

                //ViewBag.HideVerifyLink = isValid;

                //if (verificationOfficers.Contains(userId))
                //{
                //    if (isValid)
                //    {
                //        ViewBag.HideVerifyLink = true;
                //    }
                //    else
                //    {
                //        ViewBag.HideVerifyLink = false;
                //    }
                //}

                //if (verificationOfficers.Count() == 3)
                //{
                //    ViewBag.HideVerifyLink = true;
                //}

                ViewBag.HideVerifyLink = regFaculty.isApproved != null ? true : false;
            }

            return View(regFaculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpGet]
        public ActionResult EditDepartment(string fid, int collegeId)
        {
            jntuh_registered_faculty faculty = new jntuh_registered_faculty();
            ViewBag.collegeId = collegeId;

            List<DistinctDepartment> depts = new List<DistinctDepartment>();
            string existingDepts = string.Empty;

            var CollegeDepts = db.jntuh_college_intake_existing.Where(s => s.collegeId == collegeId).Select(s => new
            {
                id = s.jntuh_specialization.jntuh_department.id,
                department = s.jntuh_specialization.jntuh_department.departmentName
            }).OrderBy(s => s.department).ToList();

            string[] aDepts = new string[] { "English", "Mathematics", "Physics", "Chemistry", "Others" };
            foreach (var dept in aDepts)
            {
                int deptId = db.jntuh_department.Where(d => d.departmentName == dept).Select(d => d.id).FirstOrDefault();

                if (deptId != 0)
                {
                    CollegeDepts.Add(new { id = deptId, department = dept });
                }

            }

            foreach (var item in CollegeDepts)
            {
                if (item.department == "B.Pharmacy" || item.department == "M.Pharmacy")
                {
                    var newitem = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => new
                    {
                        id = d.id,
                        department = d.departmentName
                    }).FirstOrDefault();

                    if (!existingDepts.Split(',').Contains(newitem.department))
                    {
                        depts.Add(new DistinctDepartment { id = newitem.id, departmentName = newitem.department });
                        existingDepts = existingDepts + "," + newitem.department;
                    }
                }
                else
                {
                    if (!existingDepts.Split(',').Contains(item.department))
                    {
                        depts.Add(new DistinctDepartment { id = item.id, departmentName = item.department });
                        existingDepts = existingDepts + "," + item.department;
                    }
                }
            }

            ViewBag.department = depts;
            if (fid != null)
            {
                int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                faculty = db.jntuh_registered_faculty.Find(fID);
            }
            return PartialView("_EditDepartment", faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult EditDepartment(jntuh_registered_faculty faculty, FormCollection fc)
        {
            int collegeId = 0;
            int departmentId = 0;
            int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            if (faculty != null && fc["collegeId"] != null && fc["departmentId"] != null)
            {
                collegeId = Convert.ToInt32(fc["collegeId"].ToString());
                departmentId = Convert.ToInt32(fc["departmentId"].ToString());
                jntuh_registered_faculty jntuh_registered_faculty = db.jntuh_registered_faculty.Find(faculty.id);
                //////////////jntuh_registered_faculty.collegeId = collegeId;
                jntuh_registered_faculty.DepartmentId = departmentId;
                jntuh_registered_faculty.updatedBy = userId;
                jntuh_registered_faculty.updatedOn = DateTime.Now;
                db.Entry(jntuh_registered_faculty).State = EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("Index", new { collegeid = collegeId });

        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpGet]
        public ActionResult DeactivateFaculty(string fid, int collegeId)
        {
            jntuh_registered_faculty faculty = new jntuh_registered_faculty();
            ViewBag.collegeId = collegeId;
            if (fid != null)
            {
                int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                faculty = db.jntuh_registered_faculty.Find(fID);
                faculty.DeactivationReasons = db.jntuh_faculty_deactivation_reason.Where(r => r.isActive == true).Select(r => new FacultyDeactivationReason { id = r.id, reason = r.reasonForDeactivation, selected = false }).ToList();
            }
            return PartialView("_DeactivateFaculty", faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult DeactivateFaculty(jntuh_registered_faculty faculty, FormCollection fc)
        {
            int collegeId = 0;
            int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            if (faculty != null && !string.IsNullOrEmpty(fc["collegeId"]) && !string.IsNullOrEmpty(fc["DeactivationReason"]))
            {
                collegeId = Convert.ToInt32(fc["collegeId"].ToString());
                jntuh_registered_faculty jntuh_registered_faculty = db.jntuh_registered_faculty.Find(faculty.id);
                jntuh_registered_faculty.updatedBy = userId;
                jntuh_registered_faculty.updatedOn = DateTime.Now;

                jntuh_registered_faculty.isApproved = false;
                jntuh_registered_faculty.DeactivatedBy = userId;
                jntuh_registered_faculty.DeactivatedOn = DateTime.Now;
                string[] iReaons = fc["DeactivationReason"].Split(',');

                string dReason = string.Empty;
                foreach (var item in iReaons)
                {
                    int id = Convert.ToInt32(item);
                    dReason += db.jntuh_faculty_deactivation_reason.Find(id).reasonForDeactivation + ",";
                }

                dReason = dReason.Remove(dReason.Length - 1);

                jntuh_registered_faculty.DeactivationReason = dReason; // faculty.DeactivationReason;

                db.Entry(jntuh_registered_faculty).State = EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("Index", new { collegeid = collegeId });

        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        //[HttpPost]
        public ActionResult ReactivateFaculty(string fid, int collegeId)
        {
            int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            if (fid != null)
            {
                int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                jntuh_registered_faculty jntuh_registered_faculty = db.jntuh_registered_faculty.Find(fID);
                jntuh_registered_faculty.updatedBy = userId;
                jntuh_registered_faculty.updatedOn = DateTime.Now;

                jntuh_registered_faculty.isApproved = null;
                jntuh_registered_faculty.DeactivatedBy = null;
                jntuh_registered_faculty.DeactivatedOn = null;
                jntuh_registered_faculty.DeactivationReason = null;

                db.Entry(jntuh_registered_faculty).State = EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("Index", new { collegeid = collegeId });

        }
        public bool ShowHideLink(int fid)
        {
            bool isValid = false;

            return isValid;
        }
        //public bool ShowHideLink_old(int fid)
        //{
        //    bool isValid = false;

        //    string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fid).Select(of => of.RegistrationNumber).FirstOrDefault();
        //    int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();

        //    int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();

        //    int verifiedCount = verificationOfficers.Count();

        //    if (verifiedCount > 0 && verifiedCount <= 2)
        //    {
        //        if (verifiedCount == 2)
        //        {
        //            List<jntuh_college_faculty_verified> list1 = new List<jntuh_college_faculty_verified>();
        //            List<jntuh_college_faculty_verified> list2 = new List<jntuh_college_faculty_verified>();

        //            int index = 0;
        //            foreach (var officer in verificationOfficers)
        //            {
        //                if (index == 0)
        //                {
        //                    list1 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => v).ToList();
        //                }

        //                if (index == 1)
        //                {
        //                    list2 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => v).ToList();
        //                }

        //                index++;
        //            }

        //            isValid = CompareVerification(list1, list2);
        //        }
        //    }

        //    return isValid;
        //}

        //public bool CompareVerification(List<jntuh_college_faculty_verified> list1, List<jntuh_college_faculty_verified> list2)
        //{
        //    bool isValid = false;

        //    int misMatchCount = 0;

        //    foreach (var item1 in list1)
        //    {
        //        jntuh_college_faculty_verified item2 = list2.Where(l => l.LabelId == item1.LabelId && l.IsValid == item1.IsValid).FirstOrDefault();

        //        if (item2 == null)
        //        {
        //            misMatchCount++;
        //        }
        //    }

        //    if (misMatchCount == 0)
        //    {
        //        isValid = true;
        //    }

        //    return isValid;
        //}

        public bool isFacultyVerified(int fid)
        {
            bool isVerified = false;

            var faculty = db.jntuh_registered_faculty.Find(fid);

            if (faculty.isApproved != null)
            {
                isVerified = true;
            }

            return isVerified;
        }

        public bool isFacultyVerified_old(int fid)
        {
            bool isVerified = false;

            bool isValid = ShowHideLink(fid);

            isVerified = isValid;

            string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fid).Select(of => of.RegistrationNumber).FirstOrDefault();
            int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
            //Commented on 18-06-2018 by Narayana Reddy
            //int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();

            if (isValid)
            {
                isVerified = true;
            }
            else
            {
                isVerified = false;
            }

            //if (verificationOfficers.Count() == 3)
            //{
            //    isVerified = true;
            //}

            return isVerified;
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        //[HttpGet]
        //public ActionResult CheckList(string fid)
        //{
        //    int facultyId = 0;
        //    int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
        //    List<CollegFacultyVerification> jntuh_registered_faculty_labels = new List<CollegFacultyVerification>();
        //    if (fid != null)
        //    {
        //        int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
        //        string regNo = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
        //        facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == regNo).Select(of => of.id).FirstOrDefault();
        //        int count = db.jntuh_college_faculty_verified.Where(fv => fv.FacultyId == facultyId && fv.VerificationOfficer == userId).Select(fv => fv.VerificationOfficer).Distinct().Count();
        //        List<int> VerificationOfficerIDs = db.jntuh_college_faculty_verified.Where(fv => fv.FacultyId == facultyId).Select(fv => fv.VerificationOfficer).Distinct().ToList();

        //        int v3count = VerificationOfficerIDs.Where(f => VerificationOfficerIDs.Contains(userId)).Count();
        //        if (count == 0)
        //        {
        //            if (VerificationOfficerIDs.Count() == 2 && v3count == 0)
        //            {
        //                List<CollegFacultyVerification> list1 = new List<CollegFacultyVerification>();
        //                List<CollegFacultyVerification> list2 = new List<CollegFacultyVerification>();

        //                int index = 0;
        //                foreach (var officer in VerificationOfficerIDs)
        //                {
        //                    if (index == 0)
        //                    {
        //                        list1 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => new CollegFacultyVerification { LabelId = v.LabelId, IsValid = v.IsValid }).ToList();
        //                    }

        //                    if (index == 1)
        //                    {
        //                        list2 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => new CollegFacultyVerification { LabelId = v.LabelId, IsValid = v.IsValid }).ToList();
        //                    }

        //                    index++;
        //                }

        //                //int[] labelIDs = list1.Intersect(list2).ToArray();
        //                List<CollegFacultyVerification> list3 = new List<CollegFacultyVerification>();
        //                list3 = (from l1 in list1
        //                         join l2 in list2 on new { LabelId = l1.LabelId, Isvalid = l1.IsValid } equals new { LabelId = l2.LabelId, Isvalid = l2.IsValid }
        //                         select new CollegFacultyVerification
        //                         {
        //                             LabelId = l1.LabelId,
        //                             IsValid = l1.IsValid
        //                         }).ToList();

        //                jntuh_registered_faculty_labels = db.jntuh_registered_faculty_labels
        //                                                       .Where(fl => fl.IsActive == true)
        //                                                       .Select(fl => new CollegFacultyVerification
        //                                                       {
        //                                                           Id = 0,
        //                                                           VerificationOfficers = VerificationOfficerIDs,
        //                                                           LabelId = fl.Id,
        //                                                           LabelName = fl.LabelName,
        //                                                           IsValid = null,
        //                                                           loggedinUserId = userId
        //                                                       }).ToList();


        //                foreach (var item in list3)
        //                {
        //                    var items = jntuh_registered_faculty_labels.Where(l => l.LabelId == item.LabelId).FirstOrDefault();

        //                    if (items.LabelId == item.LabelId)
        //                    {
        //                        items.IsValid = item.IsValid;
        //                    }
        //                }


        //                //foreach (var items in list3)
        //                //{
        //                //    foreach (var item in jntuh_registered_faculty_labels)
        //                //    {
        //                //        if (items.LabelId == item.LabelId)
        //                //        {
        //                //            item.IsValid = items.IsValid;
        //                //        }
        //                //    }
        //                //}


        //            }
        //            else
        //            {
        //                jntuh_registered_faculty_labels = db.jntuh_registered_faculty_labels
        //                                                    .Where(fl => fl.IsActive == true)
        //                                                    .Select(fl => new CollegFacultyVerification
        //                                                    {
        //                                                        Id = 0,
        //                                                        VerificationOfficers = VerificationOfficerIDs,
        //                                                        LabelId = fl.Id,
        //                                                        LabelName = fl.LabelName,
        //                                                        IsValid = null,
        //                                                        loggedinUserId = userId
        //                                                    }).ToList();
        //            }
        //        }
        //        else
        //        {
        //            jntuh_registered_faculty_labels = db.jntuh_college_faculty_verified
        //                                                   .Where(fl => fl.jntuh_registered_faculty_labels.IsActive == true && fl.FacultyId == facultyId && fl.VerificationOfficer == userId)
        //                                                   .Select(fl => new CollegFacultyVerification
        //                                                   {
        //                                                       Id = fl.Id,
        //                                                       VerificationOfficers = VerificationOfficerIDs,
        //                                                       LabelId = fl.LabelId,
        //                                                       LabelName = fl.jntuh_registered_faculty_labels.LabelName,
        //                                                       IsValid = fl.IsValid,
        //                                                       loggedinUserId = userId
        //                                                   }).ToList();
        //        }

        //    }

        //    return View(jntuh_registered_faculty_labels);
        //}

        //[Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        //[HttpPost]
        //public ActionResult CheckList(string fid, List<CollegFacultyVerification> checkList)
        //{
        //    int fID = 0;
        //    if (fid != null)
        //    {
        //        fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
        //        string regNo = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
        //        int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == regNo).Select(of => of.id).FirstOrDefault();
        //        int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
        //        int count = db.jntuh_college_faculty_verified.Where(fv => fv.FacultyId == facultyId && fv.VerificationOfficer == userId).Count();
        //        if (checkList.Count() > 0)
        //        {
        //            //var checkList1 = checkList.Where(c => c.IsValid != null).ToList();
        //            int vcount = db.jntuh_college_faculty_verified.Where(fv => fv.FacultyId == facultyId).Select(fv => fv.VerificationOfficer).Distinct().Count();
        //            if (ModelState.IsValid || (ModelState.IsValid == false && vcount == 2))
        //            {
        //                foreach (var item in checkList.Where(c => c.IsValid != null).ToList())
        //                {
        //                    jntuh_college_faculty_verified verified = new jntuh_college_faculty_verified();
        //                    verified.FacultyId = facultyId;
        //                    verified.LabelId = item.LabelId;
        //                    verified.IsValid = item.IsValid;
        //                    verified.VerificationOfficer = userId;
        //                    if (count == 0)
        //                    {
        //                        verified.CreatedBy = userId;
        //                        verified.CreatedOn = DateTime.Now;
        //                        db.jntuh_college_faculty_verified.Add(verified);
        //                    }
        //                    else
        //                    {
        //                        verified.Id = item.Id;
        //                        verified.CreatedBy = db.jntuh_college_faculty_verified.Where(fv => fv.Id == item.Id).Select(fv => fv.CreatedBy).FirstOrDefault();
        //                        verified.CreatedOn = db.jntuh_college_faculty_verified.Where(fv => fv.Id == item.Id).Select(fv => fv.CreatedOn).FirstOrDefault();
        //                        verified.UpdatedBy = userId;
        //                        verified.UpdatedOn = DateTime.Now;
        //                        db.Entry(verified).State = EntityState.Modified;
        //                    }
        //                    db.SaveChanges();

        //                }
        //                TempData["Success"] = "Faculty verification completed";
        //            }
        //        }
        //    }
        //    return RedirectToAction("CheckList", new { fid = Utilities.EncryptString(fID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
        //}

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        [HttpGet]
        public ActionResult OldNotApprovedInformation(string fid, string Command, bool pan, string collegeid)
        {

            var notapproved = db.jntuh_faculty_deactivation_reason.ToList();
            ViewBag.notapproved = notapproved;
            TempData["collegeid"] = collegeid;
            TempData["fid"] = fid;
            return PartialView("OldNotApprovedInformation", notapproved);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpGet]
        public ActionResult Approve(string fid, int collegeId, bool pan, CollegFacultyVerification faculty)
        {
            int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);

            if (fid != null)
            {
                int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));

                jntuh_registered_faculty jntuh_registered_faculty = db.jntuh_registered_faculty.Find(fID);
                jntuh_registered_faculty.updatedBy = userId;
                jntuh_registered_faculty.updatedOn = DateTime.Now;

                jntuh_registered_faculty.isApproved = true;

                if (pan == false)
                {
                    jntuh_registered_faculty.DeactivationReason = "PAN NUMBER APPROVAL PENDING";
                }

                db.Entry(jntuh_registered_faculty).State = EntityState.Modified;
                db.SaveChanges();
            }

            return RedirectToAction("Index", new { collegeid = collegeId });

            //CollegFacultyVerification faculty = new CollegFacultyVerification();

            //if (fid != null)
            //{
            //    int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            //    string regNo = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
            //    int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == regNo).Select(of => of.id).FirstOrDefault();

            //    faculty.FacultyId = facultyId;
            //}

            //return View(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult Approve1(string fid, int? collegeId, bool pan, string[] remarks, string others)
        {
            int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);

            if (fid != null)
            {
                int fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));

                jntuh_registered_faculty jntuh_registered_faculty = db.jntuh_registered_faculty.Find(fID);
                jntuh_registered_faculty.updatedBy = userId;
                jntuh_registered_faculty.updatedOn = DateTime.Now;
                jntuh_registered_faculty.DeactivatedBy = userId;
                jntuh_registered_faculty.DeactivatedOn = DateTime.Now;
                jntuh_registered_faculty.isApproved = true;

                if (remarks != null)
                {
                    jntuh_registered_faculty.DeactivationReason = string.Join(",", remarks) + (!string.IsNullOrEmpty(others) ? "," + others : null);
                }
                else
                {
                    jntuh_registered_faculty.DeactivationReason = others;
                }

                //if (pan == false)
                //{
                //    jntuh_registered_faculty.DeactivationReason = "PAN NUMBER APPROVAL PENDING";
                //}

                db.Entry(jntuh_registered_faculty).State = EntityState.Modified;
                db.SaveChanges();
            }

            return RedirectToAction("Index", new { collegeid = collegeId });
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult FacultyVerificationStatus(int? collegeid, int? Value, string exportType)
        {
            string strcollegeCode = string.Empty;
            ViewBag.Colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { collegeId = c.id, collegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.collegeName).ToList();

            List<SelectListItem> statuslist = new List<SelectListItem>();
            statuslist.Add(new SelectListItem { Text = "Approved", Value = "1" });
            statuslist.Add(new SelectListItem { Text = "Not Approved", Value = "2" });
            ViewBag.statuslist = statuslist;

            List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();
            if (collegeid != null)
            {
                strcollegeCode = db.jntuh_college.Find(collegeid).collegeCode;
                var jntuh_designation = db.jntuh_designation.ToList();
                var jntuh_department = db.jntuh_department.ToList();

                //int[] facultyIDs = db.jntuh_college_faculty_verified.Select(fv => fv.FacultyId).Distinct().ToArray();

                string[] strRegNoS = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeid).Select(cf => cf.RegistrationNumber).ToArray();
                List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
                jntuh_registered_faculty = db.jntuh_registered_faculty.Where(rf => strRegNoS.Contains(rf.RegistrationNumber) && (rf.collegeId == null || rf.collegeId == collegeid)).ToList();

                var data = jntuh_registered_faculty.Select(a => new FacultyRegistration
                {
                    id = a.id,
                    Type = a.type,
                    //UserName=a.
                    CollegeCode = strcollegeCode,
                    RegistrationNumber = a.RegistrationNumber,
                    UniqueID = a.UniqueID,
                    FirstName = a.FirstName,
                    MiddleName = a.MiddleName,
                    LastName = a.LastName,
                    GenderId = a.GenderId,
                    FatherOrhusbandName = a.FatherOrHusbandName,
                    MotherName = a.MotherName,
                    DateOfBirth = a.DateOfBirth,
                    WorkingStatus = a.WorkingStatus,
                    OrganizationName = a.OrganizationName,
                    designation = jntuh_designation.Where(d => d.id == a.DesignationId).Select(d => d.designation).FirstOrDefault(),
                    OtherDesignation = a.OtherDesignation,
                    department = jntuh_department.Where(d => d.id == a.DepartmentId).Select(d => d.departmentName).FirstOrDefault(),
                    OtherDepartment = a.OtherDepartment,
                    GrossSalary = a.grosssalary,
                    DateOfAppointment = a.DateOfAppointment,
                    isFacultyRatifiedByJNTU = a.isFacultyRatifiedByJNTU,
                    DateOfRatification = a.DateOfRatification,
                    ProceedingsNo = a.ProceedingsNumber,
                    AICTEFacultyId = a.AICTEFacultyId,
                    TotalExperience = a.TotalExperience,
                    TotalExperiencePresentCollege = a.TotalExperiencePresentCollege,
                    PANNumber = a.PANNumber,
                    AadhaarNumber = a.AadhaarNumber,
                    Mobile = a.Mobile,
                    Email = a.Email,
                    National = a.National,
                    InterNational = a.InterNational,
                    Citation = a.Citation,
                    Awards = a.Awards,
                    facultyPhoto = a.Photo,
                    isActive = a.isActive,
                    isApproved = a.isApproved,
                    SamePANNumberCount = jntuh_registered_faculty.Where(f => f.PANNumber == a.PANNumber).ToList().Count(),
                    SameAadhaarNumberCount = jntuh_registered_faculty.Where(f => f.AadhaarNumber == a.AadhaarNumber).ToList().Count()
                    //isValid = isFacultyApprovedStatus(a.id)
                }).ToList();

                teachingFaculty.AddRange(data);

                if (Value != null)
                {
                    if (Value == 1)
                    {
                        teachingFaculty = teachingFaculty.Where(f => f.isValid == true).ToList();
                    }
                    else
                    {
                        teachingFaculty = teachingFaculty.Where(f => f.isValid == false).ToList();
                    }
                }

                if (exportType == "Excel")
                {
                    Response.ClearContent();
                    Response.Buffer = true;
                    Response.AddHeader("content-disposition", "attachment; filename=" + strcollegeCode + "-Faculty.xls");
                    Response.ContentType = "application/vnd.ms-excel";
                    return PartialView("_FacultyVerificationStatus", teachingFaculty);
                }
                return View(teachingFaculty);

            }

            return View(teachingFaculty);
        }

        //public bool isFacultyApprovedStatus(int fid)
        //{
        //    bool isValid = false;
        //    string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fid).Select(of => of.RegistrationNumber).FirstOrDefault();
        //    int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
        //    int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();

        //    List<CollegFacultyVerification> list1 = new List<CollegFacultyVerification>();
        //    List<CollegFacultyVerification> list2 = new List<CollegFacultyVerification>();
        //    List<CollegFacultyVerification> list3 = new List<CollegFacultyVerification>();
        //    int index = 0;
        //    foreach (var officer in verificationOfficers)
        //    {
        //        if (index == 0)
        //        {
        //            list1 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => new CollegFacultyVerification { LabelId = v.LabelId, IsValid = v.IsValid }).ToList();
        //        }

        //        if (index == 1)
        //        {
        //            list2 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => new CollegFacultyVerification { LabelId = v.LabelId, IsValid = v.IsValid }).ToList();
        //        }

        //        if (index == 2)
        //        {
        //            list3 = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId && v.VerificationOfficer == officer).Select(v => new CollegFacultyVerification { LabelId = v.LabelId, IsValid = v.IsValid }).ToList();
        //        }

        //        index++;
        //    }

        //    var checklist = (from l1 in list1
        //                     join l2 in list2 on new { LabelId = l1.LabelId, Isvalid = l1.IsValid } equals new { LabelId = l2.LabelId, Isvalid = l2.IsValid }
        //                     select new CollegFacultyVerification
        //                     {
        //                         LabelId = l1.LabelId,
        //                         IsValid = l1.IsValid
        //                     }).ToList();


        //    if (verificationOfficers.Count() == 2)
        //    {
        //        if (checklist.Where(c => c.IsValid == false).Count() == 0)
        //        {
        //            isValid = true;
        //        }
        //        else
        //        {
        //            isValid = false;
        //        }
        //    }
        //    else if (verificationOfficers.Count() == 3)
        //    {
        //        if (checklist.Where(c => c.IsValid == false).Count() == 0)
        //        {
        //            if (list3.Where(l => l.IsValid == false).Count() == 0)
        //            {
        //                isValid = true;
        //            }
        //            else
        //            {
        //                isValid = false;
        //            }
        //        }
        //        else
        //        {
        //            isValid = false;
        //        }
        //    }
        //    return isValid;
        //}

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification,Operations")]
        public ActionResult CollegeIntake(int? collegeId)
        {
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();

            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();
            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            //collegeId = 375;
            if (collegeId != null)
            {
                ViewBag.Status = true;
                int userCollegeID = (int)collegeId;

                ViewBag.collegeId = collegeId;
                var jntuh_academic_year = db.jntuh_academic_year.AsNoTracking().ToList();

                ViewBag.AcademicYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.academicYear).FirstOrDefault();
                int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

                //RAMESH: ADDED to MERGE BOTH EXISTING & PROPOSED INTAKE
                ViewBag.NextYear = String.Format("{0}-{1}", (actualYear + 1).ToString(), (actualYear + 2).ToString().Substring(2, 2));
                int AY0 = jntuh_academic_year.Where(a => a.actualYear == (actualYear + 1)).Select(a => a.id).FirstOrDefault();


                ViewBag.FirstYear = String.Format("{0}-{1}", (actualYear).ToString(), (actualYear + 1).ToString().Substring(2, 2));
                ViewBag.SecondYear = String.Format("{0}-{1}", (actualYear - 1).ToString(), (actualYear).ToString().Substring(2, 2));
                ViewBag.ThirdYear = String.Format("{0}-{1}", (actualYear - 2).ToString(), (actualYear - 1).ToString().Substring(2, 2));
                ViewBag.FourthYear = String.Format("{0}-{1}", (actualYear - 3).ToString(), (actualYear - 2).ToString().Substring(2, 2));
                ViewBag.FifthYear = String.Format("{0}-{1}", (actualYear - 4).ToString(), (actualYear - 3).ToString().Substring(2, 2));

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == userCollegeID).AsNoTracking().ToList();

                int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
                var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
                var jntuh_specialization = db.jntuh_specialization.AsNoTracking().ToList();
                var jntuh_department = db.jntuh_department.AsNoTracking().ToList();
                var jntuh_degree = db.jntuh_degree.AsNoTracking().ToList();
                var jntuh_shift = db.jntuh_shift.AsNoTracking().ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = jntuh_specialization.Where(s => s.id == item.specializationId).Select(s => s.specializationName).FirstOrDefault();
                    newIntake.DepartmentID = jntuh_specialization.Where(s => s.id == item.specializationId).Select(s => s.departmentId).FirstOrDefault();
                    newIntake.Department = jntuh_department.Where(d => d.id == newIntake.DepartmentID).Select(d => d.departmentName).FirstOrDefault();
                    newIntake.degreeID = jntuh_department.Where(d => d.id == newIntake.DepartmentID).Select(d => d.degreeId).FirstOrDefault();
                    newIntake.Degree = jntuh_degree.Where(d => d.id == newIntake.degreeID).Select(d => d.degree).FirstOrDefault();
                    newIntake.degreeDisplayOrder = jntuh_degree.Where(d => d.id == newIntake.degreeID).Select(d => d.degreeDisplayOrder).FirstOrDefault();
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = jntuh_shift.Where(s => s.id == item.shiftId).Select(s => s.shiftName).FirstOrDefault();
                    newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                    newIntake.UploadNBAApproveLetter = item.NBAApproveLetter;
                    newIntake.courseStatus = item.courseStatus;
                    collegeIntakeExisting.Add(newIntake);
                }

                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId }).Select(r => r.First()).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    if (item.nbaFrom != null)
                        item.nbaFromDate = Utilities.MMDDYY2DDMMYY(item.nbaFrom.ToString());
                    if (item.nbaTo != null)
                        item.nbaToDate = Utilities.MMDDYY2DDMMYY(item.nbaTo.ToString());

                    //FLAG : 1 - Approved, 0 - Admitted
                    jntuh_college_intake_existing details = intake//db.jntuh_college_intake_existing
                                                              .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == item.specializationId && e.shiftId == item.shiftId)
                                                              .Select(e => e)
                                                              .FirstOrDefault();
                    if (details != null)
                    {
                        item.ApprovedIntake = details.approvedIntake;
                        item.letterPath = details.approvalLetter;
                        item.ProposedIntake = details.proposedIntake;
                        item.courseStatus = details.courseStatus;
                    }

                    item.approvedIntake1 = GetIntake(userCollegeID, AY1, item.specializationId, item.shiftId, 1);
                    item.admittedIntake1 = GetIntake(userCollegeID, AY1, item.specializationId, item.shiftId, 0);
                    item.AICTEapprovedIntake1 = GetIntake(userCollegeID, AY1, item.specializationId, item.shiftId, 2);

                    item.approvedIntake2 = GetIntake(userCollegeID, AY2, item.specializationId, item.shiftId, 1);
                    item.admittedIntake2 = GetIntake(userCollegeID, AY2, item.specializationId, item.shiftId, 0);
                    item.AICTEapprovedIntake2 = GetIntake(userCollegeID, AY2, item.specializationId, item.shiftId, 2);

                    item.approvedIntake3 = GetIntake(userCollegeID, AY3, item.specializationId, item.shiftId, 1);
                    item.admittedIntake3 = GetIntake(userCollegeID, AY3, item.specializationId, item.shiftId, 0);
                    item.AICTEapprovedIntake3 = GetIntake(userCollegeID, AY3, item.specializationId, item.shiftId, 2);

                    item.approvedIntake4 = GetIntake(userCollegeID, AY4, item.specializationId, item.shiftId, 1);
                    item.admittedIntake4 = GetIntake(userCollegeID, AY4, item.specializationId, item.shiftId, 0);
                    item.AICTEapprovedIntake4 = GetIntake(userCollegeID, AY4, item.specializationId, item.shiftId, 2);

                    item.approvedIntake5 = GetIntake(userCollegeID, AY5, item.specializationId, item.shiftId, 1);
                    item.admittedIntake5 = GetIntake(userCollegeID, AY5, item.specializationId, item.shiftId, 0);
                    item.AICTEapprovedIntake5 = GetIntake(userCollegeID, AY5, item.specializationId, item.shiftId, 2);
                }
                collegeIntakeExisting = collegeIntakeExisting.OrderBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Department).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

            }
            else
            {
                ViewBag.Status = false;
            }
            return View(collegeIntakeExisting);

        }

         [Authorize(Roles = "Admin,DataEntry,FacultyVerification,Operations")]
        [HttpGet]
        public ActionResult AddEditCollegeIntake(int? id, int collegeId)
        {
            CollegeIntakeExisting collegeIntakeExisting = new CollegeIntakeExisting();
            int userCollegeID = collegeId;
            if (id != null && userCollegeID == 0)
            {
                userCollegeID = db.jntuh_college_intake_existing.Where(i => i.id == id).Select(i => i.collegeId).FirstOrDefault();
            }

            ViewBag.IsUpdate = true;
            int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
            collegeIntakeExisting.collegeId = userCollegeID;
            collegeIntakeExisting.AICTEApprovalLettr = AICTEApprovalLettr;

            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            ViewBag.AcademicYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.academicYear).FirstOrDefault();
            int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

            //RAMESH: ADDED to MERGE BOTH EXISTING & PROPOSED INTAKE
            ViewBag.NextYear = String.Format("{0}-{1}", (actualYear + 1).ToString(), (actualYear + 2).ToString().Substring(2, 2));
            int AY0 = jntuh_academic_year.Where(a => a.actualYear == (actualYear + 1)).Select(a => a.id).FirstOrDefault();

            ViewBag.FirstYear = String.Format("{0}-{1}", (actualYear).ToString(), (actualYear + 1).ToString().Substring(2, 2));
            ViewBag.SecondYear = String.Format("{0}-{1}", (actualYear - 1).ToString(), (actualYear).ToString().Substring(2, 2));
            ViewBag.ThirdYear = String.Format("{0}-{1}", (actualYear - 2).ToString(), (actualYear - 1).ToString().Substring(2, 2));
            ViewBag.FourthYear = String.Format("{0}-{1}", (actualYear - 3).ToString(), (actualYear - 2).ToString().Substring(2, 2));
            ViewBag.FifthYear = String.Format("{0}-{1}", (actualYear - 4).ToString(), (actualYear - 3).ToString().Substring(2, 2));
            if (id != null)
            {
                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == userCollegeID && i.id == id).ToList();

                foreach (var item in intake)
                {
                    collegeIntakeExisting.id = item.id;
                    collegeIntakeExisting.collegeId = item.collegeId;
                    collegeIntakeExisting.academicYearId = item.academicYearId;
                    collegeIntakeExisting.shiftId = item.shiftId;
                    collegeIntakeExisting.isActive = item.isActive;
                    collegeIntakeExisting.nbaFrom = item.nbaFrom;
                    collegeIntakeExisting.nbaTo = item.nbaTo;
                    collegeIntakeExisting.specializationId = item.specializationId;
                    collegeIntakeExisting.Specialization = db.jntuh_specialization.Where(s => s.id == item.specializationId).Select(s => s.specializationName).FirstOrDefault();
                    collegeIntakeExisting.DepartmentID = db.jntuh_specialization.Where(s => s.id == item.specializationId).Select(s => s.departmentId).FirstOrDefault();
                    collegeIntakeExisting.Department = db.jntuh_department.Where(d => d.id == collegeIntakeExisting.DepartmentID).Select(d => d.departmentName).FirstOrDefault();
                    collegeIntakeExisting.degreeID = db.jntuh_department.Where(d => d.id == collegeIntakeExisting.DepartmentID).Select(d => d.degreeId).FirstOrDefault();
                    collegeIntakeExisting.Degree = db.jntuh_degree.Where(d => d.id == collegeIntakeExisting.degreeID).Select(d => d.degree).FirstOrDefault();
                    collegeIntakeExisting.shiftId = item.shiftId;
                    collegeIntakeExisting.Shift = db.jntuh_shift.Where(s => s.id == item.shiftId).Select(s => s.shiftName).FirstOrDefault();
                    collegeIntakeExisting.UploadNBAApproveLetter = item.NBAApproveLetter;
                    //collegeIntakeExisting.ViewForm16ApprovalLetter = item.approvalLetter;

                }

                if (collegeIntakeExisting.nbaFrom != null)
                    collegeIntakeExisting.nbaFromDate = Utilities.MMDDYY2DDMMYY(collegeIntakeExisting.nbaFrom.ToString());
                if (collegeIntakeExisting.nbaTo != null)
                    collegeIntakeExisting.nbaToDate = Utilities.MMDDYY2DDMMYY(collegeIntakeExisting.nbaTo.ToString());

                //FLAG : 1 - Approved, 0 - Admitted
                jntuh_college_intake_existing details = db.jntuh_college_intake_existing
                                                          .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == collegeIntakeExisting.specializationId && e.shiftId == collegeIntakeExisting.shiftId)
                                                          .Select(e => e)
                                                          .FirstOrDefault();
                if (details != null)
                {
                    collegeIntakeExisting.ApprovedIntake = details.approvedIntake;
                    collegeIntakeExisting.letterPath = details.approvalLetter;
                    collegeIntakeExisting.ProposedIntake = details.proposedIntake;
                    collegeIntakeExisting.courseStatus = details.courseStatus;
                }

                collegeIntakeExisting.approvedIntake1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);
                collegeIntakeExisting.AICTEapprovedIntake1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 2);
                collegeIntakeExisting.ExambranchadmittedIntakeR1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 3);
                collegeIntakeExisting.ExambranchadmittedIntakeL1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 4);

                collegeIntakeExisting.approvedIntake2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);
                collegeIntakeExisting.AICTEapprovedIntake2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 2);
                collegeIntakeExisting.ExambranchadmittedIntakeR2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 3);
                collegeIntakeExisting.ExambranchadmittedIntakeL2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 4);

                collegeIntakeExisting.approvedIntake3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);
                collegeIntakeExisting.AICTEapprovedIntake3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 2);
                collegeIntakeExisting.ExambranchadmittedIntakeR3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 3);
                collegeIntakeExisting.ExambranchadmittedIntakeL3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 4);

                collegeIntakeExisting.approvedIntake4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);
                collegeIntakeExisting.AICTEapprovedIntake4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 2);
                collegeIntakeExisting.ExambranchadmittedIntakeR4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 3);
                collegeIntakeExisting.ExambranchadmittedIntakeL4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 4);

                collegeIntakeExisting.approvedIntake5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);
                collegeIntakeExisting.AICTEapprovedIntake5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 2);
                collegeIntakeExisting.ExambranchadmittedIntakeR5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 3);
                collegeIntakeExisting.ExambranchadmittedIntakeL5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 4);

            }
            else
            {
                ViewBag.IsUpdate = false;
            }

            var degrees = db.jntuh_college_degree.Join(db.jntuh_degree, collegeDegree => collegeDegree.degreeId, degree => degree.id,
                                                                 (collegeDegree, degree) => new
                                                                 {
                                                                     collegeDegree.degreeId,
                                                                     collegeDegree.collegeId,
                                                                     collegeDegree.isActive,
                                                                     degree.degree
                                                                 })
                                                             .Where(collegeDegree => collegeDegree.collegeId == userCollegeID && collegeDegree.isActive == true)
                                                             .Select(collegeDegree => new
                                                             {
                                                                 collegeDegree.degreeId,
                                                                 collegeDegree.degree
                                                             }).ToList();
            ViewBag.Degree = degrees.OrderBy(d => d.degree);
            ViewBag.Department = db.jntuh_department.Where(d => d.isActive == true);
            ViewBag.Specialization = db.jntuh_specialization.Where(s => s.isActive == true);
            ViewBag.Shift = db.jntuh_shift.Where(s => s.isActive == true);
            ViewBag.Count = degrees.Count();
            return PartialView("_AddEditCollegeIntake", collegeIntakeExisting);

        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification,Operations")]
        [HttpPost]
        public ActionResult AddEditCollegeIntake(CollegeIntakeExisting collegeIntakeExisting, string cmd)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = collegeIntakeExisting.collegeId;

            if (collegeIntakeExisting.nbaFromDate != null)
                collegeIntakeExisting.nbaFrom = Convert.ToDateTime(Utilities.DDMMYY2MMDDYY(collegeIntakeExisting.nbaFromDate));
            if (collegeIntakeExisting.nbaToDate != null)
                collegeIntakeExisting.nbaTo = Convert.ToDateTime(Utilities.DDMMYY2MMDDYY(collegeIntakeExisting.nbaToDate));
            var errors = ModelState.Where(x => x.Value.Errors.Count > 0).Select(x => new { x.Key, x.Value.Errors }).ToArray();
            if (ModelState.IsValid)
            {
                collegeIntakeExisting.collegeId = userCollegeID;
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                int presentAY = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

                for (int i = -1; i < 5; i++)
                {
                    int? approved = 0;
                    int admitted = 0;
                    int aicte = 0;
                    int academicYear = 0;

                    int? proposed = null;
                    string letterPath = null;

                    if (i == -1)
                    {
                        approved = collegeIntakeExisting.ApprovedIntake != null ? collegeIntakeExisting.ApprovedIntake : 0;
                        admitted = 0;
                        aicte = 0;
                        academicYear = presentAY + 1;
                        //academicYear = presentAY + 1;

                        letterPath = collegeIntakeExisting.letterPath;
                        proposed = collegeIntakeExisting.ProposedIntake;
                    }
                    if (i == 0)
                    {
                        approved = collegeIntakeExisting.approvedIntake1;
                        admitted = collegeIntakeExisting.admittedIntake1;
                        aicte = collegeIntakeExisting.AICTEapprovedIntake1;
                        academicYear = presentAY - i;
                        //academicYear = presentAY + 1;
                    }
                    if (i == 1)
                    {
                        approved = collegeIntakeExisting.approvedIntake2;
                        admitted = collegeIntakeExisting.admittedIntake2;
                        aicte = collegeIntakeExisting.AICTEapprovedIntake2;
                        academicYear = presentAY - i;
                        //academicYear = presentAY;
                    }
                    if (i == 2)
                    {
                        approved = collegeIntakeExisting.approvedIntake3;
                        admitted = collegeIntakeExisting.admittedIntake3;
                        aicte = collegeIntakeExisting.AICTEapprovedIntake3;
                        academicYear = presentAY - i;
                        //academicYear = presentAY - 1;
                    }
                    if (i == 3)
                    {
                        approved = collegeIntakeExisting.approvedIntake4;
                        admitted = collegeIntakeExisting.admittedIntake4;
                        aicte = collegeIntakeExisting.AICTEapprovedIntake4;
                        academicYear = presentAY - i;
                        //academicYear = presentAY - 2;
                    }
                    if (i == 4)
                    {
                        approved = collegeIntakeExisting.approvedIntake5;
                        admitted = collegeIntakeExisting.admittedIntake5;
                        aicte = collegeIntakeExisting.AICTEapprovedIntake5;
                        academicYear = presentAY - i;
                        //academicYear = presentAY - 3;
                    }

                    jntuh_college_intake_existing jntuh_college_intake_existing = new jntuh_college_intake_existing();
                    jntuh_college_intake_existing.academicYearId = db.jntuh_academic_year.Where(a => a.actualYear == academicYear).Select(a => a.id).FirstOrDefault();

                    var existingId = db.jntuh_college_intake_existing.Where(p => p.specializationId == collegeIntakeExisting.specializationId
                                                                                && p.shiftId == collegeIntakeExisting.shiftId
                                                                                && p.collegeId == collegeIntakeExisting.collegeId
                                                                                && p.academicYearId == jntuh_college_intake_existing.academicYearId).Select(p => p.id).FirstOrDefault();
                    var Itemdata = db.jntuh_college_intake_existing.Where(p => p.specializationId == collegeIntakeExisting.specializationId
                                                                                && p.shiftId == collegeIntakeExisting.shiftId
                                                                                && p.collegeId == collegeIntakeExisting.collegeId
                                                                                && p.academicYearId == jntuh_college_intake_existing.academicYearId).Select(p => p).FirstOrDefault();

                    int createdByu = Convert.ToInt32(db.jntuh_college_intake_existing.Where(a => a.collegeId == userCollegeID && a.id == existingId).Select(a => a.createdBy).FirstOrDefault());
                    DateTime createdonu = Convert.ToDateTime(db.jntuh_college_intake_existing.Where(a => a.collegeId == userCollegeID && a.id == existingId).Select(a => a.createdOn).FirstOrDefault());

                    if ((approved > 0 && i != -1) || (i != -1 && admitted > 0 && existingId == 0) || (existingId > 0) || (i == -1))
                    {
                        //Itemdata.aicteApprovedIntake = aicte;
                        if (Itemdata.academicYearId==11)
                        {
                            Itemdata.proposedIntake = proposed;
                        }                       
                        // jntuh_college_intake_existing.id = collegeIntakeExisting.id;
                        // jntuh_college_intake_existing.collegeId = collegeIntakeExisting.collegeId;
                        // jntuh_college_intake_existing.academicYearId = jntuh_academic_year.Where(a => a.actualYear == academicYear).Select(a => a.id).FirstOrDefault();
                        // jntuh_college_intake_existing.specializationId = collegeIntakeExisting.specializationId;
                        // jntuh_college_intake_existing.shiftId = collegeIntakeExisting.shiftId;
                        // jntuh_college_intake_existing.approvedIntake = (int)approved;
                        // //jntuh_college_intake_existing.admittedIntake = admitted;
                        // jntuh_college_intake_existing.aicteApprovedIntake = aicte;//New 2018
                        // jntuh_college_intake_existing.approvalLetter = letterPath; //new
                        // jntuh_college_intake_existing.proposedIntake = proposed;  //new
                        // jntuh_college_intake_existing.NBAApproveLetter = collegeIntakeExisting.UploadNBAApproveLetter;
                        // jntuh_college_intake_existing.nbaFrom = collegeIntakeExisting.nbaFrom;
                        // jntuh_college_intake_existing.nbaTo = collegeIntakeExisting.nbaTo;
                        // jntuh_college_intake_existing.isActive = true;
                        // jntuh_college_intake_existing.courseStatus = collegeIntakeExisting.courseStatus;
                        // jntuh_college_intake_existing.courseAffiliatedStatus = true;
                        if (existingId == 0)
                        {
                            // jntuh_college_intake_existing.createdBy = userID;
                            // jntuh_college_intake_existing.createdOn = DateTime.Now;
                            // db.jntuh_college_intake_existing.Add(jntuh_college_intake_existing);
                            // db.SaveChanges();
                        }
                        else
                        {
                            //jntuh_college_intake_existing.id = existingId;
                            //jntuh_college_intake_existing.createdBy = createdByu;
                            //jntuh_college_intake_existing.createdOn = createdonu;
                            if (Itemdata.academicYearId == 11)
                            {
                                Itemdata.updatedBy = userID;
                                Itemdata.updatedOn = DateTime.Now;
                                db.Entry(Itemdata).State = EntityState.Modified;
                                try
                                {
                                    db.SaveChanges();
                                }
                                catch (DbEntityValidationException dbEx)
                                {
                                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                                    {
                                        foreach (var validationError in validationErrors.ValidationErrors)
                                        {
                                            Trace.TraceInformation("Property: {0} Error: {1}",
                                                                    validationError.PropertyName,
                                                                    validationError.ErrorMessage);
                                        }
                                    }
                                }
                            }                           
                        }
                    }
                }

                if (cmd == "Add")
                {
                    TempData["Success"] = "Added successfully.";
                }
                else
                {
                    TempData["Success"] = "Updated successfully.";
                }

                return RedirectToAction("CollegeIntake", new { collegeId = userCollegeID });
            }
            else
            {
                return RedirectToAction("CollegeIntake", new { collegeId = userCollegeID });
            }

        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification,Operations")]
        public ActionResult DeleteCollegeIntake(int id)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                userCollegeID = db.jntuh_college_intake_existing.Where(i => i.id == id).Select(i => i.collegeId).FirstOrDefault();
            }
            int specid = db.jntuh_college_intake_existing.Where(p => p.id == id).Select(p => p.specializationId).FirstOrDefault();
            int shiftid = db.jntuh_college_intake_existing.Where(p => p.id == id).Select(p => p.shiftId).FirstOrDefault();
            List<jntuh_college_intake_existing> jntuh_college_intake_existing = db.jntuh_college_intake_existing.Where(p => p.specializationId == specid && p.shiftId == shiftid && p.collegeId == userCollegeID).ToList();
            foreach (var item in jntuh_college_intake_existing)
            {
                db.jntuh_college_intake_existing.Remove(item);
                db.SaveChanges();
                TempData["Success"] = "College Intake Deleted successfully";
            }

            return RedirectToAction("CollegeIntake", new { collegeId = userCollegeID });
        }

        private int GetIntake(int collegeId, int academicYearId, int specializationId, int shiftId, int flag)
        {
            int intake = 0;
            //Changes in place of 10 to 11 by Narayana on 16-03-2018
            //approved
            if (flag == 1 && academicYearId != 11)
            {
                intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).Select(i => i.approvedIntake).FirstOrDefault();
                //New Code Writtenby Narayana
            }
            else if (flag == 1 && academicYearId == 11)
            {
                var inta = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).FirstOrDefault();
                if (inta != null && inta.proposedIntake != null)
                {
                    intake = (int)inta.proposedIntake;
                }
                //New Code Writtenby Narayana
                //var appealinta =
                //    db.jntuh_appeal_college_intake_existing.Where(
                //        i =>
                //            i.collegeId == collegeId && i.academicYearId == academicYearId &&
                //            i.specializationId == specializationId && i.shiftId == 1).FirstOrDefault();
                //if (appealinta!=null && appealinta.proposedIntake!=null)
                //{
                //    intake = (int)appealinta.proposedIntake;
                //}
                //else
                //{
                //    var inta = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).FirstOrDefault();
                //    if (inta != null && inta.proposedIntake != null)
                //    {
                //        intake = (int)inta.proposedIntake;
                //    }    
                //}

            }
            else if (flag == 2)//AICTE Intake
            {
                intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).Select(i => i.aicteApprovedIntake).FirstOrDefault() == null ? 0 : db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).Select(i => i.aicteApprovedIntake).FirstOrDefault();
            }
            else if (flag == 0)//admitted
            {
                intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).Select(i => i.admittedIntake).FirstOrDefault();
            }
            else if (flag == 3)
            {
                intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).Select(i => i.admittedIntakeasperExambranch_R).FirstOrDefault();
            }
            else if (flag == 4)
            {
                intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == 1).Select(i => i.admittedIntakeasperExambranch_L).FirstOrDefault();
            }
            return intake;
        }

        private int GetIntakeBtech(int collegeId, int academicYearId, int specializationId, int shiftId, int flag, int DegreeId)
        {
            int intake = 0;

            //Degree B.Tech  
            if (DegreeId == 4)
            {
                //admitted
                if (flag == 1 && (academicYearId == 9 || academicYearId == 8 || academicYearId == 3))
                {
                     intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId).Select(i => i.admittedIntake).FirstOrDefault();

                }
                else if (flag == 1 && academicYearId == 10)
                {
                    //New Code
                    var appealinta = db.jntuh_appeal_college_intake_existing.FirstOrDefault(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId);
                    if (appealinta != null)
                    {
                        intake = Convert.ToInt32(appealinta.proposedIntake);
                    }
                    else
                    {
                        var inta =
                            db.jntuh_college_intake_existing.FirstOrDefault(
                                i =>
                                    i.collegeId == collegeId && i.academicYearId == academicYearId &&
                                    i.specializationId == specializationId && i.shiftId == shiftId);
                        if (inta != null)
                        {
                            intake = Convert.ToInt32(inta.proposedIntake);
                        }
                    }

                }
                else   //approved
                {
                    intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId).Select(i => i.approvedIntake).FirstOrDefault();
                }
            }
            else
            {
                //approved
                if (flag == 1 && academicYearId != 10)
                {
                    intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId).Select(i => i.approvedIntake).FirstOrDefault();

                }
                else if (flag == 1 && academicYearId == 10)
                {
                    var appealinta = db.jntuh_appeal_college_intake_existing.FirstOrDefault(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId);
                    if (appealinta!=null)
                    {
                        intake = Convert.ToInt32(appealinta.proposedIntake);
                    }
                    else
                    {
                        var inta = db.jntuh_college_intake_existing.FirstOrDefault(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId);
                        if (inta != null)
                        {
                            intake = Convert.ToInt32(inta.proposedIntake);
                        }
                    }

                }
                else //admitted
                {
                    intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId).Select(i => i.admittedIntake).FirstOrDefault();
                }
            }
            return intake;
        }

        private bool GetAcademicYear(int collegeId, int academicYearId, int specializationId, int shiftId, int DegreeId)
        {
            var firstOrDefault = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.academicYearId == academicYearId && i.specializationId == specializationId && i.shiftId == shiftId).Select(i => i.courseAffiliatedStatus).FirstOrDefault();
            return firstOrDefault ?? false;
        }

        private int GetBtechAdmittedIntake(int Intake)
        {
            int BtechAdmittedIntake = 0;
            if (Intake >= 0 && Intake <= 60)
            {
                BtechAdmittedIntake = 60;
            }
            else if (Intake > 60 && Intake <= 120)
            {
                BtechAdmittedIntake = 120;
            }
            else if (Intake > 120 && Intake <= 180)
            {
                BtechAdmittedIntake = 180;
            }
            else if (Intake > 180 && Intake <= 240)
            {
                BtechAdmittedIntake = 240;
            }
            else if (Intake > 240 && Intake <= 300)
            {
                BtechAdmittedIntake = 300;
            }
            else if (Intake > 300 && Intake <= 360)
            {
                BtechAdmittedIntake = 360;
            }
            else if (Intake > 360 && Intake <= 420)
            {
                BtechAdmittedIntake = 420;
            }
            return BtechAdmittedIntake;
        }


        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpGet]
        public ActionResult CollegeFacultyWithIntakeNew(int? collegeId, string type)
        {
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                var jntuh_college_faculty_deficiency = db.jntuh_college_faculty_deficiency.Where(fd => fd.CollegeId == collegeId).ToList();
                var jntuh_specialization = db.jntuh_specialization.ToList();

                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                var jntuh_college_faculty_registered_new = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnosNew = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).ToArray();

                //education categoryIds UG,PG,PHD...........

                int pharmacyDeptId = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();

                var jntuh_education_category = db.jntuh_education_category.ToList();

                var registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber)).ToList();//&& (rf.collegeId == null || rf.collegeId == collegeId)
                //Reg nos related online facultyIds
                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.DepartmentId != null && ((rf.Absent == false || rf.Absent == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null)
                                                          && (rf.NoSCM == false || rf.NoSCM == null)) && (rf.PANNumber != null)).Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.jntuh_department.departmentName,
                                                     HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                     IsApproved = rf.isApproved,
                                                     PanNumber = rf.PANNumber,
                                                     AadhaarNumber = rf.AadhaarNumber
                                                 }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.Department,
                                                     HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                                                     Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                                                     SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                                                     PanNumber = rf.PanNumber,
                                                     AadhaarNumber = rf.AadhaarNumber
                                                 }).Where(e => e.Department != null)
                                                 .ToList();


                var registeredFacultyNew = db.jntuh_registered_faculty.Where(rf => strRegnosNew.Contains(rf.RegistrationNumber) && (rf.collegeId == null || rf.collegeId == collegeId)).ToList();
                //Reg nos related online facultyIds
                var jntuh_registered_faculty_new1 = registeredFacultyNew.Where(rf => rf.DepartmentId != null && (rf.isApproved == null || rf.isApproved == true) && (rf.PANNumber != null || rf.AadhaarNumber != null))
                                                 .Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.jntuh_department.departmentName,
                                                     HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                     IsApproved = rf.isApproved,
                                                     PanNumber = rf.PANNumber,
                                                     AadhaarNumber = rf.AadhaarNumber
                                                 }).ToList();
                jntuh_registered_faculty_new1 = jntuh_registered_faculty_new1.Where(e => e.HighestDegreeID != 0).ToList();
                var jntuh_registered_faculty_new = jntuh_registered_faculty_new1
                                                   .Select(rf => new
                                                   {
                                                       RegistrationNumber = rf.RegistrationNumber,
                                                       Department = rf.Department,
                                                       HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                                                       Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                                                       SpecializationId = jntuh_college_faculty_registered_new.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                                                       PanNumber = rf.PanNumber,
                                                       AadhaarNumber = rf.AadhaarNumber
                                                   }).Where(e => e.Department != null)
                                                 .ToList();

                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech" || item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "M.Pharmacy" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                    }

                    intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    //====================================
                    // intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(s => s.SpecializationId == item.specializationId).Count();

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && (f.Recruitedfor == "UG" || f.Recruitedfor == null)).Count();
                        }
                    }

                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId).Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId).Count();
                        }
                    }
                    intakedetails.id = jntuh_college_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.SpecializationId == item.specializationId && fd.ShiftId == item.shiftId).Select(fd => fd.Id).FirstOrDefault();

                    if (intakedetails.id > 0)
                    {
                        int? swf = jntuh_college_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                        if (swf != null)
                        {
                            intakedetails.specializationWiseFaculty = (int)swf;
                        }
                        intakedetails.deficiency = jntuh_college_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.Deficiency).FirstOrDefault();
                        intakedetails.shortage = jntuh_college_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.Shortage).FirstOrDefault();
                    }

                    //============================================

                    int noPanOrAadhaarcount = 0;

                    if (item.Degree == "B.Pharmacy" || item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Where(f => "UG" == f.HighestDegree && f.Department == "Pharmacy").Count();
                        pgFaculty = jntuh_registered_faculty.Where(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy").Count();
                        phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy").Count();
                        noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharmacy";
                        intakedetails.newlyAddedFaculty = jntuh_registered_faculty_new.Where(f => f.Department == "Pharmacy").Count();
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Where(f => "UG" == f.HighestDegree && f.Department == item.Department).Count();
                        pgFaculty = jntuh_registered_faculty.Where(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department).Count();
                        phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == item.Department).Count();
                        noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == item.DepartmentID && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.newlyAddedFaculty = jntuh_registered_faculty_new.Where(f => f.Department == item.Department).Count();
                    }

                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);

                    intakedetails.facultyWithoutPANAndAadhaar = noPanOrAadhaarcount;
                    //=============//

                    intakedetailsList.Add(intakedetails);
                }

                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others" };
                int btechdegreecount = intakedetailsList.Where(d => d.Degree == "B.Tech").Count();
                if (btechdegreecount != 0)
                {
                    foreach (var department in strOtherDepartments)
                    {
                        int speId = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.id).FirstOrDefault();
                        int ugFaculty = jntuh_registered_faculty.Where(f => "UG" == f.HighestDegree && f.Department == department).Count();
                        int pgFaculty = jntuh_registered_faculty.Where(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == department).Count();
                        int phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == department).Count();
                        int newlyAdded = jntuh_registered_faculty_new.Where(f => f.Department == department).Count();

                        int facultydeficiencyId = jntuh_college_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.SpecializationId == speId && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                        if (facultydeficiencyId == 0)
                        {
                            intakedetailsList.Add(new CollegeFacultyWithIntakeReport { collegeId = (int)collegeId, Degree = "B.Tech", Department = department, Specialization = department, ugFaculty = ugFaculty, pgFaculty = pgFaculty, phdFaculty = phdFaculty, totalFaculty = ugFaculty + pgFaculty + phdFaculty, specializationId = speId, shiftId = 1, newlyAddedFaculty = newlyAdded });
                        }
                        else
                        {
                            int? swf = jntuh_college_faculty_deficiency.Where(fd => fd.Id == facultydeficiencyId).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                            bool deficiency = jntuh_college_faculty_deficiency.Where(fd => fd.Id == facultydeficiencyId).Select(fd => fd.Deficiency).FirstOrDefault();
                            int shortage = jntuh_college_faculty_deficiency.Where(fd => fd.Id == facultydeficiencyId).Select(fd => fd.Shortage).FirstOrDefault();
                            intakedetailsList.Add(new CollegeFacultyWithIntakeReport { id = facultydeficiencyId, collegeId = (int)collegeId, Degree = "B.Tech", Department = department, Specialization = department, ugFaculty = ugFaculty, pgFaculty = pgFaculty, phdFaculty = phdFaculty, totalFaculty = ugFaculty + pgFaculty + phdFaculty, specializationId = speId, shiftId = 1, specializationWiseFaculty = (int)swf, deficiency = deficiency, shortage = shortage, newlyAddedFaculty = newlyAdded });
                        }
                    }
                }

                if (type == "Excel")
                {
                    string strcollegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    Response.ClearContent();
                    Response.Buffer = true;
                    Response.AddHeader("content-disposition", "attachment; filename=" + strcollegeCode + "-Faculty.xls");
                    Response.ContentType = "application/vnd.ms-excel";
                    return PartialView("_CollegeFacultyWithIntakeNew", intakedetailsList.Where(c => c.shiftId == 1).ToList());
                }
            }
            return View(intakedetailsList.Where(c => c.shiftId == 1).ToList());
        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpPost]
        public ActionResult CollegeFacultyWithIntakeNew(List<CollegeFacultyWithIntakeReport> facultyList)
        {
            int collegeId = facultyList.Select(c => c.collegeId).FirstOrDefault();
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var faculty = facultyList.Where(ld => ld.deficiency != null).ToList();
            if (faculty.Count() > 0)
            {
                if (ModelState.IsValid)
                {
                    foreach (var item in faculty)
                    {
                        jntuh_college_faculty_deficiency facultyDeficiency = new jntuh_college_faculty_deficiency();
                        facultyDeficiency.CollegeId = item.collegeId;
                        facultyDeficiency.SpecializationId = item.specializationId;
                        facultyDeficiency.ShiftId = item.shiftId;
                        facultyDeficiency.SpecializationWiseFaculty = item.specializationWiseFaculty;
                        facultyDeficiency.Deficiency = (bool)item.deficiency;
                        facultyDeficiency.Shortage = item.shortage;
                        facultyDeficiency.IsActive = true;
                        facultyDeficiency.SpecializationId = item.specializationId;
                        if (item.id == 0)
                        {
                            facultyDeficiency.CreatedBy = userID;
                            facultyDeficiency.CreatedOn = DateTime.Now;
                            db.jntuh_college_faculty_deficiency.Add(facultyDeficiency);
                        }
                        else
                        {
                            jntuh_college_faculty_deficiency facultyDeficiencyupdate = db.jntuh_college_faculty_deficiency.Find(item.id);
                            facultyDeficiencyupdate.SpecializationWiseFaculty = item.specializationWiseFaculty;
                            facultyDeficiencyupdate.Deficiency = (bool)item.deficiency;
                            facultyDeficiencyupdate.Shortage = item.shortage;
                            facultyDeficiencyupdate.UpdatedBy = userID;
                            facultyDeficiencyupdate.UpdatedOn = DateTime.Now;
                            db.Entry(facultyDeficiencyupdate).State = EntityState.Modified;
                        }
                    }
                    db.SaveChanges();
                }
                TempData["Success"] = "Data Saved";
            }
            return RedirectToAction("CollegeFacultyWithIntakeNew", new { collegeId = collegeId });
        }


        public class AnonymousLabclass
        {
            public int? id { get; set; }
            public int? EquipmentID { get; set; }
            public string LabCode { get; set; }
            public string LabName { get; set; }
            public string EquipmentName { get; set; }
            public int year { get; set; }
            public int? Semester { get; set; }
            public int specializationId { get; set; }
            public string Department { get; set; }
        }

        public class CollegeFacultyWithIntakeReport
        {
            public int id { get; set; }
            public int collegeId { get; set; }
            public int academicYearId { get; set; }
            public string collegeCode { get; set; }
            public string collegeName { get; set; }
            public string Degree { get; set; }
            public string Department { get; set; }
            public string Specialization { get; set; }
            public int shiftId { get; set; }
            public string Shift { get; set; }
            public int specializationId { get; set; }
            public int DepartmentID { get; set; }
            public int DegreeId { get; set; }
            public int? degreeDisplayOrder { get; set; }
            public string collegeRandomCode { get; set; }
            public int ProposedIntake { get; set; }
            public int approvedIntake1 { get; set; }
            public int approvedIntake2 { get; set; }
            public int approvedIntake3 { get; set; }
            public int approvedIntake4 { get; set; }
            public int approvedIntake5 { get; set; }
            public bool ispercentage { get; set; }
            public bool isintakeeditable { get; set; }

           

            //Added this in 25-04-2017
            public int admittedIntake1 { get; set; }
            public int admittedIntake2 { get; set; }
            public int admittedIntake3 { get; set; }
            public int admittedIntake4 { get; set; }
            public int admittedIntake5 { get; set; }

            public int SanctionIntake1 { get; set; }
            public int SanctionIntake2 { get; set; }
            public int SanctionIntake3 { get; set; }
            public int SanctionIntake4 { get; set; }
            public int SanctionIntake5 { get; set; }

            public int totalAdmittedIntake { get; set; }
            //

            public bool AffiliationStatus2 { get; set; }
            public bool AffiliationStatus3 { get; set; }
            public bool AffiliationStatus4 { get; set; }

            public int division1 { get; set; }
            public int division2 { get; set; }
            public int division3 { get; set; }




            public int totalIntake { get; set; }
            public decimal requiredFaculty { get; set; }
            public int phdFaculty { get; set; }
            public int SpecializationsphdFaculty { get; set; }
            public int SpecializationspgFaculty { get; set; }
            public int pgFaculty { get; set; }
            public int ugFaculty { get; set; }
            public int totalFaculty { get; set; }
            public int specializationWiseFaculty { get; set; }
            public int PharmacyspecializationWiseFaculty { get; set; }
            public int facultyWithoutPANAndAadhaar { get; set; }
            public int newlyAddedFaculty { get; set; }

            public bool isActive { get; set; }  
            public DateTime? nbaFrom { get; set; }
            public DateTime? nbaTo { get; set; }

            public bool? deficiency { get; set; }
            public bool? PHDdeficiency { get; set; }
            public bool? PHDBtechdeficiency { get; set; }
            public int shortage { get; set; }
            public IList<Lab> LabsListDefs { get; set; }
            public List<AnonymousLabclass> LabsListDefs1 { get; set; }
            public List<AnonymousMBAMACclass> MBAMACDetails { get; set; }
            public bool deficiencystatus { get; set; }
            public string RegistrationNumber { get; set; }
            //=====18-06-2015=====//
            public int FalseNameFaculty { get; set; }
            public int FalsePhotoFaculty { get; set; }
            public int FalsePANNumberFaculty { get; set; }
            public int FalseAadhaarNumberFaculty { get; set; }
            public int CertificatesIncompleteFaculty { get; set; }
            public int AbsentFaculty { get; set; }
            public int AvailableFaculty { get; set; }
            public int AvailablePHDFaculty { get; set; }

            public string PharmacyGroup1 { get; set; }


            public string PharmacySubGroup1 { get; set; }
            public int BPharmacySubGroup1Count { get; set; }
            public int BPharmacySubGroupRequired { get; set; }
            public string BPharmacySubGroupMet { get; set; }


            public string PharmacySpec1 { get; set; }
            public string PharmacySpec2 { get; set; }

            public IList<PharmacySpecilaizationList> PharmacySpecilaizationList { get; set; }

            //For collegeintake

            public List<CollegeIntakeExisting> CollegeIntakeExistings { get; set; }

            public string AffliationStatus { get; set; }
            public decimal BphramacyrequiredFaculty { get; set; }
            public decimal pharmadrequiredfaculty { get; set; }
            public decimal pharmadPBrequiredfaculty { get; set; }
            public int totalcollegefaculty { get; set; }
            public int SortId { get; set; }

            public IList<CollegeFacultyWithIntakeReport> FacultyWithIntakeReports { get; set; }
            public int BtechAdjustedFaculty { get; set; }
            public int specializationWiseFacultyPHDFaculty { get; set; }
            public IList<PhysicalLabMaster> PhysicalLabs { get; set; }
            
        }

        public class AnonymousMBAMACclass
        {
            public int? id { get; set; }
            public string CollegeCode { get; set; }
            public int CollegeId { get; set; }
            public HttpPostedFileBase MACSupportingDoc { get; set; }
            public int? ComputerDeficiencyCount { get; set; }
        }


        public class PharmacySpecilaizationList
        {
            public string PharmacyspecName { get; set; }
            public string Specialization { get; set; }
            public int PharmacyspecWiseCount { get; set; }
        }
        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpGet]
        public ActionResult CollegeRegisteredFaculty(int? collegeId)
        {
            List<jntuh_registered_faculty> faculty = new List<jntuh_registered_faculty>();
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();
            ViewBag.Colleges = colleges;

            if (collegeId != null)
            {
                ViewBag.collegeId = collegeId;
                string[] strRegnos = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).ToArray();
                faculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber) && (rf.collegeId == null || rf.collegeId == collegeId)).ToList();
            }
            return View(faculty);
        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpGet]
        public ActionResult AddEditCollegeFaculty(string regno, int collegeId)
        {
            CollegeFaculty faculty = new CollegeFaculty();
            string strRegistrationNumber = string.Empty;
            int userCollegeID = collegeId;
            faculty.collegeId = userCollegeID;
            if (regno != null)
            {
                strRegistrationNumber = UAAAS.Models.Utilities.DecryptString(regno, WebConfigurationManager.AppSettings["CryptoKey"]);
            }
            if (!string.IsNullOrEmpty(strRegistrationNumber))
            {
                int collegeFacultyId = db.jntuh_college_faculty_registered.Where(cf => cf.RegistrationNumber == strRegistrationNumber).Select(cf => cf.id).FirstOrDefault();
                var existingfaculty = db.jntuh_registered_faculty.Where(rf => rf.RegistrationNumber == strRegistrationNumber && (rf.collegeId == null || rf.collegeId == userCollegeID)).Select(rf => rf).FirstOrDefault();
                faculty.id = collegeFacultyId;
                faculty.facultyFirstName = existingfaculty.FirstName;
                faculty.facultyLastName = existingfaculty.LastName;
                faculty.facultySurname = existingfaculty.MiddleName;
                if (existingfaculty.DesignationId != null)
                {
                    faculty.facultyDesignationId = (int)existingfaculty.DesignationId;
                    faculty.facultyOtherDesignation = existingfaculty.OtherDesignation;
                    faculty.designation = db.jntuh_designation.Where(d => d.id == faculty.facultyDesignationId).Select(d => d.designation).FirstOrDefault();
                }
                else
                {
                    faculty.designation = String.Empty;
                }
                if (existingfaculty.DepartmentId != null)
                {
                    faculty.facultyDepartmentId = (int)existingfaculty.DepartmentId;
                    faculty.department = db.jntuh_department.Where(d => d.id == faculty.facultyDepartmentId).Select(d => d.departmentName).FirstOrDefault();
                }
                else
                {
                    faculty.department = String.Empty;
                }
            }

            ViewBag.PGSpecializations = db.jntuh_college_intake_existing
                                         .Where(e => e.collegeId == userCollegeID && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 4 && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 5)
                                         .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationName })
                                         .GroupBy(e => new { e.id, e.spec })
                                         .OrderBy(e => e.Key.spec)
                                         .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();

            return PartialView("_AddEditCollegeFaculty", faculty);
        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpPost]
        public ActionResult AddEditCollegeFaculty(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            string redirectAction = "CollegeRegisteredFaculty";

            if (faculty.facultyAchievements1 != null)
            {
                redirectAction = "Index";
            }

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = faculty.collegeId;

            ViewBag.PGSpecializations = db.jntuh_college_intake_existing
                                         .Where(e => e.collegeId == userCollegeID && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 4 && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 5)
                                         .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationName })
                                         .GroupBy(e => new { e.id, e.spec })
                                         .OrderBy(e => e.Key.spec)
                                         .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();

            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();

            if (isRegisteredFaculty == null)
            {
                TempData["Error"] = "Invalid Faculty Registration Number.";

                return RedirectToAction(redirectAction, "FacultyVerification", new { collegeId = userCollegeID });
            }

            if (isRegisteredFaculty.WorkingStatus == true)
            {
                if (userCollegeID != isRegisteredFaculty.collegeId && isRegisteredFaculty.collegeId != null)
                {
                    TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";

                    return RedirectToAction(redirectAction, "FacultyVerification", new { collegeId = userCollegeID });
                }
            }

            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();

            if (isExistingFaculty != null)
            {
                if (userCollegeID != isExistingFaculty.collegeId && isExistingFaculty.collegeId != null)
                {
                    TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
                }
                else if (userCollegeID == isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in the selected college";

                    if (faculty.facultyDepartmentId == 1)
                    {
                        jntuh_registered_faculty registeredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
                        registeredFaculty.isApproved = null;
                        registeredFaculty.DeactivatedBy = null;
                        registeredFaculty.DeactivatedOn = null;
                        registeredFaculty.DeactivationReason = null;
                        registeredFaculty.updatedBy = userID;
                        registeredFaculty.updatedOn = DateTime.Now;
                        db.Entry(registeredFaculty).State = EntityState.Modified;
                        db.SaveChanges();

                        TempData["Error"] = null;
                        TempData["Success"] = "Faculty is already working & deactivated in the selected college. Now the faculty re-activated successfully.";
                    }
                }

                return RedirectToAction(redirectAction, "FacultyVerification", new { collegeId = userCollegeID });
            }

            if (TempData["Error"] == null)
            {
                //jntuh_college_faculty oldFac = db.jntuh_college_faculty.Find(faculty.id);

                jntuh_college_faculty_registered eFaculty = new jntuh_college_faculty_registered();
                eFaculty.collegeId = userCollegeID;
                eFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                eFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                eFaculty.SpecializationId = faculty.SpecializationId;
                eFaculty.createdBy = userID;
                eFaculty.createdOn = DateTime.Now;

                //if (oldFac != null )
                //{
                //    eFaculty.existingFacultyId = faculty.id;
                //}
                //else
                //{
                //    eFaculty.existingFacultyId = null;
                //}

                db.jntuh_college_faculty_registered.Add(eFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty added Successfully.";
            }

            return RedirectToAction(redirectAction, "FacultyVerification", new { collegeId = userCollegeID });
        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        public ActionResult DeleteCollegeFaculty(string regno, int collegeId)
        {
            int userCollegeID = collegeId;
            string strRegistrationNumber = string.Empty;
            if (regno != null)
            {
                strRegistrationNumber = UAAAS.Models.Utilities.DecryptString(regno, WebConfigurationManager.AppSettings["CryptoKey"]);
            }
            var faculty = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId && cf.RegistrationNumber == strRegistrationNumber).Select(cf => cf).FirstOrDefault();
            if (faculty != null)
            {
                db.jntuh_college_faculty_registered.Remove(faculty);
                db.SaveChanges();
                TempData["Success"] = "deleted successfully";
            }
            return RedirectToAction("CollegeRegisteredFaculty", "FacultyVerification", new { collegeId = userCollegeID });

        }

        public ActionResult FileUpload(HttpPostedFileBase fileUploader, string collegeId)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                userCollegeID = Convert.ToInt32(collegeId);
            }
            //To Save File in jntuh_college_enclosures
            string fileName = string.Empty;
            int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            var college_enclosures = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e).FirstOrDefault();
            jntuh_college_enclosures jntuh_college_enclosures = new jntuh_college_enclosures();
            jntuh_college_enclosures.collegeID = userCollegeID;
            jntuh_college_enclosures.enclosureId = enclosureId;
            jntuh_college_enclosures.isActive = true;

            if (fileUploader != null)
            {
                string ext = Path.GetExtension(fileUploader.FileName);
                fileName = db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_APL_" + enclosureId + ext;
                fileUploader.SaveAs(string.Format("{0}/{1}", Server.MapPath("~/Content/Upload/CollegeEnclosures"), fileName));
                jntuh_college_enclosures.path = fileName;
            }
            else if (!string.IsNullOrEmpty(college_enclosures.path))
            {
                fileName = college_enclosures.path;
                jntuh_college_enclosures.path = fileName;
            }

            if (college_enclosures == null)
            {
                jntuh_college_enclosures.createdBy = userID;
                jntuh_college_enclosures.createdOn = DateTime.Now;
                db.jntuh_college_enclosures.Add(jntuh_college_enclosures);
                db.SaveChanges();
            }
            else
            {
                college_enclosures.path = fileName;
                college_enclosures.updatedBy = userID;
                college_enclosures.updatedOn = DateTime.Now;
                db.Entry(college_enclosures).State = EntityState.Modified;
                db.SaveChanges();
            }
            return RedirectToAction("CollegeIntake", new { collegeId = userCollegeID });

        }

        public ActionResult Deactivations()
        {
            List<jntuh_registered_faculty> filteredFaculty = db.jntuh_registered_faculty.Where(f => f.isApproved == false).ToList();

            DeactivationReport report = new DeactivationReport();
            report.Total = db.jntuh_college_faculty_registered.Count();
            report.Deactivations = filteredFaculty.Count();
            report.Name = filteredFaculty.Where(f => f.DeactivationReason.Contains("False Name")).Count();
            report.Photo = filteredFaculty.Where(f => f.DeactivationReason.Contains("False Photo")).Count();
            report.PAN = filteredFaculty.Where(f => f.DeactivationReason.Contains("False PAN Number")).Count();
            report.Aadhaar = filteredFaculty.Where(f => f.DeactivationReason.Contains("False Aadhaar Number")).Count();
            report.Certificates = filteredFaculty.Where(f => f.DeactivationReason.Contains("Certificate(s) Incomplete")).Count();
            report.Absent = filteredFaculty.Where(f => f.DeactivationReason.Contains("Absent")).Count();

            return View(report);
        }

        public class DeactivationReport
        {
            public int Total { get; set; }
            public int Deactivations { get; set; }
            public int Absent { get; set; }
            public int Name { get; set; }
            public int Photo { get; set; }
            public int PAN { get; set; }
            public int Aadhaar { get; set; }
            public int Certificates { get; set; }
            public int Multiple { get; set; }
        }

        public class PharmacyAppeal
        {
            public int Sno { get; set; }
            public string CollegeCode { get; set; }
            public string Degree { get; set; }
            public string Department { get; set; }
            public string Specialization { get; set; }
            public int? TotalIntake { get; set; }
            public int? ProposedIntake { get; set; }
            public int? NoOfFacultyRequired { get; set; }
            public int? NoOfAvilableFaculty { get; set; }
            public string PharmacySpecialization { get; set; }
            public int? SpecializationwiseRequiredFaculty { get; set; }
            public int? SpecializationwiseAvilableFaculty { get; set; }
            public string Deficiency { get; set; }
            public int? PHdFaculty { get; set; }
            public int? Collegeid { get; set; }
            public int? DepartmentId { get; set; }
            public int? SpecializationId { get; set; }
            public DateTime? createdon { get; set; }
            public bool IsActive { get; set; }

        }




        //[Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpGet]
        public ActionResult PharmacyFacultyWithIntake(int? collegeId, string type)
        {
            int[] PharmacydegreeIds = db.jntuh_degree.Where(d => d.degree == "B.Pharmacy" || d.degree == "M.Pharmacy").Select(d => d.id).ToArray();

            var colleges = (from c in db.jntuh_college
                            join cd in db.jntuh_college_degree on c.id equals cd.collegeId
                            join ce in db.jntuh_college_edit_status on c.id equals ce.collegeId
                            where (c.isActive == true && cd.isActive == true && ce.IsCollegeEditable == false && PharmacydegreeIds.Contains(cd.degreeId))
                            select new
                            {
                                collegeId = c.id,
                                collegeName = c.collegeCode + "-" + c.collegeName
                            }).OrderBy(c => c.collegeName).Distinct().ToList();


            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                var jntuh_specialization = db.jntuh_specialization.ToList();

                int[] PharmacySpecializatioIDs = jntuh_specialization.Where(s => PharmacydegreeIds.Contains(s.jntuh_department.jntuh_degree.id)).Select(s => s.id).ToArray();

                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = colleges.Select(c => c.collegeId).Take(3).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => PharmacySpecializatioIDs.Contains(i.specializationId) && collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //college Reg nos
                int pharmacyDeptId = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();

                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => (cf.collegeId == collegeId)).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                //education categoryIds UG,PG,PHD...........



                var registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber)
                                                                    && (rf.collegeId == null || rf.collegeId == collegeId)).ToList();

                //if (collegeId==0)
                //{
                //jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => (cf.collegeId == collegeId || collegeIDs.Contains(cf.collegeId))).ToList();
                //strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();
                //    registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber)
                //                                                    && (rf.collegeId == null || collegeIDs.Contains(rf.collegeId))).ToList();
                //}

                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech" || item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "M.Pharmacy" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                    }

                    intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;


                    if (item.Degree == "B.Pharmacy" || item.Degree == "M.Pharmacy")
                    {
                        intakedetails.Department = "Pharmacy";
                    }



                    intakedetails.AvailableFaculty = registeredFaculty.Count();
                    intakedetails.FalseNameFaculty = registeredFaculty.Where(r => r.isApproved == false && r.DeactivationReason == "False Name").Count();
                    intakedetails.FalsePhotoFaculty = registeredFaculty.Where(r => r.isApproved == false && r.DeactivationReason == "False Photo").Count();
                    intakedetails.FalsePANNumberFaculty = registeredFaculty.Where(r => r.isApproved == false && r.DeactivationReason == "False PAN Number").Count();
                    intakedetails.FalseAadhaarNumberFaculty = registeredFaculty.Where(r => r.isApproved == false && r.DeactivationReason == "False Aadhaar Number").Count();
                    intakedetails.CertificatesIncompleteFaculty = registeredFaculty.Where(r => r.isApproved == false && r.DeactivationReason == "Certificate(s) Incomplete").Count();
                    intakedetails.AbsentFaculty = registeredFaculty.Where(r => r.isApproved == false && r.DeactivationReason == "Absent").Count();
                    //=============//

                    intakedetailsList.Add(intakedetails);
                }

                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                if (type == "Excel")
                {
                    string strcollegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    Response.ClearContent();
                    Response.Buffer = true;
                    Response.AddHeader("content-disposition", "attachment; filename=" + strcollegeCode + "-Faculty.xls");
                    Response.ContentType = "application/vnd.ms-excel";
                    return PartialView("_PharmacyFacultyWithIntake", intakedetailsList.Where(c => c.shiftId == 1).ToList());
                }
            }
            return View(intakedetailsList.Where(c => c.shiftId == 1).ToList());
        }
        public class Colleges
        {
            public int collegeId { get; set; }
            public string collegeName { get; set; }
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult FacultySecondStepVerification(int? collegeid)
        {
            //List<Colleges> colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new Colleges
            //{
            //    collegeId = c.id,
            //    collegeName = c.collegeCode + "-" + c.collegeName
            //}).OrderBy(c => c.collegeName).ToList();
            // List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
            // colleges.Add(new Colleges() { collegeId = 0, collegeName = "New Faculty" });
            // int?[] colleges1 = db.jntuh_registered_faculty_log.Where(C => C.collegeId != null && C.FacultyApprovedStatus != 1).AsNoTracking().Select(i => i.collegeId).ToArray();
            //  ViewBag.Colleges = colleges.Where(c => colleges1.Contains(c.collegeId)).OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();


            
            //  string[] FacultyRegNumbers = db.jntuh_college_faculty_registered.Where(C => C.collegeId == collegeid).Select(C => C.RegistrationNumber).ToArray();
            //if (collegeid != null && collegeid != 0)
            //jntuh_registered_faculty_log = db.jntuh_registered_faculty_log.Where(c => FacultyRegNumbers.Contains(c.RegistrationNumber) && c.isActive == true && c.collegeId == collegeid && (c.FacultyApprovedStatus == 0 || c.FacultyApprovedStatus == 3)).ToList();
            //  string[] SCMRegNo = db.jntuh_auditors_dataentry.AsNoTracking().Select(A => A.RegistrationNo).ToArray();
            //   int Count = jntuh_registered_faculty_log.Where(EL => SCMRegNo.Contains(EL.RegistrationNumber)).Count();

            List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();
            List<jntuh_registered_faculty_log> jntuh_registered_faculty_log = new List<jntuh_registered_faculty_log>();

            jntuh_registered_faculty_log = db.jntuh_registered_faculty_log.Where(e => e.FacultyApprovedStatus == 3).Select(e => e).ToList();
            var sociaty = db.jntuh_college_establishment.Select(S => S).ToList();

            #region regi stration numbers
          //  string[] PhdRegistrationNumbers = new string[] { "8420-170213-153454", "2818-170127-111644", "0207-170105-125818", "5702-160302-113954", "3963-170128-094643", "6881-170125-113613", "0579-161230-103026", "4276-161219-145330", "9284-160314-155640", "8158-160529-181529", "3914-170207-182950", "1909-161223-111715", "7379-170125-103830", "1280-170203-113618", "0251-170131-002621", "5778-161126-121409", "6388-170125-100033", "8720-170130-092556", "0835-170111-114348", "4370-170125-102826", "5841-170125-113934", "6212-170127-061940", "8566-170131-183003", "7206-170106-150426", "9376-170131-185206", "2546-170102-105208", "3262-161123-125837", "8243-170101-081848", "4430-170125-114014", "20150401-191342", "11150407-161313", "6610-170208-180728", "4911-170111-130756", "9241-170112-120326", "9784-170112-102200", "50150401-124118", "9090-170201-125840", "0541-170125-102655", "5987-170102-121909", "7656-150422-114058", "9399-150424-170327", "8879-170122-115145", "1103-170122-120920", "3448-170122-122055", "7968-170117-141626", "2643-170111-092918", "6610-170120-141411", "5419-150413-150935", "4386-170119-124102", "8523-170131-211020", "3844-170208-163853", "8115-170201-002142", "4002-170201-112347", "0380-170201-120255", "0216-170129-100516", "7970-161221-152025", "5376-160222-145101", "7694-170125-115327", "3508-160303-104659", "1652-170129-004415", "3441-170129-022840", "2396-170127-114622", "5722-170201-125221", "0300-170131-220955", "9179-160529-152420", "2688-170207-113055", "2966-170127-095457", "9938-170131-185746", "8160-170128-104351", "1082-170127-112255", "5596-170112-074158", "1505-170125-113609", "5118-170112-151027", "9109-170122-002647", "9577-170128-075444", "4105-170131-184508", "9497-170118-155021", "7076-150420-135707", "0069-170131-210605", "1387-170104-104522", "8963-170109-101354", "8117-170201-115446", "9344-170120-133238", "3372-170103-133524", "6089-170118-112911", "9829-170103-170111", "6884-170104-134659", "1866-170201-152640", "4930-170131-204413", "4342-170111-112356", "7411-170208-140010", "0035-170208-161921", "0340-170131-205704", "7209-170125-112606", "3282-170125-121805", "7540-170125-101523", "9061-170129-101816", "2886-170131-181458", "7893-170206-154526", "4480-170131-181742", "4735-170131-201511", "9500-170112-102942", "7594-170208-104638", "7007-170117-100847", "2260-170131-234101", "6810-170125-102927", "8443-170125-101117", "0781-170125-103317", "0410-170210-151656", "7554-170211-155535", "0316-161209-115026", "35150405-184740", "3450-170126-100016", "6674-170103-170641", "8250-170106-123217", "9392-170207-125945", "3775-161208-131148", "6331-170127-105644", "2842-170131-185650", "4094-170102-154201", "5004-161231-131337", "26150401-141159", "9565-170201-113020", "4745-150408-145624", "4144-150506-100726", "3826-170129-115321", "2302-170129-010523", "7971-170123-134604", "1794-170109-110515", "89150402-143233", "1843-150417-154657", "6579-170109-113059", "6313-170103-100100", "08150402-154456", "27150402-231225", "9924-170201-000504", "1976-170127-112914", "1083-150417-152920", "3364-170125-102149", "0987-170125-114032", "9882-160804-204754", "6817-170125-115409", "0674-170131-211928", "7484-170201-122859", "5342-170119-143209", "4491-170108-170308", "2926-170207-182118", "6564-161229-101233", "4519-161231-103127", "4125-150623-134743", "6661-170207-110100", "9591-170107-111224", "4146-170126-083334", "0271-160529-123746", "1085-170130-063520", "9528-170131-190054", "7864-170201-111853", "3530-170109-123245", "3010-170103-144028", "2780-170104-222955", "8923-170127-100410", "3977-170127-105418", "9304-170128-112038", "1948-170127-101218", "8477-170201-142831", "1104-170118-112655", "6959-170123-122616", "5386-170117-162708", "0468-170201-162455", "6376-170110-141829", "4900-170211-122013", "38150406-222536", "0247-160317-134528", "5579-150408-142902", "5967-170118-145527", "1383-170111-133015", "4976-170116-160331", "4510-170122-161401", "6887-170112-104316", "5968-170127-114442", "0993-170125-114120", "1695-160524-153728", "6914-170105-125654", "6142-170203-173210", "1423-150425-160847", "4668-170207-160851", "7364-170109-115859", "6639-161230-120332", "2350-150407-222145", "2580-150427-152219", "2137-161022-141331", "4077-170208-163803", "7439-170203-131240", "5726-170209-140457", "4285-170125-121801", "4608-170211-111151", "9648-170211-141507", "4971-170211-120929", "5625-170211-111209", "6972-161216-111943", "6581-170131-233235", "9190-170125-103105", "1972-170123-132027", "3363-170131-210730", "4624-170131-223056", "5080-170213-141813", "5206-170112-122234", "5566-170125-120206", "0036-170126-085129", "9796-170125-104429", "4332-170125-103144", "7409-150418-121706", "1743-161104-160604", "3794-161210-155439", "0173-170125-103107", "2855-170202-122728", "7319-170205-032051", "85150403-230538", "2843-170106-153004", "5621-170203-130801", "7668-161122-143844", "4353-161122-144743", "6128-170112-142512", "1507-161219-120826", "9096-161128-160302", "3567-170128-135917", "0704-170204-134622", "6060-170127-101452", "0100-150410-014047", "0936-170125-102209", "9995-170123-141601", "3536-170126-091928", "0955-170123-115108", "6876-160529-013157", "0263-150408-142823", "2379-160524-212841", "1904-170201-003729", "7474-170127-002056", "3621-170127-001135", "0574-170207-223827", "6334-170207-233057", "4310-170126-130653", "9974-170127-105029", "8956-170106-153534", "0187-170208-150416", "7315-170125-102834", "9805-170125-121043", "6174-170201-114926", "0682-170125-114035", "8733-170120-130712", "2194-170131-183325", "8522-170109-104111", "1062-170123-140150", "1860-170129-035111", "3133-160517-183732", "9152-170209-155819", "4445-161230-094744", "9710-160525-143404", "4822-170208-123932", "3630-170117-094023", "5668-170211-084945", "1931-170212-104722", "8543-160529-202438", "1746-170211-082448", "6176-170111-102512", "4369-170213-144442", "4145-170131-190001", "8922-170208-171133", "3787-170111-105938", "7566-170105-161525", "7174-170123-132929", "7736-161227-154030", "9492-170103-120949", "5958-170103-144509", "1371-160527-205154", "7600-170106-103605", "7487-170125-103831", "8742-170128-125514", "0696-170211-122556", "4834-170213-151052", "2127-170125-111204", "2122-170102-161455", "7443-170129-002639", "5601-170111-112557", "7660-170207-161036", "6856-170207-154921", "3432-170130-112759" };
            #endregion

            string[] PhdRegistrationNumbers = jntuh_registered_faculty_log.Select(e => e.RegistrationNumber).ToArray();
           
           //int[] LogPhdEducationIds = db.jntuh_registered_faculty_education_log.Where(E => E.educationId == 5 || E.educationId == 6 || E.educationId == 7).AsNoTracking().Select(E => E.facultyId).ToArray();
           //int[] PhdEducationIds = db.jntuh_registered_faculty_education.Where(E => E.educationId == 5 || E.educationId == 6 || E.educationId == 7).AsNoTracking().Select(E => E.facultyId).ToArray();
           //int[] SubmittedColleges = db.jntuh_college_edit_status.Where(E => E.IsCollegeEditable == false).AsNoTracking().Select(E => E.collegeId).ToArray();


           //var PhDFacultys = db.jntuh_registered_faculty_log.Where(F => LogPhdEducationIds.Contains(F.id)).AsNoTracking().Select(F => F).ToList();
           List<jntuh_college_faculty_registered> jntuh_college_faculty_registereds = db.jntuh_college_faculty_registered.Where(CF => PhdRegistrationNumbers.Contains(CF.RegistrationNumber.Trim())).AsNoTracking().Select(CF => CF).ToList();
           //string[] SubmittedCollegesFaculty = jntuh_college_faculty_registereds.Where(CF => SubmittedColleges.Contains(CF.collegeId)).Select(CF => CF.RegistrationNumber).ToArray();

          // var jntuh_registered_facultys = db.jntuh_registered_faculty.Where(F => PhdEducationIds.Contains(F.id)).AsNoTracking().Select(F => F).ToList();

           // string[] MainPhdRegNos = jntuh_registered_facultys.Where(F => SubmittedCollegesFaculty.Contains(F.RegistrationNumber)).Select(F => F.RegistrationNumber).ToArray();

           // PhDFacultys = PhDFacultys.Where(F => SubmittedCollegesFaculty.Contains(F.RegistrationNumber)).Select(F => F).ToList();

           // jntuh_registered_faculty_log = PhDFacultys.Where(F => !MainPhdRegNos.Contains(F.RegistrationNumber)).ToList();
        
            var jntuh_specializations = db.jntuh_specialization.Select(S => new { S.id, S.specializationName, S.specializationDescription }).ToList();
            var DegreeData = (from Deg in db.jntuh_degree
                              join Dept in db.jntuh_department on Deg.id equals Dept.degreeId
                              select new { DeptId = Dept.id, DeptName = Deg.degree + "-" + Dept.departmentName }).ToList();
           


            var jntuh_college = db.jntuh_college.Where(e => e.isActive == true).Select(e => e).ToList();


          
            var data = jntuh_registered_faculty_log.Select(a => new FacultyRegistration
            {

                id = db.jntuh_registered_faculty.Where(f => f.UserId == a.UserId).Select(f => f.id).FirstOrDefault(),
                CollegeName = jntuh_college_faculty_registereds.Where(e => e.RegistrationNumber.Trim() == a.RegistrationNumber).Select(e => e.collegeId).FirstOrDefault() != 0 ? jntuh_college.Where(e => e.id == jntuh_college_faculty_registereds.Where(f => f.RegistrationNumber.Trim() == a.RegistrationNumber).Select(f => f.collegeId).FirstOrDefault()).Select(e => e.collegeName).FirstOrDefault() : "",
                SpecializationName = jntuh_college_faculty_registereds.Where(e => e.RegistrationNumber.Trim() == a.RegistrationNumber).Select(e => e.collegeId).FirstOrDefault() != 0 ? sociaty.Where(e => e.collegeId == jntuh_college_faculty_registereds.Where(f => f.RegistrationNumber.Trim() == a.RegistrationNumber).Select(f => f.collegeId).FirstOrDefault()).Select(e => e.societyName).FirstOrDefault() : "",
                Type = a.type,
                RegistrationNumber = a.RegistrationNumber,
                UniqueID = a.UniqueID,
                FirstName = a.FirstName,
                MiddleName = a.MiddleName,
                LastName = a.LastName,
                GenderId = a.GenderId,
                Email = a.Email,
                facultyPhoto = a.Photo,
                Mobile = a.Mobile,
                PANNumber = a.PANNumber,
                AadhaarNumber = a.AadhaarNumber,
                isActive = a.isActive,
                isApproved = a.isApproved,
               // SamePANNumberCount = SCMRegNo.Contains(a.RegistrationNumber) ? 1 : 0,
                SameAadhaarNumberCount = 0,
                FIsApproved = a.FacultyApprovedStatus,
                //SpecializationName=jntuh_specializations.Where(S=>S.id==a.PGSpecialization>0?PGSpecialization:0).Select(S=>S.specializationName).FirstOrDefault(),
                PGSpecializationName = a.PGSpecialization != null ? jntuh_specializations.Where(e => e.id == a.PGSpecialization).Select(e => e.specializationName).FirstOrDefault() : "",
                DepartmentName = jntuh_college_faculty_registereds.Where(e => e.RegistrationNumber.Trim() == a.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault() != null ? DegreeData.Where(e => e.DeptId == jntuh_college_faculty_registereds.Where(f => f.RegistrationNumber.Trim() == a.RegistrationNumber).Select(f => f.DepartmentId).FirstOrDefault()).Select(e => e.DeptName).FirstOrDefault() : "",
                // SamePANNumberCount = jntuh_registered_faculty.Where(f => f.PANNumber == a.PANNumber).ToList().Count(),
                // SameAadhaarNumberCount = jntuh_registered_faculty.Where(f => f.AadhaarNumber == a.AadhaarNumber).ToList().Count()
            });
            teachingFaculty.AddRange(data);
            return View(teachingFaculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult PHDSecondStepVerification(int? collegeid)
        {

            var SubmissionColleges = db.jntuh_college_edit_status.Where(e => e.IsCollegeEditable == false).Select(e => e.collegeId).ToArray();
            List<Colleges> colleges = db.jntuh_college.Where(c => c.isActive == true && SubmissionColleges.Contains(c.id)).Select(c => new Colleges
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            ViewBag.Colleges = colleges;
            //  ViewBag.Colleges = db.jntuh_college.Join(db.jntuh_college_randamcodes, c => c.id, r => r.CollegeId, (c, r) => new { c = c, r = r }).Where(e => e.c.isActive == true && SubmissionColleges.Contains(e.c.id)).Select(e => new { rid = e.r.Id, RandamCode = e.r.RandamCode }).OrderBy(e => e.RandamCode).ToList();
            List<FacultyRegistration> data = new List<FacultyRegistration>();



            if (collegeid != null)
            {
                // int collegeid = db.jntuh_college_randamcodes.Find(rid).CollegeId;


                var regFaculty = db.jntuh_registered_faculty.AsNoTracking().Where(e => e.isActive != false && e.Blacklistfaculy != true).ToList();
                var facultyLogregnos = db.jntuh_college_faculty_registered.Where(i => i.collegeId == collegeid).Select(i => i.RegistrationNumber).ToArray();
                List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
                jntuh_registered_faculty = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber)).ToList(); //&& (rf.collegeId == null || rf.collegeId == collegeid)


                var regIds = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber)).Select(i => i.id).ToArray();
                var regEducationids = db.jntuh_registered_faculty_education.AsNoTracking().Where(i => regIds.Contains(i.facultyId) && i.educationId == 6).Select(i => i.facultyId).ToArray();
                var jntuh_college_faculty_registered_faculty = db.jntuh_college_faculty_registered.Where(cf => facultyLogregnos.Contains(cf.RegistrationNumber)).ToList();

                var jntuh_specialization = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();

                var DegreeData = (from Deg in db.jntuh_degree
                                  join Dept in db.jntuh_department on Deg.id equals Dept.degreeId
                                  select new { DeptId = Dept.id, DeptName = Deg.degree + "-" + Dept.departmentName }).ToList();


                ViewBag.Society = db.jntuh_college_establishment.Where(e => e.collegeId == collegeid).Select(e => e.societyName).FirstOrDefault();
                var faculty = regFaculty.Where(i => regEducationids.Contains(i.id)).ToList();

                data.AddRange(faculty.Select(d => new FacultyRegistration()
                {
                    id = d.id,
                    CollegeId = collegeid,
                    Type = d.type,
                    RegistrationNumber = d.RegistrationNumber,
                    UniqueID = d.UniqueID,
                    FirstName = d.FirstName,
                    MiddleName = d.MiddleName,
                    LastName = d.LastName,
                    GenderId = d.GenderId,
                    Email = d.Email,
                    facultyPhoto = d.Photo,
                    Mobile = d.Mobile,
                    DepartmentId = jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault(),
                    DepartmentName = jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault() != null ? DegreeData.Where(e => e.DeptId == jntuh_college_faculty_registered_faculty.Where(f => f.RegistrationNumber.Trim() == d.RegistrationNumber).Select(f => f.DepartmentId).FirstOrDefault()).Select(e => e.DeptName).FirstOrDefault() : "",
                    PANNumber = d.PANNumber,
                    AadhaarNumber = d.AadhaarNumber,
                    NORelevantUG = d.NoRelevantUG,
                    NORelevantPG = d.NoRelevantPG,
                    NORelevantPHD = d.NORelevantPHD,
                    NOTQualifiedAsPerAICTE = d.NotQualifiedAsperAICTE ?? false,
                    XeroxcopyofcertificatesFlag = d.Xeroxcopyofcertificates ?? false,
                    NotIdentityFiedForAnyProgramFlag = d.NotIdentityfiedForanyProgram ?? false,
                    //MultipleReginSamecoll = d.MultipleRegInSameCollege ?? false,
                    //NoForm16Verification = d.Noform16Verification ?? false,
                    NoSCM17Flag = d.NoSCM ?? false,
                    //PhotocopyofPAN = d.PhotoCopyofPAN ?? false,
                    InvalidPANNo = d.InvalidPANNumber ?? false,
                    Absent = d.Absent ?? false,
                    InCompleteCeritificates = d.IncompleteCertificates != null ? (bool)d.IncompleteCertificates : false,
                    PGSpecializationName = d.PGSpecialization != null ? jntuh_specialization.Where(e => e.id == d.PGSpecialization).Select(e => e.specializationName).FirstOrDefault() : "",
                    isActive = d.isActive,
                    isApproved = d.isApproved,
                    Basstatus = d.InvalidAadhaar,
                    BasstatusOld =d.BAS,
                    FacultyVerificationStatus = d.FacultyVerificationStatus,
                    SamePANNumberCount = d.PANNumber != null ? jntuh_registered_faculty.Where(i => i.PANNumber == d.PANNumber && i.collegeId == collegeid).ToList().Count : 1,
                    SameAadhaarNumberCount = d.AadhaarNumber != null ? jntuh_registered_faculty.Where(f => f.AadhaarNumber == d.AadhaarNumber).ToList().Count : 1,
                    PHDUndertakingDocumentView = d.PHDUndertakingDocument
                }));


                //data = (from D in db.jntuh_registered_faculty.AsNoTracking()
                //        join F in db.jntuh_registered_faculty_education.AsNoTracking() on D.id equals F.facultyId
                //        where (F.educationId == 6 && D.collegeId == collegeid && faculty_logregnos.Contains(D.RegistrationNumber))
                //        select new FacultyRegistration
                //        {
                //            id = D.id,
                //            Type = D.type,
                //            RegistrationNumber = D.RegistrationNumber,
                //            UniqueID = D.UniqueID,
                //            FirstName = D.FirstName,
                //            MiddleName = D.MiddleName,
                //            LastName = D.LastName,
                //            GenderId = D.GenderId,
                //            Email = D.Email,
                //            facultyPhoto = D.Photo,
                //            Mobile = D.Mobile,
                //            PANNumber = D.PANNumber,
                //            AadhaarNumber = D.AadhaarNumber,
                //            isActive = D.isActive,
                //            isApproved = D.isApproved,
                //           // SamePANNumberCount = db.jntuh_registered_faculty.Where(i=>i.PANNumber == D.PANNumber && i.collegeId == collegeid).ToList().Count,
                //            //SameAadhaarNumberCount = D.AadhaarNumber!=null ? jntuh_registered_faculty.Where(f => f.AadhaarNumber == D.AadhaarNumber).ToList().Count:0,
                //        }).ToList();
            }
            else
            {
                //data = new List<FacultyRegistration>();

                var regFaculty = db.jntuh_registered_faculty.AsNoTracking().Where(e => e.isActive != false && e.Blacklistfaculy != true).ToList();
                var facultyLogregnos = db.jntuh_college_faculty_registered_copy.Where(c => c.collegeId == 1000).Select(i => i.RegistrationNumber).ToArray();
                // var facultyLogregnos = db.jntuh_college_faculty_registered.Where(i => i.collegeId == collegeid).Select(i => i.RegistrationNumber).ToArray();
                List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
                jntuh_registered_faculty = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber)).ToList(); //&& (rf.collegeId == null || rf.collegeId == collegeid)


                var regIds = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber)).Select(i => i.id).ToArray();
                var regEducationids = db.jntuh_registered_faculty_education.AsNoTracking().Where(i => regIds.Contains(i.facultyId) && i.educationId == 6).Select(i => i.facultyId).ToArray();
                var jntuh_college_faculty_registered_faculty = db.jntuh_college_faculty_registered.Where(cf => facultyLogregnos.Contains(cf.RegistrationNumber)).ToList();

                var jntuh_specialization = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();

                var DegreeData = (from Deg in db.jntuh_degree
                                  join Dept in db.jntuh_department on Deg.id equals Dept.degreeId
                                  select new { DeptId = Dept.id, DeptName = Deg.degree + "-" + Dept.departmentName }).ToList();


                var DegreeData1 = (from Deg in db.jntuh_degree
                                   join Dept in db.jntuh_department on Deg.id equals Dept.degreeId
                                   join sp in db.jntuh_specialization on Dept.id equals sp.departmentId
                                   select new { SptId = sp.id, DeptName = Deg.degree + "-" + sp.specializationName }).ToList();

                var CollegeIds = db.jntuh_college_faculty_registered.Where(c => facultyLogregnos.Contains(c.RegistrationNumber)).ToList();
                // ViewBag.Society = db.jntuh_college_establishment.Where(e => e.collegeId == collegeid).Select(e => e.societyName).FirstOrDefault();
                var faculty = regFaculty.Where(i => regEducationids.Contains(i.id)).ToList();

                data.AddRange(faculty.Select(d => new FacultyRegistration()
                {
                    id = d.id,
                    CollegeId = CollegeIds.Where(a => a.RegistrationNumber == d.RegistrationNumber).Select(a => a.collegeId).FirstOrDefault(),
                    Type = d.type,
                    RegistrationNumber = d.RegistrationNumber,
                    UniqueID = d.UniqueID,
                    FirstName = d.FirstName,
                    MiddleName = d.MiddleName,
                    LastName = d.LastName,
                    GenderId = d.GenderId,
                    Email = d.Email,
                    facultyPhoto = d.Photo,
                    Mobile = d.Mobile,
                    DepartmentId = jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault(),
                    DepartmentName = jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.SpecializationId).FirstOrDefault() != null ? DegreeData1.Where(e => e.SptId == jntuh_college_faculty_registered_faculty.Where(f => f.RegistrationNumber.Trim() == d.RegistrationNumber).Select(f => f.SpecializationId).FirstOrDefault()).Select(e => e.DeptName).FirstOrDefault() : jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault() != null ? DegreeData.Where(e => e.DeptId == jntuh_college_faculty_registered_faculty.Where(f => f.RegistrationNumber.Trim() == d.RegistrationNumber).Select(f => f.DepartmentId).FirstOrDefault()).Select(e => e.DeptName).FirstOrDefault() : "",
                    PANNumber = d.PANNumber,
                    AadhaarNumber = d.AadhaarNumber,
                    NORelevantUG = d.NoRelevantUG,
                    NORelevantPG = d.NoRelevantPG,
                    NORelevantPHD = d.NORelevantPHD,
                    NOTQualifiedAsPerAICTE = d.NotQualifiedAsperAICTE ?? false,
                    XeroxcopyofcertificatesFlag = d.Xeroxcopyofcertificates ?? false,
                    NotIdentityFiedForAnyProgramFlag = d.NotIdentityfiedForanyProgram ?? false,
                    //MultipleReginSamecoll = d.MultipleRegInSameCollege ?? false,
                    //NoForm16Verification = d.Noform16Verification ?? false,
                    NoSCM17Flag = d.NoSCM ?? false,
                    //PhotocopyofPAN = d.PhotoCopyofPAN ?? false,
                    InvalidPANNo = d.InvalidPANNumber ?? false,
                    Absent = d.Absent ?? false,
                    InCompleteCeritificates = d.IncompleteCertificates != null ? (bool)d.IncompleteCertificates : false,
                    PGSpecializationName = d.PGSpecialization != null ? jntuh_specialization.Where(e => e.id == d.PGSpecialization).Select(e => e.specializationName).FirstOrDefault() : "",
                    isActive = d.isActive,
                    isApproved = d.isApproved,
                    //Basstatus = d.BASStatus,
                    //BasstatusOld = d.BASStatusOld,
                    FacultyVerificationStatus = d.FacultyVerificationStatus,
                    SamePANNumberCount = d.PANNumber != null ? jntuh_registered_faculty.Where(i => i.PANNumber == d.PANNumber && i.collegeId == collegeid).ToList().Count : 1,
                    SameAadhaarNumberCount = d.AadhaarNumber != null ? jntuh_registered_faculty.Where(f => f.AadhaarNumber == d.AadhaarNumber).ToList().Count : 1,
                    PHDUndertakingDocumentView = d.PHDUndertakingDocument,
                    PhdUndertakingDocumentText=d.Others1!=null?d.Others1:string.Empty,
                    phdreson=d.PhdDeskReason,
                    OriginalsVerifiedPHD =d.OriginalsVerifiedPHD==true?true:false,
                    OriginalsVerifiedUG = d.OriginalsVerifiedUG == true ? true : false,
                    BlacklistFaculty = d.Blacklistfaculy==true?true:false
                }));
            }
            return View(data);
        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        public ActionResult GetFacultyBASDetailsView(string RegistarationNumber)
        {
            int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeID = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == RegistarationNumber).Select(e => e.collegeId).FirstOrDefault();
            if (RegistarationNumber != null)
            {
                var FacultyBASData = db.jntuh_college_basreport.Where(e => e.RegistrationNumber == RegistarationNumber).Select(e => e).ToList();
                if (FacultyBASData.Count() != 0 && FacultyBASData != null)
                {
                    GetFacultyBASDetails Faculty = new GetFacultyBASDetails();
                    Faculty.RegistarationNumber = RegistarationNumber;
                    string date = FacultyBASData.Select(e => e.joiningDate).FirstOrDefault().ToString();

                    Faculty.BasJoiningDate = date == null ? null : Convert.ToDateTime(date).ToString("dd-MM-yyyy");
                    Faculty.TotalWorkingDays = FacultyBASData.Select(e => e.totalworkingDays).Sum();
                    Faculty.TotalPresentDays = FacultyBASData.Select(e => e.NoofPresentDays).Sum();

                    foreach (var item in FacultyBASData)
                    {
                        if (item.month == "July")
                        {
                            Faculty.JulyTotalDays = item.totalworkingDays;
                            Faculty.JulyPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "August")
                        {
                            Faculty.AugustTotalDays = item.totalworkingDays;
                            Faculty.AugustPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "September")
                        {
                            Faculty.SeptemberTotalDays = item.totalworkingDays;
                            Faculty.SeptemberPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "October")
                        {
                            Faculty.OctoberTotalDays = item.totalworkingDays;
                            Faculty.OctoberPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "November")
                        {
                            Faculty.NovemberTotalDays = item.totalworkingDays;
                            Faculty.NovemberPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "December")
                        {
                            Faculty.DecemberTotalDays = item.totalworkingDays;
                            Faculty.DecemberPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "January")
                        {
                            Faculty.JanuaryTotalDays = item.totalworkingDays;
                            Faculty.JanuaryPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "February")
                        {
                            Faculty.FebruaryTotalDays = item.totalworkingDays;
                            Faculty.FebruaryPresentDays = item.NoofPresentDays;
                        }

                        else if (item.month == "March")
                        {
                            Faculty.MarchTotalDays = item.totalworkingDays;
                            Faculty.MarchPresentDays = item.NoofPresentDays;
                        }

                    }


                    return PartialView("~/Views/FacultyVerificationDENew/_GetFacultyBASDetails.cshtml", Faculty);
                }
                else
                {
                    return RedirectToAction("PHDSecondStepVerification", new { collegeId = collegeID });
                }
            }
            else
            {
                return RedirectToAction("PHDSecondStepVerification", new { collegeId = collegeID });
            }
            // return View();
        }

        public class GetFacultyBASDetails
        {
            public string RegistarationNumber { get; set; }
            public string BasJoiningDate { get; set; }
            public int? JulyTotalDays { get; set; }
            public int? AugustTotalDays { get; set; }
            public int? SeptemberTotalDays { get; set; }
            public int? OctoberTotalDays { get; set; }
            public int? NovemberTotalDays { get; set; }
            public int? DecemberTotalDays { get; set; }
            public int? JanuaryTotalDays { get; set; }
            public int? FebruaryTotalDays { get; set; }
            public int? MarchTotalDays { get; set; }
            public int? JulyPresentDays { get; set; }
            public int? AugustPresentDays { get; set; }
            public int? SeptemberPresentDays { get; set; }
            public int? OctoberPresentDays { get; set; }
            public int? NovemberPresentDays { get; set; }
            public int? DecemberPresentDays { get; set; }
            public int? JanuaryPresentDays { get; set; }
            public int? FebruaryPresentDays { get; set; }
            public int? MarchPresentDays { get; set; }
            public int? TotalWorkingDays { get; set; }
            public int? TotalPresentDays { get; set; }
        }


        public ActionResult PHDFacultyInformation(string fid, int collegeId)
        {
            ViewBag.EId = fid;
            //TempData["SUCCESS"] = "";

            FacultyRegistration vFaculty = new FacultyRegistration();
            if (TempData["FACULTY"] != null)
            {
                vFaculty = (FacultyRegistration)TempData["FACULTY"];
            }

            int fID = 0;
            if (!string.IsNullOrEmpty(User.Identity.Name))
            {
                int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
                int facultyId = db.jntuh_registered_faculty.Where(f => f.UserId == userID).Select(f => f.id).FirstOrDefault();

                if (fid != null)
                {
                    fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                }

                //if (facultyId != fID && !Roles.IsUserInRole("Admin"))
                //{
                //    fID = facultyId;
                //}

            }
            else if (fid != null)
            {
                string fUser = ""; string fPwd = "";

                if (TempData["FUserName"] != null)
                {
                    fUser = TempData["FUserName"].ToString();
                }

                if (TempData["FPassword"] != null)
                {
                    fPwd = TempData["FPassword"].ToString();
                }

                if (Membership.ValidateUser(fUser.TrimEnd(' '), fPwd.TrimEnd(' ')))
                {
                    FormsAuthentication.SetAuthCookie(fUser, false);
                    //int facultyId = db.jntuh_registered_faculty.Where(f => f.UserId == userID).Select(f => f.id).FirstOrDefault();
                    //string fid = Utilities.EncryptString(facultyId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);

                    return RedirectToAction("FacultyNew", "OnlineRegistration", new { fid = fid });
                }

                //return RedirectToAction("Logon", "Account");
            }

            ViewBag.Id = fid;
            ViewBag.FacultyID = fID;

            DateTime todayDate = DateTime.Now.Date;

            List<DistinctDepartment> depts = new List<DistinctDepartment>();
            string existingDepts = string.Empty;
            int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };
            foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
            {
                if (!existingDepts.Split(',').Contains(item.departmentName))
                {
                    depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
                    existingDepts = existingDepts + "," + item.departmentName;
                }
            }

            ViewBag.department = depts;
            ViewBag.designation = db.jntuh_designation.Where(c => c.isActive == true).ToList();
            ViewBag.Institutions = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { CollegeId = c.id, CollegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.CollegeName).ToList();

            List<SelectListItem> ratifiedDuration = new List<SelectListItem>();
            for (int i = 1; i <= 10; i++)
            {
                ratifiedDuration.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.duration = ratifiedDuration;

            List<SelectListItem> prevExperience = new List<SelectListItem>();
            for (int i = 0; i <= 40; i++)
            {
                prevExperience.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.prevExperience = prevExperience;

            List<SelectListItem> years = new List<SelectListItem>();
            for (int i = 1940; i <= DateTime.Now.Year; i++)
            {
                years.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.years = years;

            List<SelectListItem> division = new List<SelectListItem>();
            for (int i = 1; i <= 5; i++)
            {
                division.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.division = division;

            FacultyRegistration regFaculty = new FacultyRegistration();
            int FUserID = db.jntuh_registered_faculty.Where(U => U.id == fID).Select(U => U.id).FirstOrDefault();
            // int FLUserID = db.jntuh_registered_faculty_log.Where(U => U.UserId == FUserID).Select(U => U.id).FirstOrDefault();
            int? FExID = db.jntuh_registered_faculty_experience.Where(E => E.facultyId == fID).Select(E => E.facultyId).FirstOrDefault();
            if (fID == 0)
            {
                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                            .Select(e => new RegisteredFacultyEducation
                                                            {
                                                                educationId = e.id,
                                                                educationName = e.educationCategoryName,
                                                                studiedEducation = string.Empty,
                                                                specialization = string.Empty,
                                                                passedYear = 0,
                                                                percentage = 0,
                                                                division = 0,
                                                                university = string.Empty,
                                                                place = string.Empty,
                                                                facultyCertificate = string.Empty,
                                                            }).ToList();
            }

            else
            {
                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                             .Select(e => new RegisteredFacultyEducation
                                                             {
                                                                 educationId = e.id,
                                                                 educationName = e.educationCategoryName,
                                                                 studiedEducation = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                                 specialization = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.specialization).FirstOrDefault(),
                                                                 passedYear = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.passedYear).FirstOrDefault(),
                                                                 percentage = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                                 division = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.division).FirstOrDefault(),
                                                                 university = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                                 place = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                                 facultyCertificate = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == FUserID).Select(fe => fe.certificate).FirstOrDefault(),
                                                             }).ToList();

                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }
            }

            //regFaculty.RFExperience = db.jntuh_registered_faculty_experience_log.Where(E => E.id == FExID)
            regFaculty.RFExperience = db.jntuh_registered_faculty_experience.Where(E => E.isActive == true && E.facultyId == FExID)
                                            .Select(E => new RegisteredfacultyExperience

                                            {
                                                CollegeName = db.jntuh_college.Where(C => C.id == E.collegeId).Select(C => C.collegeName).FirstOrDefault(),
                                                facultyDesignation = db.jntuh_designation.Where(D => D.id == E.facultyDesignationId).Select(D => D.designation).FirstOrDefault(),
                                                CollegeId = E.collegeId,
                                                DesignationId = E.facultyDesignationId,
                                                facultyDateOfAppointment = E.facultyDateOfAppointment,
                                                facultyDateOfResignation = E.facultyDateOfResignation,
                                                RelievingLetter = E.facultyRelievingLetter,
                                                JoiningOrder = E.facultyJoiningOrder,
                                                Salary = E.facultySalary

                                            }).ToList();
            regFaculty.GenderId = null;
            regFaculty.isFacultyRatifiedByJNTU = null;

            if (fID > 0)
            {

                jntuh_registered_faculty faculty = db.jntuh_registered_faculty.Find(fID);
                regFaculty.id = fID;
                regFaculty.Type = faculty.type;
                regFaculty.NewPassword = "TEMP@PWD";
                regFaculty.ConfirmPassword = "TEMP@PWD";
                int facultyUserId = db.jntuh_registered_faculty.Find(regFaculty.id).UserId;
                regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == facultyUserId).Select(u => u.name).FirstOrDefault();
                regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                regFaculty.UniqueID = faculty.UniqueID;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.GenderId = faculty.GenderId;
                regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                regFaculty.MotherName = faculty.MotherName;
                if (faculty.DateOfBirth != null)
                    regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                regFaculty.OrganizationName = faculty.OrganizationName;
                regFaculty.DesignationId = faculty.DesignationId;
                if (faculty.DesignationId != null)
                {
                    regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                }
                regFaculty.DepartmentId = faculty.DepartmentId;
                if (faculty.DepartmentId != null)
                {
                    regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                }
                faculty.collegeId =
                    db.jntuh_college_faculty_registered.Where(
                        cf => cf.RegistrationNumber == regFaculty.RegistrationNumber)
                        .Select(s => s.collegeId)
                        .FirstOrDefault();
                if (faculty.collegeId != 0)
                {
                    // regFaculty.CollegeName = db.jntuh_college.Find(faculty.collegeId).collegeName;
                    var CollegeName = db.jntuh_college.Where(e => e.id == faculty.collegeId).Select(e => e.collegeName).FirstOrDefault();
                    var sociaty = db.jntuh_college_establishment.Where(S => S.collegeId == collegeId).Select(S => S.societyName).FirstOrDefault();
                    //regFaculty.CollegeName = CollegeName + "," + sociaty;
                    regFaculty.CollegeName = CollegeName;

                }

                regFaculty.CollegeId = collegeId;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.OtherDepartment = faculty.OtherDepartment;
                regFaculty.OtherDesignation = faculty.OtherDesignation;
                if (faculty.DateOfAppointment != null)
                    regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                if (faculty.DateOfRatification != null)
                    regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.GrossSalary = faculty.grosssalary;
                regFaculty.TotalExperience = faculty.TotalExperience;
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                regFaculty.Email = faculty.Email;
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.facultyPhoto = faculty.Photo;
                regFaculty.facultyPANCardDocument = faculty.PANDocument;
                regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                regFaculty.isActive = faculty.isActive;
                regFaculty.isApproved = faculty.isApproved;
                regFaculty.IncomeTaxFileview = faculty.IncometaxDocument;
                regFaculty.PHDUndertakingDocumentView = faculty.PHDUndertakingDocument;
                regFaculty.isView = true;
                TempData["FacultyDetails"] = regFaculty;
                ViewBag.id = regFaculty.id;
            }
            else
            {
                if (vFaculty.isView != null)
                {
                    regFaculty = vFaculty;

                    if (vFaculty.CollegeId != null)
                    {
                        //   regFaculty.CollegeName = db.jntuh_college.Find(vFaculty.CollegeId).collegeName;
                        var CollegeName = db.jntuh_college.Where(e => e.id == vFaculty.CollegeId).Select(e => e.collegeName).FirstOrDefault();
                        var sociaty = db.jntuh_college_establishment.Where(S => S.collegeId == collegeId).Select(S => S.societyName).FirstOrDefault();
                        regFaculty.CollegeName = CollegeName + "," + sociaty;

                    }

                    if (vFaculty.DesignationId != null)
                    {
                        regFaculty.designation = db.jntuh_designation.Find(vFaculty.DesignationId).designation;
                    }

                    if (vFaculty.DepartmentId != null)
                    {
                        regFaculty.department = db.jntuh_department.Find(vFaculty.DepartmentId).departmentName;
                    }

                    regFaculty.OtherDepartment = vFaculty.OtherDepartment;
                    regFaculty.OtherDesignation = vFaculty.OtherDesignation;
                    regFaculty.isFacultyRatifiedByJNTU = vFaculty.isFacultyRatifiedByJNTU;


                }
            }

            return View(regFaculty);
        }


        //Phd Data Entry Verification
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpGet]
        public ActionResult PhdVerificationEdit(string fid, int collegeid)
        {
            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                ViewBag.FacultyID = fID;
                ViewBag.collegeid = collegeid;
                ViewBag.fid = fid;
                jntuh_registered_faculty faculty = db.jntuh_registered_faculty.Find(fID);
                var departments = db.jntuh_department.Where(e => e.isActive == true).Select(e => e).ToList();
                var specializatons = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();




                regFaculty.id = fID;
                regFaculty.Type = faculty.type;
                regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == faculty.UserId).Select(u => u.name).FirstOrDefault();
                regFaculty.Email = faculty.Email;
                regFaculty.UniqueID = faculty.UniqueID;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                regFaculty.MotherName = faculty.MotherName;
                regFaculty.GenderId = faculty.GenderId;
                regFaculty.CollegeId = collegeid;

                if (faculty.DateOfBirth != null)
                {
                    regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                }
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.facultyPhoto = faculty.Photo;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.facultyPANCardDocument = faculty.PANDocument;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.TotalExperience = faculty.TotalExperience;
                regFaculty.OrganizationName = faculty.OrganizationName;
                regFaculty.PGSpecialization = faculty.PGSpecialization;
                regFaculty.Absent = faculty.Absent ?? false;
                regFaculty.NoSCM17Flag = faculty.NoSCM17 ?? false;
                //regFaculty.NoForm16Verification = faculty.Noform16Verification ?? false;
                regFaculty.NOTQualifiedAsPerAICTE = faculty.NotQualifiedAsperAICTE ?? false;
                //regFaculty.MultipleReginSamecoll = faculty.MultipleRegInSameCollege ?? false;
                regFaculty.InCompleteCeritificates = faculty.IncompleteCertificates ?? false;
                regFaculty.BlacklistFlag = faculty.Blacklistfaculy ?? false;
                regFaculty.NOrelevantPgFlag = faculty.NoPhdUndertakingNew ?? false;
                regFaculty.InvalidPANNo = faculty.InvalidPANNumber ?? false;
                //regFaculty.PhotocopyofPAN = faculty.PhotoCopyofPAN ?? false;
                regFaculty.NOspecializationFlag = faculty.NoSpecialization ?? false;
                regFaculty.XeroxcopyofcertificatesFlag = faculty.Xeroxcopyofcertificates ?? false;
                regFaculty.NotIdentityFiedForAnyProgramFlag = faculty.NotIdentityfiedForanyProgram ?? false;
                if (faculty.NoRelevantUG != "No")
                {
                    regFaculty.NOrelevantUgFlag = true;
                }
                if (faculty.NoRelevantPG != "No")
                {
                    regFaculty.NOrelevantPgFlag = true;
                }
                if (faculty.NORelevantPHD != "No")
                {
                    regFaculty.NOrelevantPhdFlag = true;
                }

                if (faculty.collegeId != null)
                {
                    regFaculty.CollegeName = db.jntuh_college.Find(faculty.collegeId).collegeName;
                }
                regFaculty.CollegeId = faculty.collegeId;
                if (faculty.DepartmentId != null)
                {
                    regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                }
                regFaculty.DepartmentId = faculty.DepartmentId;
                regFaculty.OtherDepartment = faculty.OtherDepartment;

                if (faculty.DesignationId != null)
                {
                    regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                }
                regFaculty.DesignationId = faculty.DesignationId;
                regFaculty.OtherDesignation = faculty.OtherDesignation;

                if (faculty.DateOfAppointment != null)
                {
                    regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                }
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                if (faculty.DateOfRatification != null)
                {
                    regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                }
                regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.GrossSalary = faculty.grosssalary;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.isActive = faculty.isActive;
                regFaculty.isApproved = faculty.isApproved;
                regFaculty.isView = true;
                regFaculty.DeactivationReason = faculty.DeactivationReason;
                regFaculty.OthersPGSpecilizationName = faculty.Others1;


                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                            .Select(e => new RegisteredFacultyEducation
                                                            {
                                                                educationId = e.id,
                                                                educationName = e.educationCategoryName,
                                                                studiedEducation = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                                specialization = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.specialization).FirstOrDefault(),
                                                                passedYear = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.passedYear).FirstOrDefault(),
                                                                percentage = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                                division = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.division).FirstOrDefault(),
                                                                university = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                                place = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                                facultyCertificate = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.certificate).FirstOrDefault(),
                                                            }).ToList();

                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }

                //   string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
                //  int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
                // int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();
                // int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);

                int[] ugids = departments.Where(i => i.degreeId == 4 || i.degreeId == 5).Select(i => i.id).ToArray();
                int[] pgids = departments.Where(i => i.degreeId != 4 && i.degreeId != 5).Select(i => i.id).ToArray();
                //List<DistinctDepartment> depts = new List<DistinctDepartment>();
                //string existingDepts = string.Empty;
                //int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };
                //foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
                //{
                //    if (!existingDepts.Split(',').Contains(item.departmentName))
                //    {
                //        depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
                //        existingDepts = existingDepts + "," + item.departmentName;
                //    }
                //}

                //ViewBag.department = depts;

                var ugcoures = specializatons.Where(i => ugids.Contains(i.departmentId)).ToList();
                var pgcoures = specializatons.Where(i => pgids.Contains(i.departmentId) || i.id == 154).ToList();
                //var phdcoures = db.jntuh_specialization.Where(i => phdids.Contains(i.departmentId)).Select(i => i.specializationName).ToList();

                ViewBag.ugcourses = ugcoures;
                ViewBag.pgcourses = pgcoures;
                //ViewBag.phdcourses = phdcoures;
                ViewBag.FacultyDetails = regFaculty;
                TempData["FacultyDetails"] = regFaculty;
                ViewBag.HideVerifyLink = regFaculty.isApproved != null ? true : false;
            }
            return PartialView("_PhdVerificationEdit", regFaculty);
        }

        [HttpPost]
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult PhdVerificationPostEdit(FacultyRegistration faculty)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var facultydetails = db.jntuh_registered_faculty.FirstOrDefault(i => i.RegistrationNumber == faculty.RegistrationNumber);
            //  var rid = db.jntuh_college_randamcodes.Where(e => e.IsActive == true && e.CollegeId == faculty.CollegeId).Select(e => e.Id).FirstOrDefault();
            if (facultydetails != null)
            {

                if (faculty.NOrelevantUgFlag == true)
                    facultydetails.NoRelevantUG = "Yes";
                if (faculty.NOrelevantPgFlag == true)
                    facultydetails.NoRelevantPG = "Yes";
                if (faculty.NOrelevantPhdFlag == true)
                    facultydetails.NORelevantPHD = "Yes";
                //if (faculty.PGSpecialization != null)
                //{

                //    if (faculty.PGSpecialization != 154)
                //    {
                //        facultydetails.PGSpecialization = faculty.PGSpecialization;
                //    }
                //    else
                //    {
                //        facultydetails.PGSpecialization = faculty.PGSpecialization;
                //        facultydetails.Others1 = faculty.OthersPGSpecilizationName;
                //    }
                //}


                if (faculty.InCompleteCeritificates == true)//Orgs Certificates not Shown
                    facultydetails.IncompleteCertificates = faculty.InCompleteCeritificates;
                if (faculty.NOTQualifiedAsPerAICTE == true)
                    facultydetails.NotQualifiedAsperAICTE = faculty.NOTQualifiedAsPerAICTE;
                //if (faculty.MultipleReginSamecoll == true)
                //    facultydetails.MultipleRegInSameCollege = faculty.MultipleReginSamecoll;
                if (faculty.XeroxcopyofcertificatesFlag == true)
                    facultydetails.Xeroxcopyofcertificates = faculty.XeroxcopyofcertificatesFlag;
                if (faculty.NotIdentityFiedForAnyProgramFlag == true)
                    facultydetails.NotIdentityfiedForanyProgram = faculty.NotIdentityFiedForAnyProgramFlag;
                //if (faculty.NoForm16Verification == true)
                //    facultydetails.Noform16Verification = faculty.NoForm16Verification;
                if (faculty.NoSCM17Flag == true)
                    facultydetails.NoSCM17 = faculty.NoSCM17Flag;
                if (faculty.InvalidPANNo == true)
                    facultydetails.InvalidPANNumber = faculty.InvalidPANNo;
                //if (faculty.PhotocopyofPAN == true)
                //    facultydetails.PhotoCopyofPAN = faculty.PhotocopyofPAN;

                facultydetails.FacultyVerificationStatus = true;
                facultydetails.DeactivatedBy = userID;
                facultydetails.DeactivatedOn = DateTime.Now;
                db.Entry(facultydetails).State = EntityState.Modified;
                db.SaveChanges();

            }

            return RedirectToAction("PHDSecondStepVerification", "FacultyVerification", new { collegeid = faculty.CollegeId });
        }



        //MissingPhd Data Entry Verification
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpGet]
        public ActionResult MissingPhdVerificationEdit(string fid, int collegeid)
        {
            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                ViewBag.FacultyID = fID;
                ViewBag.collegeid = collegeid;
                ViewBag.fid = fid;
                jntuh_registered_faculty faculty = db.jntuh_registered_faculty.Find(fID);
                var departments = db.jntuh_department.Where(e => e.isActive == true).Select(e => e).ToList();
                var specializatons = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();




                regFaculty.id = fID;
                regFaculty.Type = faculty.type;
                regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == faculty.UserId).Select(u => u.name).FirstOrDefault();
                regFaculty.Email = faculty.Email;
                regFaculty.UniqueID = faculty.UniqueID;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                regFaculty.MotherName = faculty.MotherName;
                regFaculty.GenderId = faculty.GenderId;
                regFaculty.CollegeId = collegeid;

                if (faculty.DateOfBirth != null)
                {
                    regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                }
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.facultyPhoto = faculty.Photo;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.facultyPANCardDocument = faculty.PANDocument;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.TotalExperience = faculty.TotalExperience;
                regFaculty.OrganizationName = faculty.OrganizationName;
                regFaculty.PGSpecialization = faculty.PGSpecialization;
                regFaculty.Absent = faculty.Absent ?? false;
                regFaculty.NoSCM17Flag = faculty.NoSCM17 ?? false;
               // regFaculty.NoForm16Verification = faculty.Noform16Verification ?? false;
                regFaculty.NOTQualifiedAsPerAICTE = faculty.NotQualifiedAsperAICTE ?? false;
                //regFaculty.MultipleReginSamecoll = faculty.MultipleRegInSameCollege ?? false;
                regFaculty.InCompleteCeritificates = faculty.IncompleteCertificates ?? false;
                regFaculty.BlacklistFlag = faculty.Blacklistfaculy ?? false;
                regFaculty.NOrelevantPgFlag = faculty.NoPhdUndertakingNew ?? false;
                regFaculty.NOspecializationFlag = faculty.NoSpecialization ?? false;
                regFaculty.XeroxcopyofcertificatesFlag = faculty.Xeroxcopyofcertificates ?? false;
                regFaculty.NotIdentityFiedForAnyProgramFlag = faculty.NotIdentityfiedForanyProgram ?? false;
                if (faculty.NoRelevantUG != "No")
                {
                    regFaculty.NOrelevantUgFlag = true;
                }
                if (faculty.NoRelevantPG != "No")
                {
                    regFaculty.NOrelevantPgFlag = true;
                }
                if (faculty.NORelevantPHD != "No")
                {
                    regFaculty.NOrelevantPhdFlag = true;
                }

                if (faculty.collegeId != null)
                {
                    regFaculty.CollegeName = db.jntuh_college.Find(faculty.collegeId).collegeName;
                }
                regFaculty.CollegeId = faculty.collegeId;
                if (faculty.DepartmentId != null)
                {
                    regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                }
                regFaculty.DepartmentId = faculty.DepartmentId;
                regFaculty.OtherDepartment = faculty.OtherDepartment;

                if (faculty.DesignationId != null)
                {
                    regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                }
                regFaculty.DesignationId = faculty.DesignationId;
                regFaculty.OtherDesignation = faculty.OtherDesignation;

                if (faculty.DateOfAppointment != null)
                {
                    regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                }
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                if (faculty.DateOfRatification != null)
                {
                    regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                }
                regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.GrossSalary = faculty.grosssalary;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.DateOfAppointment = faculty.DateOfAppointment;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.isActive = faculty.isActive;
                regFaculty.isApproved = faculty.isApproved;
                regFaculty.isView = true;
                regFaculty.DeactivationReason = faculty.DeactivationReason;
                regFaculty.OthersPGSpecilizationName = faculty.Others1;


                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                            .Select(e => new RegisteredFacultyEducation
                                                            {
                                                                educationId = e.id,
                                                                educationName = e.educationCategoryName,
                                                                studiedEducation = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                                specialization = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.specialization).FirstOrDefault(),
                                                                passedYear = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.passedYear).FirstOrDefault(),
                                                                percentage = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                                division = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.division).FirstOrDefault(),
                                                                university = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                                place = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                                facultyCertificate = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.certificate).FirstOrDefault(),
                                                            }).ToList();

                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }

                //   string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
                //  int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
                // int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();
                // int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);

                int[] ugids = departments.Where(i => i.degreeId == 4 || i.degreeId == 5).Select(i => i.id).ToArray();
                int[] pgids = departments.Where(i => i.degreeId != 4 && i.degreeId != 5).Select(i => i.id).ToArray();
                //List<DistinctDepartment> depts = new List<DistinctDepartment>();
                //string existingDepts = string.Empty;
                //int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };
                //foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
                //{
                //    if (!existingDepts.Split(',').Contains(item.departmentName))
                //    {
                //        depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
                //        existingDepts = existingDepts + "," + item.departmentName;
                //    }
                //}

                //ViewBag.department = depts;

                var ugcoures = specializatons.Where(i => ugids.Contains(i.departmentId)).ToList();
                var pgcoures = specializatons.Where(i => pgids.Contains(i.departmentId) || i.id == 154).ToList();
                //var phdcoures = db.jntuh_specialization.Where(i => phdids.Contains(i.departmentId)).Select(i => i.specializationName).ToList();

                ViewBag.ugcourses = ugcoures;
                ViewBag.pgcourses = pgcoures;
                //ViewBag.phdcourses = phdcoures;
                ViewBag.FacultyDetails = regFaculty;
                TempData["FacultyDetails"] = regFaculty;
                ViewBag.HideVerifyLink = regFaculty.isApproved != null ? true : false;
            }
            return PartialView("_MissingPhdVerificationEdit", regFaculty);
        }

        [HttpPost]
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult MissingPhdVerificationPostEdit(FacultyRegistration faculty)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var faculty_log = db.jntuh_registered_faculty_log.Where(i => i.RegistrationNumber == faculty.RegistrationNumber).FirstOrDefault();
            var facultydetails = db.jntuh_registered_faculty.FirstOrDefault(i => i.RegistrationNumber == faculty.RegistrationNumber);
            //  var rid = db.jntuh_college_randamcodes.Where(e => e.IsActive == true && e.CollegeId == faculty.CollegeId).Select(e => e.Id).FirstOrDefault();
            if (facultydetails != null)
            {


                if (faculty.NOrelevantUgFlag == true)
                    facultydetails.NoRelevantUG = "Yes";
                if (faculty.NOrelevantPgFlag == true)
                    facultydetails.NoRelevantPG = "Yes";
                if (faculty.NOrelevantPhdFlag == true)
                    facultydetails.NORelevantPHD = "Yes";
                //if (faculty.PGSpecialization != null)
                //{

                //    if (faculty.PGSpecialization != 154)
                //    {
                //        facultydetails.PGSpecialization = faculty.PGSpecialization;
                //    }
                //    else
                //    {
                //        facultydetails.PGSpecialization = faculty.PGSpecialization;
                //        facultydetails.Others1 = faculty.OthersPGSpecilizationName;
                //    }
                //}


                if (faculty.InCompleteCeritificates == true)//Orgs Certificates not Shown
                    facultydetails.IncompleteCertificates = faculty.InCompleteCeritificates;
                if (faculty.NOTQualifiedAsPerAICTE == true)
                    facultydetails.NotQualifiedAsperAICTE = faculty.NOTQualifiedAsPerAICTE;
                //if (faculty.MultipleReginSamecoll == true)
                //    facultydetails.MultipleRegInSameCollege = faculty.MultipleReginSamecoll;
                if (faculty.XeroxcopyofcertificatesFlag == true)
                    facultydetails.Xeroxcopyofcertificates = faculty.XeroxcopyofcertificatesFlag;
                if (faculty.NotIdentityFiedForAnyProgramFlag == true)
                    facultydetails.NotIdentityfiedForanyProgram = faculty.NotIdentityFiedForAnyProgramFlag;
                //if (faculty.NoForm16Verification == true)
                //    facultydetails.Noform16Verification = faculty.NoForm16Verification;
                if (faculty.NoSCM17Flag == true)
                    facultydetails.NoSCM17 = faculty.NoSCM17Flag;


                facultydetails.collegeId = faculty_log.collegeId;
                facultydetails.FirstName = faculty_log.FirstName;
                facultydetails.MiddleName = faculty_log.MiddleName;
                facultydetails.LastName = faculty_log.LastName;
                facultydetails.GenderId = faculty_log.GenderId;
                facultydetails.FatherOrHusbandName = faculty_log.FatherOrHusbandName;
                facultydetails.MotherName = faculty_log.MotherName;
                facultydetails.WorkingStatus = faculty_log.WorkingStatus;
                facultydetails.OrganizationName = faculty_log.OrganizationName;
                facultydetails.DesignationId = faculty_log.DesignationId;
                facultydetails.OtherDesignation = faculty_log.OtherDesignation;
                facultydetails.DepartmentId = faculty_log.DepartmentId;
                facultydetails.OtherDepartment = faculty_log.OtherDepartment;
               // facultydetails.grosssalary = faculty_log.grosssalary;
               // facultydetails.DateOfAppointment = faculty_log.DateOfAppointment;
                facultydetails.isFacultyRatifiedByJNTU = faculty_log.isFacultyRatifiedByJNTU;
                facultydetails.DateOfRatification = faculty_log.DateOfRatification;
                facultydetails.ProceedingsNumber = faculty_log.ProceedingsNumber;
                facultydetails.AICTEFacultyId = faculty_log.AICTEFacultyId;
                facultydetails.TotalExperience = faculty_log.TotalExperience;
                facultydetails.PANNumber = faculty_log.PANNumber;
                facultydetails.AadhaarNumber = faculty_log.AadhaarNumber;
                facultydetails.Mobile = faculty_log.Mobile;
                facultydetails.Email = faculty_log.Email;
                facultydetails.National = faculty_log.National;
                facultydetails.InterNational = faculty_log.InterNational;
                facultydetails.Citation = faculty_log.Citation;
                facultydetails.Awards = faculty_log.Awards;
                facultydetails.Photo = faculty_log.Photo;
                facultydetails.PANDocument = faculty_log.PANDocument;
                facultydetails.AadhaarDocument = faculty_log.AadhaarDocument;
                facultydetails.isActive = faculty_log.isActive;
                facultydetails.isApproved = faculty_log.isApproved;
               // facultydetails.grosssalary = faculty_log.grosssalary;
               // facultydetails.DateOfAppointment = faculty_log.DateOfAppointment;
                facultydetails.ProceedingDocument = faculty_log.ProceedingDocument;
                facultydetails.DateOfBirth = faculty_log.DateOfBirth;
                facultydetails.TotalExperiencePresentCollege = faculty_log.TotalExperiencePresentCollege;
                facultydetails.IncometaxDocument = faculty_log.IncometaxDocument;
                facultydetails.PHDUndertakingDocument = faculty_log.PHDUndertakingDocument;
                facultydetails.PGSpecializationRemarks = faculty_log.Remarks;
                facultydetails.PGSpecialization = faculty_log.PGSpecialization;
                facultydetails.updatedOn = DateTime.Now;
                facultydetails.updatedBy = faculty_log.UserId;



                facultydetails.FacultyVerificationStatus = true;
                facultydetails.DeactivatedBy = userID;
                facultydetails.DeactivatedOn = DateTime.Now;
                db.Entry(facultydetails).State = EntityState.Modified;
                db.SaveChanges();

                var education_log = db.jntuh_registered_faculty_education_log.Where(i => i.facultyId == facultydetails.id).ToList();

                var education = db.jntuh_registered_faculty_education.Where(i => i.facultyId == facultydetails.id).ToList();
                jntuh_registered_faculty_education log1 = new jntuh_registered_faculty_education();
                foreach (var item in education_log)
                {
                    var log = education.Where(i => i.educationId == item.educationId && i.facultyId == facultydetails.id).ToList();
                    if (log.Count >= 1)
                    {
                        log.FirstOrDefault().courseStudied = item.courseStudied;
                        log.FirstOrDefault().specialization = item.specialization;
                        log.FirstOrDefault().passedYear = item.passedYear;
                        log.FirstOrDefault().marksPercentage = item.marksPercentage;
                        log.FirstOrDefault().division = item.division;
                        log.FirstOrDefault().boardOrUniversity = item.boardOrUniversity;
                        log.FirstOrDefault().placeOfEducation = item.placeOfEducation;
                        log.FirstOrDefault().certificate = item.certificate;
                        //log.FirstOrDefault().updatedOn = DateTime.Now;
                        //log.FirstOrDefault().updatedBy = faculty_log.UserId;
                    
                        db.SaveChanges();

                    }
                    else
                    {
                        log1.facultyId = item.facultyId;
                        log1.educationId = item.educationId;
                        log1.courseStudied = item.courseStudied;

                        log1.specialization = item.specialization;
                        log1.passedYear = item.passedYear;
                        log1.marksPercentage = item.marksPercentage;
                        log1.division = item.division;
                        log1.boardOrUniversity = item.boardOrUniversity;
                        log1.placeOfEducation = item.placeOfEducation;
                        log1.certificate = item.certificate;
                        log1.isActive = true;
                        log1.createdOn = DateTime.Now;
                        log1.createdBy = faculty_log.UserId;
                        db.jntuh_registered_faculty_education.Add(log1);
                        db.SaveChanges();
                    }
                }



                faculty_log.FacultyApprovedStatus = 2;
                db.Entry(faculty_log).State = EntityState.Modified;
                db.SaveChanges();

            }

            return RedirectToAction("FacultySecondStepVerification", "FacultyVerification", new { collegeid = faculty.CollegeId });
        }

        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult PhdVerificationApprove(string fid, string collegeid)
        {
            var fId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            var facultydetails = db.jntuh_registered_faculty.Find(fId);
            if (facultydetails != null)
            {
                // facultydetails.Absent = false;
                //  facultydetails.InvalidPANNumber = false;
                facultydetails.NoRelevantUG = "No";
                facultydetails.NoRelevantPG = "No";
                facultydetails.NORelevantPHD = "No";
                // facultydetails.NoSCM = false;
                // facultydetails.NoForm16 = false;
                facultydetails.NotQualifiedAsperAICTE = false;
                //facultydetails.MultipleRegInSameCollege = false;
                //facultydetails.MultipleRegInDiffCollege = false;
                //   facultydetails.SamePANUsedByMultipleFaculty = false;
                //  facultydetails.PhotoCopyofPAN = false;
                //  facultydetails.AppliedPAN = false;
                //   facultydetails.LostPAN = false;
                //   facultydetails.OriginalsVerifiedUG = false;
                //   facultydetails.OriginalsVerifiedPG = false;
                //  facultydetails.OriginalsVerifiedPHD = false;
                //  facultydetails.FacultyVerificationStatus = true;
                facultydetails.IncompleteCertificates = false;
                db.SaveChanges();
                TempData["Success"] = "Phd Data Successfully Approved..";
            }
            return RedirectToAction("PHDFacultyInformation", "FacultyVerification", new { fid = fid });
        }



        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        public ActionResult AddPGSpecialization(string fid, int collegeid)
        {
            var faculty = new CollegeFaculty();
            int fID = 0;
            if (fid != null)
            {
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));

                var existingfaculty = db.jntuh_registered_faculty.Find(fID); //&& i.collegeId == collegeId
                if (existingfaculty != null)
                {
                    faculty.collegeId = collegeid;
                    faculty.id = existingfaculty.id;
                    faculty.facultyFirstName = existingfaculty.FirstName;
                    faculty.facultyLastName = existingfaculty.LastName;
                    faculty.facultySurname = existingfaculty.MiddleName;
                    faculty.facultyDesignationId = existingfaculty.DesignationId;
                    faculty.facultyOtherDesignation = existingfaculty.OtherDesignation;
                    faculty.FacultyRegistrationNumber = existingfaculty.RegistrationNumber;
                    faculty.SpecializationId = existingfaculty.PGSpecialization;
                    faculty.SpecializationName = existingfaculty.PGSpecializationRemarks;
                }
            }
            int[] pgids = db.jntuh_department.Where(i => i.degreeId != 4 && i.degreeId != 5).Select(i => i.id).ToArray();
            var pgcoures = db.jntuh_specialization.Where(i => pgids.Contains(i.departmentId) || i.id == 154 || i.id == 37 || i.id == 42 || i.id == 48 || i.id == 31).ToList();
            ViewBag.PGSpecializations = pgcoures;

            return PartialView("_AddPGSpecialization", faculty);
        }


        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        [HttpPost]
        public ActionResult AddPGSpecializationPost(CollegeFaculty faculty)
        {
            TempData["Error"] = null;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //int rid = db.jntuh_college_randamcodes.Where(e => e.CollegeId == faculty.collegeId).Select(e => e.Id).FirstOrDefault();
            //var isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var isExistingFaculty = db.jntuh_registered_faculty.FirstOrDefault(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber);
            if (isExistingFaculty != null)
            {
                isExistingFaculty.PGSpecialization = faculty.SpecializationId;
                if (faculty.SpecializationId == 154)
                {
                    isExistingFaculty.PGSpecializationRemarks = faculty.SpecializationName;
                }

                isExistingFaculty.updatedBy = userID;
                isExistingFaculty.updatedOn = DateTime.Now;
                db.Entry(isExistingFaculty).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Specialization (" + faculty.FacultyRegistrationNumber + " ) Successfully Updated ..";
                TempData["Error"] = null;
            }

            return RedirectToAction("PHDFacultyInformation", "FacultyVerification", new { fid = UAAAS.Models.Utilities.EncryptString(isExistingFaculty.id.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]), collegeId = faculty.collegeId });
        }






        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        public ActionResult LogAddPGSpecialization(string fid, int collegeid)
        {
            var faculty = new CollegeFaculty();
            int fID = 0;
            if (fid != null)
            {
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));

                var existingfaculty = db.jntuh_registered_faculty.Find(fID); //&& i.collegeId == collegeId
                if (existingfaculty != null)
                {
                    faculty.collegeId = collegeid;
                    faculty.id = existingfaculty.id;
                    faculty.facultyFirstName = existingfaculty.FirstName;
                    faculty.facultyLastName = existingfaculty.LastName;
                    faculty.facultySurname = existingfaculty.MiddleName;
                    faculty.facultyDesignationId = existingfaculty.DesignationId;
                    faculty.facultyOtherDesignation = existingfaculty.OtherDesignation;
                    faculty.FacultyRegistrationNumber = existingfaculty.RegistrationNumber;
                    faculty.SpecializationId = existingfaculty.PGSpecialization;
                    faculty.SpecializationName = existingfaculty.PGSpecializationRemarks;
                }
            }
            int[] pgids = db.jntuh_department.Where(i => i.degreeId != 4 && i.degreeId != 5).Select(i => i.id).ToArray();
            var pgcoures = db.jntuh_specialization.Where(i => pgids.Contains(i.departmentId) || i.id == 154 || i.id == 37 || i.id == 42 || i.id == 48 || i.id == 31).ToList();
            ViewBag.PGSpecializations = pgcoures;

            return PartialView("_LogAddPGSpecialization", faculty);
        }


        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        [HttpPost]
        public ActionResult LogAddPGSpecializationPost(CollegeFaculty faculty)
        {
            TempData["Error"] = null;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //int rid = db.jntuh_college_randamcodes.Where(e => e.CollegeId == faculty.collegeId).Select(e => e.Id).FirstOrDefault();
            //var isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var isExistingFaculty = db.jntuh_registered_faculty.FirstOrDefault(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber);
            if (isExistingFaculty != null)
            {
                isExistingFaculty.PGSpecialization = faculty.SpecializationId;
                if (faculty.SpecializationId == 154)
                {
                    isExistingFaculty.PGSpecializationRemarks = faculty.SpecializationName;
                }

                isExistingFaculty.updatedBy = userID;
                isExistingFaculty.updatedOn = DateTime.Now;
                db.Entry(isExistingFaculty).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Specialization (" + faculty.FacultyRegistrationNumber + " ) Successfully Updated ..";
                TempData["Error"] = null;
            }

            return RedirectToAction("FacultyInformation", "FacultyVerification", new { fid = UAAAS.Models.Utilities.EncryptString(isExistingFaculty.id.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]) });
        }


        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult FacultySecondStepVerificationApproved(int? collegeid)
        {
            List<Colleges> colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new Colleges
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            colleges.Add(new Colleges() { collegeId = 0, collegeName = "New Faculty" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();
            // List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
            List<jntuh_registered_faculty_log> jntuh_registered_faculty_log = new List<jntuh_registered_faculty_log>();
            if (collegeid != null && collegeid != 0)
                jntuh_registered_faculty_log = db.jntuh_registered_faculty_log.Where(c => c.isActive == true && c.collegeId == collegeid && c.FacultyApprovedStatus != 0).ToList();
            //else
            //    jntuh_registered_faculty_log = db.jntuh_registered_faculty_log.Where(c => c.isActive == true && c.FacultyApprovedStatus != 0).ToList();
            var data = jntuh_registered_faculty_log.Select(a => new FacultyRegistration
            {

                id = db.jntuh_registered_faculty.Where(f => f.UserId == a.UserId).Select(f => f.id).FirstOrDefault(),
                Type = a.type,
                RegistrationNumber = a.RegistrationNumber,
                UniqueID = a.UniqueID,
                FirstName = a.FirstName,
                MiddleName = a.MiddleName,
                LastName = a.LastName,
                GenderId = a.GenderId,
                Email = a.Email,
                facultyPhoto = a.Photo,
                Mobile = a.Mobile,
                PANNumber = a.PANNumber,
                AadhaarNumber = a.AadhaarNumber,
                isActive = a.isActive,
                isApproved = a.isApproved,
                SamePANNumberCount = 1,
                SameAadhaarNumberCount = 2,
                FIsApproved = a.FacultyApprovedStatus

                // SamePANNumberCount = jntuh_registered_faculty.Where(f => f.PANNumber == a.PANNumber).ToList().Count(),
                // SameAadhaarNumberCount = jntuh_registered_faculty.Where(f => f.AadhaarNumber == a.AadhaarNumber).ToList().Count()
            });
            teachingFaculty.AddRange(data);
            return View(teachingFaculty);
        }


        public ActionResult FacultyInformation(string fid)
        {
            ViewBag.EId = fid;
            //TempData["SUCCESS"] = "";

            FacultyRegistration vFaculty = new FacultyRegistration();
            if (TempData["FACULTY"] != null)
            {
                vFaculty = (FacultyRegistration)TempData["FACULTY"];
            }

            int fID = 0;
            if (!string.IsNullOrEmpty(User.Identity.Name))
            {
                int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
                int facultyId = db.jntuh_registered_faculty.Where(f => f.UserId == userID).Select(f => f.id).FirstOrDefault();

                if (fid != null)
                {
                    fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                }

                //if (facultyId != fID && !Roles.IsUserInRole("Admin"))
                //{
                //    fID = facultyId;
                //}

            }
            else if (fid != null)
            {
                string fUser = ""; string fPwd = "";

                if (TempData["FUserName"] != null)
                {
                    fUser = TempData["FUserName"].ToString();
                }

                if (TempData["FPassword"] != null)
                {
                    fPwd = TempData["FPassword"].ToString();
                }

                if (Membership.ValidateUser(fUser.TrimEnd(' '), fPwd.TrimEnd(' ')))
                {
                    FormsAuthentication.SetAuthCookie(fUser, false);
                    //int facultyId = db.jntuh_registered_faculty.Where(f => f.UserId == userID).Select(f => f.id).FirstOrDefault();
                    //string fid = Utilities.EncryptString(facultyId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);

                    return RedirectToAction("FacultyNew", "OnlineRegistration", new { fid = fid });
                }

                //return RedirectToAction("Logon", "Account");
            }

            ViewBag.Id = fid;
            ViewBag.FacultyID = fID;

            DateTime todayDate = DateTime.Now.Date;

            List<DistinctDepartment> depts = new List<DistinctDepartment>();
            string existingDepts = string.Empty;
            int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };
            foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
            {
                if (!existingDepts.Split(',').Contains(item.departmentName))
                {
                    depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
                    existingDepts = existingDepts + "," + item.departmentName;
                }
            }

            ViewBag.department = depts;
            ViewBag.designation = db.jntuh_designation.Where(c => c.isActive == true).ToList();
            ViewBag.Institutions = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { CollegeId = c.id, CollegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.CollegeName).ToList();

            List<SelectListItem> ratifiedDuration = new List<SelectListItem>();
            for (int i = 1; i <= 10; i++)
            {
                ratifiedDuration.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.duration = ratifiedDuration;

            List<SelectListItem> prevExperience = new List<SelectListItem>();
            for (int i = 0; i <= 40; i++)
            {
                prevExperience.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.prevExperience = prevExperience;

            List<SelectListItem> years = new List<SelectListItem>();
            for (int i = 1940; i <= DateTime.Now.Year; i++)
            {
                years.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.years = years;

            List<SelectListItem> division = new List<SelectListItem>();
            for (int i = 1; i <= 5; i++)
            {
                division.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.division = division;

            FacultyRegistration regFaculty = new FacultyRegistration();
            int FUserID = db.jntuh_registered_faculty.Where(U => U.id == fID).Select(U => U.UserId).FirstOrDefault();
            int FLUserID = db.jntuh_registered_faculty_log.Where(U => U.UserId == FUserID).Select(U => U.id).FirstOrDefault();
            int? FExID = db.jntuh_registered_faculty_experience_log.Where(E => E.facultyId == fID).Select(E => E.facultyId).FirstOrDefault();
            if (fID == 0)
            {
                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                            .Select(e => new RegisteredFacultyEducation
                                                            {
                                                                educationId = e.id,
                                                                educationName = e.educationCategoryName,
                                                                studiedEducation = string.Empty,
                                                                specialization = string.Empty,
                                                                passedYear = 0,
                                                                percentage = 0,
                                                                division = 0,
                                                                university = string.Empty,
                                                                place = string.Empty,
                                                                facultyCertificate = string.Empty,
                                                            }).ToList();
            }

            else
            {
                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                             .Select(e => new RegisteredFacultyEducation
                                                             {
                                                                 educationId = e.id,
                                                                 educationName = e.educationCategoryName,
                                                                 studiedEducation = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                                 specialization = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.specialization).FirstOrDefault(),
                                                                 passedYear = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.passedYear).FirstOrDefault(),
                                                                 percentage = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                                 division = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.division).FirstOrDefault(),
                                                                 university = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                                 place = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                                 facultyCertificate = db.jntuh_registered_faculty_education_log.Where(fe => fe.educationId == e.id && fe.facultyId == FLUserID).Select(fe => fe.certificate).FirstOrDefault(),
                                                             }).ToList();

                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }
            }

            //regFaculty.RFExperience = db.jntuh_registered_faculty_experience_log.Where(E => E.id == FExID)
            regFaculty.RFExperience = db.jntuh_registered_faculty_experience_log.Where(E => E.isActive == true && E.facultyId == FExID)
                                            .Select(E => new RegisteredfacultyExperience

                                            {
                                                CollegeName = db.jntuh_college.Where(C => C.id == E.collegeId).Select(C => C.collegeName).FirstOrDefault(),
                                                facultyDesignation = db.jntuh_designation.Where(D => D.id == E.facultyDesignationId).Select(D => D.designation).FirstOrDefault(),
                                                CollegeId = E.collegeId,
                                                DesignationId = E.facultyDesignationId,
                                                facultyDateOfAppointment = E.facultyDateOfAppointment,
                                                facultyDateOfResignation = E.facultyDateOfResignation,
                                                RelievingLetter = E.facultyRelievingLetter,
                                                JoiningOrder = E.facultyJoiningOrder,
                                                Salary = E.facultySalary

                                            }).ToList();
            regFaculty.GenderId = null;
            regFaculty.isFacultyRatifiedByJNTU = null;

            if (fID > 0)
            {

                jntuh_registered_faculty_log faculty = db.jntuh_registered_faculty_log.Find(FLUserID);
                regFaculty.id = fID;
                regFaculty.Type = faculty.type;
                regFaculty.NewPassword = "TEMP@PWD";
                regFaculty.ConfirmPassword = "TEMP@PWD";
                int facultyUserId = db.jntuh_registered_faculty.Find(regFaculty.id).UserId;
                regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == facultyUserId).Select(u => u.name).FirstOrDefault();
                regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                regFaculty.UniqueID = faculty.UniqueID;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.GenderId = faculty.GenderId;
                regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                regFaculty.MotherName = faculty.MotherName;
                if (faculty.DateOfBirth != null)
                    regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                regFaculty.OrganizationName = faculty.OrganizationName;
                regFaculty.DesignationId = faculty.DesignationId;
                if (faculty.DesignationId != null)
                {
                    regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                }
                regFaculty.DepartmentId = faculty.DepartmentId;
                if (faculty.DepartmentId != null)
                {
                    regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                }
                if (faculty.collegeId != null)
                {
                    regFaculty.CollegeName = db.jntuh_college.Find(faculty.collegeId).collegeName;
                }

                regFaculty.CollegeId = faculty.collegeId;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.OtherDepartment = faculty.OtherDepartment;
                regFaculty.OtherDesignation = faculty.OtherDesignation;
                if (faculty.DateOfAppointment != null)
                    regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                if (faculty.DateOfRatification != null)
                    regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.GrossSalary = faculty.grosssalary;
                regFaculty.IncomeTaxFileview = faculty.IncometaxDocument;
               
                regFaculty.TotalExperience = faculty.TotalExperience;
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege ?? 0;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                regFaculty.Email = faculty.Email;
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.facultyPhoto = faculty.Photo;
                regFaculty.facultyPANCardDocument = faculty.PANDocument;
                regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                regFaculty.isActive = faculty.isActive;
                regFaculty.isApproved = faculty.isApproved;
                regFaculty.isView = true;
                TempData["FacultyDetails"] = regFaculty;
                ViewBag.id = regFaculty.id;
            }
            else
            {
                if (vFaculty.isView != null)
                {
                    regFaculty = vFaculty;

                    if (vFaculty.CollegeId != null)
                    {
                        regFaculty.CollegeName = db.jntuh_college.Find(vFaculty.CollegeId).collegeName;
                    }

                    if (vFaculty.DesignationId != null)
                    {
                        regFaculty.designation = db.jntuh_designation.Find(vFaculty.DesignationId).designation;
                    }

                    if (vFaculty.DepartmentId != null)
                    {
                        regFaculty.department = db.jntuh_department.Find(vFaculty.DepartmentId).departmentName;
                    }

                    regFaculty.OtherDepartment = vFaculty.OtherDepartment;
                    regFaculty.OtherDesignation = vFaculty.OtherDesignation;
                    regFaculty.isFacultyRatifiedByJNTU = vFaculty.isFacultyRatifiedByJNTU;


                }
            }

            return View(regFaculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        [HttpGet]
        public ActionResult NotApprovedInformation(string fid, string Command, string facultyid)
        {

            var notapproved = db.jntuh_faculty_deactivation_reason.ToList();
            ViewBag.notapproved = notapproved;
            TempData["facultyid"] = facultyid;
            TempData["fid"] = fid;
            return PartialView("_NotApprovedInformation", notapproved);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        [HttpGet]
        public ActionResult PHDNotApprovedInformation(string fid, string Command, string facultyid)
        {

            var notapproved = db.jntuh_faculty_deactivation_reason.ToList();
            ViewBag.notapproved = notapproved;
            TempData["facultyid"] = facultyid;
            TempData["fid"] = fid;
            return PartialView("_PHDNotApprovedInformation", notapproved);
        }


        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult NotApprovedFacultyInformation(string[] remarks, string fid, int facultyid, string others)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var uid = db.jntuh_registered_faculty.Where(i => i.id == facultyid).FirstOrDefault();
            var faculty_log = db.jntuh_registered_faculty_log.Where(i => i.UserId == uid.UserId && i.RegistrationNumber == uid.RegistrationNumber).FirstOrDefault();
            if (faculty_log != null)
            {
                faculty_log.Remarks = "Not Approved";
                faculty_log.DeactivatedBy = userID;
                faculty_log.DeactivatedOn = DateTime.Now;
                faculty_log.FacultyApprovedStatus = 2;
                if (remarks != null)
                {
                    faculty_log.DeactivationReason = string.Join(",", remarks) + (!string.IsNullOrEmpty(others) ? "," + others : null);
                }
                else
                {
                    faculty_log.DeactivationReason = others;
                }
                db.SaveChanges();

                if (uid.UserId != null)
                {
                    uid.collegeId = faculty_log.collegeId;
                    uid.FirstName = faculty_log.FirstName;
                    uid.LastName = faculty_log.LastName;
                    uid.GenderId = faculty_log.GenderId;
                    uid.FatherOrHusbandName = faculty_log.FatherOrHusbandName;
                    uid.MotherName = faculty_log.MotherName;
                    uid.WorkingStatus = faculty_log.WorkingStatus;
                    uid.OrganizationName = faculty_log.OrganizationName;
                    uid.DesignationId = faculty_log.DesignationId;
                    uid.OtherDesignation = faculty_log.OtherDesignation;
                    uid.DepartmentId = faculty_log.DepartmentId;
                    uid.OtherDepartment = faculty_log.OtherDepartment;
                    uid.grosssalary = faculty_log.grosssalary;
                    uid.DateOfAppointment = faculty_log.DateOfAppointment;
                    uid.isFacultyRatifiedByJNTU = faculty_log.isFacultyRatifiedByJNTU;
                    uid.DateOfRatification = faculty_log.DateOfRatification;
                    uid.ProceedingsNumber = faculty_log.ProceedingsNumber;
                    uid.AICTEFacultyId = faculty_log.AICTEFacultyId;
                    uid.TotalExperience = faculty_log.TotalExperience;
                    uid.PANNumber = faculty_log.PANNumber;
                    uid.AadhaarNumber = faculty_log.AadhaarNumber;
                    uid.Mobile = faculty_log.Mobile;
                    uid.Email = faculty_log.Email;
                    uid.National = faculty_log.National;
                    uid.InterNational = faculty_log.InterNational;
                    uid.Citation = faculty_log.Citation;
                    uid.Awards = faculty_log.Awards;
                    uid.Photo = faculty_log.Photo;
                    uid.PANDocument = faculty_log.PANDocument;
                    uid.AadhaarDocument = faculty_log.AadhaarDocument;
                    uid.isActive = faculty_log.isActive;
                    uid.isApproved = faculty_log.isApproved;
                    uid.DeactivationReason = faculty_log.DeactivationReason;
                    uid.DeactivatedOn = faculty_log.DeactivatedOn;
                    uid.DeactivatedBy = faculty_log.DeactivatedBy;
                    uid.updatedOn = DateTime.Now;
                    uid.updatedBy = userID;
                    db.SaveChanges();
                }

                var education_log = db.jntuh_registered_faculty_education_log.Where(i => i.facultyId == faculty_log.id).ToList();

                var education = db.jntuh_registered_faculty_education.Where(i => i.facultyId == facultyid).ToList();

                foreach (var item in education_log)
                {
                    var log = education.Where(i => i.educationId == item.educationId && i.facultyId == facultyid).ToList();
                    if (log.Count >= 1)
                    {
                        log.FirstOrDefault().courseStudied = item.courseStudied;
                        log.FirstOrDefault().specialization = item.specialization;
                        log.FirstOrDefault().passedYear = item.passedYear;
                        log.FirstOrDefault().marksPercentage = item.marksPercentage;
                        log.FirstOrDefault().division = item.division;
                        log.FirstOrDefault().boardOrUniversity = item.boardOrUniversity;
                        log.FirstOrDefault().placeOfEducation = item.placeOfEducation;
                        log.FirstOrDefault().certificate = item.certificate;
                        log.FirstOrDefault().updatedOn = DateTime.Now;
                        log.FirstOrDefault().updatedBy = userID;
                        db.SaveChanges();
                    }
                }
                TempData["facultyerror"] = "";
                var email = faculty_log.Email;
                IUserMailer mailer = new UserMailer();
                mailer.FacultyNotApprovedStatus(email, "Faculty NotApproved", uid.RegistrationNumber, faculty_log.DeactivationReason, "Faculty Registration Status").SendAsync();
            }

            else
            {
                TempData["facultyerror"] = "Faculty details doesn't match";
                return RedirectToAction("FacultyInformation", new { fid = fid });
            }

            return RedirectToAction("FacultySecondStepVerification", new { fid = fid });
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult NotApprovedPHDInformation(string[] remarks, string fid, int facultyid, string others)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var uid = db.jntuh_registered_faculty.Where(i => i.id == facultyid).FirstOrDefault();
            var faculty_log = db.jntuh_registered_faculty_log.Where(i => i.UserId == uid.UserId && i.RegistrationNumber == uid.RegistrationNumber).FirstOrDefault();
            if (faculty_log != null)
            {
                faculty_log.Remarks = "Not Approved";
                faculty_log.DeactivatedBy = userID;
                faculty_log.DeactivatedOn = DateTime.Now;
                faculty_log.FacultyApprovedStatus = 2;
                if (remarks != null)
                {
                    faculty_log.DeactivationReason = string.Join(",", remarks) + (!string.IsNullOrEmpty(others) ? "," + others : null);
                }
                else
                {
                    faculty_log.DeactivationReason = others;
                }
                db.SaveChanges();

                if (uid.UserId != null)
                {
                    uid.collegeId = faculty_log.collegeId;
                    uid.FirstName = faculty_log.FirstName;
                    uid.LastName = faculty_log.LastName;
                    uid.GenderId = faculty_log.GenderId;
                    uid.FatherOrHusbandName = faculty_log.FatherOrHusbandName;
                    uid.MotherName = faculty_log.MotherName;
                    uid.WorkingStatus = faculty_log.WorkingStatus;
                    uid.OrganizationName = faculty_log.OrganizationName;
                    uid.DesignationId = faculty_log.DesignationId;
                    uid.OtherDesignation = faculty_log.OtherDesignation;
                    uid.DepartmentId = faculty_log.DepartmentId;
                    uid.OtherDepartment = faculty_log.OtherDepartment;
                    uid.grosssalary = faculty_log.grosssalary;
                    uid.DateOfAppointment = faculty_log.DateOfAppointment;
                    uid.isFacultyRatifiedByJNTU = faculty_log.isFacultyRatifiedByJNTU;
                    uid.DateOfRatification = faculty_log.DateOfRatification;
                    uid.ProceedingsNumber = faculty_log.ProceedingsNumber;
                    uid.AICTEFacultyId = faculty_log.AICTEFacultyId;
                    uid.TotalExperience = faculty_log.TotalExperience;
                    uid.PANNumber = faculty_log.PANNumber;
                    uid.AadhaarNumber = faculty_log.AadhaarNumber;
                    uid.Mobile = faculty_log.Mobile;
                    uid.Email = faculty_log.Email;
                    uid.National = faculty_log.National;
                    uid.InterNational = faculty_log.InterNational;
                    uid.Citation = faculty_log.Citation;
                    uid.Awards = faculty_log.Awards;
                    uid.Photo = faculty_log.Photo;
                    uid.PANDocument = faculty_log.PANDocument;
                    uid.AadhaarDocument = faculty_log.AadhaarDocument;
                    uid.isActive = faculty_log.isActive;
                    uid.isApproved = faculty_log.isApproved;
                    uid.DeactivationReason = faculty_log.DeactivationReason;
                    uid.DeactivatedOn = faculty_log.DeactivatedOn;
                    uid.DeactivatedBy = faculty_log.DeactivatedBy;

                    //db.SaveChanges();
                }

                var education_log = db.jntuh_registered_faculty_education_log.Where(i => i.facultyId == faculty_log.id).ToList();

                var education = db.jntuh_registered_faculty_education.Where(i => i.facultyId == facultyid).ToList();

                foreach (var item in education_log)
                {
                    var log = education.Where(i => i.educationId == item.educationId && i.facultyId == facultyid).ToList();
                    if (log.Count >= 1)
                    {
                        log.FirstOrDefault().courseStudied = item.courseStudied;
                        log.FirstOrDefault().specialization = item.specialization;
                        log.FirstOrDefault().passedYear = item.passedYear;
                        log.FirstOrDefault().marksPercentage = item.marksPercentage;
                        log.FirstOrDefault().division = item.division;
                        log.FirstOrDefault().boardOrUniversity = item.boardOrUniversity;
                        log.FirstOrDefault().placeOfEducation = item.placeOfEducation;
                        log.FirstOrDefault().certificate = item.certificate;
                        log.FirstOrDefault().updatedOn = DateTime.Now;
                        log.FirstOrDefault().updatedBy = userID;
                        //db.SaveChanges();
                    }
                }
                TempData["facultyerror"] = "";
                var email = faculty_log.Email;
                IUserMailer mailer = new UserMailer();
                mailer.FacultyNotApprovedStatus(email, "Faculty NotApproved", uid.RegistrationNumber, faculty_log.DeactivationReason, "Faculty Registration Status").SendAsync();
            }

            else
            {
                TempData["facultyerror"] = "Faculty details doesn't match";
                return RedirectToAction("PHDFacultyInformation", new { fid = fid });
            }

            return RedirectToAction("PHDSecondStepVerification");
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult FacultyInformation(FacultyRegistration faculty, string fid, string Command)
        {

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var faculty_log = db.jntuh_registered_faculty_log.Where(i => i.RegistrationNumber == faculty.RegistrationNumber).FirstOrDefault();
            var facultydetails = db.jntuh_registered_faculty.FirstOrDefault(i => i.RegistrationNumber == faculty.RegistrationNumber);
            //  var rid = db.jntuh_college_randamcodes.Where(e => e.IsActive == true && e.CollegeId == faculty.CollegeId).Select(e => e.Id).FirstOrDefault();
            if (facultydetails != null)
            {
                facultydetails.collegeId = faculty_log.collegeId;
                facultydetails.FirstName = faculty_log.FirstName;
                facultydetails.MiddleName = faculty_log.MiddleName;
                facultydetails.LastName = faculty_log.LastName;
                facultydetails.GenderId = faculty_log.GenderId;
                facultydetails.FatherOrHusbandName = faculty_log.FatherOrHusbandName;
                facultydetails.MotherName = faculty_log.MotherName;
                facultydetails.WorkingStatus = faculty_log.WorkingStatus;
                facultydetails.OrganizationName = faculty_log.OrganizationName;
                facultydetails.DesignationId = faculty_log.DesignationId;
                facultydetails.OtherDesignation = faculty_log.OtherDesignation;
                facultydetails.DepartmentId = faculty_log.DepartmentId;
                facultydetails.OtherDepartment = faculty_log.OtherDepartment;
              //  facultydetails.grosssalary = faculty_log.grosssalary;
               // facultydetails.DateOfAppointment = faculty_log.DateOfAppointment;
                facultydetails.isFacultyRatifiedByJNTU = faculty_log.isFacultyRatifiedByJNTU;
                facultydetails.DateOfRatification = faculty_log.DateOfRatification;
                facultydetails.ProceedingsNumber = faculty_log.ProceedingsNumber;
                facultydetails.ProceedingDocument = faculty_log.ProceedingDocument;
                facultydetails.DateOfBirth = faculty_log.DateOfBirth;
                facultydetails.AICTEFacultyId = faculty_log.AICTEFacultyId;
                facultydetails.TotalExperience = faculty_log.TotalExperience;
                facultydetails.TotalExperiencePresentCollege = faculty_log.TotalExperiencePresentCollege;
                facultydetails.PANNumber = faculty_log.PANNumber;
                facultydetails.AadhaarNumber = faculty_log.AadhaarNumber;
                facultydetails.Mobile = faculty_log.Mobile;
                facultydetails.Email = faculty_log.Email;
                facultydetails.National = faculty_log.National;
                facultydetails.InterNational = faculty_log.InterNational;
                facultydetails.Citation = faculty_log.Citation;
                facultydetails.Awards = faculty_log.Awards;
                facultydetails.Photo = faculty_log.Photo;
                facultydetails.PANDocument = faculty_log.PANDocument;
                facultydetails.AadhaarDocument = faculty_log.AadhaarDocument;
                facultydetails.isActive = faculty_log.isActive;
                facultydetails.isApproved = faculty_log.isApproved;
               // facultydetails.grosssalary = faculty_log.grosssalary;
              //  facultydetails.DateOfAppointment = faculty_log.DateOfAppointment;
                facultydetails.IncometaxDocument = faculty_log.IncometaxDocument;
                facultydetails.PGSpecializationRemarks = faculty_log.Remarks;
                facultydetails.PGSpecialization = faculty_log.PGSpecialization;
                facultydetails.PHDUndertakingDocument = faculty_log.PHDUndertakingDocument;
                facultydetails.updatedOn = DateTime.Now;
                facultydetails.updatedBy = faculty_log.UserId;



                facultydetails.FacultyVerificationStatus = true;
                facultydetails.DeactivatedBy = userID;
                facultydetails.DeactivatedOn = DateTime.Now;
                db.Entry(facultydetails).State = EntityState.Modified;
                db.SaveChanges();

                var education_log = db.jntuh_registered_faculty_education_log.Where(i => i.facultyId == facultydetails.id).ToList();

                var education = db.jntuh_registered_faculty_education.Where(i => i.facultyId == facultydetails.id).ToList();
                jntuh_registered_faculty_education log1 = new jntuh_registered_faculty_education();
                foreach (var item in education_log)
                {
                    var log = education.Where(i => i.educationId == item.educationId && i.facultyId == facultydetails.id).ToList();
                    if (log.Count >= 1)
                    {
                        log.FirstOrDefault().courseStudied = item.courseStudied;
                        log.FirstOrDefault().specialization = item.specialization;
                        log.FirstOrDefault().passedYear = item.passedYear;
                        log.FirstOrDefault().marksPercentage = item.marksPercentage;
                        log.FirstOrDefault().division = item.division;
                        log.FirstOrDefault().boardOrUniversity = item.boardOrUniversity;
                        log.FirstOrDefault().placeOfEducation = item.placeOfEducation;
                        log.FirstOrDefault().certificate = item.certificate;
                        //log.FirstOrDefault().updatedOn = DateTime.Now;
                        //log.FirstOrDefault().updatedBy = faculty_log.UserId;
                        db.SaveChanges();

                    }
                    else
                    {
                        log1.facultyId = item.facultyId;
                        log1.educationId = item.educationId;
                        log1.courseStudied = item.courseStudied;

                        log1.specialization = item.specialization;
                        log1.passedYear = item.passedYear;
                        log1.marksPercentage = item.marksPercentage;
                        log1.division = item.division;
                        log1.boardOrUniversity = item.boardOrUniversity;
                        log1.placeOfEducation = item.placeOfEducation;
                        log1.certificate = item.certificate;
                        log1.isActive = true;
                        log1.createdOn = DateTime.Now;
                        log1.createdBy = faculty_log.UserId;
                        db.jntuh_registered_faculty_education.Add(log1);
                        db.SaveChanges();
                    }
                }

                faculty_log.FacultyApprovedStatus = 1;
                db.Entry(faculty_log).State=EntityState.Modified;
                db.SaveChanges();


            }
            return RedirectToAction("FacultySecondStepVerification");
            ////var Facultydata = db.jntuh_registered_faculty_log.FirstOrDefault(R => R.RegistrationNumber == faculty.RegistrationNumber);
            ////Facultydata.Remarks = "Approved";


            //fid = UAAAS.Models.Utilities.EncryptString(faculty.id.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]);
            //TempData["SUCCESS"] = null;
            //TempData["ERROR"] = null;

            //if (Command == "Go Back" || (faculty.Type == null && faculty.FirstName == null))
            //{
            //    return RedirectToAction("FacultyNew");
            //}

            //List<DistinctDepartment> depts = new List<DistinctDepartment>();
            //string existingDepts = string.Empty;

            //int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };

            //foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
            //{
            //    if (!existingDepts.Contains(item.departmentName))
            //    {
            //        depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
            //        existingDepts = existingDepts + "," + item.departmentName;
            //    }
            //}

            //ViewBag.department = depts;
            //ViewBag.designation = db.jntuh_designation.Where(c => c.isActive == true).ToList();
            //ViewBag.Institutions = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { CollegeId = c.id, CollegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.CollegeName).ToList();

            //List<SelectListItem> ratifiedDuration = new List<SelectListItem>();
            //for (int i = 1; i <= 10; i++)
            //{
            //    ratifiedDuration.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            //}
            //ViewBag.duration = ratifiedDuration;

            //List<SelectListItem> prevExperience = new List<SelectListItem>();
            //for (int i = 0; i <= 40; i++)
            //{
            //    prevExperience.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            //}
            //ViewBag.prevExperience = prevExperience;

            //List<SelectListItem> years = new List<SelectListItem>();
            //for (int i = 1940; i <= DateTime.Now.Year; i++)
            //{
            //    years.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            //}
            //ViewBag.years = years;

            //List<SelectListItem> division = new List<SelectListItem>();
            //for (int i = 1; i <= 5; i++)
            //{
            //    division.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            //}

            //ViewBag.division = division;

            //int fID = 0;
            //if (fid != null)
            //{
            //    fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            //}

            //ViewBag.FacultyID = fID;

            //string photoPath = "~/Content/Upload/Faculty/PHOTOS";
            //string panCardsPath = "~/Content/Upload/Faculty/PANCARDS";
            //string aadhaarCardsPath = "~/Content/Upload/Faculty/AADHAARCARDS";
            //string proceedingsPath = "~/Content/Upload/Faculty/PROCEEDINGS";
            //string certificatesPath = "~/Content/Upload/Faculty/CERTIFICATES";

            //if (Command == "Register")
            //{
            //    bool isFacultyValid = true;
            //    string errorMessage = "";

            //    //VALIDATE THE FORM FOR ALL MANDATORY FIELDS

            //    //VERIFY FOR THE FACULTY PHOTO DIMENSIONS
            //    if (faculty.Photo != null && faculty.Photo.ContentLength > 0)
            //    {
            //        System.IO.Stream fileStream = faculty.Photo.InputStream;
            //        fileStream.Position = 0;
            //        byte[] fileContents = new byte[faculty.Photo.ContentLength];
            //        fileStream.Read(fileContents, 0, faculty.Photo.ContentLength);
            //        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

            //        if (image.Width > 200 || image.Height > 230)
            //        {
            //            isFacultyValid = false;
            //            errorMessage += ". " + "Photo should be minimum 150x150 and maximum 200x230 pixels" + "<br>";
            //        }

            //        if (image.Width < 150 || image.Height < 150)
            //        {
            //            isFacultyValid = false;
            //            errorMessage += ". " + "Photo should be minimum 150x150 and maximum 200x230 pixels" + "<br>";
            //        }
            //    }
            //    else
            //    {
            //        isFacultyValid = false;
            //        errorMessage += ". " + "Photo is mandatory" + "<br>";
            //    }


            //    if (faculty.PANCardDocument != null)
            //    {
            //        System.IO.Stream fileStream = faculty.PANCardDocument.InputStream;
            //        fileStream.Position = 0;
            //        byte[] fileContents = new byte[faculty.PANCardDocument.ContentLength];
            //        fileStream.Read(fileContents, 0, faculty.PANCardDocument.ContentLength);
            //        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

            //        if (image.Width < 300 || image.Height < 250)
            //        {
            //            isFacultyValid = false;
            //            errorMessage += ". " + "PANCARD document should be minimum 300x250 pixels" + "<br>";
            //        }
            //    }
            //    else
            //    {
            //        if (faculty.Type.ToUpper() == "EXISTFACULTY")
            //        {
            //            isFacultyValid = false;
            //            errorMessage += ". " + "PANCARD is mandatory" + "<br>";
            //        }
            //    }

            //    if (faculty.AadhaarNumber != null)
            //    {
            //        if (faculty.AadhaarCardDocument != null)
            //        {
            //            System.IO.Stream fileStream = faculty.AadhaarCardDocument.InputStream;
            //            fileStream.Position = 0;
            //            byte[] fileContents = new byte[faculty.AadhaarCardDocument.ContentLength];
            //            fileStream.Read(fileContents, 0, faculty.AadhaarCardDocument.ContentLength);
            //            System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

            //            if (image.Width < 200 || image.Height < 200)
            //            {
            //                isFacultyValid = false;
            //                errorMessage += ". " + "Aadhaar Card document should be minimum 200x200 pixels" + "<br>";
            //            }
            //        }
            //        else
            //        {
            //            isFacultyValid = false;
            //            errorMessage += ". " + "Aadhaar Card document is mandatory" + "<br>";
            //        }
            //    }

            //    if (faculty.ProceedingsNo != null)
            //    {
            //        if (faculty.SelectionCommitteeProceedingsDocument != null)
            //        {
            //            System.IO.Stream fileStream = faculty.SelectionCommitteeProceedingsDocument.InputStream;
            //            fileStream.Position = 0;
            //            byte[] fileContents = new byte[faculty.SelectionCommitteeProceedingsDocument.ContentLength];
            //            fileStream.Read(fileContents, 0, faculty.SelectionCommitteeProceedingsDocument.ContentLength);
            //            System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

            //            if (image.Width < 600 || image.Height < 800)
            //            {
            //                isFacultyValid = false;
            //                errorMessage += ". " + "Selection Committee Proceedings document should be minimum 600x800 pixels" + "<br>";
            //            }
            //        }
            //        else
            //        {
            //            isFacultyValid = false;
            //            errorMessage += ". " + "Selection Committee Proceedings document is mandatory" + "<br>";
            //        }
            //    }

            //    int vIndex = 0;
            //    foreach (var item in faculty.FacultyEducation)
            //    {
            //        if (item.certificate != null)
            //        {
            //            System.IO.Stream fileStream = item.certificate.InputStream;
            //            fileStream.Position = 0;
            //            byte[] fileContents = new byte[item.certificate.ContentLength];
            //            fileStream.Read(fileContents, 0, item.certificate.ContentLength);
            //            System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

            //            if (image.Width < 600 || image.Height < 800)
            //            {
            //                isFacultyValid = false;
            //                errorMessage += ". " + item.educationName + " document should be minimum 600x800 pixels" + "<br>";
            //            }
            //        }
            //        else
            //        {
            //            if (vIndex < 2)
            //            {
            //                isFacultyValid = false;
            //                errorMessage += ". " + item.educationName + " document is mandatory" + "<br>";
            //            }
            //            else if (item.studiedEducation != null)
            //            {
            //                isFacultyValid = false;
            //                errorMessage += ". " + item.educationName + " document is mandatory" + "<br>";
            //            }
            //        }

            //        vIndex++;
            //    }


            //    if (!isFacultyValid)
            //    {
            //        TempData["ERROR"] = errorMessage;

            //        if (faculty.facultyDateOfBirth != null)
            //            faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);
            //        if (faculty.facultyDateOfAppointment != null)
            //            faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);
            //        if (faculty.facultyDateOfRatification != null)
            //            faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

            //        TempData["FACULTY"] = faculty;
            //        return RedirectToAction("FacultyNew");
            //    }

            //    //IF VALIDATION SUCCESS THEN SAVE THE IMAGES & DOCUMENTS

            //    if (faculty.Photo != null)
            //    {
            //        if (!Directory.Exists(Server.MapPath(photoPath)))
            //        {
            //            Directory.CreateDirectory(Server.MapPath(photoPath));
            //        }

            //        var ext = Path.GetExtension(faculty.Photo.FileName);

            //        if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
            //        {
            //            string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
            //            faculty.Photo.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(photoPath), fileName, ext));
            //            faculty.facultyPhoto = string.Format("{0}{1}", fileName, ext);
            //        }
            //    }
            //    else if (faculty.facultyPhoto != null)
            //    {
            //        faculty.facultyPhoto = faculty.facultyPhoto;
            //    }

            //    if (faculty.PANCardDocument != null)
            //    {
            //        if (!Directory.Exists(Server.MapPath(panCardsPath)))
            //        {
            //            Directory.CreateDirectory(Server.MapPath(panCardsPath));
            //        }

            //        var ext = Path.GetExtension(faculty.PANCardDocument.FileName);

            //        if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
            //        {
            //            string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
            //            faculty.PANCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(panCardsPath), fileName, ext));
            //            faculty.facultyPANCardDocument = string.Format("{0}{1}", fileName, ext);
            //        }
            //    }
            //    else if (faculty.facultyPANCardDocument != null)
            //    {
            //        faculty.facultyPANCardDocument = faculty.facultyPANCardDocument;
            //    }

            //    if (faculty.AadhaarCardDocument != null)
            //    {
            //        if (!Directory.Exists(Server.MapPath(aadhaarCardsPath)))
            //        {
            //            Directory.CreateDirectory(Server.MapPath(aadhaarCardsPath));
            //        }

            //        var ext = Path.GetExtension(faculty.AadhaarCardDocument.FileName);

            //        if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
            //        {
            //            string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
            //            faculty.AadhaarCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(aadhaarCardsPath), fileName, ext));
            //            faculty.facultyAadhaarCardDocument = string.Format("{0}{1}", fileName, ext);
            //        }
            //    }
            //    else if (faculty.facultyAadhaarCardDocument != null)
            //    {
            //        faculty.facultyAadhaarCardDocument = faculty.facultyAadhaarCardDocument;
            //    }

            //    if (faculty.SelectionCommitteeProceedingsDocument != null)
            //    {
            //        if (!Directory.Exists(Server.MapPath(proceedingsPath)))
            //        {
            //            Directory.CreateDirectory(Server.MapPath(proceedingsPath));
            //        }

            //        var ext = Path.GetExtension(faculty.SelectionCommitteeProceedingsDocument.FileName);

            //        if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
            //        {
            //            string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
            //            faculty.SelectionCommitteeProceedingsDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(proceedingsPath), fileName, ext));
            //            faculty.SelectionCommitteeProcedings = string.Format("{0}{1}", fileName, ext);

            //        }
            //    }
            //    else if (faculty.SelectionCommitteeProcedings != null)
            //    {
            //        faculty.SelectionCommitteeProcedings = faculty.SelectionCommitteeProcedings;
            //    }

            //    int eIndex = 0;
            //    foreach (var item in faculty.FacultyEducation)
            //    {
            //        if ((eIndex == 0 && item.studiedEducation == null) || (eIndex != 0 && item.studiedEducation != null))
            //        {
            //            if (item.certificate != null)
            //            {
            //                if (!Directory.Exists(Server.MapPath(certificatesPath)))
            //                {
            //                    Directory.CreateDirectory(Server.MapPath(certificatesPath));
            //                }

            //                var ext = Path.GetExtension(item.certificate.FileName);

            //                if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
            //                {
            //                    string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1) + "_" + item.studiedEducation;
            //                    item.certificate.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(certificatesPath), fileName, ext));
            //                    item.facultyCertificate = string.Format("{0}{1}", fileName, ext);
            //                }
            //            }
            //            else if (item.facultyCertificate != null)
            //            {
            //                item.facultyCertificate = item.facultyCertificate;
            //            }
            //        }

            //        eIndex++;
            //    }

            //    if (faculty.Type.ToUpper() == "EXISTFACULTY")
            //    {
            //        faculty.WorkingStatus = true;
            //    }

            //    faculty.isView = true;

            //    TempData["FACULTY"] = faculty;
            //    return RedirectToAction("FacultyNew");
            //}

            //if (fid == null && faculty.id > 0)
            //{
            //    fid = UAAAS.Models.Utilities.EncryptString(faculty.id.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);
            //}

            //bool IsValidPhoto = true;

            //if (faculty.facultyDateOfBirth != null)
            //    faculty.facultyDateOfBirth = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfBirth).ToShortDateString();
            //if (faculty.facultyDateOfAppointment != null)
            //    faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfAppointment).ToShortDateString();
            //if (faculty.facultyDateOfRatification != null)
            //    faculty.facultyDateOfRatification = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfRatification).ToShortDateString();

            //if (!ModelState.IsValid)
            //{
            //    var errors = ModelState.Where(v => v.Value.Errors.Any());
            //    var message = string.Join(" | ", ModelState.Values
            //        .SelectMany(v => v.Errors)
            //        .Select(e => e.ErrorMessage));
            //    //return new HttpStatusCodeResult(1, message);
            //}

            //int UserId = 0;

            //string userName = string.Empty; string password = string.Empty; string email = string.Empty;

            ////if (ModelState.IsValid && IsValidPhoto)
            ////{
            //if (fid == null)
            //{
            //    // Attempt to register the user
            //    MembershipCreateStatus createStatus;
            //    Membership.CreateUser(faculty.Email, faculty.NewPassword, faculty.Email, null, null, true, null, out createStatus);

            //    if (createStatus == MembershipCreateStatus.Success)
            //    {
            //        //add user role to my_aspnet_usersinroles table
            //        my_aspnet_usersinroles roleModel = new my_aspnet_usersinroles();
            //        roleModel.roleId = 7; // 7 = Faculty Role
            //        roleModel.userId = db.my_aspnet_users.Where(u => u.name == faculty.Email).Select(u => u.id).FirstOrDefault();
            //        db.my_aspnet_usersinroles.Add(roleModel);
            //        db.SaveChanges();

            //        UserId = roleModel.userId;
            //        userName = faculty.Email;
            //        password = faculty.NewPassword;
            //        email = faculty.Email;
            //    }
            //    else
            //    {
            //        UserId = 0;
            //        //TempData["ERROR"] = ErrorCodeToString1(createStatus);
            //        if (faculty.facultyDateOfBirth != null)
            //            faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);
            //        if (faculty.facultyDateOfAppointment != null)
            //            faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);
            //        if (faculty.facultyDateOfRatification != null)
            //            faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

            //        return View(faculty);
            //    }
            //}
            //else
            //{
            //    UserId = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UserId).FirstOrDefault();
            //}
            ////}

            ////if (ModelState.IsValid && UserId > 0 && IsValidPhoto)
            //if (UserId > 0 && IsValidPhoto)
            //{
            //    jntuh_registered_faculty regFaculty = new jntuh_registered_faculty();
            //    regFaculty.UserId = UserId;

            //    if (faculty.isApproved == true && string.IsNullOrEmpty(faculty.UniqueID))
            //    {
            //        //string strNumber = DateTime.Now.Year.ToString().Substring(2, 2);
            //        //strNumber += faculty.FirstName.Substring(0, 1) + faculty.LastName.Substring(0, 1);
            //        //strNumber += faculty.facultyDateOfBirth.GetLast(2);
            //        //if (faculty.Type != "NewFaculty")
            //        //{
            //        //    if (faculty.DepartmentId != null)
            //        //    {
            //        //        string fDepartment = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
            //        //        strNumber += fDepartment.Substring(0, 3);
            //        //    }
            //        //    else
            //        //    {
            //        //        strNumber += "ENW";
            //        //    }
            //        //}
            //        //else
            //        //{
            //        //    strNumber += "NEW";
            //        //}
            //        //strNumber += "001";
            //        //strNumber = VerifyFRN(strNumber);
            //        //regFaculty.UniqueID = strNumber;

            //        regFaculty.UniqueID = string.Empty;
            //        regFaculty.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();

            //        ////send email
            //        //IUserMailer mailer = new UserMailer();
            //        //mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
            //        //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

            //    }
            //    else if (faculty.isApproved == true && !string.IsNullOrEmpty(faculty.UniqueID))
            //    {
            //        regFaculty.UniqueID = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UniqueID).FirstOrDefault();
            //        regFaculty.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();
            //    }
            //    else
            //    {
            //        regFaculty.UniqueID = string.Empty;
            //        string regNumber = db.jntuh_registered_faculty.Where(f => f.UserId == regFaculty.UserId).Select(f => f.RegistrationNumber).FirstOrDefault();

            //        if (string.IsNullOrEmpty(regNumber))
            //        {
            //            Random rnd = new Random();
            //            regFaculty.RegistrationNumber = rnd.Next(0, 9999).ToString("D4") + "-" + DateTime.Now.ToString("yyyyMMdd-HHmmss").Substring(2);
            //        }
            //        else
            //        {
            //            regFaculty.RegistrationNumber = regNumber;
            //        }
            //    }

            //    regFaculty.type = faculty.Type;
            //    regFaculty.FirstName = faculty.FirstName;
            //    regFaculty.MiddleName = faculty.MiddleName;
            //    regFaculty.LastName = faculty.LastName;
            //    regFaculty.GenderId = faculty.GenderId == null ? 0 : (int)faculty.GenderId;
            //    regFaculty.FatherOrHusbandName = faculty.FatherOrhusbandName;
            //    regFaculty.DateOfBirth = Convert.ToDateTime(faculty.facultyDateOfBirth);
            //    regFaculty.OrganizationName = faculty.OrganizationName == null ? string.Empty : faculty.OrganizationName;
            //    regFaculty.DesignationId = faculty.DesignationId;
            //    regFaculty.DepartmentId = faculty.DepartmentId;
            //    regFaculty.WorkingStatus = faculty.WorkingStatus;
            //    regFaculty.collegeId = faculty.CollegeId;

            //    if (regFaculty.type == null)
            //    {
            //        if (faculty.WorkingStatus == null || faculty.WorkingStatus == false)
            //        {
            //            regFaculty.type = "NewFaculty";
            //            regFaculty.WorkingStatus = false;
            //        }
            //        else if (faculty.WorkingStatus == true)
            //        {
            //            regFaculty.type = "ExistFaculty";
            //        }
            //    }
            //    regFaculty.OtherDepartment = faculty.OtherDepartment;
            //    regFaculty.OtherDesignation = faculty.OtherDesignation;

            //    if (faculty.facultyDateOfAppointment != null)
            //        regFaculty.DateOfAppointment = Convert.ToDateTime(faculty.facultyDateOfAppointment);
            //    regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU == null ? false : (bool)faculty.isFacultyRatifiedByJNTU;

            //    if (faculty.facultyDateOfRatification != null)
            //        regFaculty.DateOfRatification = Convert.ToDateTime(faculty.facultyDateOfRatification);
            //    regFaculty.ProceedingsNumber = faculty.ProceedingsNo;

            //    if (faculty.TotalExperience != null)
            //    {
            //        regFaculty.TotalExperience = (int)faculty.TotalExperience;
            //    }
            //    else
            //    {
            //        regFaculty.TotalExperience = 0;
            //    }

            //    regFaculty.Email = faculty.Email;
            //    regFaculty.Mobile = faculty.Mobile;
            //    regFaculty.PANNumber = faculty.PANNumber;
            //    regFaculty.AadhaarNumber = faculty.AadhaarNumber;

            //    regFaculty.MotherName = faculty.MotherName;
            //    regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
            //    regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
            //    regFaculty.grosssalary = faculty.GrossSalary;
            //    regFaculty.National = faculty.National;
            //    regFaculty.InterNational = faculty.InterNational;
            //    regFaculty.Citation = faculty.Citation;
            //    regFaculty.Awards = faculty.Awards;

            //    regFaculty.isActive = true;
            //    regFaculty.isApproved = true;

            //    regFaculty.ProceedingDocument = null;
            //    var Facultylog = db.jntuh_registered_faculty_log.FirstOrDefault(R => R.RegistrationNumber == faculty.RegistrationNumber);
            //    if (Facultylog != null)
            //    {
            //        //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
            //        //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
            //        faculty.SelectionCommitteeProcedings = Facultylog.ProceedingDocument;
            //        faculty.PANNumber = Facultylog.PANNumber;
            //        faculty.facultyPANCardDocument = Facultylog.PANDocument;

            //    }
            //    if (faculty.SelectionCommitteeProcedings != null)
            //    {
            //        //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
            //        //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
            //        regFaculty.ProceedingDocument = faculty.SelectionCommitteeProcedings;
            //    }
            //    //PAN Number and PAn Document data reditect from log to Main
            //    if (faculty.PANNumber != null)
            //    {
            //        regFaculty.PANNumber = faculty.PANNumber;
            //    }
            //    if (faculty.facultyPANCardDocument != null)
            //    {
            //        regFaculty.PANDocument = faculty.facultyPANCardDocument;
            //    }

            //    regFaculty.Photo = null;
            //    if (faculty.facultyPhoto != null)
            //    {
            //        //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(photoPath), faculty.facultyPhoto), string.Format("{0}\\{1}", Server.MapPath(photoPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto)));
            //        //regFaculty.Photo = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto);
            //        regFaculty.Photo = faculty.facultyPhoto;
            //    }

            //    regFaculty.PANDocument = null;
            //    if (faculty.facultyPANCardDocument != null)
            //    {
            //        //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(panCardsPath), faculty.facultyPANCardDocument), string.Format("{0}\\{1}", Server.MapPath(panCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument)));
            //        //regFaculty.PANDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument);
            //        regFaculty.PANDocument = faculty.facultyPANCardDocument;
            //    }

            //    regFaculty.AadhaarDocument = null;
            //    if (faculty.facultyAadhaarCardDocument != null)
            //    {
            //        //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), faculty.facultyAadhaarCardDocument), string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument)));
            //        //regFaculty.AadhaarDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument);
            //        regFaculty.AadhaarDocument = faculty.facultyAadhaarCardDocument;
            //    }

            //    int facultyId = db.jntuh_registered_faculty.AsNoTracking().Where(f => f.id == faculty.id).Select(f => f.id).FirstOrDefault();
            //    int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //    if (facultyId == 0)
            //    {
            //        regFaculty.createdBy = 1;
            //        regFaculty.createdOn = DateTime.Now;
            //        db.jntuh_registered_faculty.Add(regFaculty);
            //        db.SaveChanges();
            //    }
            //    else
            //    {
            //        regFaculty.id = facultyId;
            //        regFaculty.createdBy = db.jntuh_registered_faculty.Where(f => f.id == facultyId).Select(f => f.createdBy).FirstOrDefault();
            //        regFaculty.createdOn = db.jntuh_registered_faculty.Where(f => f.id == facultyId).Select(f => f.createdOn).FirstOrDefault();
            //        regFaculty.updatedBy = userID;
            //        regFaculty.updatedOn = DateTime.Now;
            //        db.Entry(regFaculty).State = EntityState.Modified;

            //        db.SaveChanges();


            //    }
            //    if (regFaculty.id > 0)
            //    {
            //        //jntuh_registered_faculty_log regFacultylog = new jntuh_registered_faculty_log();
            //        //regFacultylog.UserId = UserId;

            //        //if (faculty.isApproved == true && string.IsNullOrEmpty(faculty.UniqueID))
            //        //{


            //        //    regFacultylog.UniqueID = string.Empty;
            //        //    regFacultylog.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();

            //        //    ////send email
            //        //    //IUserMailer mailer = new UserMailer();
            //        //    //mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
            //        //    //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

            //        //}
            //        //else if (faculty.isApproved == true && !string.IsNullOrEmpty(faculty.UniqueID))
            //        //{
            //        //    regFacultylog.UniqueID = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UniqueID).FirstOrDefault();
            //        //    regFacultylog.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();
            //        //}
            //        //else
            //        //{
            //        //    regFacultylog.UniqueID = string.Empty;
            //        //    string regNumber = db.jntuh_registered_faculty.Where(f => f.UserId == regFacultylog.UserId).Select(f => f.RegistrationNumber).FirstOrDefault();

            //        //    if (string.IsNullOrEmpty(regNumber))
            //        //    {
            //        //        Random rnd = new Random();
            //        //        regFacultylog.RegistrationNumber = rnd.Next(0, 9999).ToString("D4") + "-" + DateTime.Now.ToString("yyyyMMdd-HHmmss").Substring(2);
            //        //    }
            //        //    else
            //        //    {
            //        //        regFacultylog.RegistrationNumber = regNumber;
            //        //    }
            //        //}

            //        //regFacultylog.type = faculty.Type;
            //        //regFacultylog.FirstName = faculty.FirstName;
            //        //regFacultylog.MiddleName = faculty.MiddleName;
            //        //regFacultylog.LastName = faculty.LastName;
            //        //regFacultylog.GenderId = faculty.GenderId == null ? 0 : (int)faculty.GenderId;
            //        //regFacultylog.FatherOrHusbandName = faculty.FatherOrhusbandName;
            //        //regFacultylog.DateOfBirth = Convert.ToDateTime(faculty.facultyDateOfBirth);
            //        //regFacultylog.OrganizationName = faculty.OrganizationName == null ? string.Empty : faculty.OrganizationName;
            //        //regFacultylog.DesignationId = faculty.DesignationId;
            //        //regFacultylog.DepartmentId = faculty.DepartmentId;
            //        //regFacultylog.WorkingStatus = faculty.WorkingStatus;
            //        //regFacultylog.collegeId = faculty.CollegeId;

            //        //if (regFacultylog.type == null)
            //        //{
            //        //    if (faculty.WorkingStatus == null || faculty.WorkingStatus == false)
            //        //    {
            //        //        regFacultylog.type = "NewFaculty";
            //        //        regFacultylog.WorkingStatus = false;
            //        //    }
            //        //    else if (faculty.WorkingStatus == true)
            //        //    {
            //        //        regFacultylog.type = "ExistFaculty";
            //        //    }
            //        //}
            //        //regFacultylog.OtherDepartment = faculty.OtherDepartment;
            //        //regFacultylog.OtherDesignation = faculty.OtherDesignation;

            //        //if (faculty.facultyDateOfAppointment != null)
            //        //    regFacultylog.DateOfAppointment = Convert.ToDateTime(faculty.facultyDateOfAppointment);
            //        //regFacultylog.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU == null ? false : (bool)faculty.isFacultyRatifiedByJNTU;

            //        //if (faculty.facultyDateOfRatification != null)
            //        //    regFacultylog.DateOfRatification = Convert.ToDateTime(faculty.facultyDateOfRatification);
            //        //regFacultylog.ProceedingsNumber = faculty.ProceedingsNo;

            //        //if (faculty.TotalExperience != null)
            //        //{
            //        //    regFacultylog.TotalExperience = (int)faculty.TotalExperience;
            //        //}
            //        //else
            //        //{
            //        //    regFacultylog.TotalExperience = 0;
            //        //}

            //        //regFacultylog.Email = faculty.Email;
            //        //regFacultylog.Mobile = faculty.Mobile;
            //        //regFacultylog.PANNumber = faculty.PANNumber;
            //        //regFacultylog.AadhaarNumber = faculty.AadhaarNumber;

            //        //regFacultylog.MotherName = faculty.MotherName;
            //        //regFacultylog.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
            //        //regFacultylog.AICTEFacultyId = faculty.AICTEFacultyId;
            //        //regFacultylog.grosssalary = faculty.GrossSalary;
            //        //regFacultylog.National = faculty.National;
            //        //regFacultylog.InterNational = faculty.InterNational;
            //        //regFacultylog.Citation = faculty.Citation;
            //        //regFacultylog.Awards = faculty.Awards;

            //        //regFacultylog.isActive = true;
            //        //regFacultylog.isApproved = faculty.isApproved;

            //        //regFacultylog.ProceedingDocument = null;
            //        ////var Facultylog1 = db.jntuh_registered_faculty_log.FirstOrDefault(R => R.RegistrationNumber == faculty.RegistrationNumber);
            //        ////if (Facultylog1 != null)
            //        ////{
            //        ////    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
            //        ////    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
            //        ////    faculty.SelectionCommitteeProcedings = Facultylog1.ProceedingDocument;
            //        ////}
            //        //if (faculty.SelectionCommitteeProcedings != null)
            //        //{
            //        //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
            //        //    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
            //        //    regFacultylog.ProceedingDocument = faculty.SelectionCommitteeProcedings;
            //        //}

            //        //regFacultylog.Photo = null;
            //        //if (faculty.facultyPhoto != null)
            //        //{
            //        //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(photoPath), faculty.facultyPhoto), string.Format("{0}\\{1}", Server.MapPath(photoPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto)));
            //        //    //regFaculty.Photo = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto);
            //        //    regFacultylog.Photo = faculty.facultyPhoto;
            //        //}

            //        //regFacultylog.PANDocument = null;
            //        //if (faculty.facultyPANCardDocument != null)
            //        //{
            //        //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(panCardsPath), faculty.facultyPANCardDocument), string.Format("{0}\\{1}", Server.MapPath(panCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument)));
            //        //    //regFaculty.PANDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument);
            //        //    regFacultylog.PANDocument = faculty.facultyPANCardDocument;
            //        //}

            //        //regFacultylog.AadhaarDocument = null;
            //        //if (faculty.facultyAadhaarCardDocument != null)
            //        //{
            //        //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), faculty.facultyAadhaarCardDocument), string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument)));
            //        //    //regFaculty.AadhaarDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument);
            //        //    regFacultylog.AadhaarDocument = faculty.facultyAadhaarCardDocument;
            //        //}

            //        //int LogfacultyId = db.jntuh_registered_faculty_log.AsNoTracking().Where(f => f.UserId == UserId).Select(f => f.id).FirstOrDefault();

            //        ////if (facultyId == 0)
            //        ////{
            //        ////    regFacultylog.createdBy = 1;
            //        ////    regFacultylog.createdOn = DateTime.Now;
            //        ////    db.jntuh_registered_faculty_log.Add(regFacultylog);
            //        ////    db.SaveChanges();
            //        ////}
            //        ////else
            //        ////{

            //        //regFacultylog.id = LogfacultyId;
            //        //regFacultylog.createdBy = db.jntuh_registered_faculty_log.Where(f => f.id == LogfacultyId).Select(f => f.createdBy).FirstOrDefault();
            //        //regFacultylog.createdOn = db.jntuh_registered_faculty_log.Where(f => f.id == LogfacultyId).Select(f => f.createdOn).FirstOrDefault();
            //        //regFacultylog.FacultyApprovedStatus = 1;
            //        //regFacultylog.Remarks = "Approved";
            //        //regFacultylog.updatedBy = UserId;
            //        //regFacultylog.updatedOn = DateTime.Now;
            //        Facultylog.updatedOn = DateTime.Now;
            //        Facultylog.updatedBy = userID;
            //        Facultylog.Remarks = "Approved";
            //        Facultylog.FacultyApprovedStatus = 1;
            //        db.Entry(Facultylog).State = EntityState.Modified;

            //        db.SaveChanges();

            //        //}
            //    }
            //    if (regFaculty.id > 0)
            //    {
            //        List<jntuh_registered_faculty_education> jntuh_registered_faculty_education_education = db.jntuh_registered_faculty_education.Where(f => f.facultyId == regFaculty.id).ToList();

            //        foreach (var item in jntuh_registered_faculty_education_education)
            //        {
            //            db.jntuh_registered_faculty_education.Remove(item);
            //            db.SaveChanges();
            //        }

            //        foreach (var item in faculty.FacultyEducation)
            //        {
            //            if (item.studiedEducation != null)
            //            {
            //                jntuh_registered_faculty_education education = new jntuh_registered_faculty_education();
            //                education.facultyId = regFaculty.id;
            //                education.educationId = item.educationId;
            //                education.courseStudied = item.studiedEducation;
            //                education.specialization = item.specialization;
            //                education.passedYear = item.passedYear == null ? 0 : (int)item.passedYear;
            //                education.marksPercentage = item.percentage == null ? 0 : (decimal)item.percentage;
            //                education.division = item.division == null ? 0 : (int)item.division;
            //                education.boardOrUniversity = item.university;
            //                education.placeOfEducation = item.place;

            //                education.certificate = null;
            //                if (item.facultyCertificate != null)
            //                {
            //                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(certificatesPath), item.facultyCertificate), string.Format("{0}\\{1}", Server.MapPath(certificatesPath), regFaculty.RegistrationNumber + "-" + item.educationId + Path.GetExtension(item.facultyCertificate)));
            //                    //education.certificate = regFaculty.RegistrationNumber + "-" + item.educationId + Path.GetExtension(item.facultyCertificate);
            //                    education.certificate = item.facultyCertificate;
            //                }

            //                int eid = db.jntuh_registered_faculty_education.AsNoTracking().Where(e => e.educationId == item.educationId && e.facultyId == regFaculty.id).Select(e => e.id).FirstOrDefault();

            //                if (eid == 0)
            //                {
            //                    education.createdBy = 1;
            //                    education.createdOn = DateTime.Now;
            //                    db.jntuh_registered_faculty_education.Add(education);
            //                    db.SaveChanges();
            //                }
            //                else
            //                {
            //                    education.id = eid;
            //                    education.createdBy = db.jntuh_registered_faculty_education.Where(e => e.id == eid).Select(e => e.createdBy).FirstOrDefault();
            //                    education.createdOn = db.jntuh_registered_faculty_education.Where(e => e.id == eid).Select(e => e.createdOn).FirstOrDefault();
            //                    education.updatedBy = userID;
            //                    education.updatedOn = DateTime.Now;
            //                    db.Entry(education).State = EntityState.Modified;
            //                    db.SaveChanges();
            //                }
            //            }
            //        }
            //        int? FEID = db.jntuh_registered_faculty_experience_log.Where(E => E.facultyId == facultyId).Select(E => E.facultyId).FirstOrDefault();
            //        if (FEID > 0)
            //        {
            //            foreach (var item in faculty.RFExperience)
            //            {
            //                if (item.CollegeId != null)
            //                {
            //                    jntuh_registered_faculty_experience experience = new jntuh_registered_faculty_experience();

            //                    experience.facultyId = regFaculty.id;
            //                    experience.collegeId = item.CollegeId;
            //                    experience.facultyDesignationId = item.DesignationId;
            //                    experience.facultyDateOfAppointment = item.facultyDateOfAppointment;
            //                    experience.facultyDateOfResignation = item.facultyDateOfResignation == null ? null : item.facultyDateOfResignation;
            //                    experience.facultyRelievingLetter = item.RelievingLetter == null ? null : item.RelievingLetter;
            //                    experience.facultyJoiningOrder = item.JoiningOrder == null ? null : item.JoiningOrder;
            //                    experience.facultySalary = item.Salary;




            //                    int eid = db.jntuh_registered_faculty_experience.AsNoTracking().Where(e => e.facultyDesignationId == item.DesignationId && e.facultyId == regFaculty.id && e.collegeId == item.CollegeId).Select(e => e.id).FirstOrDefault();

            //                    if (eid == 0)
            //                    {
            //                        experience.createdBy = 1;
            //                        experience.createdOn = DateTime.Now;
            //                        db.jntuh_registered_faculty_experience.Add(experience);
            //                        db.SaveChanges();
            //                    }
            //                    else
            //                    {
            //                        experience.id = eid;
            //                        experience.createdBy = db.jntuh_registered_faculty_experience_log.Where(e => e.id == eid).Select(e => e.createdBy).FirstOrDefault();
            //                        experience.createdOn = db.jntuh_registered_faculty_experience_log.Where(e => e.id == eid).Select(e => e.createdOn).FirstOrDefault();
            //                        experience.updatedBy = userID;
            //                        experience.updatedOn = DateTime.Now;
            //                        db.Entry(experience).State = EntityState.Modified;
            //                        db.SaveChanges();
            //                    }
            //                }
            //            }
            //        }
            //        if (fid == null)
            //        {
            //            ViewBag.Javascript = "Registration completed successfully. Confirmation email sent";
            //            TempData["SUCCESS"] = "Registration completed successfully. Confirmation email sent";
            //            TempData["FUserName"] = faculty.Email;
            //            TempData["FPassword"] = faculty.NewPassword;

            //            //send email
            //            IUserMailer mailer = new UserMailer();
            //            mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Registration Details", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
            //            //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Registration Details", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

            //            // RAMESH : DO NOT UNCOMMENT SMS CODE UNTIL FURTHUR AUTHENTICATED MAIL FROM AAC

            //            //send sms
            //            if (!string.IsNullOrEmpty(regFaculty.Mobile))
            //            {
            //                bool pStatus = UAAAS.Models.Utilities.SendSms(regFaculty.Mobile, "JNTUH: Your registration with JNTUH affiliated faculty portal is completed. Your registration number is " + regFaculty.RegistrationNumber);
            //            }
            //        }
            //        else
            //        {
            //            ViewBag.Javascript = "Faculty information updated successfully";
            //            TempData["SUCCESS"] = "Faculty information updated successfully";
            //        }
            //    }

            //    if (fid == null)
            //    {
            //        fid = UAAAS.Models.Utilities.EncryptString(regFaculty.id.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);
            //    }
            //}

            //if (faculty.facultyDateOfBirth != null)
            //    faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);

            //if (faculty.facultyDateOfAppointment != null)
            //    faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);

            //if (faculty.facultyDateOfRatification != null)
            //    faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

            //return RedirectToAction("FacultySecondStepVerification");
        }


        [Authorize(Roles = "Admin,College")]
        public ActionResult AppealInActiveFaculty()
        {

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeid = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            //int collegeid = 307;
            //ViewBag.Colleges = db.jntuh_college.Join(db.jntuh_college_edit_status, co => co.id, e => e.collegeId, (co, e) => new { co = co, e = e }).Where(c => c.co.isActive == true && c.e.IsCollegeEditable == false).Select(c => new { collegeId = c.co.id, collegeName = c.co.collegeCode + "-" + c.co.collegeName }).OrderBy(c => c.collegeName).ToList();
            //ViewBag.collegeid = collegeid;
            var jntuh_department = db.jntuh_department.ToList();
            List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();
            int[] CollegeIds = new int[] { 4, 5, 6, 7, 8, 9, 11, 12, 17, 20, 22, 23, 24, 26, 27, 29, 30, 32, 34, 35, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 50, 52, 54, 55, 56, 58, 60, 65, 68, 69, 70, 72, 74, 75, 77, 78, 79, 80, 81, 84, 85, 86, 87, 88, 90, 91, 97, 100, 103, 104, 105, 107, 108, 109, 110, 111, 113, 114, 116, 117, 118, 119, 121, 122, 123, 125, 127, 128, 129, 130, 134, 135, 136, 137, 138, 139, 140, 141, 144, 145, 146, 147, 148, 150, 152, 153, 155, 156, 157, 158, 159, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 192, 193, 194, 195, 196, 197, 198, 201, 202, 203, 204, 206, 207, 210, 211, 213, 214, 215, 218, 219, 222, 223, 225, 227, 228, 229, 234, 237, 238, 241, 242, 243, 244, 245, 246, 249, 250, 252, 253, 254, 256, 260, 261, 262, 264, 266, 267, 271, 273, 276, 279, 282, 283, 286, 287, 290, 291, 292, 293, 295, 296, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 313, 314, 316, 317, 318, 319, 320, 321, 324, 325, 326, 327, 329, 330, 332, 334, 335, 336, 342, 343, 348, 349, 350, 352, 355, 360, 362, 364, 365, 366, 367, 368, 370, 371, 373, 374, 376, 379, 380, 382, 384, 385, 386, 389, 392, 393, 394, 395, 399, 400, 410, 411, 414, 416, 423, 427, 428, 429, 430, 435, 436, 439, 441, 442, 445, 45, 375 };
            return RedirectToAction("College", "Dashboard");
            if (collegeid != null && CollegeIds.Contains(collegeid))
            {

                var DegreeIdNameBasedOnSpecialization = (from a in db.jntuh_department
                                                         join b in db.jntuh_specialization on a.id equals b.departmentId
                                                         join c in db.jntuh_degree on a.degreeId equals c.id
                                                         select new
                                                         {
                                                             DegreeId = c.id,
                                                             DegreeName = c.degree,
                                                             SpcializationName = b.specializationName,
                                                             Specid = b.id
                                                         }).ToList();



                List<jntuh_college_faculty_registered> jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeid).Select(cf => cf).ToList();
                string[] strRegNoS = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();
                string[] PrincipalstrRegNoS = db.jntuh_college_principal_registered.Where(P => P.collegeId == collegeid).Select(P => P.RegistrationNumber.Trim()).ToArray();
                List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
                jntuh_registered_faculty = db.jntuh_registered_faculty.Where(rf => strRegNoS.Contains(rf.RegistrationNumber) && rf.Blacklistfaculy != true)  //&& (rf.collegeId == null || rf.collegeId == collegeid)//&& rf.Notin116 != true
                                             .ToList();


                var Specializations = db.jntuh_specialization.ToList();

                string RegNumber = "";
                int? Specializationid = 0;
                int? CollegeDepartmentId = 0;
                foreach (var a in jntuh_registered_faculty)
                {
                    string Reason = String.Empty;
                    Specializationid = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber.Trim() == a.RegistrationNumber.Trim()).Select(C => C.SpecializationId).FirstOrDefault();
                    CollegeDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber.Trim() == a.RegistrationNumber.Trim()).Select(C => C.DepartmentId).FirstOrDefault();
                    var faculty = new FacultyRegistration();
                    faculty.id = a.id;
                    faculty.Type = a.type;
                    faculty.CollegeId = collegeid;
                    faculty.RegistrationNumber = a.RegistrationNumber;
                    faculty.UniqueID = a.UniqueID;
                    faculty.FirstName = a.FirstName;
                    faculty.MiddleName = a.MiddleName;
                    faculty.LastName = a.LastName;
                    //faculty.Basstatus = a.BASStatus;
                    if (PrincipalstrRegNoS.Contains(a.RegistrationNumber.Trim()))
                        faculty.Principal = "Principal";
                    else
                        faculty.Principal = "";

                    faculty.PGSpecializationName = a.PGSpecialization != 0 ? DegreeIdNameBasedOnSpecialization.Where(e => e.Specid == a.PGSpecialization).Select(e => e.DegreeName + "-" + e.SpcializationName).FirstOrDefault() : "";
                    faculty.GenderId = a.GenderId;
                    faculty.Email = a.Email;
                    faculty.facultyPhoto = a.Photo;
                    faculty.Mobile = a.Mobile;
                    faculty.PANNumber = a.PANNumber;
                    faculty.AadhaarNumber = a.AadhaarNumber;
                    faculty.isActive = a.isActive;
                    faculty.isApproved = a.isApproved;
                    faculty.department = CollegeDepartmentId > 0 ? jntuh_department.Where(d => d.id == CollegeDepartmentId).Select(d => d.departmentName).FirstOrDefault() : "";
                    faculty.SamePANNumberCount = jntuh_registered_faculty.Where(f => f.PANNumber == a.PANNumber).ToList().Count;
                    faculty.SameAadhaarNumberCount = jntuh_registered_faculty.Where(f => f.AadhaarNumber == a.AadhaarNumber).ToList().Count;
                    faculty.SpecializationIdentfiedFor = Specializationid > 0 ? DegreeIdNameBasedOnSpecialization.Where(S => S.Specid == Specializationid).Select(S => S.DegreeName + "-" + S.SpcializationName).FirstOrDefault() : "";
                    faculty.isVerified = isFacultyVerified(a.id);
                    faculty.DeactivationReason = a.DeactivationReason;
                    faculty.FacultyVerificationStatus = a.FacultyVerificationStatus;
                    faculty.updatedOn = a.updatedOn;
                    faculty.createdOn = jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == a.RegistrationNumber).Select(f => f.createdOn).FirstOrDefault();
                    faculty.IdentfiedFor = jntuh_college_faculty_registered.Where(f => f.RegistrationNumber.Trim() == a.RegistrationNumber.Trim()).Select(f => f.IdentifiedFor).FirstOrDefault();
                    faculty.jntuh_registered_faculty_education = a.jntuh_registered_faculty_education;
                    faculty.DegreeId = a.jntuh_registered_faculty_education.Count(e => e.facultyId == a.id) > 0 ? a.jntuh_registered_faculty_education.Where(e => e.facultyId == a.id).Select(e => e.educationId).Max() : 0;
                    faculty.PanDeactivationReasion = !string.IsNullOrEmpty(a.PanDeactivationReason) ? a.PanDeactivationReason : "";
                    faculty.Absent = a.Absent != null ? (bool)a.Absent : false;
                    faculty.BlacklistFaculty = a.Blacklistfaculy != null ? (bool)a.Blacklistfaculy : false;
                    faculty.PHDundertakingnotsubmitted = a.PHDundertakingnotsubmitted != null ? (bool)a.PHDundertakingnotsubmitted : false;
                    faculty.NOTQualifiedAsPerAICTE = a.NotQualifiedAsperAICTE != null ? (bool)a.NotQualifiedAsperAICTE : false;
                    faculty.InvalidPANNo = a.InvalidPANNumber != null ? (bool)a.InvalidPANNumber : false;
                    faculty.InCompleteCeritificates = a.IncompleteCertificates != null ? (bool)a.IncompleteCertificates : false;
                    faculty.OriginalCertificatesnotshownFlag = a.OriginalCertificatesNotShown != null ? (bool)a.OriginalCertificatesNotShown : false;
                    faculty.FalsePAN = a.FalsePAN != null ? (bool)a.FalsePAN : false;
                    faculty.NOForm16 = a.NoForm16 != null ? (bool)a.NoForm16 : false;
                    //faculty.MultipleReginSamecoll = a.MultipleRegInSameCollege != null ? (bool)a.MultipleRegInSameCollege : false;
                    faculty.XeroxcopyofcertificatesFlag = a.Xeroxcopyofcertificates != null ? (bool)a.Xeroxcopyofcertificates : false;
                    faculty.NotIdentityFiedForAnyProgramFlag = a.NotIdentityfiedForanyProgram != null ? (bool)a.NotIdentityfiedForanyProgram : false;
                    faculty.NOrelevantUgFlag = a.NoRelevantUG == "No" ? false : true;
                    faculty.NOrelevantPgFlag = a.NoRelevantPG == "No" ? false : true;
                    faculty.NOrelevantPhdFlag = a.NORelevantPHD == "No" ? false : true;
                    //faculty.NoForm16Verification = a.Noform16Verification != null ? (bool)a.Noform16Verification : false;
                    faculty.NoSCM17Flag = a.NoSCM17 != null ? (bool)a.NoSCM17 : false;
                    //faculty.PhotocopyofPAN = a.PhotoCopyofPAN != null ? (bool)a.PhotoCopyofPAN : false;
                    faculty.PhdUndertakingDocumentstatus = a.PhdUndertakingDocumentstatus != null ? (bool)(a.PhdUndertakingDocumentstatus) : false;
                    faculty.PHDUndertakingDocumentView = a.PHDUndertakingDocument;
                    faculty.PhdUndertakingDocumentText = a.PhdUndertakingDocumentText;
                    //faculty.AppliedPAN = a.AppliedPAN != null ? (bool)(a.AppliedPAN) : false;
                    //faculty.SamePANUsedByMultipleFaculty = a.SamePANUsedByMultipleFaculty != null ? (bool)(a.SamePANUsedByMultipleFaculty) : false;
                    faculty.Basstatus = a.BAS;
                    teachingFaculty.Add(faculty);
                }
                teachingFaculty = teachingFaculty.Where(m => m.isActive == true).OrderBy(f => f.updatedOn).ThenBy(f => f.department).ToList();
                teachingFaculty = teachingFaculty.Where(item =>
                            item.Absent == true ||
                            item.NOTQualifiedAsPerAICTE == true ||
                            item.InCompleteCeritificates == true || item.MultipleReginSamecoll == true ||
                             item.NOrelevantUgFlag == true ||
                            item.NOrelevantPgFlag == true || item.NOrelevantPhdFlag == true ||
                            item.NotIdentityFiedForAnyProgramFlag == true ||
                            item.NoSCM17Flag == true || item.InvalidPANNo == true ||
                            item.DegreeId < 4 || item.PANNumber == null ||
                            item.BlacklistFaculty == true || item.Type == "Adjunct" || item.AppliedPAN == true || item.SamePANUsedByMultipleFaculty == true || (item.PhdUndertakingDocumentstatus == false || item.Basstatus == "N")).Select(e => e).ToList();
                //|| item.NoForm16Verification == true ||item.NOForm16 == true ||
                ViewBag.TotalFaculty = teachingFaculty.Count();
                ViewBag.FlagTotalFaculty = teachingFaculty.Where(item =>
                            item.Absent == true ||
                            item.NOTQualifiedAsPerAICTE == true ||
                            item.InCompleteCeritificates == true || item.MultipleReginSamecoll == true ||
                             item.NOrelevantUgFlag == true ||
                            item.NOrelevantPgFlag == true || item.NOrelevantPhdFlag == true ||
                            item.NotIdentityFiedForAnyProgramFlag == true ||
                            item.NoSCM17Flag == true || item.InvalidPANNo == true ||
                            item.DegreeId < 4 || item.PANNumber == null ||
                            item.BlacklistFaculty == true || item.Type == "Adjunct" || item.AppliedPAN == true || item.SamePANUsedByMultipleFaculty == true || (item.PhdUndertakingDocumentstatus == false || item.Basstatus == "N")).Select(e => e).Count();
                ViewBag.ClearFaculty = ViewBag.TotalFaculty - ViewBag.FlagTotalFaculty;
                return View(teachingFaculty);
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            return View(teachingFaculty);
        }




        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult PHDPostInformation(FacultyRegistration faculty, string fid, string Command)
        {
            //var Facultydata = db.jntuh_registered_faculty_log.FirstOrDefault(R => R.RegistrationNumber == faculty.RegistrationNumber);
            //Facultydata.Remarks = "Approved";


            fid = UAAAS.Models.Utilities.EncryptString(faculty.id.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]);
            TempData["SUCCESS"] = null;
            TempData["ERROR"] = null;

            if (Command == "Go Back" || (faculty.Type == null && faculty.FirstName == null))
            {
                return RedirectToAction("FacultyNew");
            }

            List<DistinctDepartment> depts = new List<DistinctDepartment>();
            string existingDepts = string.Empty;

            int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };

            foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
            {
                if (!existingDepts.Contains(item.departmentName))
                {
                    depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
                    existingDepts = existingDepts + "," + item.departmentName;
                }
            }

            ViewBag.department = depts;
            ViewBag.designation = db.jntuh_designation.Where(c => c.isActive == true).ToList();
            ViewBag.Institutions = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { CollegeId = c.id, CollegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.CollegeName).ToList();

            List<SelectListItem> ratifiedDuration = new List<SelectListItem>();
            for (int i = 1; i <= 10; i++)
            {
                ratifiedDuration.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.duration = ratifiedDuration;

            List<SelectListItem> prevExperience = new List<SelectListItem>();
            for (int i = 0; i <= 40; i++)
            {
                prevExperience.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.prevExperience = prevExperience;

            List<SelectListItem> years = new List<SelectListItem>();
            for (int i = 1940; i <= DateTime.Now.Year; i++)
            {
                years.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.years = years;

            List<SelectListItem> division = new List<SelectListItem>();
            for (int i = 1; i <= 5; i++)
            {
                division.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }

            ViewBag.division = division;

            int fID = 0;
            if (fid != null)
            {
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.FacultyID = fID;

            string photoPath = "~/Content/Upload/Faculty/PHOTOS";
            string panCardsPath = "~/Content/Upload/Faculty/PANCARDS";
            string aadhaarCardsPath = "~/Content/Upload/Faculty/AADHAARCARDS";
            string proceedingsPath = "~/Content/Upload/Faculty/PROCEEDINGS";
            string certificatesPath = "~/Content/Upload/Faculty/CERTIFICATES";

            if (Command == "Register")
            {
                bool isFacultyValid = true;
                string errorMessage = "";

                //VALIDATE THE FORM FOR ALL MANDATORY FIELDS

                //VERIFY FOR THE FACULTY PHOTO DIMENSIONS
                if (faculty.Photo != null && faculty.Photo.ContentLength > 0)
                {
                    System.IO.Stream fileStream = faculty.Photo.InputStream;
                    fileStream.Position = 0;
                    byte[] fileContents = new byte[faculty.Photo.ContentLength];
                    fileStream.Read(fileContents, 0, faculty.Photo.ContentLength);
                    System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                    if (image.Width > 200 || image.Height > 230)
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "Photo should be minimum 150x150 and maximum 200x230 pixels" + "<br>";
                    }

                    if (image.Width < 150 || image.Height < 150)
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "Photo should be minimum 150x150 and maximum 200x230 pixels" + "<br>";
                    }
                }
                else
                {
                    isFacultyValid = false;
                    errorMessage += ". " + "Photo is mandatory" + "<br>";
                }


                if (faculty.PANCardDocument != null)
                {
                    System.IO.Stream fileStream = faculty.PANCardDocument.InputStream;
                    fileStream.Position = 0;
                    byte[] fileContents = new byte[faculty.PANCardDocument.ContentLength];
                    fileStream.Read(fileContents, 0, faculty.PANCardDocument.ContentLength);
                    System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                    if (image.Width < 300 || image.Height < 250)
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "PANCARD document should be minimum 300x250 pixels" + "<br>";
                    }
                }
                else
                {
                    if (faculty.Type.ToUpper() == "EXISTFACULTY")
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "PANCARD is mandatory" + "<br>";
                    }
                }

                if (faculty.AadhaarNumber != null)
                {
                    if (faculty.AadhaarCardDocument != null)
                    {
                        System.IO.Stream fileStream = faculty.AadhaarCardDocument.InputStream;
                        fileStream.Position = 0;
                        byte[] fileContents = new byte[faculty.AadhaarCardDocument.ContentLength];
                        fileStream.Read(fileContents, 0, faculty.AadhaarCardDocument.ContentLength);
                        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                        if (image.Width < 200 || image.Height < 200)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "Aadhaar Card document should be minimum 200x200 pixels" + "<br>";
                        }
                    }
                    else
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "Aadhaar Card document is mandatory" + "<br>";
                    }
                }

                if (faculty.ProceedingsNo != null)
                {
                    if (faculty.SelectionCommitteeProceedingsDocument != null)
                    {
                        System.IO.Stream fileStream = faculty.SelectionCommitteeProceedingsDocument.InputStream;
                        fileStream.Position = 0;
                        byte[] fileContents = new byte[faculty.SelectionCommitteeProceedingsDocument.ContentLength];
                        fileStream.Read(fileContents, 0, faculty.SelectionCommitteeProceedingsDocument.ContentLength);
                        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                        if (image.Width < 600 || image.Height < 800)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "Selection Committee Proceedings document should be minimum 600x800 pixels" + "<br>";
                        }
                    }
                    else
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "Selection Committee Proceedings document is mandatory" + "<br>";
                    }
                }

                int vIndex = 0;
                foreach (var item in faculty.FacultyEducation)
                {
                    if (item.certificate != null)
                    {
                        System.IO.Stream fileStream = item.certificate.InputStream;
                        fileStream.Position = 0;
                        byte[] fileContents = new byte[item.certificate.ContentLength];
                        fileStream.Read(fileContents, 0, item.certificate.ContentLength);
                        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                        if (image.Width < 600 || image.Height < 800)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + item.educationName + " document should be minimum 600x800 pixels" + "<br>";
                        }
                    }
                    else
                    {
                        if (vIndex < 2)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + item.educationName + " document is mandatory" + "<br>";
                        }
                        else if (item.studiedEducation != null)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + item.educationName + " document is mandatory" + "<br>";
                        }
                    }

                    vIndex++;
                }


                if (!isFacultyValid)
                {
                    TempData["ERROR"] = errorMessage;

                    if (faculty.facultyDateOfBirth != null)
                        faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);
                    if (faculty.facultyDateOfAppointment != null)
                        faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);
                    if (faculty.facultyDateOfRatification != null)
                        faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

                    TempData["FACULTY"] = faculty;
                    return RedirectToAction("FacultyNew");
                }

                //IF VALIDATION SUCCESS THEN SAVE THE IMAGES & DOCUMENTS

                if (faculty.Photo != null)
                {
                    if (!Directory.Exists(Server.MapPath(photoPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(photoPath));
                    }

                    var ext = Path.GetExtension(faculty.Photo.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.Photo.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(photoPath), fileName, ext));
                        faculty.facultyPhoto = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else if (faculty.facultyPhoto != null)
                {
                    faculty.facultyPhoto = faculty.facultyPhoto;
                }

                if (faculty.PANCardDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(panCardsPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(panCardsPath));
                    }

                    var ext = Path.GetExtension(faculty.PANCardDocument.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.PANCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(panCardsPath), fileName, ext));
                        faculty.facultyPANCardDocument = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else if (faculty.facultyPANCardDocument != null)
                {
                    faculty.facultyPANCardDocument = faculty.facultyPANCardDocument;
                }

                if (faculty.AadhaarCardDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(aadhaarCardsPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(aadhaarCardsPath));
                    }

                    var ext = Path.GetExtension(faculty.AadhaarCardDocument.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.AadhaarCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(aadhaarCardsPath), fileName, ext));
                        faculty.facultyAadhaarCardDocument = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else if (faculty.facultyAadhaarCardDocument != null)
                {
                    faculty.facultyAadhaarCardDocument = faculty.facultyAadhaarCardDocument;
                }

                if (faculty.SelectionCommitteeProceedingsDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(proceedingsPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(proceedingsPath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeProceedingsDocument.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.SelectionCommitteeProceedingsDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(proceedingsPath), fileName, ext));
                        faculty.SelectionCommitteeProcedings = string.Format("{0}{1}", fileName, ext);

                    }
                }
                else if (faculty.SelectionCommitteeProcedings != null)
                {
                    faculty.SelectionCommitteeProcedings = faculty.SelectionCommitteeProcedings;
                }

                int eIndex = 0;
                foreach (var item in faculty.FacultyEducation)
                {
                    if ((eIndex == 0 && item.studiedEducation == null) || (eIndex != 0 && item.studiedEducation != null))
                    {
                        if (item.certificate != null)
                        {
                            if (!Directory.Exists(Server.MapPath(certificatesPath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(certificatesPath));
                            }

                            var ext = Path.GetExtension(item.certificate.FileName);

                            if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                            {
                                string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1) + "_" + item.studiedEducation;
                                item.certificate.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(certificatesPath), fileName, ext));
                                item.facultyCertificate = string.Format("{0}{1}", fileName, ext);
                            }
                        }
                        else if (item.facultyCertificate != null)
                        {
                            item.facultyCertificate = item.facultyCertificate;
                        }
                    }

                    eIndex++;
                }

                if (faculty.Type.ToUpper() == "EXISTFACULTY")
                {
                    faculty.WorkingStatus = true;
                }

                faculty.isView = true;

                TempData["FACULTY"] = faculty;
                return RedirectToAction("FacultyNew");
            }

            if (fid == null && faculty.id > 0)
            {
                fid = UAAAS.Models.Utilities.EncryptString(faculty.id.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);
            }

            bool IsValidPhoto = true;

            if (faculty.facultyDateOfBirth != null)
                faculty.facultyDateOfBirth = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfBirth).ToShortDateString();
            if (faculty.facultyDateOfAppointment != null)
                faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfAppointment).ToShortDateString();
            if (faculty.facultyDateOfRatification != null)
                faculty.facultyDateOfRatification = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfRatification).ToShortDateString();

            if (!ModelState.IsValid)
            {
                var errors = ModelState.Where(v => v.Value.Errors.Any());
                var message = string.Join(" | ", ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage));
                //return new HttpStatusCodeResult(1, message);
            }

            int UserId = 0;

            string userName = string.Empty; string password = string.Empty; string email = string.Empty;

            //if (ModelState.IsValid && IsValidPhoto)
            //{
            if (fid == null)
            {
                // Attempt to register the user
                MembershipCreateStatus createStatus;
                Membership.CreateUser(faculty.Email, faculty.NewPassword, faculty.Email, null, null, true, null, out createStatus);

                if (createStatus == MembershipCreateStatus.Success)
                {
                    //add user role to my_aspnet_usersinroles table
                    my_aspnet_usersinroles roleModel = new my_aspnet_usersinroles();
                    roleModel.roleId = 7; // 7 = Faculty Role
                    roleModel.userId = db.my_aspnet_users.Where(u => u.name == faculty.Email).Select(u => u.id).FirstOrDefault();
                    db.my_aspnet_usersinroles.Add(roleModel);
                    db.SaveChanges();

                    UserId = roleModel.userId;
                    userName = faculty.Email;
                    password = faculty.NewPassword;
                    email = faculty.Email;
                }
                else
                {
                    UserId = 0;
                    //TempData["ERROR"] = ErrorCodeToString1(createStatus);
                    if (faculty.facultyDateOfBirth != null)
                        faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);
                    if (faculty.facultyDateOfAppointment != null)
                        faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);
                    if (faculty.facultyDateOfRatification != null)
                        faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

                    return View(faculty);
                }
            }
            else
            {
                UserId = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UserId).FirstOrDefault();
            }
            //}

            //if (ModelState.IsValid && UserId > 0 && IsValidPhoto)
            if (UserId > 0 && IsValidPhoto)
            {
                jntuh_registered_faculty regFaculty = new jntuh_registered_faculty();
                regFaculty.UserId = UserId;

                if (faculty.isApproved == true && string.IsNullOrEmpty(faculty.UniqueID))
                {
                    //string strNumber = DateTime.Now.Year.ToString().Substring(2, 2);
                    //strNumber += faculty.FirstName.Substring(0, 1) + faculty.LastName.Substring(0, 1);
                    //strNumber += faculty.facultyDateOfBirth.GetLast(2);
                    //if (faculty.Type != "NewFaculty")
                    //{
                    //    if (faculty.DepartmentId != null)
                    //    {
                    //        string fDepartment = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                    //        strNumber += fDepartment.Substring(0, 3);
                    //    }
                    //    else
                    //    {
                    //        strNumber += "ENW";
                    //    }
                    //}
                    //else
                    //{
                    //    strNumber += "NEW";
                    //}
                    //strNumber += "001";
                    //strNumber = VerifyFRN(strNumber);
                    //regFaculty.UniqueID = strNumber;

                    regFaculty.UniqueID = string.Empty;
                    regFaculty.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();

                    ////send email
                    //IUserMailer mailer = new UserMailer();
                    //mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
                    //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

                }
                else if (faculty.isApproved == true && !string.IsNullOrEmpty(faculty.UniqueID))
                {
                    regFaculty.UniqueID = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UniqueID).FirstOrDefault();
                    regFaculty.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();
                }
                else
                {
                    regFaculty.UniqueID = string.Empty;
                    string regNumber = db.jntuh_registered_faculty.Where(f => f.UserId == regFaculty.UserId).Select(f => f.RegistrationNumber).FirstOrDefault();

                    if (string.IsNullOrEmpty(regNumber))
                    {
                        Random rnd = new Random();
                        regFaculty.RegistrationNumber = rnd.Next(0, 9999).ToString("D4") + "-" + DateTime.Now.ToString("yyyyMMdd-HHmmss").Substring(2);
                    }
                    else
                    {
                        regFaculty.RegistrationNumber = regNumber;
                    }
                }

                regFaculty.type = faculty.Type;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.GenderId = faculty.GenderId == null ? 0 : (int)faculty.GenderId;
                regFaculty.FatherOrHusbandName = faculty.FatherOrhusbandName;
                regFaculty.DateOfBirth = Convert.ToDateTime(faculty.facultyDateOfBirth);
                regFaculty.OrganizationName = faculty.OrganizationName == null ? string.Empty : faculty.OrganizationName;
                regFaculty.DesignationId = faculty.DesignationId;
                regFaculty.DepartmentId = faculty.DepartmentId;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.collegeId = faculty.CollegeId;

                if (regFaculty.type == null)
                {
                    if (faculty.WorkingStatus == null || faculty.WorkingStatus == false)
                    {
                        regFaculty.type = "NewFaculty";
                        regFaculty.WorkingStatus = false;
                    }
                    else if (faculty.WorkingStatus == true)
                    {
                        regFaculty.type = "ExistFaculty";
                    }
                }
                regFaculty.OtherDepartment = faculty.OtherDepartment;
                regFaculty.OtherDesignation = faculty.OtherDesignation;

                if (faculty.facultyDateOfAppointment != null)
                    regFaculty.DateOfAppointment = Convert.ToDateTime(faculty.facultyDateOfAppointment);
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU == null ? false : (bool)faculty.isFacultyRatifiedByJNTU;

                if (faculty.facultyDateOfRatification != null)
                    regFaculty.DateOfRatification = Convert.ToDateTime(faculty.facultyDateOfRatification);
                regFaculty.ProceedingsNumber = faculty.ProceedingsNo;

                if (faculty.TotalExperience != null)
                {
                    regFaculty.TotalExperience = (int)faculty.TotalExperience;
                }
                else
                {
                    regFaculty.TotalExperience = 0;
                }

                regFaculty.Email = faculty.Email;
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;

                regFaculty.MotherName = faculty.MotherName;
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.grosssalary = faculty.GrossSalary;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;

                regFaculty.isActive = true;
                regFaculty.isApproved = faculty.isApproved;

                regFaculty.ProceedingDocument = null;
                var Facultylog = db.jntuh_registered_faculty_log.FirstOrDefault(R => R.RegistrationNumber == faculty.RegistrationNumber);
                if (Facultylog != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
                    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
                    faculty.SelectionCommitteeProcedings = Facultylog.ProceedingDocument;
                }
                if (faculty.SelectionCommitteeProcedings != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
                    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
                    regFaculty.ProceedingDocument = faculty.SelectionCommitteeProcedings;
                }

                regFaculty.Photo = null;
                if (faculty.facultyPhoto != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(photoPath), faculty.facultyPhoto), string.Format("{0}\\{1}", Server.MapPath(photoPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto)));
                    //regFaculty.Photo = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto);
                    regFaculty.Photo = faculty.facultyPhoto;
                }

                regFaculty.PANDocument = null;
                if (faculty.facultyPANCardDocument != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(panCardsPath), faculty.facultyPANCardDocument), string.Format("{0}\\{1}", Server.MapPath(panCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument)));
                    //regFaculty.PANDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument);
                    regFaculty.PANDocument = faculty.facultyPANCardDocument;
                }

                regFaculty.AadhaarDocument = null;
                if (faculty.facultyAadhaarCardDocument != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), faculty.facultyAadhaarCardDocument), string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument)));
                    //regFaculty.AadhaarDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument);
                    regFaculty.AadhaarDocument = faculty.facultyAadhaarCardDocument;
                }

                int facultyId = db.jntuh_registered_faculty.AsNoTracking().Where(f => f.id == faculty.id).Select(f => f.id).FirstOrDefault();

                if (facultyId == 0)
                {
                    regFaculty.createdBy = 1;
                    regFaculty.createdOn = DateTime.Now;
                    db.jntuh_registered_faculty.Add(regFaculty);
                    //db.SaveChanges();
                }
                else
                {
                    regFaculty.id = facultyId;
                    regFaculty.createdBy = db.jntuh_registered_faculty.Where(f => f.id == facultyId).Select(f => f.createdBy).FirstOrDefault();
                    regFaculty.createdOn = db.jntuh_registered_faculty.Where(f => f.id == facultyId).Select(f => f.createdOn).FirstOrDefault();
                    regFaculty.updatedBy = UserId;
                    regFaculty.updatedOn = DateTime.Now;
                    db.Entry(regFaculty).State = EntityState.Modified;

                    //db.SaveChanges();


                }
                if (regFaculty.id > 0)
                {
                    //jntuh_registered_faculty_log regFacultylog = new jntuh_registered_faculty_log();
                    //regFacultylog.UserId = UserId;

                    //if (faculty.isApproved == true && string.IsNullOrEmpty(faculty.UniqueID))
                    //{


                    //    regFacultylog.UniqueID = string.Empty;
                    //    regFacultylog.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();

                    //    ////send email
                    //    //IUserMailer mailer = new UserMailer();
                    //    //mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
                    //    //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Unique ID", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

                    //}
                    //else if (faculty.isApproved == true && !string.IsNullOrEmpty(faculty.UniqueID))
                    //{
                    //    regFacultylog.UniqueID = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UniqueID).FirstOrDefault();
                    //    regFacultylog.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();
                    //}
                    //else
                    //{
                    //    regFacultylog.UniqueID = string.Empty;
                    //    string regNumber = db.jntuh_registered_faculty.Where(f => f.UserId == regFacultylog.UserId).Select(f => f.RegistrationNumber).FirstOrDefault();

                    //    if (string.IsNullOrEmpty(regNumber))
                    //    {
                    //        Random rnd = new Random();
                    //        regFacultylog.RegistrationNumber = rnd.Next(0, 9999).ToString("D4") + "-" + DateTime.Now.ToString("yyyyMMdd-HHmmss").Substring(2);
                    //    }
                    //    else
                    //    {
                    //        regFacultylog.RegistrationNumber = regNumber;
                    //    }
                    //}

                    //regFacultylog.type = faculty.Type;
                    //regFacultylog.FirstName = faculty.FirstName;
                    //regFacultylog.MiddleName = faculty.MiddleName;
                    //regFacultylog.LastName = faculty.LastName;
                    //regFacultylog.GenderId = faculty.GenderId == null ? 0 : (int)faculty.GenderId;
                    //regFacultylog.FatherOrHusbandName = faculty.FatherOrhusbandName;
                    //regFacultylog.DateOfBirth = Convert.ToDateTime(faculty.facultyDateOfBirth);
                    //regFacultylog.OrganizationName = faculty.OrganizationName == null ? string.Empty : faculty.OrganizationName;
                    //regFacultylog.DesignationId = faculty.DesignationId;
                    //regFacultylog.DepartmentId = faculty.DepartmentId;
                    //regFacultylog.WorkingStatus = faculty.WorkingStatus;
                    //regFacultylog.collegeId = faculty.CollegeId;

                    //if (regFacultylog.type == null)
                    //{
                    //    if (faculty.WorkingStatus == null || faculty.WorkingStatus == false)
                    //    {
                    //        regFacultylog.type = "NewFaculty";
                    //        regFacultylog.WorkingStatus = false;
                    //    }
                    //    else if (faculty.WorkingStatus == true)
                    //    {
                    //        regFacultylog.type = "ExistFaculty";
                    //    }
                    //}
                    //regFacultylog.OtherDepartment = faculty.OtherDepartment;
                    //regFacultylog.OtherDesignation = faculty.OtherDesignation;

                    //if (faculty.facultyDateOfAppointment != null)
                    //    regFacultylog.DateOfAppointment = Convert.ToDateTime(faculty.facultyDateOfAppointment);
                    //regFacultylog.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU == null ? false : (bool)faculty.isFacultyRatifiedByJNTU;

                    //if (faculty.facultyDateOfRatification != null)
                    //    regFacultylog.DateOfRatification = Convert.ToDateTime(faculty.facultyDateOfRatification);
                    //regFacultylog.ProceedingsNumber = faculty.ProceedingsNo;

                    //if (faculty.TotalExperience != null)
                    //{
                    //    regFacultylog.TotalExperience = (int)faculty.TotalExperience;
                    //}
                    //else
                    //{
                    //    regFacultylog.TotalExperience = 0;
                    //}

                    //regFacultylog.Email = faculty.Email;
                    //regFacultylog.Mobile = faculty.Mobile;
                    //regFacultylog.PANNumber = faculty.PANNumber;
                    //regFacultylog.AadhaarNumber = faculty.AadhaarNumber;

                    //regFacultylog.MotherName = faculty.MotherName;
                    //regFacultylog.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                    //regFacultylog.AICTEFacultyId = faculty.AICTEFacultyId;
                    //regFacultylog.grosssalary = faculty.GrossSalary;
                    //regFacultylog.National = faculty.National;
                    //regFacultylog.InterNational = faculty.InterNational;
                    //regFacultylog.Citation = faculty.Citation;
                    //regFacultylog.Awards = faculty.Awards;

                    //regFacultylog.isActive = true;
                    //regFacultylog.isApproved = faculty.isApproved;

                    //regFacultylog.ProceedingDocument = null;
                    ////var Facultylog1 = db.jntuh_registered_faculty_log.FirstOrDefault(R => R.RegistrationNumber == faculty.RegistrationNumber);
                    ////if (Facultylog1 != null)
                    ////{
                    ////    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
                    ////    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
                    ////    faculty.SelectionCommitteeProcedings = Facultylog1.ProceedingDocument;
                    ////}
                    //if (faculty.SelectionCommitteeProcedings != null)
                    //{
                    //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
                    //    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
                    //    regFacultylog.ProceedingDocument = faculty.SelectionCommitteeProcedings;
                    //}

                    //regFacultylog.Photo = null;
                    //if (faculty.facultyPhoto != null)
                    //{
                    //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(photoPath), faculty.facultyPhoto), string.Format("{0}\\{1}", Server.MapPath(photoPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto)));
                    //    //regFaculty.Photo = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto);
                    //    regFacultylog.Photo = faculty.facultyPhoto;
                    //}

                    //regFacultylog.PANDocument = null;
                    //if (faculty.facultyPANCardDocument != null)
                    //{
                    //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(panCardsPath), faculty.facultyPANCardDocument), string.Format("{0}\\{1}", Server.MapPath(panCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument)));
                    //    //regFaculty.PANDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument);
                    //    regFacultylog.PANDocument = faculty.facultyPANCardDocument;
                    //}

                    //regFacultylog.AadhaarDocument = null;
                    //if (faculty.facultyAadhaarCardDocument != null)
                    //{
                    //    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), faculty.facultyAadhaarCardDocument), string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument)));
                    //    //regFaculty.AadhaarDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument);
                    //    regFacultylog.AadhaarDocument = faculty.facultyAadhaarCardDocument;
                    //}

                    //int LogfacultyId = db.jntuh_registered_faculty_log.AsNoTracking().Where(f => f.UserId == UserId).Select(f => f.id).FirstOrDefault();

                    ////if (facultyId == 0)
                    ////{
                    ////    regFacultylog.createdBy = 1;
                    ////    regFacultylog.createdOn = DateTime.Now;
                    ////    db.jntuh_registered_faculty_log.Add(regFacultylog);
                    ////    db.SaveChanges();
                    ////}
                    ////else
                    ////{

                    //regFacultylog.id = LogfacultyId;
                    //regFacultylog.createdBy = db.jntuh_registered_faculty_log.Where(f => f.id == LogfacultyId).Select(f => f.createdBy).FirstOrDefault();
                    //regFacultylog.createdOn = db.jntuh_registered_faculty_log.Where(f => f.id == LogfacultyId).Select(f => f.createdOn).FirstOrDefault();
                    //regFacultylog.FacultyApprovedStatus = 1;
                    //regFacultylog.Remarks = "Approved";
                    //regFacultylog.updatedBy = UserId;
                    //regFacultylog.updatedOn = DateTime.Now;

                    Facultylog.Remarks = "Approved";
                    Facultylog.FacultyApprovedStatus = 1;
                    db.Entry(Facultylog).State = EntityState.Modified;

                    db.SaveChanges();

                    ///}
                }
                if (regFaculty.id > 0)
                {
                    List<jntuh_registered_faculty_education> jntuh_registered_faculty_education_education = db.jntuh_registered_faculty_education.Where(f => f.facultyId == regFaculty.id).ToList();

                    foreach (var item in jntuh_registered_faculty_education_education)
                    {
                        //db.jntuh_registered_faculty_education.Remove(item);
                        //db.SaveChanges();
                    }

                    foreach (var item in faculty.FacultyEducation)
                    {
                        if (item.studiedEducation != null)
                        {
                            jntuh_registered_faculty_education education = new jntuh_registered_faculty_education();
                            education.facultyId = regFaculty.id;
                            education.educationId = item.educationId;
                            education.courseStudied = item.studiedEducation;
                            education.specialization = item.specialization;
                            education.passedYear = item.passedYear == null ? 0 : (int)item.passedYear;
                            education.marksPercentage = item.percentage == null ? 0 : (decimal)item.percentage;
                            education.division = item.division == null ? 0 : (int)item.division;
                            education.boardOrUniversity = item.university;
                            education.placeOfEducation = item.place;

                            education.certificate = null;
                            if (item.facultyCertificate != null)
                            {
                                //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(certificatesPath), item.facultyCertificate), string.Format("{0}\\{1}", Server.MapPath(certificatesPath), regFaculty.RegistrationNumber + "-" + item.educationId + Path.GetExtension(item.facultyCertificate)));
                                //education.certificate = regFaculty.RegistrationNumber + "-" + item.educationId + Path.GetExtension(item.facultyCertificate);
                                education.certificate = item.facultyCertificate;
                            }

                            int eid = db.jntuh_registered_faculty_education.AsNoTracking().Where(e => e.educationId == item.educationId && e.facultyId == regFaculty.id).Select(e => e.id).FirstOrDefault();

                            if (eid == 0)
                            {
                                education.createdBy = 1;
                                education.createdOn = DateTime.Now;
                                db.jntuh_registered_faculty_education.Add(education);
                                //db.SaveChanges();
                            }
                            else
                            {
                                education.id = eid;
                                education.createdBy = db.jntuh_registered_faculty_education.Where(e => e.id == eid).Select(e => e.createdBy).FirstOrDefault();
                                education.createdOn = db.jntuh_registered_faculty_education.Where(e => e.id == eid).Select(e => e.createdOn).FirstOrDefault();
                                education.updatedBy = UserId;
                                education.updatedOn = DateTime.Now;
                                db.Entry(education).State = EntityState.Modified;
                                //db.SaveChanges();
                            }
                        }
                    }
                    int? FEID = db.jntuh_registered_faculty_experience_log.Where(E => E.facultyId == facultyId).Select(E => E.facultyId).FirstOrDefault();
                    if (FEID > 0)
                    {
                        foreach (var item in faculty.RFExperience)
                        {
                            if (item.CollegeId != null)
                            {
                                jntuh_registered_faculty_experience experience = new jntuh_registered_faculty_experience();

                                experience.facultyId = regFaculty.id;
                                experience.collegeId = item.CollegeId;
                                experience.facultyDesignationId = item.DesignationId;
                                experience.facultyDateOfAppointment = item.facultyDateOfAppointment;
                                experience.facultyDateOfResignation = item.facultyDateOfResignation == null ? null : item.facultyDateOfResignation;
                                experience.facultyRelievingLetter = item.RelievingLetter == null ? null : item.RelievingLetter;
                                experience.facultyJoiningOrder = item.JoiningOrder == null ? null : item.JoiningOrder;
                                experience.facultySalary = item.Salary;




                                int eid = db.jntuh_registered_faculty_experience.AsNoTracking().Where(e => e.facultyDesignationId == item.DesignationId && e.facultyId == regFaculty.id && e.collegeId == item.CollegeId).Select(e => e.Id).FirstOrDefault();

                                if (eid == 0)
                                {
                                    experience.createdBy = 1;
                                    experience.createdOn = DateTime.Now;
                                    db.jntuh_registered_faculty_experience.Add(experience);
                                    //db.SaveChanges();
                                }
                                else
                                {
                                    experience.Id = eid;
                                    experience.createdBy = db.jntuh_registered_faculty_experience_log.Where(e => e.Id == eid).Select(e => e.createdBy).FirstOrDefault();
                                    experience.createdOn = db.jntuh_registered_faculty_experience_log.Where(e => e.Id == eid).Select(e => e.createdOn).FirstOrDefault();
                                    experience.updatedBy = UserId;
                                    experience.updatedOn = DateTime.Now;
                                    db.Entry(experience).State = EntityState.Modified;
                                    //db.SaveChanges();
                                }
                            }
                        }
                    }
                    if (fid == null)
                    {
                        ViewBag.Javascript = "Registration completed successfully. Confirmation email sent";
                        TempData["SUCCESS"] = "Registration completed successfully. Confirmation email sent";
                        TempData["FUserName"] = faculty.Email;
                        TempData["FPassword"] = faculty.NewPassword;

                        //send email
                        IUserMailer mailer = new UserMailer();
                        mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Registration Details", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
                        //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Registration Details", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

                        // RAMESH : DO NOT UNCOMMENT SMS CODE UNTIL FURTHUR AUTHENTICATED MAIL FROM AAC

                        //send sms
                        if (!string.IsNullOrEmpty(regFaculty.Mobile))
                        {
                            bool pStatus = UAAAS.Models.Utilities.SendSms(regFaculty.Mobile, "JNTUH: Your registration with JNTUH affiliated faculty portal is completed. Your registration number is " + regFaculty.RegistrationNumber);
                        }
                    }
                    else
                    {
                        ViewBag.Javascript = "Faculty information updated successfully";
                        TempData["SUCCESS"] = "Faculty information updated successfully";
                    }
                }

                if (fid == null)
                {
                    fid = UAAAS.Models.Utilities.EncryptString(regFaculty.id.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);
                }
            }

            if (faculty.facultyDateOfBirth != null)
                faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);

            if (faculty.facultyDateOfAppointment != null)
                faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);

            if (faculty.facultyDateOfRatification != null)
                faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

            return RedirectToAction("PHDSecondStepVerification");
        }


        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult FacultyApprovals(FacultyRegistration faculty, string fid, string Command, HttpPostedFileBase files, FormCollection form)
        {

            TempData["SUCCESS"] = null;
            TempData["ERROR"] = null;
            int fID = 0;//!string.IsNullOrEmpty(fid) ? Convert.ToInt32(fid) : 0;
            if (fid == null)
            {
                if (TempData["fid"] != null)
                    fid = TempData["fid"] as string;
            }

            if (Command == "Go Back" || (faculty.Type == null && faculty.FirstName == null))
            {
                return RedirectToAction("FacultyNew");
            }

            if (fid != null)
            {
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            List<DistinctDepartment> depts = new List<DistinctDepartment>();
            string existingDepts = string.Empty;

            int[] notRequiredIds = { 25, 26, 27, 33, 34, 36, 37, 38, 39, 53, 54, 55, 56 };

            foreach (var item in db.jntuh_department.Where(s => !notRequiredIds.Contains(s.id)).OrderBy(s => s.departmentName))
            {
                if (!existingDepts.Contains(item.departmentName))
                {
                    depts.Add(new DistinctDepartment { id = item.id, departmentName = item.departmentName });
                    existingDepts = existingDepts + "," + item.departmentName;
                }
            }

            ViewBag.department = depts;
            ViewBag.designation = db.jntuh_designation.Where(c => c.isActive == true).ToList();
            ViewBag.Institutions = db.jntuh_college.Where(c => c.isActive == true).Select(c => new { CollegeId = c.id, CollegeName = c.collegeCode + "-" + c.collegeName }).OrderBy(c => c.CollegeName).ToList();

            List<SelectListItem> ratifiedDuration = new List<SelectListItem>();
            for (int i = 1; i <= 10; i++)
            {
                ratifiedDuration.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.duration = ratifiedDuration;

            List<SelectListItem> prevExperience = new List<SelectListItem>();
            for (int i = 0; i <= 40; i++)
            {
                prevExperience.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.prevExperience = prevExperience;

            List<SelectListItem> years = new List<SelectListItem>();
            for (int i = 1940; i <= DateTime.Now.Year; i++)
            {
                years.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }
            ViewBag.years = years;

            List<SelectListItem> division = new List<SelectListItem>();
            for (int i = 1; i <= 5; i++)
            {
                division.Add(new SelectListItem { Text = i.ToString(), Value = i.ToString() });
            }

            ViewBag.division = division;

            if (fid != null)
            {
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.FacultyID = fID;
            faculty.id = fID;

            string photoPath = "~/Content/Upload/Faculty/PHOTOS";
            string panCardsPath = "~/Content/Upload/Faculty/PANCARDS";
            string aadhaarCardsPath = "~/Content/Upload/Faculty/AADHAARCARDS";
            string proceedingsPath = "~/Content/Upload/Faculty/PROCEEDINGS";
            string certificatesPath = "~/Content/Upload/Faculty/CERTIFICATES";
            if (Command == "Update")
            {
                bool isFacultyValid = true;
                string errorMessage = "";

                //VALIDATE THE FORM FOR ALL MANDATORY FIELDS

                //VERIFY FOR THE FACULTY PHOTO DIMENSIONS
                if (faculty.facultyPhoto == null)
                {
                    if (faculty.Photo != null && faculty.Photo.ContentLength > 0)
                    {
                        System.IO.Stream fileStream = faculty.Photo.InputStream;
                        fileStream.Position = 0;
                        byte[] fileContents = new byte[faculty.Photo.ContentLength];
                        fileStream.Read(fileContents, 0, faculty.Photo.ContentLength);
                        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                        if (image.Width > 200 || image.Height > 230)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "Photo should be minimum 150x150 and maximum 200x230 pixels" + "<br>";
                        }

                        if (image.Width < 150 || image.Height < 150)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "Photo should be minimum 150x150 and maximum 200x230 pixels" + "<br>";
                        }
                    }
                    else
                    {
                        isFacultyValid = false;
                        errorMessage += ". " + "Photo is mandatory" + "<br>";
                    }
                }

                if (faculty.facultyPANCardDocument == null)
                {
                    if (faculty.PANCardDocument != null)
                    {
                        System.IO.Stream fileStream = faculty.PANCardDocument.InputStream;
                        fileStream.Position = 0;
                        byte[] fileContents = new byte[faculty.PANCardDocument.ContentLength];
                        fileStream.Read(fileContents, 0, faculty.PANCardDocument.ContentLength);
                        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                        if (image.Width < 300 || image.Height < 250)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "PANCARD document should be minimum 300x250 pixels" + "<br>";
                        }
                    }
                    else
                    {
                        if (faculty.Type != null && faculty.Type.ToUpper() == "EXISTFACULTY")
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "PANCARD is mandatory" + "<br>";
                        }
                    }
                }

                if (faculty.AadhaarNumber == null)
                {
                    if (faculty.AadhaarCardDocument != null)
                    {
                        System.IO.Stream fileStream = faculty.AadhaarCardDocument.InputStream;
                        fileStream.Position = 0;
                        byte[] fileContents = new byte[faculty.AadhaarCardDocument.ContentLength];
                        fileStream.Read(fileContents, 0, faculty.AadhaarCardDocument.ContentLength);
                        System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                        if (image.Width < 200 || image.Height < 200)
                        {
                            isFacultyValid = false;
                            errorMessage += ". " + "Aadhaar Card document should be minimum 200x200 pixels" + "<br>";
                        }
                    }
                    //else
                    //{
                    //    isFacultyValid = false;
                    //    errorMessage += ". " + "Aadhaar Card document is mandatory" + "<br>";
                    //}
                }

                if (faculty.Type == null)
                {
                    if (faculty.WorkingStatus == null || faculty.WorkingStatus == false)
                    {
                        faculty.Type = "NewFaculty";
                        faculty.WorkingStatus = false;
                    }
                    else if (faculty.WorkingStatus == true)
                    {
                        faculty.Type = "ExistFaculty";
                    }
                }

                if (faculty.SelectionCommitteeProcedings == null)
                {

                    if (faculty.WorkingStatus == true)
                    {

                        if (faculty.SelectionCommitteeProceedingsDocument != null)
                        {
                            System.IO.Stream fileStream = faculty.SelectionCommitteeProceedingsDocument.InputStream;
                            fileStream.Position = 0;
                            byte[] fileContents = new byte[faculty.SelectionCommitteeProceedingsDocument.ContentLength];
                            fileStream.Read(fileContents, 0, faculty.SelectionCommitteeProceedingsDocument.ContentLength);
                            System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                            if (image.Width < 600 || image.Height < 800)
                            {
                                isFacultyValid = false;
                                errorMessage += ". " + "Selection Committee Proceedings document should be minimum 600x800 pixels" + "<br>";
                            }
                        }
                        //else
                        //{
                        //    isFacultyValid = false;
                        //    errorMessage += ". " + "Selection Committee Proceedings document is mandatory" + "<br>";
                        //}
                    }
                }

                int vIndex = 0;
                foreach (var item in faculty.FacultyEducation)
                {
                    if (item.facultyCertificate == null)
                    {
                        if (item.certificate != null)
                        {
                            System.IO.Stream fileStream = item.certificate.InputStream;
                            fileStream.Position = 0;
                            byte[] fileContents = new byte[item.certificate.ContentLength];
                            fileStream.Read(fileContents, 0, item.certificate.ContentLength);
                            System.Drawing.Image image = System.Drawing.Image.FromStream(new System.IO.MemoryStream(fileContents));

                            if (image.Width < 600 || image.Height < 800)
                            {
                                isFacultyValid = false;
                                errorMessage += ". " + item.educationName + " document should be minimum 600x800 pixels" + "<br>";
                            }
                        }
                        else
                        {
                            if (vIndex < 2)
                            {
                                isFacultyValid = false;
                                errorMessage += ". " + item.educationName + " document is mandatory" + "<br>";
                            }
                            else if (item.studiedEducation != null)
                            {
                                isFacultyValid = false;
                                errorMessage += ". " + item.educationName + " document is mandatory" + "<br>";
                            }
                        }
                    }

                    vIndex++;
                }

                if (faculty.Photo != null)
                {
                    if (!Directory.Exists(Server.MapPath(photoPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(photoPath));
                    }

                    var ext = Path.GetExtension(faculty.Photo.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.Photo.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(photoPath), fileName, ext));
                        faculty.facultyPhoto = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else if (faculty.facultyPhoto != null)
                {
                    faculty.facultyPhoto = faculty.facultyPhoto;
                }

                if (faculty.PANCardDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(panCardsPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(panCardsPath));
                    }

                    var ext = Path.GetExtension(faculty.PANCardDocument.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.PANCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(panCardsPath), fileName, ext));
                        faculty.facultyPANCardDocument = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else if (faculty.facultyPANCardDocument != null)
                {
                    faculty.facultyPANCardDocument = faculty.facultyPANCardDocument;
                }

                if (faculty.AadhaarCardDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(aadhaarCardsPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(aadhaarCardsPath));
                    }

                    var ext = Path.GetExtension(faculty.AadhaarCardDocument.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.AadhaarCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(aadhaarCardsPath), fileName, ext));
                        faculty.facultyAadhaarCardDocument = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else if (faculty.facultyAadhaarCardDocument != null)
                {
                    faculty.facultyAadhaarCardDocument = faculty.facultyAadhaarCardDocument;
                }

                if (faculty.SelectionCommitteeProceedingsDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(proceedingsPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(proceedingsPath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeProceedingsDocument.FileName);

                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                        faculty.SelectionCommitteeProceedingsDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(proceedingsPath), fileName, ext));
                        faculty.SelectionCommitteeProcedings = string.Format("{0}{1}", fileName, ext);

                    }
                }
                else if (faculty.SelectionCommitteeProcedings != null)
                {
                    faculty.SelectionCommitteeProcedings = faculty.SelectionCommitteeProcedings;
                }

                int eIndex = 0;
                foreach (var item in faculty.FacultyEducation)
                {
                    if ((eIndex == 0 && item.studiedEducation == null) || (eIndex != 0 && item.studiedEducation != null))
                    {
                        if (item.certificate != null)
                        {
                            if (!Directory.Exists(Server.MapPath(certificatesPath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(certificatesPath));
                            }

                            var ext = Path.GetExtension(item.certificate.FileName);

                            if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                            {
                                string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1) + "_" + item.studiedEducation;
                                item.certificate.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(certificatesPath), fileName, ext));
                                item.facultyCertificate = string.Format("{0}{1}", fileName, ext);
                            }
                        }
                        else if (item.facultyCertificate != null)
                        {
                            item.facultyCertificate = item.facultyCertificate;
                        }
                    }

                    eIndex++;
                }

                if (!isFacultyValid)
                {
                    TempData["ERROR"] = errorMessage;

                    if (faculty.facultyDateOfBirth != null)
                        faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);
                    if (faculty.facultyDateOfAppointment != null)
                        faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);
                    if (faculty.facultyDateOfRatification != null)
                        faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

                    TempData["FACULTY"] = faculty;
                    return RedirectToAction("FacultyNew");
                }

            }
            if (faculty.id > 0)
            {
                fid = UAAAS.Models.Utilities.EncryptString(faculty.id.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);
            }

            bool IsValidPhoto = true;

            if (faculty.facultyDateOfBirth != null)
                faculty.facultyDateOfBirth = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfBirth).ToShortDateString();
            if (faculty.facultyDateOfAppointment != null)
                faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfAppointment).ToShortDateString();
            if (faculty.facultyDateOfRatification != null)
                faculty.facultyDateOfRatification = UAAAS.Models.Utilities.DDMMYY2MMDDYY(faculty.facultyDateOfRatification).ToShortDateString();

            if (!ModelState.IsValid)
            {
                var errors = ModelState.Where(v => v.Value.Errors.Any());
                var message = string.Join(" | ", ModelState.Values
                    .SelectMany(v => v.Errors)
                    .Select(e => e.ErrorMessage));
                //return new HttpStatusCodeResult(1, message);
            }

            int UserId = 0;

            string userName = string.Empty; string password = string.Empty; string email = string.Empty;
            UserId = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UserId).FirstOrDefault();

            if (UserId > 0 && IsValidPhoto)
            {
                jntuh_registered_faculty regFaculty = new jntuh_registered_faculty();
                regFaculty.UserId = UserId;

                if (faculty.isApproved == true && string.IsNullOrEmpty(faculty.UniqueID))
                {


                    regFaculty.UniqueID = string.Empty;
                    regFaculty.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();



                }
                else if (faculty.isApproved == true && !string.IsNullOrEmpty(faculty.UniqueID))
                {
                    regFaculty.UniqueID = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.UniqueID).FirstOrDefault();
                    regFaculty.RegistrationNumber = db.jntuh_registered_faculty.Where(f => f.id == fID).Select(f => f.RegistrationNumber).FirstOrDefault();
                }
                else
                {
                    regFaculty.UniqueID = string.Empty;
                    string regNumber = db.jntuh_registered_faculty.Where(f => f.UserId == regFaculty.UserId).Select(f => f.RegistrationNumber).FirstOrDefault();

                    if (string.IsNullOrEmpty(regNumber))
                    {
                        Random rnd = new Random();
                        regFaculty.RegistrationNumber = rnd.Next(0, 9999).ToString("D4") + "-" + DateTime.Now.ToString("yyyyMMdd-HHmmss").Substring(2);
                    }
                    else
                    {
                        regFaculty.RegistrationNumber = regNumber;
                    }
                }

                regFaculty.type = faculty.Type;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.GenderId = faculty.GenderId == null ? 0 : (int)faculty.GenderId;
                regFaculty.FatherOrHusbandName = faculty.FatherOrhusbandName;
                regFaculty.DateOfBirth = Convert.ToDateTime(faculty.facultyDateOfBirth);
                regFaculty.OrganizationName = faculty.OrganizationName == null ? string.Empty : faculty.OrganizationName;
                regFaculty.DesignationId = faculty.DesignationId;
                regFaculty.DepartmentId = faculty.DepartmentId;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.collegeId = faculty.CollegeId;

                if (regFaculty.type == null)
                {
                    if (faculty.WorkingStatus == null || faculty.WorkingStatus == false)
                    {
                        regFaculty.type = "NewFaculty";
                        regFaculty.WorkingStatus = false;
                    }
                    else if (faculty.WorkingStatus == true)
                    {
                        regFaculty.type = "ExistFaculty";
                    }
                }
                regFaculty.OtherDepartment = faculty.OtherDepartment;
                regFaculty.OtherDesignation = faculty.OtherDesignation;

                if (faculty.facultyDateOfAppointment != null)
                    regFaculty.DateOfAppointment = Convert.ToDateTime(faculty.facultyDateOfAppointment);
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU == null ? false : (bool)faculty.isFacultyRatifiedByJNTU;

                if (faculty.facultyDateOfRatification != null)
                    regFaculty.DateOfRatification = Convert.ToDateTime(faculty.facultyDateOfRatification);
                regFaculty.ProceedingsNumber = faculty.ProceedingsNo;

                if (faculty.TotalExperience != null)
                {
                    regFaculty.TotalExperience = (int)faculty.TotalExperience;
                }
                else
                {
                    regFaculty.TotalExperience = 0;
                }

                regFaculty.Email = faculty.Email;
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;

                regFaculty.MotherName = faculty.MotherName;
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.grosssalary = faculty.GrossSalary;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.ProceedingsNumber = faculty.ProceedingsNo;
                regFaculty.OrganizationName = faculty.OrganizationName;

                regFaculty.isActive = true;
                regFaculty.isApproved = faculty.isApproved;

                regFaculty.ProceedingDocument = null;
                if (faculty.SelectionCommitteeProcedings != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), faculty.SelectionCommitteeProcedings), string.Format("{0}\\{1}", Server.MapPath(proceedingsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings)));
                    //regFaculty.ProceedingDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.SelectionCommitteeProcedings);
                    regFaculty.ProceedingDocument = faculty.SelectionCommitteeProcedings;
                }

                regFaculty.Photo = null;
                if (faculty.facultyPhoto != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(photoPath), faculty.facultyPhoto), string.Format("{0}\\{1}", Server.MapPath(photoPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto)));
                    //regFaculty.Photo = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPhoto);
                    regFaculty.Photo = faculty.facultyPhoto;
                }

                regFaculty.PANDocument = null;
                if (faculty.facultyPANCardDocument != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(panCardsPath), faculty.facultyPANCardDocument), string.Format("{0}\\{1}", Server.MapPath(panCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument)));
                    //regFaculty.PANDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyPANCardDocument);
                    regFaculty.PANDocument = faculty.facultyPANCardDocument;
                }


                regFaculty.AadhaarDocument = null;
                if (faculty.facultyAadhaarCardDocument != null)
                {
                    //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), faculty.facultyAadhaarCardDocument), string.Format("{0}\\{1}", Server.MapPath(aadhaarCardsPath), regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument)));
                    //regFaculty.AadhaarDocument = regFaculty.RegistrationNumber + Path.GetExtension(faculty.facultyAadhaarCardDocument);
                    regFaculty.AadhaarDocument = faculty.facultyAadhaarCardDocument;
                }
                else
                {
                    if (faculty.AadhaarCardDocument != null)
                    {
                        if (!Directory.Exists(Server.MapPath(aadhaarCardsPath)))
                        {
                            Directory.CreateDirectory(Server.MapPath(aadhaarCardsPath));
                        }

                        var ext = Path.GetExtension(faculty.AadhaarCardDocument.FileName);

                        if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                        {
                            string fileName = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff") + "-" + faculty.FirstName.Substring(0, 1) + "-" + faculty.LastName.Substring(0, 1);
                            faculty.AadhaarCardDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(aadhaarCardsPath), fileName, ext));
                            faculty.facultyAadhaarCardDocument = string.Format("{0}{1}", fileName, ext);
                        }
                    }
                }

                int facultyId = db.jntuh_registered_faculty_log.AsNoTracking().Where(f => f.UserId == UserId).Select(f => f.id).FirstOrDefault();

                if (facultyId == 0)
                {
                    regFaculty.createdBy = 1;
                    regFaculty.createdOn = DateTime.Now;
                    db.jntuh_registered_faculty.Add(regFaculty);
                    db.SaveChanges();
                }
                else
                {
                    regFaculty.id = facultyId;
                    regFaculty.createdBy = db.jntuh_registered_faculty.Where(f => f.id == facultyId).Select(f => f.createdBy).FirstOrDefault();
                    regFaculty.createdOn = db.jntuh_registered_faculty.Where(f => f.id == facultyId).Select(f => f.createdOn).FirstOrDefault();
                    regFaculty.updatedBy = 1;
                    regFaculty.updatedOn = DateTime.Now;
                    db.Entry(regFaculty).State = EntityState.Modified;
                    db.SaveChanges();
                }

                if (regFaculty.id > 0)
                {
                    List<jntuh_registered_faculty_education> jntuh_registered_faculty_education_education = db.jntuh_registered_faculty_education.Where(f => f.facultyId == regFaculty.id).ToList();

                    foreach (var item in jntuh_registered_faculty_education_education)
                    {
                        db.jntuh_registered_faculty_education.Remove(item);
                        db.SaveChanges();
                    }

                    foreach (var item in faculty.FacultyEducation)
                    {
                        if (item.studiedEducation != null)
                        {
                            jntuh_registered_faculty_education education = new jntuh_registered_faculty_education();
                            education.facultyId = regFaculty.id;
                            education.educationId = item.educationId;
                            education.courseStudied = item.studiedEducation;
                            education.specialization = item.specialization;
                            education.passedYear = item.passedYear == null ? 0 : (int)item.passedYear;
                            education.marksPercentage = item.percentage == null ? 0 : (decimal)item.percentage;
                            education.division = item.division == null ? 0 : (int)item.division;
                            education.boardOrUniversity = item.university;
                            education.placeOfEducation = item.place;

                            education.certificate = null;
                            if (item.facultyCertificate != null)
                            {
                                //System.IO.File.Move(string.Format("{0}\\{1}", Server.MapPath(certificatesPath), item.facultyCertificate), string.Format("{0}\\{1}", Server.MapPath(certificatesPath), regFaculty.RegistrationNumber + "-" + item.educationId + Path.GetExtension(item.facultyCertificate)));
                                //education.certificate = regFaculty.RegistrationNumber + "-" + item.educationId + Path.GetExtension(item.facultyCertificate);
                                education.certificate = item.facultyCertificate;
                            }

                            int eid = db.jntuh_registered_faculty_education_log.AsNoTracking().Where(e => e.educationId == item.educationId && e.facultyId == regFaculty.id).Select(e => e.id).FirstOrDefault();

                            if (eid == 0)
                            {
                                education.createdBy = 1;
                                education.createdOn = DateTime.Now;
                                db.jntuh_registered_faculty_education.Add(education);
                                db.SaveChanges();
                            }
                            else
                            {
                                education.id = eid;
                                education.createdBy = db.jntuh_registered_faculty_education.Where(e => e.id == eid).Select(e => e.createdBy).FirstOrDefault();
                                education.createdOn = db.jntuh_registered_faculty_education.Where(e => e.id == eid).Select(e => e.createdOn).FirstOrDefault();
                                education.updatedBy = 1;
                                education.updatedOn = DateTime.Now;
                                db.Entry(education).State = EntityState.Modified;
                                db.SaveChanges();
                            }
                        }
                    }

                    if (fid == null)
                    {
                        ViewBag.Javascript = "Registration completed successfully. Confirmation email sent";
                        TempData["SUCCESS"] = "Registration completed successfully. Confirmation email sent";
                        TempData["FUserName"] = faculty.Email;
                        TempData["FPassword"] = faculty.NewPassword;

                        //send email
                        IUserMailer mailer = new UserMailer();
                        mailer.FacultyOnlineRegistration(faculty.Email, "FacultyOnlineRegistration", "JNTUH Faculty Registration Details", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();
                        //mailer.FacultyOnlineRegistration("aac.do.not.reply@gmail.com", "FacultyOnlineRegistration", "JNTUH Faculty Registration Details", faculty.Email, faculty.NewPassword, regFaculty.RegistrationNumber, regFaculty.UniqueID, regFaculty.type, regFaculty.PANNumber).SendAsync();

                        // RAMESH : DO NOT UNCOMMENT SMS CODE UNTIL FURTHUR AUTHENTICATED MAIL FROM AAC

                        ////send sms
                        //if (!string.IsNullOrEmpty(regFaculty.Mobile))
                        //{
                        //    bool pStatus = UAAAS.Models.Utilities.SendSms(regFaculty.Mobile, "JNTUH: Your registration with JNTUH affiliated faculty portal is completed. Your registration number is " + regFaculty.RegistrationNumber);
                        //}
                    }
                    else
                    {
                        ViewBag.Javascript = "Faculty information updated successfully";
                        TempData["SUCCESS"] = "Faculty information updated successfully";
                    }
                }

                if (fID > 0)
                {
                    fid = UAAAS.Models.Utilities.EncryptString(fID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]);
                }
            }

            if (faculty.facultyDateOfBirth != null)
                faculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfBirth);

            if (faculty.facultyDateOfAppointment != null)
                faculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfAppointment);

            if (faculty.facultyDateOfRatification != null)
                faculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.facultyDateOfRatification);

            return RedirectToAction("FacultyNew", new { fid = fid });
        }


        //For Faculty  SCM Verification
       [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification,DataEntry")]
        public ActionResult FacultySCMVerification(int? collegeId)
        {
            //List<FacultyRegistration> teachingFaculty = new List<FacultyRegistration>();
            //List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
            #region Old Code
            //var jntuh_college = db.jntuh_college.Where(i => i.isActive == true).ToList();
            //var jntuh_department = db.jntuh_department.ToList();
            //var date = new DateTime(2015, 6, 1);
            //jntuh_registered_faculty = db.jntuh_registered_faculty.Where(c => c.createdOn > new DateTime(2015, 6, 1) && (
            //    c.DeactivationReason.Contains("In valid Selection Committee Proceedings") || c.NotQualifiedAsperAICTE == true)).ToList();
            //var data = jntuh_registered_faculty.Select(a => new FacultyRegistration
            //{

            //    id = db.jntuh_registered_faculty.Where(f => f.UserId == a.UserId).Select(f => f.id).FirstOrDefault(),
            //    Type = a.type,
            //    RegistrationNumber = a.RegistrationNumber,
            //    UniqueID = a.UniqueID,
            //    FirstName = a.FirstName,
            //    MiddleName = a.MiddleName,
            //    LastName = a.LastName,
            //    GenderId = a.GenderId,
            //    Email = a.Email,
            //    facultyPhoto = a.Photo,
            //    Mobile = a.Mobile,
            //    PANNumber = a.PANNumber,
            //    AadhaarNumber = a.AadhaarNumber,
            //    isActive = a.isActive,
            //    isApproved = a.isApproved,
            //    SamePANNumberCount = 1,
            //    SameAadhaarNumberCount = 2,
            //    department = jntuh_department.Where(d => d.id == a.DepartmentId).Select(d => d.departmentName).FirstOrDefault(),
            //    jntuh_registered_faculty_education = a.jntuh_registered_faculty_education,
            //    CollegeName = a.collegeId != null ? jntuh_college.Where(i => i.id == a.collegeId).FirstOrDefault().collegeName : "",
            //    DeactivationReason = a.DeactivationReason,
            //    NOTQualifiedAsPerAICTE = a.NotQualifiedAsperAICTE != null ? (bool)a.NotQualifiedAsperAICTE : false

            //});
            //teachingFaculty.AddRange(data);
            #endregion
            var SubmittedCollegeIds = db.jntuh_college_edit_status.AsNoTracking().Where(e => e.IsCollegeEditable == false).Select(e => e.collegeId).ToArray();
            //var collegeIds = db.jntuh_auditors_dataentry.Where(e => e.IsActive == true && e.SpecializationId != 0 && e.DepartmentId != 0 && e.DegreeId != 0).Select(e => e.CollegeId).Distinct().ToArray();
            ViewBag.Colleges = db.jntuh_college.Where(e => e.isActive == true && SubmittedCollegeIds.Contains(e.id)).Select(e => new { collegeId = e.id, collegeName = e.collegeCode + "-" + e.collegeName }).OrderBy(e => e.collegeName).ToList();
            if (collegeId != null)
            {
                var jntuh_auditors_dataentry = db.jntuh_auditors_dataentry.Where(e => e.IsActive == true).Select(e => e).ToList();
                var jntuh_scmproceedingrequest_addfaculty = db.jntuh_scmproceedingrequest_addfaculty.AsNoTracking().ToList();

                var Scmalldata = (from NomineeDTERY in db.jntuh_auditors_dataentry
                                  join REG in db.jntuh_registered_faculty on NomineeDTERY.RegistrationNo equals REG.RegistrationNumber
                                  join AUDI in db.jntuh_ffc_auditor on NomineeDTERY.AuditorId equals AUDI.id
                                  join SPEC in db.jntuh_specialization on NomineeDTERY.SpecializationId equals SPEC.id
                                  join DEPT in db.jntuh_department on NomineeDTERY.DepartmentId equals DEPT.id
                                  join DESG in db.jntuh_degree on NomineeDTERY.DegreeId equals DESG.id
                                  where NomineeDTERY.CollegeId == collegeId && NomineeDTERY.SpecializationId != 0 && NomineeDTERY.DepartmentId != 0 && NomineeDTERY.DegreeId != 0
                                  select new ScmUploadedData()
                                  {
                                      RegistrationNumber = REG.RegistrationNumber,
                                      SCMId = NomineeDTERY.ScmProceedingId,
                                      Specialization = DESG.degree + "-" + SPEC.specializationName,
                                      SpecializationId = NomineeDTERY.SpecializationId,
                                      Department = DEPT.departmentName,
                                      DepartmentId = NomineeDTERY.DepartmentId,
                                      Degree = DESG.degree,
                                      DegreeId = NomineeDTERY.DegreeId,
                                      FirstName = REG.FirstName + " " + REG.LastName,
                                      CollegeId = NomineeDTERY.CollegeId,
                                      AuditorId = NomineeDTERY.AuditorId,
                                      AuditorName = AUDI.auditorName,
                                      Checked = NomineeDTERY.IsSelected != false ? true : false,
                                      SCMhardcopyview = NomineeDTERY.SCMhardcopy,
                                      SCMDate = NomineeDTERY.CreatedOn,
                                      facultyId = REG.id,
                                      Noscm16 = REG.NoSCM17!=null?(bool)REG.NoSCM17:false,
                                     // CollegeDepartmentId = db.jntuh_college_faculty_registered.Where(e => e.RegistrationNumber.Trim() == REG.RegistrationNumber.Trim() && e.collegeId == collegeId).Select(e => e.DepartmentId).FirstOrDefault()
                                  }).OrderBy(e => e.RegistrationNumber).ToList();





                List<ScmUploadedData> collegewiseSCmdata = new List<ScmUploadedData>();
                int ScmId = 0;
                string Regno = string.Empty;
                int trackingFacultyId = 0;
                List<jntuh_scmproceedingrequest_addfaculty> AddFacultyDetails = new List<jntuh_scmproceedingrequest_addfaculty>();
                foreach (var item in Scmalldata.OrderBy(e => e.SCMId).Select(e => e).ToList())
                {
                    if (item.SCMId == 380)
                    {

                    }

                    if (ScmId == 0 && string.IsNullOrEmpty(Regno) && Scmalldata.IndexOf(item) == 0)
                    {
                        AddFacultyDetails = db.jntuh_scmproceedingrequest_addfaculty.Where(e => e.ScmProceedingId == item.SCMId && e.RegistrationNumber.Trim() == item.RegistrationNumber.Trim() && e.FacultyType != 1).OrderBy(e => e.Id).Select(e => e).ToList();
                    }
                    if (ScmId != 0 && !string.IsNullOrEmpty(Regno) && ScmId != item.SCMId)
                    {
                        AddFacultyDetails = db.jntuh_scmproceedingrequest_addfaculty.Where(e => e.ScmProceedingId == item.SCMId && e.RegistrationNumber.Trim() == item.RegistrationNumber.Trim() && e.FacultyType != 1).OrderBy(e => e.Id).Select(e => e).ToList();
                    }

                    if (ScmId == 0 && string.IsNullOrEmpty(Regno) && ScmId != item.SCMId)
                    {
                        AddFacultyDetails = db.jntuh_scmproceedingrequest_addfaculty.Where(e => e.ScmProceedingId == item.SCMId && e.RegistrationNumber.Trim() == item.RegistrationNumber.Trim() && e.FacultyType != 1).OrderBy(e => e.Id).Select(e => e).ToList();
                    }
                    if (ScmId != 0 && Regno.Trim() != item.RegistrationNumber.Trim() && ScmId == item.SCMId)
                    {
                        AddFacultyDetails = db.jntuh_scmproceedingrequest_addfaculty.Where(e => e.ScmProceedingId == item.SCMId && e.RegistrationNumber.Trim() == item.RegistrationNumber.Trim() && e.FacultyType != 1).OrderBy(e => e.Id).Select(e => e).ToList();
                    }


                   

                    var firstOrDefault = new jntuh_scmproceedingrequest_addfaculty();

                    if (ScmId == item.SCMId && Regno == item.RegistrationNumber)
                    {
                        if (trackingFacultyId != 0)
                            firstOrDefault = AddFacultyDetails.Where(e => e.Id != trackingFacultyId).Select(e => e).OrderByDescending(e => e.Id).FirstOrDefault();
                        else
                            firstOrDefault = AddFacultyDetails.Select(e => e).OrderByDescending(e => e.Id).FirstOrDefault();

                        ScmId = 0;
                        Regno = string.Empty;
                        trackingFacultyId = 0;
                    }
                    else
                    {
                        firstOrDefault = AddFacultyDetails.Select(e => e).OrderBy(e => e.Id).FirstOrDefault();
                        ScmId = item.SCMId;
                        Regno = item.RegistrationNumber.Trim();
                    }


                    if (firstOrDefault != null)
                    {
                        if (firstOrDefault.FacultyType != null)
                            item.DesignationId = Convert.ToInt16(firstOrDefault.FacultyType);
                        item.ScmfacultyaddedId = firstOrDefault.Id;
                        item.Approved = firstOrDefault.IsApproved;
                        item.Remarks = firstOrDefault.DeactiviationReason;
                        trackingFacultyId = firstOrDefault.Id;
                    }
                    collegewiseSCmdata.Add(item);



                }


                List<CollegeAssociatedFaculty> CollegeAssociatedFaculty = db.jntuh_college_faculty_registered.Where(e => e.collegeId == collegeId && e.DepartmentId != null && e.RegistrationNumber != null).Select(e => new CollegeAssociatedFaculty()
                {
                    RegNo = e.RegistrationNumber,
                    CollegeId = e.collegeId,
                    DeptId = (int)e.DepartmentId
                }).ToList();


                var CollegeData = collegewiseSCmdata.Join(CollegeAssociatedFaculty, Clg => Clg.RegistrationNumber, D => D.RegNo, (Clg, D) => new { Clg = Clg, D = D })
                        .Where(e => e.Clg.RegistrationNumber == e.D.RegNo && e.Clg.DepartmentId == e.D.DeptId).Select(e => e.Clg).ToList();//
                
              

                return View(CollegeData);
            }
            return View();


          //  return View(teachingFaculty);
        }


        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult FacultySCMVerificationView(string fid)
        {

            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                jntuh_registered_faculty faculty = db.jntuh_registered_faculty.Find(fID);

                regFaculty.id = fID;
                regFaculty.Type = faculty.type;
                regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == faculty.UserId).Select(u => u.name).FirstOrDefault();
                regFaculty.Email = faculty.Email;
                regFaculty.UniqueID = faculty.UniqueID;
                regFaculty.FirstName = faculty.FirstName;
                regFaculty.MiddleName = faculty.MiddleName;
                regFaculty.LastName = faculty.LastName;
                regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                regFaculty.MotherName = faculty.MotherName;
                regFaculty.GenderId = faculty.GenderId;
                if (faculty.DateOfBirth != null)
                {
                    regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                }
                regFaculty.Mobile = faculty.Mobile;
                regFaculty.facultyPhoto = faculty.Photo;
                regFaculty.PANNumber = faculty.PANNumber;
                regFaculty.facultyPANCardDocument = faculty.PANDocument;
                regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                regFaculty.WorkingStatus = faculty.WorkingStatus;
                regFaculty.TotalExperience = faculty.TotalExperience;
                regFaculty.OrganizationName = faculty.OrganizationName;
                if (faculty.collegeId != null)
                {
                    regFaculty.CollegeName = db.jntuh_college.Find(faculty.collegeId).collegeName;
                }
                regFaculty.CollegeId = faculty.collegeId;
                if (faculty.DepartmentId != null)
                {
                    regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                }
                regFaculty.DepartmentId = faculty.DepartmentId;
                regFaculty.OtherDepartment = faculty.OtherDepartment;

                if (faculty.DesignationId != null)
                {
                    regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                }
                regFaculty.DesignationId = faculty.DesignationId;
                regFaculty.OtherDesignation = faculty.OtherDesignation;

                if (faculty.DateOfAppointment != null)
                {
                    regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                }
                regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                if (faculty.DateOfRatification != null)
                {
                    regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                }
                regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                regFaculty.GrossSalary = faculty.grosssalary;
                regFaculty.National = faculty.National;
                regFaculty.InterNational = faculty.InterNational;
                regFaculty.Citation = faculty.Citation;
                regFaculty.Awards = faculty.Awards;
                regFaculty.isActive = faculty.isActive;
                regFaculty.isApproved = faculty.isApproved;
                regFaculty.isView = true;
                regFaculty.DeactivationReason = faculty.DeactivationReason;


                regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                            .Select(e => new RegisteredFacultyEducation
                                                            {
                                                                educationId = e.id,
                                                                educationName = e.educationCategoryName,
                                                                studiedEducation = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                                specialization = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.specialization).FirstOrDefault(),
                                                                passedYear = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.passedYear).FirstOrDefault(),
                                                                percentage = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                                division = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.division).FirstOrDefault(),
                                                                university = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                                place = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                                facultyCertificate = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == fID).Select(fe => fe.certificate).FirstOrDefault(),
                                                            }).ToList();

                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }

                string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == fID).Select(of => of.RegistrationNumber).FirstOrDefault();
                int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
                //Commented on 18-06-2018 by Narayana Reddy
                //int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();
                int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);

                //bool isValid = ShowHideLink(fID);

                //ViewBag.HideVerifyLink = isValid;

                //if (verificationOfficers.Contains(userId))
                //{
                //    if (isValid)
                //    {
                //        ViewBag.HideVerifyLink = true;
                //    }
                //    else
                //    {
                //        ViewBag.HideVerifyLink = false;
                //    }
                //}

                //if (verificationOfficers.Count() == 3)
                //{
                //    ViewBag.HideVerifyLink = true;
                //}

                ViewBag.HideVerifyLink = regFaculty.isApproved != null ? true : false;
            }

            return View(regFaculty);
        }

        //For Faculty  SCM Verification***********************************************

        [Authorize(Roles = "Admin,College")]
        public ActionResult CollegeFacultyWithIntakeFacultyPharmacy()
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (collegeId == 375)
                collegeId = Convert.ToInt32(WebConfigurationManager.AppSettings["PharmacyId"]);
            ViewBag.collegeId = collegeId;
            List<PharmacyAppeal> PharmacyAppealFaculty = new List<PharmacyAppeal>();

            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
            int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
            int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
            int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
            int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
            int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();

            var Departments = db.jntuh_department.Where(d => d.degreeId == 2 || d.degreeId == 5 || d.degreeId == 9 || d.degreeId == 10).ToList();
            int[] Departmentids = Departments.Select(d => d.id).ToArray();
            var Specializations = db.jntuh_specialization.Where(s => Departmentids.Contains(s.departmentId)).ToList();
            int[] Specializationids = Specializations.Select(S => S.id).ToArray();

            List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == collegeId && i.courseStatus != "Closure" && i.shiftId == 1 && Specializationids.Contains(i.specializationId)).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeIntakeExisting> CurrentyearcollegeIntakeExisting = new List<CollegeIntakeExisting>();

            foreach (var item in intake)
            {
                CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                newIntake.id = item.id;
                newIntake.collegeId = item.collegeId;
                newIntake.academicYearId = item.academicYearId;
                newIntake.shiftId = item.shiftId;
                newIntake.isActive = item.isActive;
                newIntake.nbaFrom = item.nbaFrom;
                newIntake.nbaTo = item.nbaTo;
                newIntake.specializationId = item.specializationId;
                newIntake.Specialization = item.jntuh_specialization.specializationName;
                newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                newIntake.shiftId = item.shiftId;
                newIntake.Shift = item.jntuh_shift.shiftName;
                collegeIntakeExisting.Add(newIntake);
            }
            CurrentyearcollegeIntakeExisting = collegeIntakeExisting.Where(a => a.academicYearId == 10).ToList();
            string cid = collegeId.ToString();
            var FacultyData = db.jntuh_appeal_pharmacydata.Where(p => p.CollegeCode == cid).ToList();
            string[] AssignedFaculty = FacultyData.Select(p => p.Deficiency).ToArray();
            var registeredFaculty = db.jntuh_registered_faculty.Where(rf => AssignedFaculty.Contains(rf.RegistrationNumber.Trim())).ToList();

            var jntuh_registered_faculty1 = registeredFaculty
                                                    .Select(rf => new
                                                    {
                                                        RegistrationNumber = rf.RegistrationNumber,
                                                        HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                    }).Where(e => e.HighestDegreeID == 6).ToList();
            string[] PhdRegNO = jntuh_registered_faculty1.Select(e => e.RegistrationNumber).ToArray();
            string[] Collegefaculty = db.jntuh_college_faculty_registered.Where(CF => CF.collegeId == collegeId).Select(Cf => Cf.RegistrationNumber).ToArray();
            var collegeFacultycount1 = db.jntuh_registered_faculty.Where(rf => Collegefaculty.Contains(rf.RegistrationNumber)).ToList();
            var collegeFacultycount = collegeFacultycount1.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.OriginalCertificatesNotShown == false) && (rf.Xeroxcopyofcertificates == false || rf.Xeroxcopyofcertificates == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null)//&& rf.Noform16Verification == false && rf.NoForm16 == false
                                                       && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false || rf.IncompleteCertificates == null) && (rf.Blacklistfaculy == false) && rf.NoRelevantUG != "Yes" && rf.NoRelevantPG != "Yes" && rf.NORelevantPHD != "Yes" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.OriginalsVerifiedPHD != true) && (rf.OriginalsVerifiedUG != true) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS != "Yes") && rf.InvalidAadhaar != "Yes").Select(r => r.RegistrationNumber).ToList();
            TotalcollegeFaculty = collegeFacultycount.Count();
            int? Required = 0;
            int? Avilable = 0;
            int? PhDAvilable = 0;
            //int? TotalRequired = 0;
            //int? TotalAvilable = 0;
            int? TotalIntake = 0;
            int? PraposedIntake = 0;
            int Sno = 1;
            string strgroup = "";
            string PharmacyStatus = "";
            string specialization = "";
            int SecondYerintake = 0;
            int ThirdYerintake = 0;
            int FourthYerintake = 0;
            int PharmDSecondYerintake = 0;
            int PharmDThirdYerintake = 0;
            int PharmDFourthYerintake = 0;
            int PharmDFifthhYerintake = 0;
            string PharmD = "";

            foreach (var item in CurrentyearcollegeIntakeExisting)
            {
                specialization = item.specializationId.ToString();

                if (item.Degree == "B.Pharmacy")
                {
                    for (int i = 1; i <= 4; i++)
                    {
                        PharmacyAppeal Pharmacy = new PharmacyAppeal();
                        Pharmacy.Department = item.Department;
                        Pharmacy.Specialization = item.Specialization;
                        Pharmacy.TotalIntake = null;
                        Pharmacy.ProposedIntake = null;
                        Pharmacy.NoOfFacultyRequired = null;
                        Pharmacy.NoOfAvilableFaculty = null;
                        strgroup = null;
                        switch (i)
                        {
                            case 1:
                                Pharmacy.PharmacySpecialization = "Group1 (Pharmaceutics , Industrial Pharmacy , Pharmaceutical Technology , 	Pharmaceutical Biotechnology)";
                                strgroup = "1";
                                break;
                            case 2:
                                Pharmacy.PharmacySpecialization = "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis , PAQA , QA , QAPRA , NIPER Medicinal Chemistry)";
                                strgroup = "2";
                                break;
                            case 3:
                                Pharmacy.PharmacySpecialization = "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice , Hospital Pharmacy , Clinical Pharmacy,  Hospital and Clinical Pharmacy)";
                                strgroup = "3";
                                break;
                            default:
                                Pharmacy.PharmacySpecialization = "Group4 (Pharmacognosy, Pharmaceutical Chemistry , Phytopharmacy & Phytomedicine , NIPER  Natural Products , Pharmaceutical Biotechnology";
                                strgroup = "4";
                                break;
                        }

                        Pharmacy.SpecializationwiseRequiredFaculty = FacultyData.Where(f => f.CollegeCode == cid && f.Specialization == specialization && f.PharmacySpecialization == strgroup).Select(f => f.SpecializationWiseRequiredFaculty).FirstOrDefault();
                        Pharmacy.SpecializationwiseAvilableFaculty = FacultyData.Count(f => f.CollegeCode == cid && f.Specialization == specialization && f.PharmacySpecialization == strgroup && f.Deficiency != null);
                        if (Pharmacy.SpecializationwiseRequiredFaculty <= Pharmacy.SpecializationwiseAvilableFaculty)
                        {
                            Pharmacy.Deficiency = "No Deficiency";
                            if (PharmacyStatus == "Deficiency" && Pharmacy.Specialization != "B.Pharmacy")
                                Pharmacy.Deficiency = "Deficiency";
                        }

                        else
                        {
                            Pharmacy.Deficiency = "Deficiency";
                            if (Pharmacy.Specialization == "B.Pharmacy")
                                PharmacyStatus = "Deficiency";
                        }


                        if (item.Degree == "M.Pharmacy")
                            Pharmacy.PHdFaculty = 1;
                        else
                            Pharmacy.PHdFaculty = 0;

                        //PhdRegNO

                        PharmacyAppealFaculty.Add(Pharmacy);
                    }
                }

                PharmacyAppeal Pharmacy1 = new PharmacyAppeal();
                Pharmacy1.Department = item.Department;
                Pharmacy1.Specialization = item.Specialization;
                Pharmacy1.TotalIntake = FacultyData.Where(f => f.CollegeCode == cid && f.Specialization == specialization).Select(f => f.TotalIntake).FirstOrDefault();
                Pharmacy1.ProposedIntake = FacultyData.Where(f => f.CollegeCode == cid && f.Specialization == specialization).Select(f => f.ProposedIntake).FirstOrDefault();
                Pharmacy1.NoOfFacultyRequired = FacultyData.Where(f => f.CollegeCode == cid && f.Specialization == specialization).Select(f => f.NoOfFacultyRequired).FirstOrDefault();
                Pharmacy1.NoOfAvilableFaculty = FacultyData.Count(f => f.CollegeCode == cid && f.Specialization == specialization && f.Deficiency != null);
                strgroup = FacultyData.Where(f => f.CollegeCode == cid && f.Specialization == specialization).Select(f => f.PharmacySpecialization).FirstOrDefault();
                Pharmacy1.PharmacySpecialization = "";
                Pharmacy1.SpecializationwiseRequiredFaculty = FacultyData.Where(f => f.CollegeCode == cid && f.Specialization == specialization).Select(f => f.NoOfFacultyRequired).FirstOrDefault();
                Pharmacy1.SpecializationwiseAvilableFaculty = FacultyData.Count(f => f.CollegeCode == cid && f.Specialization == specialization && f.Deficiency != null);
                if (Pharmacy1.SpecializationwiseRequiredFaculty <= Pharmacy1.SpecializationwiseAvilableFaculty)
                {
                    Pharmacy1.Deficiency = "No Deficiency";
                    if (PharmacyStatus == "Deficiency" && Pharmacy1.Specialization != "B.Pharmacy")
                        Pharmacy1.Deficiency = "Deficiency";
                }

                else
                {
                    if (item.Degree == "Pharm.D" || item.Degree == "Pharm.D PB")
                    {
                        if (PharmacyStatus != "Deficiency")
                            Pharmacy1.Deficiency = "No Deficiency";
                        else
                            Pharmacy1.Deficiency = "Deficiency";
                    }
                    else
                    {
                        Pharmacy1.Deficiency = "Deficiency";
                        if (Pharmacy1.Specialization == "B.Pharmacy")
                            PharmacyStatus = "Deficiency";
                    }

                }
                if (item.Degree == "M.Pharmacy")
                    Pharmacy1.PHdFaculty = FacultyData.Count(f => f.CollegeCode == cid && f.Specialization == specialization && PhdRegNO.Contains(f.Deficiency));
                else
                    Pharmacy1.PHdFaculty = 0;

                PharmacyAppealFaculty.Add(Pharmacy1);




            }



            return View(PharmacyAppealFaculty);
        }



        #region For All OnlineAppealScreens & Submission


        #region IntegratedCollegesFacultyViews

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult IntegratedCollegesFacultyWithIntake()
        {
            return View();
        }

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult IntegratedBtechFacultyWithIntake()
        {
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            //collegeId = 180;
            #region Written By Srinivas
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            #endregion

            #region Faculty
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                int userCollegeID = (int)collegeId;
                var jntuh_specialization = db.jntuh_specialization.ToList();
                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_departments = db.jntuh_department.ToList();
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
                var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //New 
                var DeptNameBasedOnSpecialization = (from a in db.jntuh_department
                                                     join b in db.jntuh_specialization on a.id equals b.departmentId
                                                     select new
                                                     {
                                                         DeptId = a.id,
                                                         DeptName = a.departmentName,
                                                         Specid = b.id
                                                     }).ToList();




                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //Reg nos related online facultyIds
                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList()
                    : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& rf.RegistrationNumber != principalRegno
                //&& (rf.collegeId == null || rf.collegeId == collegeId)
                //Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
                var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.OriginalCertificatesNotShown == false) && (rf.Xeroxcopyofcertificates == false || rf.Xeroxcopyofcertificates == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null)
                                                        && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false || rf.IncompleteCertificates == null) && (rf.Blacklistfaculy == false) && rf.NoRelevantUG != "Yes" && rf.NoRelevantPG != "Yes" && rf.NORelevantPHD != "Yes" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.OriginalsVerifiedPHD != true) && (rf.OriginalsVerifiedUG != true) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.InvalidAadhaar != "Yes") && rf.BAS != "Yes" && (rf.DepartmentId != 61 || rf.DepartmentId != 27))
                                                        .Select(rf => new
                                                        {
                                                            RegistrationNumber = rf.RegistrationNumber,
                                                            DeptId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.DepartmentId).FirstOrDefault(),
                                                            SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
                                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                            IsApproved = rf.isApproved,
                                                            PanNumber = rf.PANNumber,
                                                            AadhaarNumber = rf.AadhaarNumber,
                                                            TotalExperience = rf.TotalExperience
                                                        }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.DeptId != null ? jntuh_departments.Where(e => e.id == rf.DeptId).Select(e => e.departmentName).FirstOrDefault() : DeptNameBasedOnSpecialization.Where(e => e.Specid == rf.SpecializationId).Select(e => e.DeptName).FirstOrDefault(),
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    rf.SpecializationId,
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    TotalExperience = rf.TotalExperience
                }).Where(e => e.Department != null).ToList();


                var pharmacydeptids = new[] { 26, 27, 36, 39 };
                collegeIntakeExisting = collegeIntakeExisting.Where(i => !pharmacydeptids.Contains(i.DepartmentID)).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;
                    int SpecializationphdFaculty = 0;
                    int SpecializationpgFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.isintakeeditable = false;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.DegreeId = item.degreeID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntakeBtech(item.collegeId, AY1, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake2 = GetIntakeBtech(item.collegeId, AY2, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake3 = GetIntakeBtech(item.collegeId, AY3, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake4 = GetIntakeBtech(item.collegeId, AY4, item.specializationId, item.shiftId, 1, item.degreeID);


                    intakedetails.AffiliationStatus2 = GetAcademicYear(item.collegeId, AY1, item.specializationId, item.shiftId, item.degreeID);
                    intakedetails.AffiliationStatus3 = GetAcademicYear(item.collegeId, AY2, item.specializationId, item.shiftId, item.degreeID);
                    intakedetails.AffiliationStatus4 = GetAcademicYear(item.collegeId, AY3, item.specializationId, item.shiftId, item.degreeID);

                    if (item.degreeID == 4)
                    {
                        intakedetails.SanctionIntake1 = GetIntakeBtech(item.collegeId, AY1, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake2 = GetIntakeBtech(item.collegeId, AY2, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake3 = GetIntakeBtech(item.collegeId, AY3, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake4 = GetIntakeBtech(item.collegeId, AY4, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake5 = GetIntakeBtech(item.collegeId, AY5, item.specializationId, item.shiftId, 0, item.degreeID);
                    }



                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {

                        //Take Higest of 3 Years Of Admitated Intake
                        //approvedIntake1 means Proposed Intake of Present Year
                        int SanctionIntakeHigest = Max(intakedetails.approvedIntake2, intakedetails.approvedIntake3, intakedetails.approvedIntake4);
                        SanctionIntakeHigest = GetBtechAdmittedIntake(SanctionIntakeHigest);
                        int senondyearpercentage = 0;
                        int thirdyearpercentage = 0;
                        int fourthyearpercentage = 0;
                        if (intakedetails.SanctionIntake2 != 0)
                        {
                            senondyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(intakedetails.approvedIntake2) / Convert.ToDecimal(intakedetails.SanctionIntake2)) * 100));
                        }
                        if (intakedetails.SanctionIntake3 != 0)
                        {
                            thirdyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(intakedetails.approvedIntake3) / Convert.ToDecimal(intakedetails.SanctionIntake3)) * 100));
                        }
                        if (intakedetails.SanctionIntake4 != 0)
                        {
                            fourthyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(intakedetails.approvedIntake4) / Convert.ToDecimal(intakedetails.SanctionIntake4)) * 100));
                        }

                        if (senondyearpercentage < 25 && thirdyearpercentage < 25 && fourthyearpercentage < 25)
                        {
                            intakedetails.ispercentage = true;
                            //studentcount
                            if ((intakedetails.approvedIntake2 >= 15 || intakedetails.approvedIntake3 >= 15 || intakedetails.approvedIntake4 >= 15) && intakedetails.approvedIntake1 != 0)
                            {
                                intakedetails.ispercentage = false;
                                intakedetails.isintakeeditable = true;
                                //intakedetails.ReducedInatke = 60;
                                //if (intakedetails.approvedIntake1 != 60)
                                //{
                                //    intakedetails.Note = "(Reduced from Proposed Intake of <b>";
                                //    intakedetails.Note += intakedetails.approvedIntake1;
                                //    intakedetails.Note += "</b> as per 25% Clause)";
                                //    intakedetails.approvedIntake1 = 60;
                                //}
                            }                          
                        }
                        if (intakedetails.ispercentage == false)
                        {
                            if (intakedetails.isintakeeditable == true)
                            {
                                intakedetails.admittedIntake2 = GetBtechAdmittedIntake(intakedetails.SanctionIntake2);
                                intakedetails.admittedIntake3 = GetBtechAdmittedIntake(intakedetails.SanctionIntake3);
                                intakedetails.admittedIntake4 = GetBtechAdmittedIntake(intakedetails.SanctionIntake4);
                            }
                            else if (SanctionIntakeHigest >= intakedetails.approvedIntake1)
                            {
                                //New Code 
                                intakedetails.admittedIntake2 = GetBtechAdmittedIntake(intakedetails.approvedIntake2);
                                intakedetails.admittedIntake3 = GetBtechAdmittedIntake(intakedetails.approvedIntake3);
                                intakedetails.admittedIntake4 = GetBtechAdmittedIntake(intakedetails.approvedIntake4);


                            }
                            else
                            {
                                intakedetails.admittedIntake2 = GetBtechAdmittedIntake(intakedetails.SanctionIntake2);
                                intakedetails.admittedIntake3 = GetBtechAdmittedIntake(intakedetails.SanctionIntake3);
                                intakedetails.admittedIntake4 = GetBtechAdmittedIntake(intakedetails.SanctionIntake4);
                            }

                            intakedetails.totalIntake = (intakedetails.admittedIntake2) + (intakedetails.admittedIntake3) +
                                                        (intakedetails.admittedIntake4);
                            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                           Convert.ToDecimal(facultystudentRatio);


                            intakedetails.totalAdmittedIntake = (intakedetails.SanctionIntake2) + (intakedetails.SanctionIntake3) + (intakedetails.SanctionIntake4);
                        }

                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        if (item.Degree == "M.Tech")
                        {
                            if (item.Degree == "M.Tech" && item.shiftId == 1)
                            {
                                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                               Convert.ToDecimal(facultystudentRatio);
                                int fratio = (int)facultyRatio;
                                if (fratio < 3)
                                {
                                    fratio = 3;
                                    facultyRatio = Convert.ToDecimal(fratio);
                                }
                            }
                            if (item.Degree == "M.Tech" && item.shiftId == 2)
                            {
                                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                               Convert.ToDecimal(facultystudentRatio);
                                int fratio = (int)facultyRatio;
                                if (fratio < 3)
                                {
                                    fratio = 3;
                                    facultyRatio = Convert.ToDecimal(fratio);
                                }
                                facultyRatio = facultyRatio / 2;
                            }
                        }
                        else
                        {
                            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                           Convert.ToDecimal(facultystudentRatio);
                        }
                        

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                    }
                    intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D PB")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department);//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
                        }
                    }
                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG"));//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                            intakedetails.specializationWiseFacultyPHDFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
                    }
                    if (item.Degree == "B.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);

                    }
                    if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) &&
                                    f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        intakedetails.Department = "Pharm.D";
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);

                        intakedetails.Department = "Pharm.D PB";
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        if (item.Degree == "B.Tech")
                            SpecializationphdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && (f.SpecializationId == item.specializationId || f.SpecializationId == null) && f.Department == item.Department);
                        else
                            SpecializationphdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        var reg = jntuh_registered_faculty.Where(f => f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")).Select(S => S.RegistrationNumber).ToList();
                        SpecializationpgFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG"));

                    }


                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.SpecializationsphdFaculty = SpecializationphdFaculty;
                    intakedetails.SpecializationspgFaculty = SpecializationpgFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
                    //=============//


                    intakedetailsList.Add(intakedetails);
                }
                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();
                int[] OthersSpecIds = new int[] { 155, 156, 157, 158 };
                string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others(CSE/IT)", "Others(CIVIL/MECH)", "Others(ECE/EEE)", "Others(MNGT/H&S)" };
                int btechdegreecount = intakedetailsList.Count(d => d.Degree == "B.Tech");

                if (btechdegreecount != 0)
                {
                    foreach (var department in strOtherDepartments)
                    {
                        int speId = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.id).FirstOrDefault();
                        var deptname = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.departmentName).FirstOrDefault();
                        var degreeId = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.degreeId).FirstOrDefault();
                        var deparmentid = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.departmentId).FirstOrDefault();
                        int ugFaculty = jntuh_registered_faculty.Count(f => f.Department == department && f.HighestDegree == "UG");
                        int pgFaculty = jntuh_registered_faculty.Count(f => (f.HighestDegree == "PG" || f.HighestDegree == "M.Phil / Other PG Degree") && f.Department == department);
                        int phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == department);
                        intakedetailsList.Add(new CollegeFacultyWithIntakeReport
                        {
                            collegeId = (int)collegeId,
                            Degree = "B.Tech",
                            Department = department,
                            Specialization = department,
                            DegreeId = degreeId,
                            ugFaculty = ugFaculty,
                            pgFaculty = pgFaculty,
                            phdFaculty = phdFaculty,
                            totalFaculty = ugFaculty + pgFaculty + phdFaculty,
                            specializationId = speId,
                            shiftId = 1,
                            DepartmentID = deparmentid,
                            specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == deptname),
                            approvedIntake1 = 1
                        });

                    }
                }

                List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.Where(i => i.shiftId == 1 || i.shiftId == 2).ToList();
                List<CollegeFacultyWithIntakeReport> facultyCountsmetechsecond = facultyCounts.Where(c => c.shiftId == 2).Select(e => e).ToList();
                foreach (var item in facultyCountsmetechsecond)
                {
                    int id =
                        facultyCounts.Where(
                            s => s.specializationId == item.specializationId && s.shiftId == 1 && s.Degree == "M.Tech" && s.approvedIntake1 != 0)
                            .Select(s => s.shiftId)
                            .FirstOrDefault();
                    if (id == 0)
                    {
                        facultyCounts.Remove(item);
                    }
                }
                List<CollegeFacultyWithIntakeReport> facultyCountper = intakedetailsList.Where(c =>c.collegeId==userCollegeID && ((c.ispercentage==true&&c.approvedIntake1 != 0 && c.Degree == "B.Tech") || c.approvedIntake1 == 0 && c.Degree == "B.Tech")).Select(e => e).ToList();
                foreach (var itemmtech in facultyCountper)
                {
                    List<CollegeFacultyWithIntakeReport> notshownmtech = facultyCounts.Where(
                            s => s.Department == itemmtech.Department && s.Degree == "M.Tech" && s.approvedIntake1 != 0)
                            .Select(s => s)
                            .ToList();
                    if (notshownmtech.Count() != 0)
                    {
                        // facultyCounts.Remove(itemmtech);
                        foreach (var removemtech in notshownmtech)
                        {
                            facultyCounts.Remove(removemtech);
                        }

                    }
                }

                int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech" && !strOtherDepartments.Contains(d.Department)).Select(d => d.approvedIntake1).Sum();
                var degrees = db.jntuh_degree.ToList();
                var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 160);
                int remainingFaculty = 0;
                int remainingPHDFaculty = 0;
                decimal departmentWiseRequiredFaculty = 0;
                var distDeptcount = 1;
                var deptloop = 1;
                int HumantitiesminimamRequireMet = 0;
                string HumantitiesminimamRequireMetStatus = "Yes";

                // var TotalRequiredHumanitiesFacultyCount = Math.Ceiling((double)totalBtechFirstYearIntake / 20);
                // ViewBag.TotalRequiredHumanitiesFacultyCount = TotalRequiredHumanitiesFacultyCount;

                intakedetailsList = facultyCounts.Where(i => i.shiftId == 1 || i.shiftId == 2).ToList();


                foreach (var item in intakedetailsList)
                {

                    var SpecializationwisePHDFaculty = 0;
                    //if (item.Degree == "M.Tech" || item.Degree == "B.Tech")
                    //    SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "M.Tech" && D.shiftId == 1).Distinct().Count();
                    //else if (item.Degree == "MCA")
                    //    SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MCA" && D.shiftId == 1).Distinct().Count();
                    //else if (item.Degree == "MBA")
                    //    SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MBA" && D.shiftId == 1).Distinct().Count();
                    //SpecializationwisePHDFaculty = SpecializationwisePHDFaculty * 2;

                    if (item.Degree == "M.Tech" || item.Degree == "MCA" || item.Degree == "MBA" || item.Degree == "MAM")
                    {

                        if (item.Degree == "M.Tech")
                        {
                            if (item.shiftId ==1)
                            {
                                SpecializationwisePHDFaculty = IntakeWisePhdForMtech(item.approvedIntake1,item.shiftId);
                            }
                            if (item.shiftId == 2)
                            {
                                SpecializationwisePHDFaculty = IntakeWisePhdForMtech(item.approvedIntake1, item.shiftId);
                            }
                        }
                        else if (item.Degree == "MCA")
                        {
                            SpecializationwisePHDFaculty = IntakeWisePhdForMBAandMCA(item.approvedIntake1);
                        }
                        else if (item.Degree == "MBA" || item.Degree == "MAM")
                        {
                            SpecializationwisePHDFaculty = IntakeWisePhdForMBAandMCA(item.approvedIntake1);
                        }


                    }
                    else if (item.Degree == "B.Tech")
                    {
                        SpecializationwisePHDFaculty = IntakeWisePhdForBtech(item.approvedIntake1);
                    }


                    distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

                    int indexnow = facultyCounts.IndexOf(item);

                    if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
                    {
                        deptloop = 1;
                    }

                    departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

                    string minimumRequirementMet = string.Empty;
                    string PhdminimumRequirementMet = string.Empty;
                    int facultyShortage = 0;
                    int adjustedFaculty = 0;
                    int adjustedPHDFaculty = 0;
                    int tFaculty = 0;
                    int othersRequiredfaculty = 0;

                    if (item.Department == "MBA" || item.Department == "MCA")
                        tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.totalFaculty)); //item.totalFaculty
                    else
                        tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));
                    int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

                    if (strOtherDepartments.Contains(item.Department))
                    {
                        if (OthersSpecIds.Contains(item.specializationId))
                        {

                            double rid = (double)(firstYearRequired / 2);
                            rFaculty = (int)(Math.Ceiling(rid));
                            // rFaculty = (int)firstYearRequired;
                            // othersRequiredfaculty = 1;
                        }
                        else
                        {
                            rFaculty = (int)firstYearRequired;
                        }
                    }

                    var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = false;
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;//tFaculty
                            item.BtechAdjustedFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = true;
                            adjustedFaculty = tFaculty;
                            item.BtechAdjustedFaculty = adjustedFaculty;
                            facultyShortage = rFaculty - tFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)//item.requiredFaculty
                        {

                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;

                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }
                            else
                            {
                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;
                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;

                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }
                            }

                        }
                        else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)//item.requiredFaculty
                        {
                            //adjustedPHDFaculty = 1;
                            item.PHDdeficiency = true;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            //adjustedPHDFaculty = remainingPHDFaculty;
                            //item.AvailablePHDFaculty = 2;
                            //intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
                            //remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty > 0)
                        {
                            //remainingPHDFaculty = remainingPHDFaculty - SpecializationwisePHDFaculty;
                            //adjustedPHDFaculty = SpecializationwisePHDFaculty;
                            if (remainingPHDFaculty >= SpecializationwisePHDFaculty)//item.SpecializationsphdFaculty
                            {
                                remainingPHDFaculty = remainingPHDFaculty - SpecializationwisePHDFaculty;
                                adjustedPHDFaculty = SpecializationwisePHDFaculty; //item.SpecializationsphdFaculty;
                                PhdminimumRequirementMet = "YES";
                                item.PHDdeficiency = false;
                            }
                            else if (remainingPHDFaculty <= SpecializationwisePHDFaculty)//item.SpecializationsphdFaculty
                            {

                                adjustedPHDFaculty = remainingPHDFaculty;//SpecializationwisePHDFaculty;
                                remainingPHDFaculty = 0;//remainingPHDFaculty - SpecializationwisePHDFaculty;
                                // adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                PhdminimumRequirementMet = "NO";
                                item.PHDdeficiency = true;
                            }



                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty <= 0)
                        {
                            // remainingPHDFaculty = SpecializationwisePHDFaculty - remainingPHDFaculty;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;

                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("UG")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (adjustedPHDFaculty <= 0 && (degreeType.Equals("PG")))
                        {
                            PhdminimumRequirementMet = "YES";
                            item.PHDdeficiency = false;
                        }
                        //Dual Degree Checking
                        else if (remainingPHDFaculty >= 2 && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty > 0)
                        {
                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }
                            else
                            {

                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;

                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }

                        }
                        else if (remainingPHDFaculty <= 1 && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty >= 0)
                        {
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("Dual Degree")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }


                    }
                    else
                    {
                        if (rFaculty <= remainingFaculty)
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = false;
                            if (rFaculty <= item.specializationWiseFaculty)
                            {
                                remainingFaculty = remainingFaculty - rFaculty;
                                adjustedFaculty = rFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }

                            else if (rFaculty >= item.specializationWiseFaculty)
                            {
                                remainingFaculty = remainingFaculty - item.specializationWiseFaculty;
                                adjustedFaculty = item.specializationWiseFaculty;
                                item.deficiency = true;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = true;
                            //adjustedFaculty = remainingFaculty;
                            //item.BtechAdjustedFaculty = adjustedFaculty;
                            //facultyShortage = rFaculty - remainingFaculty;
                            //remainingFaculty = 0;
                            if (remainingFaculty >= item.specializationWiseFaculty)
                            {

                                remainingFaculty = remainingFaculty - item.specializationWiseFaculty;
                                adjustedFaculty = item.specializationWiseFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }
                            else
                            {

                                adjustedFaculty = remainingFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                                remainingFaculty = 0;
                            }
                        }
                        //remainingPHDFaculty = item.phdFaculty;
                        //if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
                        //{
                        //    //adjustedPHDFaculty = 1;
                        //    item.PHDdeficiency = false;
                        //    adjustedPHDFaculty = remainingPHDFaculty;
                        //    item.AvailablePHDFaculty = 0;
                        //    intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = false);
                        //    remainingPHDFaculty = remainingPHDFaculty - 1;
                        //}
                        //else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
                        //{
                        //    //adjustedPHDFaculty = 1;
                        //    item.PHDdeficiency = true;
                        //    adjustedPHDFaculty = remainingPHDFaculty;
                        //    item.AvailablePHDFaculty = 2;
                        //    intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
                        //    remainingPHDFaculty = remainingPHDFaculty - 1;
                        //}

                        //New  Code
                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)
                        {

                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }
                            else
                            {

                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;

                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }

                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }

                        }
                        else if (remainingPHDFaculty <= 1 && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)
                        {

                            adjustedPHDFaculty = remainingPHDFaculty;

                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty > 0)
                        {

                            if (item.SpecializationsphdFaculty >= SpecializationwisePHDFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                PhdminimumRequirementMet = "YES";
                                item.PHDdeficiency = false;
                            }
                            else if (item.SpecializationsphdFaculty <= SpecializationwisePHDFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - SpecializationwisePHDFaculty;
                                adjustedPHDFaculty = SpecializationwisePHDFaculty;
                                PhdminimumRequirementMet = "YES";
                                item.PHDdeficiency = false;
                            }

                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty <= 0)
                        {

                            adjustedPHDFaculty = remainingPHDFaculty;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("UG")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (adjustedPHDFaculty <= 0 && (degreeType.Equals("PG")))
                        {
                            PhdminimumRequirementMet = "YES";
                            item.PHDdeficiency = false;
                        }
                        //Dual Degree
                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty > 0)
                        {

                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }

                                else
                                {
                                    item.PHDdeficiency = true;
                                    PhdminimumRequirementMet = "NO";
                                }

                            }
                            else
                            {

                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;

                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    item.PHDdeficiency = false;
                                    PhdminimumRequirementMet = "YES";
                                }
                                else
                                {
                                    item.PHDdeficiency = true;
                                    PhdminimumRequirementMet = "NO";
                                }

                            }

                        }
                        else if (remainingPHDFaculty <= 1 && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty > 0)
                        {

                            adjustedPHDFaculty = remainingPHDFaculty;

                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (adjustedPHDFaculty <= 0 && (degreeType.Equals("Dual Degree")))
                        {
                            PhdminimumRequirementMet = "YES";
                            item.PHDdeficiency = false;
                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("Dual Degree")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }


                    }



                    if (minimumRequirementMet == "YES" && PhdminimumRequirementMet == "YES")
                    {
                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            //  minimumRequirementMet = "Deficiency In faculty and Ph.D";
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                        }


                    }
                    else if (minimumRequirementMet == "NO" && PhdminimumRequirementMet == "YES")
                    {

                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            //  minimumRequirementMet = "Deficiency In faculty and Ph.D";
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                        }

                    }
                    else if (minimumRequirementMet == "YES" && PhdminimumRequirementMet == "NO")
                    {

                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                            // minimumRequirementMet = "Deficiency In faculty and Ph.D";
                        }

                    }

                    else if (minimumRequirementMet == "NO" && PhdminimumRequirementMet == "NO")
                    {

                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            //  minimumRequirementMet = "Deficiency In faculty and Ph.D";
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                        }
                    }


                    if (strOtherDepartments.Contains(item.Department))
                    {
                        if (OthersSpecIds.Contains(item.DepartmentID))
                        {
                            item.totalIntake = totalBtechFirstYearIntake;
                            //item.requiredFaculty = Math.Ceiling((decimal)othersRequiredfaculty);
                            double rid = (double)(firstYearRequired / 2);
                            rFaculty = (int)(Math.Ceiling(rid));
                            item.requiredFaculty = Math.Ceiling((decimal)rFaculty);
                        }
                        else
                        {
                            item.totalIntake = totalBtechFirstYearIntake;
                            item.requiredFaculty = Math.Ceiling((decimal)firstYearRequired);
                        }
                    }
                    else
                    {
                        if (item.Degree == "B.Tech")
                        {
                            item.division1 = GetSectionBasedonIntake(item.approvedIntake2);
                            item.division2 = GetSectionBasedonIntake(item.approvedIntake3);
                            item.division3 = GetSectionBasedonIntake(item.approvedIntake4);
                        }
                    }
                    deptloop++;
                }
            #endregion




                List<int> OthersIds = new List<int>() { 65, 66, 67, 68 };

                #region Faculty Appeal Deficiency Status
                var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
                var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
                foreach (var item in intakedetailsList.Where(i => i.ispercentage==false).OrderBy(i => i.Department).ToList())
                {

                    var deparment = jntuh_deparment.FirstOrDefault(i => i.id == item.DepartmentID);
                    if (deparment != null)
                    {
                        var jntuh_departmentcount = jntuh_appeal_faculty.Where(i => i.DepartmentId == item.DepartmentID &&
                                i.DegreeId == deparment.degreeId && i.collegeId == collegeId && i.NOtificationReport != null).ToList();//&& i.SpecializationId == item.specializationId
                        var facultydefcount = (int)Math.Ceiling(item.requiredFaculty) - item.BtechAdjustedFaculty;
                        if (item.PHDdeficiency == true)
                        {
                            facultydefcount = facultydefcount + item.AvailablePHDFaculty;
                        }
                        //if (facultydefcount <= jntuh_departmentcount.Count && jntuh_departmentcount.Count != 0)
                        //{
                        //    item.deficiencystatus = true;
                        //}

                        if (jntuh_departmentcount.Count >= 2 && jntuh_departmentcount.Count != 0)
                        {
                            item.deficiencystatus = true;
                        }


                    }
                }


                #endregion

            }
            return View(intakedetailsList.ToList());
            #endregion
        }


        public int IntakeWisePhdForBtech(int Intake)
        {
            int Phdcount = 0;
            if (Intake > 0 && Intake <= 60)
            {
                Phdcount = 0;
            }
            else if (Intake > 60 && Intake <= 120)
            {
                Phdcount = 1;
            }
            else if (Intake > 120 && Intake <= 180)
            {
                Phdcount = 2;
            }
            else if (Intake > 180 && Intake <= 240)
            {
                Phdcount = 3;
            }
            else if (Intake > 240 && Intake <= 300)
            {
                Phdcount = 4;
            }
            else if (Intake > 300 && Intake <= 360)
            {
                Phdcount = 5;
            }
            else if (Intake > 360 && Intake <= 420)
            {
                Phdcount = 6;
            }
            return Phdcount;
        }

        public int IntakeWisePhdForMtech(int Intake,int shiftid)
        {
            int Phdcount = 0;
            if (shiftid == 1)
            {
                if (Intake > 0 && Intake <= 30)
                {
                    Phdcount = 2;
                }
                else if (Intake > 30 && Intake <= 60)
                {
                    Phdcount = 4;
                }
            }
            else
            {
                if (Intake > 0 && Intake <= 30)
                {
                    Phdcount = 1;
                }
                else if (Intake > 30 && Intake <= 60)
                {
                    Phdcount = 2;
                }
            }

            return Phdcount;
        }


        public int GetSectionBasedonIntake(int Intake)
        {
            int Section = 0;

            if (Intake > 0 && Intake <= 60)
            {
                Section = 1;
            }
            else if (Intake > 60 && Intake <= 120)
            {
                Section = 2;
            }
            else if (Intake > 120 && Intake <= 180)
            {
                Section = 3;
            }
            else if (Intake > 180 && Intake <= 240)
            {
                Section = 4;
            }
            else if (Intake > 240 && Intake <= 300)
            {
                Section = 5;
            }
            else if (Intake > 300 && Intake <= 360)
            {
                Section = 6;
            }
            else if (Intake > 360 && Intake <= 420)
            {
                Section = 7;
            }
            return Section;
        }

        public int IntakeWisePhdForMBAandMCA(int Intake)
        {
            int Phdcount = 0;
            if (Intake > 0 && Intake <= 60)
            {
                Phdcount = 1;
            }
            else if (Intake > 60 && Intake <= 120)
            {
                Phdcount = 2;
            }
            else if (Intake > 120 && Intake <= 180)
            {
                Phdcount = 3;
            }
            else if (Intake > 180 && Intake <= 240)
            {
                Phdcount = 4;
            }
            else if (Intake > 240 && Intake <= 300)
            {
                Phdcount = 5;
            }
            else if (Intake > 300 && Intake <= 360)
            {
                Phdcount = 6;
            }
            else if (Intake > 360 && Intake <= 420)
            {
                Phdcount = 7;
            }

            return Phdcount;
        }

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult IntegratedPharmacyFacultyWithIntake()
        {
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            // int collegeId = 204; //234 , 319 , 159 , 379
            #region Written By Srinivas
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            // Principal Details
            string strPrincipalRegno = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).FirstOrDefault();

            //Reg nos related online facultyIds
            var registeredPrincipal = db.jntuh_registered_faculty.Where(rf => strPrincipalRegno == rf.RegistrationNumber && (rf.collegeId == collegeId)).ToList();


            var jntuh_Principals_registered = registeredPrincipal.Where(rf => rf.DepartmentId != null && rf.DeactivationReason == "")
                                                 .Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.jntuh_department.departmentName,
                                                     HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                     IsApproved = rf.isApproved,
                                                     PanNumber = rf.PANNumber,
                                                     AadhaarNumber = rf.AadhaarNumber
                                                 }).ToList();
            ViewBag.PrincipalRegno = strPrincipalRegno;
            if (jntuh_Principals_registered.Count > 0)
                ViewBag.PrincipalDeficiency = "NO";
            else
                ViewBag.PrincipalDeficiency = "YES";
            #endregion

            #region Faculty
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                int userCollegeID = (int)collegeId;
                var jntuh_specialization = db.jntuh_specialization.ToList();
                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
                var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();


                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId) && i.courseStatus != "Closure").ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //college Reg nos

                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();


                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //education categoryIds UG,PG,PHD...........
                var jntuh_specializations = db.jntuh_specialization.ToList();
                var jntuh_education_category = db.jntuh_education_category.ToList();
                int pharmacyDeptId = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();
                //Reg nos related online facultyIds
                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& (rf.collegeId == null || rf.collegeId == collegeId)
                //Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
                var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false)//&& rf.Noform16Verification == false && rf.NoForm16 == false
                                                        && (rf.NoSCM17 == false) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false) && (rf.Blacklistfaculy == false) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.NoRelevantUG == "No" && rf.NoRelevantPG == "No" && rf.NORelevantPHD == "No" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) && (rf.FakePHD == false || rf.FakePHD == null) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS == "Y")).Select(rf => new
                                                        {
                                                            RegistrationNumber = rf.RegistrationNumber,
                                                            Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                            IsApproved = rf.isApproved,
                                                            PanNumber = rf.PANNumber,
                                                            AadhaarNumber = rf.AadhaarNumber,
                                                            PGSpecializationId = rf.PGSpecialization,
                                                            UGDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.DepartmentId).FirstOrDefault(),
                                                            SpecializationId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.SpecializationId).FirstOrDefault(),
                                                            TotalExperience = rf.TotalExperience,
                                                            jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                                                        }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    PGSpecializationId = rf.PGSpecializationId,
                    UGDepartmentId = rf.UGDepartmentId,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    TotalExperience = rf.TotalExperience,
                    registered_faculty_specialization = rf.SpecializationId != null ? jntuh_specializations.Where(S => S.id == rf.SpecializationId).Select(S => S.specializationName).FirstOrDefault() : rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                }).ToList();

                ViewBag.ALLTotalCollegeFaculty = jntuh_registered_faculty.Count;
                var Bpharmacyintake = 0;
                decimal BpharmacyrequiredFaculty = 0;
                var pharmacydeptids = new[] { 26, 27, 36, 39 };
                if (collegeId == 42)
                    jntuh_registered_faculty = jntuh_registered_faculty.Where(R => R.UGDepartmentId == 26 || R.UGDepartmentId == 27 || R.UGDepartmentId == 36 || R.UGDepartmentId == 39).ToList();
                collegeIntakeExisting = collegeIntakeExisting.Where(i => pharmacydeptids.Contains(i.DepartmentID)).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);

                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        //var total = intakedetails.totalIntake > 400 ? 100 : 60;
                        //Bpharmacyintake = total;
                        Bpharmacyintake = intakedetails.approvedIntake1;

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D PB")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "UG" || f.Recruitedfor == null));//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
                        }
                    }
                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" &&
                                f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG"));//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department &&
                                        f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
                    }
                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharmacyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        //intakedetails.Department = "Pharmacy";
                    }
                    if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) &&
                                    f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount =registeredFaculty.Where(f =>f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null &&
                        //            (f.isApproved == null || f.isApproved == true)).Count();
                        //intakedetails.Department = "Pharmacy";
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharm.D";
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharm.D PB";
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);

                    }


                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
                    //=============//

                    intakedetails.FacultyWithIntakeReports = new List<CollegeFacultyWithIntakeReport>();
                    intakedetailsList.Add(intakedetails);
                    //intakedetails.CollegeFaccultyData = new List<FaccultyData>();
                    //intakedetailsList.Add(jntuh_registered_faculty);
                }
                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();



                List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.ToList();
                int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech").Select(d => d.approvedIntake1).Sum();
                var degrees = db.jntuh_degree.ToList();
                var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 150);
                int remainingFaculty = 0;
                int remainingPHDFaculty = 0;
                decimal departmentWiseRequiredFaculty = 0;
                var distDeptcount = 1;
                var deptloop = 1;
                foreach (var item in facultyCounts)
                {
                    distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

                    int indexnow = facultyCounts.IndexOf(item);

                    if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
                    {
                        deptloop = 1;
                    }

                    departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

                    string minimumRequirementMet = string.Empty;
                    int facultyShortage = 0;
                    int adjustedFaculty = 0;
                    int adjustedPHDFaculty = 0;

                    int tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));//item.totalFaculty
                    int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

                    var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = false;
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;//tFaculty
                            item.totalFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = true;
                            adjustedFaculty = tFaculty;
                            facultyShortage = rFaculty - tFaculty;
                            item.totalFaculty = adjustedFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty > 0 && (degreeType.Equals("PG") || degreeType.Equals("UG"))) //degreeType.Equals("PG")
                        {
                            //adjustedPHDFaculty = 1;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    else
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = false;
                            remainingFaculty = remainingFaculty - rFaculty;
                            adjustedFaculty = rFaculty;
                            item.totalFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = true;
                            adjustedFaculty = remainingFaculty;
                            item.totalFaculty = adjustedFaculty;
                            facultyShortage = rFaculty - remainingFaculty;
                            remainingFaculty = 0;
                        }
                        remainingPHDFaculty = item.phdFaculty;
                        if (remainingPHDFaculty > 0 && (degreeType.Equals("PG") || degreeType.Equals("UG")))
                        {
                            //adjustedPHDFaculty = 1;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    if (adjustedPHDFaculty > 0)
                    {
                        item.PHDdeficiency = false;
                    }
                    //else if (degreeType.Equals("PG") && item.approvedIntake1 > 0)
                    //{
                    //    item.PHDdeficiency = true;
                    //    item.AvailablePHDFaculty = 1;
                    //}
                    //else
                    //{
                    //    item.PHDdeficiency = false;
                    //}
                    else if (item.approvedIntake1 > 0)
                    {
                        item.PHDdeficiency = true;
                        item.AvailablePHDFaculty = 1;
                    }

                    deptloop++;
                }
            #endregion

                if (Bpharmacyintake >= 100)
                {
                    BpharmacyrequiredFaculty = Math.Round(BpharmacyrequiredFaculty) - 0;
                    ViewBag.BpharmacyrequiredFaculty = BpharmacyrequiredFaculty;
                }
                else
                {
                    BpharmacyrequiredFaculty = Math.Round(BpharmacyrequiredFaculty) - 0;
                    ViewBag.BpharmacyrequiredFaculty = BpharmacyrequiredFaculty;
                }
                intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharmacyrequiredFaculty);


                #region For Pharmacyview
                var randomcode = "";
                if (collegeId != null)
                {
                    randomcode = db.jntuh_college_randamcodes.FirstOrDefault(i => i.CollegeId == collegeId).RandamCode;
                }
                var pharmadTotalintake = 0;
                var pharmadPBTotalintake = 0;
                var bpharmacyintake = 0;
                decimal BpharcyrequiredFaculty = 0;
                decimal PharmDrequiredFaculty = 0;
                decimal PharmDPBrequiredFaculty = 0;
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.collegeRandomCode = randomcode;
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake5 = GetIntake(item.collegeId, AY5, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {

                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        //intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //var total = intakedetails.totalIntake > 400 ? 100 : 60;
                        bpharmacyintake = intakedetails.approvedIntake1;
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = pharmadTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = pharmadPBTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && f.Recruitedfor == "UG").Count();
                        }
                    }

                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                            switch (item.specializationId)
                            {
                                case 114://Hospital & Clinical Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice/Pharm D";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP" || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization == "PHARMD".ToUpper() || f.registered_faculty_specialization == "PHARM D" || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));

                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == 114));
                                    //phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    break;
                                case 116://Pharmaceutical Analysis & Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharma Chemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA" || f.registered_faculty_specialization == "PA RA" || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    break;
                                case 118://Pharmaceutical Management & Regulatory Affaires
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PMRA/Regulatory Affairs/Pharmaceutics";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PMRA".ToUpper() || f.registered_faculty_specialization == "Regulatory Affairs".ToUpper() || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    break;
                                case 120://Pharmaceutics
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId)); //|| f.registered_faculty_specialization == "Pharmaceutics".ToUpper()
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId)); //|| f.registered_faculty_specialization == "Pharmaceutics".ToUpper()
                                    break;
                                case 122://Pharmacology
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP".ToUpper() || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    break;
                                case 124://Quality Assurance & Pharma Regulatory Affairs
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    var s = jntuh_registered_faculty.Where(f => (f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "PA RA".ToUpper() ||
                                                 f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA"))).ToList();
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    break;
                                case 115://Industrial Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    break;
                                case 121://Pharmacognosy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacognosy/Pharma Biotechnology/Pharmacology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    break;
                                case 117://Pharmaceutical Chemistry
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA")));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    break;
                                case 119://Pharmaceutical Technology (2011-12)
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization.Contains("Bio-Technology".ToUpper()) || f.registered_faculty_specialization.Contains("Pharmaceutical Technology (2011-12)".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    break;
                                case 123://Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA")));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    break;
                                default:
                                    intakedetails.PharmacySpec1 = "";
                                    intakedetails.PharmacyspecializationWiseFaculty = 0;
                                    phdFaculty = 0;
                                    break;
                            }
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                    }

                    int noPanOrAadhaarcount = 0;

                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharcyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";
                        intakedetailsList.Where(i => i.Degree == "M.Pharmacy" && i.specializationId == item.specializationId).ToList().ForEach(c => c.PharmacyspecializationWiseFaculty = intakedetails.PharmacyspecializationWiseFaculty);

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        PharmDrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        PharmDPBrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == item.DepartmentID && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }

                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);

                    intakedetails.facultyWithoutPANAndAadhaar = noPanOrAadhaarcount;

                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(intakedetails);
                }

                #region pharmcy specializations
                var pharmdspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Practice",
                    //    Specialization = "Pharm.D"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharm D",
                    //    Specialization = "Pharm.D"
                    //}

                    new PharmacySpecilaizationList()
						{
							PharmacyspecName = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)",
							Specialization = "Pharm.D"
						}
                };
                var pharmdpbspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Practice",
                    //    Specialization = "Pharm.D PB"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharm D",
                    //    Specialization = "Pharm.D PB"
                    //}

                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)",
                        Specialization = "Pharm.D PB"
                    }
                };

                var pharmacyspeclist = new List<PharmacySpecilaizationList>
                {
                   
                    
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmaceutics)",//, Industrial Pharmacy, Pharmacy BioTechnology, Pharmaceutical Technology
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group2 (Pharmaceutical Chemistry,Pharmacy Analysis, PAQA)",
                        Specialization = "B.Pharmacy"
                    },
                   
                   new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group3 (Pharmacology)",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group4 (Pharmacognosy)",
                        Specialization = "B.Pharmacy"
                    },
                };
                #endregion
                #region All B.Pharmacy Specializations

                var reg_facultyspecilaizationsdistinct = jntuh_registered_faculty.Select(i => i.registered_faculty_specialization).Distinct().ToArray();

                var reg_facultyspecilaizations =
                    jntuh_registered_faculty.Where(
                        i =>
                            i.registered_faculty_specialization == "Pharmaceutics".ToUpper() ||
                            i.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy Analysis".ToUpper() ||
                            i.registered_faculty_specialization == "PAQA".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharma D".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacognosy" ||
                            i.registered_faculty_specialization == "English".ToUpper() ||
                            i.registered_faculty_specialization == "Mathematics".ToUpper() ||
                            i.registered_faculty_specialization == "Computers".ToUpper() ||
                            i.registered_faculty_specialization == "Zoology".ToUpper()).ToList();

                var group1Subcount = 0; var group2Subcount = 0; var group3Subcount = 0; var group4Subcount = 0; var group5Subcount = 0; var group6Subcount = 0;
                var pharmadgroup1Subcount = 0; var pharmadPBgroup1Subcount = 0;
                string subgroupconditionsmet;
                string conditionbpharm = null;
                string conditionpharmd = null;
                string conditionphardpb = null;
                foreach (var list in pharmacyspeclist)
                {
                    int phd;
                    int pg;
                    int ug;
                    var bpharmacylist = new CollegeFacultyWithIntakeReport();
                    bpharmacylist.Specialization = list.Specialization;
                    bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                    bpharmacylist.collegeId = (int)collegeId;
                    bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                    bpharmacylist.collegeRandomCode = randomcode;
                    bpharmacylist.shiftId = 1;
                    bpharmacylist.Degree = "B.Pharmacy";
                    bpharmacylist.Department = "Pharmacy";
                    bpharmacylist.PharmacyGroup1 = "Group1";

                    bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    //bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                    //bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharmacy");
                    //bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                    //bpharmacylist.totalFaculty = ug + pg + phd;
                    bpharmacylist.BphramacyrequiredFaculty = BpharcyrequiredFaculty;
                    bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                    #region bpharmacyspecializationcount

                    if (list.PharmacyspecName == "Pharmaceutics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "Industrial Pharmacy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy BioTechnology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                        f.registered_faculty_specialization == "Bio-Technology".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmaceutical Technology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper() ||
                            f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmaceutical Chemistry")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy Analysis")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "PAQA")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                     f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                            //f.registered_faculty_specialization == "Quality Assurance".ToUpper() ||
                            //f.registered_faculty_specialization == "QualityAssurance".ToUpper() ||
                                     f.registered_faculty_specialization == "QAPRA".ToUpper() ||
                                     f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper() ||
                                     f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "Pharma D")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                      f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                      f.registered_faculty_specialization == "Pharm.D".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacognosy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy & Phytochemistry".ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy&Phytochemistry".ToUpper());
                    }

                    else if (list.PharmacyspecName == "English")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Mathematics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Computers")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Computer Science")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Zoology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    #endregion





                    if (list.PharmacyspecName == "Group1 (Pharmaceutics)")//|| list.PharmacyspecName == "Industrial Pharmacy" || list.PharmacyspecName == "Pharmacy BioTechnology" || list.PharmacyspecName == "Pharmaceutical Technology"
                    {
                        group1Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 120 && f.RegistrationNumber != principalRegno);
                        int Required = bpharmacyintake >= 100 ? 6 : 4;
                        if (Required >= group1Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = group1Subcount;
                        else if (Required <= group1Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = Required;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                    }

                    else if (list.PharmacyspecName == "Group2 (Pharmaceutical Chemistry,Pharmacy Analysis, PAQA)")//|| list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA")
                    {
                        //group2Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));

                        group2Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno) +
                                             jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno) +
                                             jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);

                        int Required = bpharmacyintake >= 100 ? 6 : 5;
                        if (Required >= group2Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                        else if (Required <= group2Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = Required;

                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 5;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup2";
                    }
                    //else if (list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                    //{
                    //    var y = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()).ToList();
                    //    var g = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization.Contains("QA")).ToList();
                    //    var g1 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PAQA".ToUpper()).ToList();
                    //    var g2 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PA & QA".ToUpper()).ToList();

                    //    group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                    //    bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                    //    bpharmacylist.BPharmacySubGroupRequired = 1;
                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    //}

                    else if (list.PharmacyspecName == "Group3 (Pharmacology)")//|| list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D"
                    {
                        // group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacology".ToUpper());

                        group3Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);

                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                        //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;

                        int Required = bpharmacyintake >= 100 ? 5 : 4;
                        if (Required >= group3Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                        else if (Required <= group3Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = Required;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 5 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    }

                    else if (list.PharmacyspecName == "Group4 (Pharmacognosy)")
                    {
                        //group4Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy".ToUpper()) +
                        //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy&Phytochemistryc".ToUpper()) +
                        //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("PHARMACOGNOSY & PHYTOCHEMISTRY".ToUpper()));
                        //bpharmacylist.BPharmacySubGroup1Count = group4Subcount;

                        int PharmacognosySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 121 && f.RegistrationNumber != principalRegno);
                        int PharmaceuticalChemistrySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno);
                        int PAQASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno);
                        int QAPRASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);
                        int Required = bpharmacyintake >= 100 ? 6 : 5;
                        int Total1 = Required - (PAQASp + QAPRASp);
                        int Total = (PAQASp + QAPRASp + PharmaceuticalChemistrySp) - Required;
                        if (Total > 0)
                            group4Subcount = PharmacognosySp + (PharmaceuticalChemistrySp - (Total1 < 0 ? 0 : Total1));
                        else if (Total <= 0)
                            group4Subcount = PharmacognosySp;
                        else if (PharmacognosySp == Required)
                            group4Subcount = PharmacognosySp;
                        bpharmacylist.BPharmacySubGroup1Count = group4Subcount > 3 ? 3 : group4Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = 3; ;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup4";
                    }

                    //else if (list.PharmacyspecName == "English" || list.PharmacyspecName == "Mathematics" || list.PharmacyspecName == "Computers" || list.PharmacyspecName == "Computer Science")//|| list.PharmacyspecName == "Zoology"
                    //{
                    //    group6Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "English".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Mathematics".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER SCIENCE")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("CSE"));
                    //    //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("ZOOLOGY"));
                    //    bpharmacylist.BPharmacySubGroup1Count = group6Subcount;
                    //    if (bpharmacyintake == 100)
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 3;
                    //    }
                    //    else
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 2;
                    //    }

                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup6";
                    //}


                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                }


                //for pharma D specializations
                var pharmaD = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                if (pharmaD.Count > 0)
                {
                    foreach (var list in pharmdspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D";
                        bpharmacylist.Department = "Pharm.D";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadrequiredfaculty = PharmDrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                            //               f.registered_faculty_specialization == "PharmD".ToUpper() ||
                            //              f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                            //              f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                            //              f.registered_faculty_specialization == "Pharma D".ToUpper());

                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18 || f.PGSpecializationId == 122);
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            //pharmadgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                            //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practise".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper());

                            //int HospitalSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);
                            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                            int Required = bpharmacyintake >= 100 ? 5 : 4;
                            int Total = (PharmacologySp) - Required;
                            int Total1 = Required - PharmacologySp;
                            if (Total > 0)
                                pharmadgroup1Subcount = PharmDSp + (PharmacologySp - Required);
                            else if (Total <= 0)
                                pharmadgroup1Subcount = PharmDSp;
                            else if (PharmacologySp == Required)
                                pharmadgroup1Subcount = PharmDSp;
                            bpharmacylist.BPharmacySubGroup1Count = pharmadgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadTotalintake / 30;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                            intakedetailsList.Where(i => i.Degree == "Pharm.D" && i.Department == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroup1Count = pharmadgroup1Subcount);
                            intakedetailsList.Where(i => i.Degree == "Pharm.D" && i.Department == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupRequired = bpharmacylist.BPharmacySubGroupRequired);
                        }

                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                    }
                }


                //for pharma.D PB specializations
                var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                if (pharmaDPB.Count > 0)
                {
                    foreach (var list in pharmdpbspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D PB";
                        bpharmacylist.Department = "Pharm.D PB";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D PB");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        //bpharmacylist.pharmadPBrequiredfaculty = PharmDPBrequiredFaculty;
                        bpharmacylist.pharmadPBrequiredfaculty = Math.Ceiling(PharmDPBrequiredFaculty);
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadPbSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            //pharmadPBgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                            //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practise".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;

                            // int HospitalSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);
                            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                            int Required = bpharmacyintake >= 100 ? 5 : 4;
                            int Total = (PharmacologySp) - Required;
                            int Total1 = Required - PharmacologySp;
                            int pharmadgroup1Subcount1 = 0;
                            if (Total > 0)
                                pharmadgroup1Subcount1 = PharmDSp + (PharmacologySp - Required);
                            else if (Total <= 0)
                                pharmadgroup1Subcount1 = PharmDSp + PharmacologySp;


                            bpharmacylist.BPharmacySubGroup1Count = pharmadPBgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadPBTotalintake / 10;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                            intakedetailsList.Where(i => i.Degree == "Pharm.D PB" && i.Department == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroup1Count = pharmadPBgroup1Subcount);
                            intakedetailsList.Where(i => i.Degree == "Pharm.D PB" && i.Department == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupRequired = bpharmacylist.BPharmacySubGroupRequired);
                        }
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                    }
                }

                if (BpharcyrequiredFaculty > 0)
                {
                    if (bpharmacyintake >= 100)
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    else
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    //intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);
                    intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);

                    Group1PharmacyFaculty = group1Subcount; Group2PharmacyFaculty = group2Subcount; Group3PharmacyFaculty = group3Subcount;
                    Group4PharmacyFaculty = group4Subcount; Group5PharmacyFaculty = group5Subcount; Group6PharmacyFaculty = group6Subcount;
                    if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty)
                    {
                        if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                        {
                            subgroupconditionsmet = conditionbpharm = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionbpharm = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionbpharm = "Yes";
                    }

                    ViewBag.BpharmcyCondition = conditionbpharm;
                    //bpharmacycondition = conditionbpharm;
                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                }
                ViewBag.PharmDrequiredFaculty = PharmDrequiredFaculty;
                if (PharmDrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDrequiredFaculty)
                    {
                        if (pharmadgroup1Subcount >= pharmadTotalintake / 30)
                        {
                            subgroupconditionsmet = conditionpharmd = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionpharmd = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionpharmd = "Yes";
                    }

                    ViewBag.PharmaDCondition = conditionpharmd;
                    //  pharmdcondition = conditionpharmd;
                    if (conditionbpharm == "No")
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }


                }

                ViewBag.PharmDPBrequiredFaculty = PharmDPBrequiredFaculty;
                if (PharmDPBrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDPBrequiredFaculty)
                    {
                        if (pharmadPBgroup1Subcount >= pharmadPBTotalintake / 10)
                        {
                            subgroupconditionsmet = conditionphardpb = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionphardpb = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionphardpb = "Yes";
                    }

                    ViewBag.PharmaDPBCondition = conditionphardpb;
                    if (conditionbpharm == "No" && conditionpharmd == "No")
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }

                }


                intakedetailsList.FirstOrDefault().FacultyWithIntakeReports = intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                #endregion



                #endregion

                #region Faculty Appeal Deficiency Status
                var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
                var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
                intakedetailsList = intakedetailsList.Where(i => i.shiftId == 1).ToList();
                foreach (var item in intakedetailsList)
                {
                    var deparment = jntuh_deparment.FirstOrDefault(i => i.id == item.DepartmentID);
                    if (deparment != null)
                    {
                        var jntuh_departmentcount =
                        jntuh_appeal_faculty.Where(
                            i =>
                                i.DepartmentId == item.DepartmentID && i.SpecializationId == item.specializationId &&
                                i.DegreeId == deparment.degreeId && i.collegeId == collegeId && i.NOtificationReport != null).ToList();
                        var facultydefcount = (int)Math.Ceiling(item.requiredFaculty) - item.totalFaculty;

                        if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty && (item.Department == "B.Pharmacy"))
                        {
                            if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                            {
                                Allgroupscount = 0;
                            }
                            else
                            {
                                //var bpharmacyIntake = (bpharmacyintake >= 100 ? 3 : 2);
                                if (group1Subcount < (bpharmacyintake >= 100 ? 6 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 4) - group1Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group2Subcount < (bpharmacyintake >= 100 ? 6 : 5))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 5) - group2Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group3Subcount < (bpharmacyintake >= 100 ? 5 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 5 : 4) - group3Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group4Subcount < 3)
                                {
                                    var count = 3 - group4Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                //if (group5Subcount < 2)
                                //{
                                //    var count = 2 - group5Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                                //if (group6Subcount < bpharmacyIntake)
                                //{
                                //    var count = bpharmacyIntake - group6Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                            }
                            facultydefcount = Allgroupscount;
                        }

                        else if (jntuh_registered_faculty.Count < BpharcyrequiredFaculty && (item.Department == "B.Pharmacy"))
                        {
                            if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                            {
                                Allgroupscount = 0;
                            }
                            else
                            {
                                //var bpharmacyIntake = (bpharmacyintake >= 100 ? 3 : 2);
                                if (group1Subcount < (bpharmacyintake >= 100 ? 6 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 4) - group1Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group2Subcount < (bpharmacyintake >= 100 ? 6 : 5))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 5) - group2Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group3Subcount < (bpharmacyintake >= 100 ? 5 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 5 : 4) - group3Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group4Subcount < 3)
                                {
                                    var count = 3 - group4Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                //if (group5Subcount < 2)
                                //{
                                //    var count = 2 - group5Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                                //if (group6Subcount < bpharmacyIntake)
                                //{
                                //    var count = bpharmacyIntake - group6Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                            }

                            var lessfaculty = BpharcyrequiredFaculty - jntuh_registered_faculty.Count;

                            if (lessfaculty > Allgroupscount)
                            {
                                facultydefcount = Allgroupscount;//(int)lessfaculty + 
                            }
                            else if (Allgroupscount > lessfaculty)
                            {
                                facultydefcount = Allgroupscount;//+ (int)lessfaculty
                            }
                        }

                        if (item.Department == "B.Pharmacy")
                        {
                            if (Allgroupscount > 0) { item.deficiency = true; }
                            ViewBag.BpharmacyRequired = facultydefcount;
                        }

                        if (item.PharmacyspecializationWiseFaculty < 1 && item.Department == "M.Pharmacy" && item.requiredFaculty > 0)
                        {
                            facultydefcount = (int)Math.Ceiling(item.requiredFaculty) + 1;
                        }
                        if (item.PharmacyspecializationWiseFaculty >= 1 && item.Department == "M.Pharmacy" && item.requiredFaculty > 0)
                        {
                            facultydefcount = (int)Math.Ceiling(item.requiredFaculty);
                        }
                        if (item.Department == "Pharm.D" || item.Department == "Pharm.D PB")
                        {
                            facultydefcount = item.BPharmacySubGroupRequired - item.BPharmacySubGroup1Count;
                        }
                        if (facultydefcount <= jntuh_departmentcount.Count && jntuh_departmentcount.Count != 0)
                        {
                            item.deficiencystatus = true;
                        }
                    }
                }
                UGWithDeficiency UGWithDeficiency = new UGWithDeficiency();
                UGWithDeficiency.CollegeId = collegeId;

                #endregion

            }
            return View(intakedetailsList);
            #endregion
        }

        //Compliance for B.tech Colleges GET and POST dialog Code
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult FacultyIntegratedBtechRegistrationNumber(string collegeId, string fid, int deficencycount, int departmentid, string degree, int specializationid)
        {
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            userCollegeID = 140;
            var specializatioName = "";
            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.degree = degree;
            ViewBag.deficiencycount = deficencycount;
            ViewBag.specializationid = specializationid;
            ViewBag.departmentid = departmentid;
            //var jntuhSpecialization = db.jntuh_specialization.FirstOrDefault(i => i.id == specializationid);
            //if (jntuhSpecialization != null)
            //{
            //    specializatioName =  jntuhSpecialization.specializationName;
            //}

            var jntuh_degree = db.jntuh_degree.Where(e => e.isActive == true).Select(e => e).ToList();
            var jntuh_department = db.jntuh_department.Where(e => e.isActive == true).Select(e => e).ToList();
            var jntuh_specialization = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();

            CollegeFaculty faculty = new CollegeFaculty();
            if (degree == "B.Tech")
            {
                faculty.facultyDepartmentId = departmentid;
                faculty.department = jntuh_department.Where(e => e.id == departmentid).Select(e => e.jntuh_degree.degree + " -" + e.departmentName).FirstOrDefault();
            }
            else
            {
                faculty.facultyPGDepartmentId = departmentid;
                faculty.department = jntuh_department.Where(e => e.id == departmentid).Select(e => e.jntuh_degree.degree + " -" + e.departmentName).FirstOrDefault();
            }
            faculty.SpecializationId = specializationid;
            faculty.SpecializationName = specializationid == null ? null : jntuh_specialization.Where(e => e.id == specializationid).Select(w => w.specializationName).FirstOrDefault();
            faculty.DegreeName = degree;
            faculty.facultyRecruitedFor = degree == "B.Tech" ? "UG" : "PG";
            faculty.Facultydeficencycount = deficencycount;
            faculty.collegeId = Convert.ToInt16(collegeId);



            //SpecializationName = specializatioName

            var collegeID = Convert.ToInt16(collegeId);



            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            int actualYear = jntuh_academic_year.Where(s => s.isActive == true && s.isPresentAcademicYear == true).Select(s => s.actualYear).FirstOrDefault();

            int AY1 = jntuh_academic_year.Where(s => s.actualYear == actualYear).Select(s => s.id).FirstOrDefault();
            int AY2 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 1)).Select(s => s.id).FirstOrDefault();
            int AY3 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 2)).Select(s => s.id).FirstOrDefault();

            var jntuh_college_intake_existing = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeID && (e.academicYearId == AY1 || e.academicYearId == AY2 || e.academicYearId == AY3)).Select(e => e).ToList();

            var SpecalizationIds = jntuh_college_intake_existing.Select(e => e.specializationId).Distinct().ToList();

            var DepartmentsData = (from s in jntuh_specialization
                                   join d in jntuh_department on s.departmentId equals d.id
                                   join de in jntuh_degree on d.degreeId equals de.id
                                   where SpecalizationIds.Contains(s.id)
                                   select new Departments
                                   {
                                       DegreeTypeId = de.degreeTypeId,
                                       DegreeId = de.id,
                                       Degree = de.degree,
                                       Department = de.degree + "-" + d.departmentName,
                                       DepartmentId = d.id,
                                       Specialization = s.specializationName,
                                       SpecializationId = s.id

                                   }).ToList();

            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 65, Department = "Others(CSE/IT)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 66, Department = "Others(CIVIL/MECH)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 67, Department = "Others(ECE/EEE)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 68, Department = "Others(MNGT/H&S)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 29, Department = "Physics" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 30, Department = "Mathematics" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 31, Department = "English" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 32, Department = "Chemistry" });


            ViewBag.UGDept = DepartmentsData.Where(e => e.DegreeTypeId == 1).Select(
                e => new
                {
                    UgDeptid = e.DepartmentId,
                    UgDeptName = e.Department
                }).Distinct().ToList();

            ViewBag.PGDept = DepartmentsData.Where(e => e.DegreeTypeId == 2).Select(
               e => new
               {
                   PgDeptid = e.DepartmentId,
                   PgDeptName = e.Department
               }).Distinct().ToList();

            ViewBag.DualDept = DepartmentsData.Where(e => e.DegreeTypeId == 3).Select(
              e => new
              {
                  DualDeptid = e.DepartmentId,
                  DualDeptName = e.Department
              }).Distinct().ToList();

            var MPharmacyFacultySpecialization = (from s in jntuh_specialization
                                                  join d in jntuh_department on s.departmentId equals d.id
                                                  join de in jntuh_degree on d.degreeId equals de.id
                                                  where de.id == 2 || de.id == 9 || de.id == 10
                                                  select new MpharmacySpec
                                                  {
                                                      MPharmacyspecid = s.id,
                                                      MPharmacyspecname = s.specializationName
                                                  }).ToList();

            ViewBag.MPharmacyFacultyspec = MPharmacyFacultySpecialization;

            ViewBag.PGSpecializations = DepartmentsData.Where(e => e.DegreeTypeId == 2).Select(e => new { Specid = e.SpecializationId, Specname = e.Specialization }).ToList();


            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult FacultyIntegratedBtechRegistrationNumber(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            //userCollegeID = 180;
            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber&&r.Blacklistfaculy==false).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();


            if (isRegisteredFaculty == null)
            {
                TempData["Error"] = "Invalid Faculty Registration Number.";
                return RedirectToAction("IntegratedBtechFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            }

            if (isExistingFaculty != null)
            {
                if (userCollegeID == isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in your college";
                    return RedirectToAction("IntegratedBtechFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
                if (userCollegeID != isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
                    return RedirectToAction("IntegratedBtechFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
            }

            var jntuh_appeal_facultycheck = db.jntuh_appeal_faculty_registered.Where(c=>c.collegeId==userCollegeID&&c.NOtificationReport!=null).Select(s=>s).ToList();
            List<collegeappealdeptfaculty> collegeappealdeptfacultylist = new List<collegeappealdeptfaculty>();
            foreach (var item in jntuh_appeal_facultycheck)
            {
                collegeappealdeptfaculty collegeappealdeptfaculty = new collegeappealdeptfaculty();
                collegeappealdeptfaculty.Departmentname =
                    db.jntuh_department.Where(d => d.id == item.DepartmentId)
                        .Select(s => s.departmentName)
                        .FirstOrDefault();
                collegeappealdeptfaculty.DegreeName =
                    db.jntuh_degree.Where(d => d.id == item.DegreeId).Select(s => s.degree).FirstOrDefault();
                collegeappealdeptfaculty.SpecializationName =
                    db.jntuh_specialization.Where(s => s.id == item.SpecializationId).Select(s => s.specializationName).FirstOrDefault();
                collegeappealdeptfaculty.RegistrationNumber = item.RegistrationNumber;
                collegeappealdeptfacultylist.Add(collegeappealdeptfaculty);

            }
            string facultydepartment = string.Empty;
            if (faculty.facultyDepartmentId == null || faculty.facultyDepartmentId == 0)
            {
                 facultydepartment = db.jntuh_department.Where(d => d.id == faculty.facultyPGDepartmentId)
                    .Select(s => s.departmentName)
                    .FirstOrDefault();
            }
            else
            {
                 facultydepartment = db.jntuh_department.Where(d => d.id == faculty.facultyDepartmentId)
                       .Select(s => s.departmentName)
                       .FirstOrDefault();
            }
           
            //if (collegeappealdeptfacultylist.Where(s => s.Departmentname == facultydepartment.Trim()).Count()==4)
            //{
            //    TempData["Error"] = "Not Add More Than 2 Faculty";
            //    return RedirectToAction("IntegratedBtechFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            //}
            //if (isExistingFaculty != null)
            //{
            //    if (userCollegeID != isExistingFaculty.collegeId && isExistingFaculty.collegeId != null)
            //    {
            //        TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
            //    }
            //    else if (userCollegeID == isExistingFaculty.collegeId)
            //    {
            //        TempData["Error"] = "Faculty is already working in your college";
            //    }

            //    return RedirectToAction("IntegratedBtechFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            //}


            var notificationPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/NotificationsReports";
            var selectioncommitteePath = "~/Content/Upload/OnlineAppealDocuments/Faculty/SelectionCommitteeReports";
            var appointmentorderPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppointmentOrders";
            var joiningreportpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/JoiningReports";
            var reverificationscreenshotpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/ReverificationScreenshot";
            var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";
            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                // UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null ? (int)isRegisteredFaculty.collegeId : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;

                if (UpdatedFaculty.IdentifiedFor == "UG")
                {
                    UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                    UpdatedFaculty.SpecializationId = null;
                }
                else
                {
                    UpdatedFaculty.DepartmentId = faculty.facultyPGDepartmentId;
                    UpdatedFaculty.SpecializationId = faculty.SpecializationId;
                }


                var jntuhDepartment = jntuh_deparment.Where(i => i.id == UpdatedFaculty.DepartmentId).FirstOrDefault();
                if (jntuhDepartment != null)
                {
                    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                }
                //New Aadhaar Document Saving
                UpdatedFaculty.AadhaarNumber =faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }
                if (faculty.NotificationDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(notificationPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(notificationPath));
                    }

                    var ext = Path.GetExtension(faculty.NotificationDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.NotificationDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(notificationPath),
                            fileName, ext));
                        UpdatedFaculty.NOtificationReport = string.Format("{0}/{1}{2}", notificationPath, fileName, ext);
                    }
                }
                if (faculty.SelectionCommitteeDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(selectioncommitteePath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(selectioncommitteePath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.SelectionCommitteeDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(selectioncommitteePath), fileName, ext));
                        UpdatedFaculty.SelectionCommiteMinutes = string.Format("{0}/{1}{2}", selectioncommitteePath,
                            fileName, ext);
                    }
                }
                if (faculty.AppointmentOrderDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(appointmentorderPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appointmentorderPath));
                    }

                    var ext = Path.GetExtension(faculty.AppointmentOrderDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppointmentOrderDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(appointmentorderPath), fileName, ext));
                        UpdatedFaculty.AppointMentOrder = string.Format("{0}/{1}{2}", appointmentorderPath, fileName,
                            ext);
                    }
                }
                if (faculty.JoiningReportDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(joiningreportpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(joiningreportpath));
                    }

                    var ext = Path.GetExtension(faculty.JoiningReportDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.JoiningReportDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(joiningreportpath), fileName, ext));
                        UpdatedFaculty.JoiningOrder = string.Format("{0}/{1}{2}", joiningreportpath, fileName, ext);
                    }
                }

                if (faculty.AppealReverificationScreenShot != null)
                {
                    if (!Directory.Exists(Server.MapPath(reverificationscreenshotpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(reverificationscreenshotpath));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationScreenShot.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationScreenShot.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(reverificationscreenshotpath), fileName, ext));
                        UpdatedFaculty.AppealReverificationScreenshot = string.Format("{0}/{1}{2}", reverificationscreenshotpath, fileName, ext);
                    }
                }






                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added.";
                TempData["Error"] = null;
            }

            else
            {
                TempData["Error"] = "Faculty is already appealed";
            }

            //var jntuh_degree = db.jntuh_degree.Where(e => e.isActive == true).Select(e => e).ToList();
            //var jntuh_department = db.jntuh_department.Where(e => e.isActive == true).Select(e => e).ToList();
            //var jntuh_specialization = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();

            //var jntuh_academic_year = db.jntuh_academic_year.ToList();
            //int actualYear = jntuh_academic_year.Where(s => s.isActive == true && s.isPresentAcademicYear == true).Select(s => s.actualYear).FirstOrDefault();

            //int AY1 = jntuh_academic_year.Where(s => s.actualYear == actualYear).Select(s => s.id).FirstOrDefault();
            //int AY2 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 1)).Select(s => s.id).FirstOrDefault();
            //int AY3 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 2)).Select(s => s.id).FirstOrDefault();

            //var jntuh_college_intake_existing = db.jntuh_college_intake_existing.Where(e => e.collegeId == userCollegeID && (e.academicYearId == AY1 || e.academicYearId == AY2 || e.academicYearId == AY3)).Select(e => e).ToList();

            //var SpecalizationIds = jntuh_college_intake_existing.Select(e => e.specializationId).Distinct().ToList();

            //var DepartmentsData = (from s in jntuh_specialization
            //                       join d in jntuh_department on s.departmentId equals d.id
            //                       join de in jntuh_degree on d.degreeId equals de.id

            //                       where SpecalizationIds.Contains(s.id)
            //                       select new Departments
            //                       {
            //                           DegreeTypeId = de.degreeTypeId,
            //                           DegreeId = de.id,
            //                           Degree = de.degree,
            //                           Department = d.departmentName,
            //                           DepartmentId = d.id,
            //                           Specialization = s.specializationName,
            //                           SpecializationId = s.id

            //                       }).ToList();

            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 65, Department = "Others(CSE/IT)" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 66, Department = "Others(CIVIL/MECH)" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 67, Department = "Others(ECE/EEE)" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 68, Department = "Others(MNGT/H&S)" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 29, Department = "Physics" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 30, Department = "Mathematics" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 31, Department = "English" });
            //DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 32, Department = "Chemistry" });


            //ViewBag.UGDept = DepartmentsData.Where(e => e.DegreeTypeId == 1).Select(
            //    e => new
            //    {
            //        UgDeptid = e.DepartmentId,
            //        UgDeptName = e.Department
            //    }).Distinct().ToList();

            //ViewBag.PGDept = DepartmentsData.Where(e => e.DegreeTypeId == 2).Select(
            //   e => new
            //   {
            //       PgDeptid = e.DepartmentId,
            //       PgDeptName = e.Department
            //   }).Distinct().ToList();

            //ViewBag.DualDept = DepartmentsData.Where(e => e.DegreeTypeId == 3).Select(
            //  e => new
            //  {
            //      DualDeptid = e.DepartmentId,
            //      DualDeptName = e.Department
            //  }).Distinct().ToList();

            //var MPharmacyFacultySpecialization = (from s in jntuh_specialization
            //                                      join d in jntuh_department on s.departmentId equals d.id
            //                                      join de in jntuh_degree on d.degreeId equals de.id
            //                                      where de.id == 2 || de.id == 9 || de.id == 10
            //                                      select new MpharmacySpec
            //                                      {
            //                                          MPharmacyspecid = s.id,
            //                                          MPharmacyspecname = s.specializationName
            //                                      }).ToList();

            //ViewBag.MPharmacyFacultyspec = MPharmacyFacultySpecialization;

            //ViewBag.PGSpecializations = db.jntuh_college_intake_existing
            //                             .Where(e => e.collegeId == userCollegeID && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 5)
            //                             .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationDescription })
            //                             .GroupBy(e => new { e.id, e.spec })
            //                             .OrderBy(e => e.Key.spec)
            //                             .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();

            return RedirectToAction("IntegratedBtechFacultyWithIntake", "FacultyVerification");
        }

        public class collegeappealdeptfaculty
        {
            public string Departmentname { get; set; }
            public string DegreeName { get; set; }
            public string RegistrationNumber { get; set; }
            public string SpecializationName { get; set; }
        }

        [HttpGet]
        public JsonResult GetSpecializations(string id)
        {
            object Spec = null;
            int Deptid = Convert.ToInt32(id);
            int userid = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userid).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            // userCollegeID = 318;
            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            int actualYear = jntuh_academic_year.Where(s => s.isActive == true && s.isPresentAcademicYear == true).Select(s => s.actualYear).FirstOrDefault();

            int AY1 = jntuh_academic_year.Where(s => s.actualYear == actualYear).Select(s => s.id).FirstOrDefault();
            int AY2 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 1)).Select(s => s.id).FirstOrDefault();
            int AY3 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 2)).Select(s => s.id).FirstOrDefault();

            var DeptNewData = (from d in db.jntuh_department
                               join s in db.jntuh_specialization on d.id equals s.departmentId
                               select new
                               {
                                   Deptid = d.id,
                                   spec = s.id,
                                   specname = s.specializationName

                               }).ToList();
            DeptNewData = DeptNewData.Where(s => s.Deptid == Deptid).ToList();
            var SpecalizationIds = DeptNewData.Select(s => s.spec).ToArray();
            var intake = db.jntuh_college_intake_existing.Where(e => e.collegeId == userCollegeID && (e.academicYearId == AY1 || e.academicYearId == AY2 || e.academicYearId == AY3) && SpecalizationIds.Contains(e.specializationId)).Select(e => e.specializationId).ToArray();
            var Data = db.jntuh_specialization.Where(s => intake.Contains(s.id))
                .Select(e => new
                {
                    Specid = e.id,
                    Specname = e.specializationName
                }).ToList();
            ViewBag.PGSpecializations = Data;
            return Json(new { data = Data }, "application/json", JsonRequestBehavior.AllowGet);
        }

        //Compliance for B.Pharmacy Colleges GET and POST dialog Code
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult FacultyIntegratedBpharamcyRegistrationNumber(string collegeId, string fid, int deficencycount, int departmentid, string degree, int specializationid)
        {
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            //  userCollegeID = 43;
            var specializatioName = "";
            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.degree = degree;
            ViewBag.deficiencycount = deficencycount;
            ViewBag.specializationid = specializationid;
            ViewBag.departmentid = departmentid;
            //var jntuhSpecialization = db.jntuh_specialization.FirstOrDefault(i => i.id == specializationid);
            //if (jntuhSpecialization != null)
            //{
            //    specializatioName =  jntuhSpecialization.specializationName;
            //}
            var faculty = new CollegeFaculty
            {
                facultyDepartmentId = departmentid,
                SpecializationId = specializationid,
                DegreeName = degree,
                Facultydeficencycount = deficencycount,
                collegeId = Convert.ToInt16(collegeId),
                //SpecializationName = specializatioName
            };
            var collegeID = Convert.ToInt16(collegeId);
            ViewBag.PGSpecializations = db.jntuh_college_intake_existing
                                         .Where(e => e.collegeId == collegeID && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 5)
                                         .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationDescription })
                                         .GroupBy(e => new { e.id, e.spec })
                                         .OrderBy(e => e.Key.spec)
                                         .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();

            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult FacultyIntegratedBpharamcyRegistrationNumber(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            // userCollegeID = 43;
            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();


            if (isRegisteredFaculty == null)
            {
                TempData["Error"] = "Invalid Faculty Registration Number.";
                return RedirectToAction("IntegratedPharmacyFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            }

            if (isExistingFaculty != null)
            {
                if (userCollegeID == isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in your college";
                    return RedirectToAction("IntegratedPharmacyFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
                if (userCollegeID != isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
                    return RedirectToAction("IntegratedPharmacyFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
            }



            //if (isExistingFaculty != null)
            //{
            //    if (userCollegeID != isExistingFaculty.collegeId && isExistingFaculty.collegeId != null)
            //    {
            //        TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
            //    }
            //    else if (userCollegeID == isExistingFaculty.collegeId)
            //    {
            //        TempData["Error"] = "Faculty is already working in your college";
            //    }

            //    return RedirectToAction("IntegratedPharmacyFacultyWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            //}


            var notificationPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/NotificationsReports";
            var selectioncommitteePath = "~/Content/Upload/OnlineAppealDocuments/Faculty/SelectionCommitteeReports";
            var appointmentorderPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppointmentOrders";
            var joiningreportpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/JoiningReports";
            //var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";
            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                var jntuhDepartment = jntuh_deparment.Where(i => i.id == faculty.facultyDepartmentId).FirstOrDefault();
                if (jntuhDepartment != null)
                {
                    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                }
                if (faculty.NotificationDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(notificationPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(notificationPath));
                    }

                    var ext = Path.GetExtension(faculty.NotificationDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.NotificationDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(notificationPath),
                            fileName, ext));
                        UpdatedFaculty.NOtificationReport = string.Format("{0}/{1}{2}", notificationPath, fileName, ext);
                    }
                }
                if (faculty.SelectionCommitteeDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(selectioncommitteePath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(selectioncommitteePath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.SelectionCommitteeDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(selectioncommitteePath), fileName, ext));
                        UpdatedFaculty.SelectionCommiteMinutes = string.Format("{0}/{1}{2}", selectioncommitteePath,
                            fileName, ext);
                    }
                }
                if (faculty.AppointmentOrderDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(appointmentorderPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appointmentorderPath));
                    }

                    var ext = Path.GetExtension(faculty.AppointmentOrderDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppointmentOrderDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(appointmentorderPath), fileName, ext));
                        UpdatedFaculty.AppointMentOrder = string.Format("{0}/{1}{2}", appointmentorderPath, fileName,
                            ext);
                    }
                }
                if (faculty.JoiningReportDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(joiningreportpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(joiningreportpath));
                    }

                    var ext = Path.GetExtension(faculty.JoiningReportDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.JoiningReportDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(joiningreportpath), fileName, ext));
                        UpdatedFaculty.JoiningOrder = string.Format("{0}/{1}{2}", joiningreportpath, fileName, ext);
                    }
                }
                //if (faculty.AppealReverificationScreenShot != null)
                //{
                //    if (!Directory.Exists(Server.MapPath(appealReverificationScreenshot)))
                //    {
                //        Directory.CreateDirectory(Server.MapPath(appealReverificationScreenshot));
                //    }

                //    var ext = Path.GetExtension(faculty.AppealReverificationScreenShot.FileName);
                //    if (ext.ToUpper().Equals(".PDF"))
                //    {
                //        string fileName = db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +
                //            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                //        faculty.AppealReverificationScreenShot.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealReverificationScreenshot), fileName, ext));
                //        UpdatedFaculty.AppealReverificationScreenshot = string.Format("{0}/{1}{2}", appealReverificationScreenshot, fileName, ext);
                //    }
                //}
                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added.";
                TempData["Error"] = null;
            }

            else
            {
                TempData["Error"] = "Faculty is already appealed";
            }


            return RedirectToAction("IntegratedPharmacyFacultyWithIntake", "FacultyVerification");
        }

        //Appeal Reverification for Integrated B.tech Faculty
        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult AppealReverificationIntegratedBtechFaculty(string type, string CollegeId, int deficencycount, int departmentid, string degree, int specializationid)
        {
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            int Collegeid = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(CollegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"])); ;
            // Collegeid = 7;
            var FacultyRegistrationList = new List<FacultyRegistration>();
            if (Collegeid != null)
            {

                //var department = db.jntuh_department.AsNoTracking().FirstOrDefault(i => i.id == departmentid).departmentName.ToUpper();
                //if (department.Contains("CIVIL"))
                //{
                //    departmentid = 5;
                //}
                //else if (department.Contains("ECE"))
                //{
                //    departmentid = 2;
                //}
                //else if (department.Contains("EEE"))
                //{
                //    departmentid = 1;
                //}
                //else if (department.Contains("MECHANICAL"))
                //{
                //    departmentid = 15;
                //}
                //else if (department.Contains("CSE"))
                //{
                //    departmentid = 3;
                //}

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == Collegeid).ToList();// && cf.DepartmentId==departmentid

                //if(degree =="B.Tech")
                // jntuh_college_faculty_registered   =   jntuh_college_faculty_registered.Where(e => e.DepartmentId == departmentid).Select(cf =>cf).ToList();
                //else
                // jntuh_college_faculty_registered = jntuh_college_faculty_registered.Where(e => e.DepartmentId == departmentid && e.SpecializationId == specializationid).Select(cf => cf).ToList();

                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();


                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList()
                   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();


                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();


                var jntuh_registered_faculty1 = registeredFaculty.Select(rf => new
                {
                    type = rf.type,
                    Absent = rf.Absent != null ? (bool)rf.Absent : false,
                    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE != null ? (bool)rf.NotQualifiedAsperAICTE : false,
                    InvalidPANNo = rf.InvalidPANNumber != null ? (bool)rf.InvalidPANNumber : false,
                    InCompleteCeritificates = rf.IncompleteCertificates != null ? (bool)rf.IncompleteCertificates : false,
                    PANNumber = rf.PANNumber,
                    XeroxcopyofcertificatesFlag = rf.Xeroxcopyofcertificates != null ? (bool)rf.Xeroxcopyofcertificates : false,
                    NOrelevantUgFlag = rf.NoRelevantUG == "Yes" ? true : false,
                    NOrelevantPgFlag = rf.NoRelevantPG == "Yes" ? true : false,
                    NOrelevantPhdFlag = rf.NORelevantPHD == "Yes" ? true : false,
                    BlacklistFaculty = rf.Blacklistfaculy != null ? (bool)rf.Blacklistfaculy : false,
                    NotIdentityFiedForAnyProgramFlag = rf.NotIdentityfiedForanyProgram != null ? (bool)rf.NotIdentityfiedForanyProgram : false,
                    OriginalCertificatesnotshownFlag = rf.OriginalCertificatesNotShown != null ? (bool)rf.OriginalCertificatesNotShown : false,
                    NoSCM = rf.NoSCM != null ? (bool)rf.NoSCM : false,
                    SamePANUsedByMultipleFaculty = rf.Invaliddegree != null ? (bool)(rf.Invaliddegree) : false,
                    BASStatusOld = rf.BAS,
                    BASStatus = rf.InvalidAadhaar,
                    OriginalsVerifiedUG = rf.OriginalsVerifiedUG == true ? true : false,
                    OriginalsVerifiedPHD = rf.OriginalsVerifiedPHD == true ? true : false,

                    // NoSCM = rf.NoSCM17 != null ? (bool)rf.NoSCM17 : false,
                    // FalsePAN = rf.FalsePAN != null ? (bool)rf.FalsePAN : false,
                    // NOForm16 = rf.NoForm16 != null ? (bool)rf.NoForm16 : false,
                    // MultipleReginSamecoll = rf.MultipleRegInSameCollege != null ? (bool)rf.MultipleRegInSameCollege : false,

                    //NoForm16Verification = rf.Noform16Verification != null ? (bool)rf.Noform16Verification : false,
                    //PhotocopyofPAN = rf.PhotoCopyofPAN != null ? (bool)rf.PhotoCopyofPAN : false,
                    PhdUndertakingDocumentstatus = rf.PhdUndertakingDocumentstatus != null ? (bool)(rf.PhdUndertakingDocumentstatus) : false,
                    PHDUndertakingDocumentView = rf.PHDUndertakingDocument,
                    PhdUndertakingDocumentText = rf.PhdUndertakingDocumentText,
                    //AppliedPAN = rf.AppliedPAN != null ? (bool)(rf.AppliedPAN) : false,
                    Notin116 = rf.Notin116,
                    Blacklistfaculy = rf.Blacklistfaculy,
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : "",
                    HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                    IsApproved = rf.isApproved,
                    PanNumber = rf.PANNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    Photo = rf.Photo,
                    FullName = rf.FirstName + rf.MiddleName + rf.LastName,
                    FacultyEducation = rf.jntuh_registered_faculty_education,
                    DegreeId = rf.jntuh_registered_faculty_education.Count(e => e.facultyId == rf.id) > 0 ? rf.jntuh_registered_faculty_education.Where(e => e.facultyId == rf.id).Select(e => e.educationId).Max() : 0,
                    DepartmentId = rf.DepartmentId




                }).ToList();


                var RegistrationNumbersCleared = jntuh_registered_faculty1.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null) && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.InCompleteCeritificates == false || rf.InCompleteCeritificates == null) && (rf.Blacklistfaculy == false) &&
                                                 rf.NOrelevantUgFlag == false && rf.NOrelevantPgFlag == false && rf.NOrelevantPhdFlag == false && rf.OriginalCertificatesnotshownFlag == false && rf.NotIdentityFiedForAnyProgramFlag == false && (rf.InvalidPANNo == false || rf.InvalidPANNo == null) && (rf.XeroxcopyofcertificatesFlag == false || rf.XeroxcopyofcertificatesFlag == null) &&  // (rf.AppliedPAN == false || rf.AppliedPAN == null) && && (rf.MultipleReginSamecoll == false || rf.MultipleReginSamecoll == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) 
                                                 (rf.SamePANUsedByMultipleFaculty == false || rf.SamePANUsedByMultipleFaculty == null) && rf.BASStatus != "Yes" && rf.BASStatusOld != "Yes" && rf.OriginalsVerifiedUG == false && rf.OriginalsVerifiedPHD == false && (rf.DepartmentId != 61 || rf.DepartmentId != 27) && rf.HighestDegreeID >= 4)).Select(e => e.RegistrationNumber).ToArray();


                var jntuh_registered_faculty = jntuh_registered_faculty1.Where(e => !RegistrationNumbersCleared.Contains(e.RegistrationNumber)).Select(rf => new
                {
                    type = rf.type,
                    Absent = rf.Absent,
                    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE,
                    rf.InCompleteCeritificates,
                    rf.InvalidPANNo,
                    rf.NOrelevantPgFlag,
                    rf.NOrelevantUgFlag,
                    rf.NOrelevantPhdFlag,
                    rf.XeroxcopyofcertificatesFlag,
                    NoSCM = rf.NoSCM,
                    PANNumber = rf.PANNumber,
                    rf.NotIdentityFiedForAnyProgramFlag,
                    rf.BASStatus,
                    rf.BASStatusOld,
                    rf.OriginalsVerifiedUG,
                    rf.OriginalsVerifiedPHD,
                    rf.SamePANUsedByMultipleFaculty,
                    rf.OriginalCertificatesnotshownFlag,
                    Blacklistfaculy = rf.Blacklistfaculy,

                    PHDundertakingnotsubmitted = rf.PhdUndertakingDocumentstatus,
                    Notin116 = rf.Notin116,

                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                    DeptId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.DepartmentId).FirstOrDefault(),

                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    Photo = rf.Photo,
                    FullName = rf.FullName,
                    faculty_education = rf.FacultyEducation,
                    HighestDegreeID = rf.HighestDegreeID
                }).ToList();


                foreach (var item in jntuh_registered_faculty)
                {
                    string Reason = null;
                    FacultyRegistration facultyregistered = new FacultyRegistration();

                    facultyregistered.RegistrationNumber = item.RegistrationNumber;
                    facultyregistered.FirstName = item.FullName;
                    facultyregistered.department = item.Department;
                    facultyregistered.DepartmentId = item.DeptId;
                    facultyregistered.jntuh_registered_faculty_education = item.faculty_education;
                    facultyregistered.facultyPhoto = item.Photo;
                    facultyregistered.Absent = item.Absent != null && (bool)item.Absent;
                    facultyregistered.NOTQualifiedAsPerAICTE = item.NotQualifiedAsperAICTE != null && (bool)item.NotQualifiedAsperAICTE;
                    facultyregistered.NoSCM = item.NoSCM != null && (bool)item.NoSCM;
                    facultyregistered.PANNumber = item.PANNumber;
                    facultyregistered.PHDundertakingnotsubmitted = item.PHDundertakingnotsubmitted != null && (bool)item.PHDundertakingnotsubmitted;
                    facultyregistered.BlacklistFaculty = item.Blacklistfaculy != null && (bool)item.Blacklistfaculy;
                    facultyregistered.DegreeId = item.HighestDegreeID;

                    facultyregistered.AadhaarNumber = jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarNumber).FirstOrDefault() == null ? null : jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarNumber).FirstOrDefault();
                    facultyregistered.facultyAadhaarCardDocument = jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarDocument).FirstOrDefault() == null ? null : jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarDocument).FirstOrDefault();

                    if (item.Absent == true)
                        Reason += "Absent";

                    if (item.type == "Adjunct")
                    {
                        if (Reason != null)
                            Reason += ",Adjunct Faculty";
                        else
                            Reason += "Adjunct Faculty";
                    }

                    if (item.XeroxcopyofcertificatesFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",Xerox copyof certificates";
                        else
                            Reason += "Xerox copyof certificates";
                    }

                    if (item.NOrelevantUgFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant UG";
                        else
                            Reason += "NO Relevant UG";
                    }

                    if (item.NOrelevantPgFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PG";
                        else
                            Reason += "NO Relevant PG";
                    }

                    if (item.NOrelevantPhdFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PHD";
                        else
                            Reason += "NO Relevant PHD";
                    }

                    if (item.NotQualifiedAsperAICTE == true)
                    {
                        if (Reason != null)
                            Reason += ",NOT Qualified AsPerAICTE";
                        else
                            Reason += "NOT Qualified AsPerAICTE";
                    }

                    if (item.InvalidPANNo == true)
                    {
                        if (Reason != null)
                            Reason += ",InvalidPANNumber";
                        else
                            Reason += "InvalidPANNumber";
                    }

                    if (item.InCompleteCeritificates == true)
                    {
                        if (Reason != null)
                            Reason += ",InComplete Ceritificates";
                        else
                            Reason += "InComplete Ceritificates";
                    }

                    if (item.NoSCM == true)
                    {
                        if (Reason != null)
                            Reason += ",NoSCM";
                        else
                            Reason += "NoSCM";
                    }

                    if (item.OriginalCertificatesnotshownFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",Original Certificates notshown";
                        else
                            Reason += "Original Certificates notshown";
                    }

                    if (item.PANNumber == null)
                    {
                        if (Reason != null)
                            Reason += ",No PANNumber";
                        else
                            Reason += "No PANNumber";
                    }

                    if (item.NotIdentityFiedForAnyProgramFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NotIdentityFied ForAnyProgram";
                        else
                            Reason += "NotIdentityFied ForAnyProgram";
                    }

                    if (item.SamePANUsedByMultipleFaculty == true)
                    {
                        if (Reason != null)
                            Reason += ",SamePANUsedByMultipleFaculty";
                        else
                            Reason += "SamePANUsedByMultipleFaculty";
                    }

                    if (item.BASStatus == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",No/Invalid Aadhaar Document";
                        else
                            Reason += "No/Invalid Aadhaar Document";
                    }

                    if (item.BASStatusOld == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",BAS Flag";
                        else
                            Reason += "BAS Flag";
                    }

                    if (item.OriginalsVerifiedUG == true)
                    {
                        if (Reason != null)
                            Reason += ",Complaint PHD Faculty";
                        else
                            Reason += "Complaint PHD Faculty";
                    }

                    if (item.OriginalsVerifiedPHD == true)
                    {
                        if (Reason != null)
                            Reason += ",No Guide Sign in PHD Thesis";
                        else
                            Reason += "No Guide Sign in PHD Thesis";
                    }
                    if (item.Blacklistfaculy == true)
                    {
                        if (Reason != null)
                            Reason += ",Blacklistfaculy";
                        else
                            Reason += "Blacklistfaculy";
                    }
                    facultyregistered.DeactivationReason = Reason;
                    FacultyRegistrationList.Add(facultyregistered);
                }
            }

            ViewBag.collegeid = Collegeid;
            ViewBag.departmentid = departmentid;
            ViewBag.degree = degree;
            ViewBag.specializationid = specializationid;
            ViewBag.deficiencycount = deficencycount;
            return View(FacultyRegistrationList);
            #endregion

        }

        //Reverification Code for Integrated B.tech Facultyt Dialog  GET And Post Code
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult AppealReverificationIntegratedBtech(string collegeId, string fid, int deficencycount, int departmentid, string degree, string specializationid, string registrationnumber)
        {

            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            //userCollegeID = 180;
            //if (userCollegeID == 0 && collegeId != null)
            //{
            //    if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
            //    {
            //        userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
            //    }
            //}

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.registrationnumber = registrationnumber;
            CollegeFaculty faculty = new CollegeFaculty();
            faculty.FacultyRegistrationNumber = registrationnumber;
            faculty.collegeId = Convert.ToInt16(collegeId);
            faculty.DegreeName = degree;
            faculty.SpecializationId = Convert.ToInt16(specializationid);
            faculty.facultyDepartmentId = departmentid;
            faculty.Facultydeficencycount = deficencycount;


            var firstOrDefault = db.jntuh_college_faculty_registered.Where(e => e.RegistrationNumber == registrationnumber).Select(e => e.SpecializationId).FirstOrDefault();
            if (firstOrDefault != null)
                faculty.FacultyAddedSpecializationId = (int)firstOrDefault;


            List<SpecializationList> Specializations = new List<SpecializationList>();


            Specializations = (from t in db.jntuh_college_intake_existing
                               join cf in db.jntuh_specialization on t.specializationId equals cf.id
                               join dd in db.jntuh_department on cf.departmentId equals dd.id
                               join de in db.jntuh_degree on dd.degreeId equals de.id
                               where t.collegeId == userCollegeID && t.academicYearId == 10 && t.courseStatus != "Closure" && t.proposedIntake != 0
                               select new SpecializationList
                               {
                                   SpecializationId = cf.id,
                                   SpecializationName = de.degree + "-" + cf.specializationName

                               }).ToList();

            Specializations.Add(new SpecializationList() { SpecializationId = 155, SpecializationName = "BTech-Others(CSE/IT)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 156, SpecializationName = "BTech-Others(CIVIL/MECH)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 157, SpecializationName = "BTech-Others(ECE/EEE)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 158, SpecializationName = "BTech-Others(MNGT/H&S)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 48, SpecializationName = "BTech-Physics" });
            Specializations.Add(new SpecializationList() { SpecializationId = 42, SpecializationName = "BTech-Mathematics" });
            Specializations.Add(new SpecializationList() { SpecializationId = 37, SpecializationName = "BTech-English" });
            Specializations.Add(new SpecializationList() { SpecializationId = 31, SpecializationName = "BTech-Chemistry" });
            ViewBag.Specializations = Specializations;

            faculty.AadhaarFlag =
                db.jntuh_registered_faculty.Where(f => f.RegistrationNumber == registrationnumber.Trim())
                    .Select(s => s.InvalidAadhaar)
                    .FirstOrDefault();



            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult AppealFacultyRegistrationNumberIntegratedBtech(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            //userCollegeID = 4;
            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();

            var physicalpresencpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/PhysicalPresenceReports";
            var appealreverificationSupportdoc = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppealReverificationSupportReports";
            var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";

            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                // UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null ? (int)isRegisteredFaculty.collegeId: 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
               
                //UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                //UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                UpdatedFaculty.SpecializationId = faculty.FacultyAddedSpecializationId;
                var jntuhSpecialization = db.jntuh_specialization.Where(i => i.id == faculty.FacultyAddedSpecializationId).FirstOrDefault();
                if (jntuhSpecialization != null)
                {
                    UpdatedFaculty.DepartmentId = jntuhSpecialization.departmentId;

                    var jntuhDepartment = jntuh_deparment.Where(i => i.id == jntuhSpecialization.departmentId).FirstOrDefault();
                    if (jntuhDepartment != null)
                    {
                        UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                    }
                }

                if (UpdatedFaculty.DegreeId==4)
                {
                     UpdatedFaculty.IdentifiedFor ="UG";
                }
                else
                {
                    UpdatedFaculty.IdentifiedFor = "PG";
                }
                //New Aadhaar Document Save
                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }

                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        UpdatedFaculty.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }
                }

                //544444444444444
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        UpdatedFaculty.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }






                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added for Re-verification.";
                TempData["Error"] = null;
            }

            else
            {
                var facultydata =
                    db.jntuh_appeal_faculty_registered.Where(
                        i => i.RegistrationNumber == faculty.FacultyRegistrationNumber).FirstOrDefault();


                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        facultydata.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }


                }
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        facultydata.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }


                facultydata.SpecializationId = faculty.FacultyAddedSpecializationId;
                var jntuhSpecialization = db.jntuh_specialization.Where(i => i.id == faculty.FacultyAddedSpecializationId).FirstOrDefault();
                if (jntuhSpecialization != null)
                {
                    facultydata.DepartmentId = jntuhSpecialization.departmentId;

                    var jntuhDepartment = jntuh_deparment.Where(i => i.id == jntuhSpecialization.departmentId).FirstOrDefault();
                    if (jntuhDepartment != null)
                    {
                        facultydata.DegreeId = jntuhDepartment.degreeId;
                    }
                }

                if (facultydata.DegreeId == 4)
                {
                    facultydata.IdentifiedFor = "UG";
                }
                else
                {
                    facultydata.IdentifiedFor = "PG";
                }




                facultydata.updatedBy = userID;
                facultydata.updatedOn = DateTime.Now;
                db.Entry(facultydata).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully updated for Re-verification..";
                TempData["Error"] = null;

            }

            return RedirectToAction("AppealReverificationIntegratedBtechFaculty", "FacultyVerification", new
            {
                collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]),
                deficencycount = faculty.Facultydeficencycount,
                degree = faculty.DegreeName,
                departmentid = faculty.facultyDepartmentId,
                specializationid = faculty.SpecializationId
            });
        }

        //Appeal Reverification for Integrated B.Pharmacy Faculty
        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult AppealReverificationIntegratedBpharmacyFaculty(string type, string CollegeId, int deficencycount, int departmentid, string degree, int specializationid)
        {
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            int Collegeid = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(CollegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"])); ;
            var FacultyRegistrationList = new List<FacultyRegistration>();
            if (Collegeid != null)
            {



                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();


                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno && rf.DepartmentId == 61).ToList()
                   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.DepartmentId == 61).ToList();


                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //var RegistrationNumbersCleared =
                //    registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false)
                //             && (rf.NoSCM17 == false) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false) &&
                //             (rf.Blacklistfaculy == false) &&
                //             (rf.MultipleRegInSameCollege == false || rf.MultipleRegInSameCollege == null) &&
                //             rf.NoRelevantUG == "No" && rf.NoRelevantPG == "No" && rf.NORelevantPHD == "No" &&
                //             rf.NotIdentityfiedForanyProgram == false &&
                //             (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) &&
                //             (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) &&
                //             (rf.AppliedPAN == false || rf.AppliedPAN == null) &&
                //             (rf.SamePANUsedByMultipleFaculty == false || rf.SamePANUsedByMultipleFaculty == null) &&
                //             (rf.BASStatusOld == "Y")) && (rf.DepartmentId != 61 || rf.DepartmentId != 27))
                //        .Select(e => e.RegistrationNumber)
                //        .ToArray();

                //var jntuh_registered_faculty1 = registeredFaculty.Where(e => !RegistrationNumbersCleared.Contains(e.RegistrationNumber)).Select(rf => new
                //{
                //    Absent = rf.Absent,
                //    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE,
                //    NoSCM = rf.NoSCM,
                //    PANNumber = rf.PANNumber,
                //    PHDundertakingnotsubmitted = rf.PHDundertakingnotsubmitted,
                //    Notin116 = rf.Notin116,
                //    Blacklistfaculy = rf.Blacklistfaculy,
                //    RegistrationNumber = rf.RegistrationNumber,
                //    Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : "",
                //    HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                //    IsApproved = rf.isApproved,
                //    PanNumber = rf.PANNumber,
                //    AadhaarNumber = rf.AadhaarNumber,
                //    Photo = rf.Photo,
                //    FullName = rf.FirstName + rf.MiddleName + rf.LastName,
                //    FacultyEducation = rf.jntuh_registered_faculty_education
                //}).ToList();


                var jntuh_registered_faculty1 = registeredFaculty.Select(rf => new
                {
                    type = rf.type,
                    Absent = rf.Absent != null ? (bool)rf.Absent : false,
                    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE != null ? (bool)rf.NotQualifiedAsperAICTE : false,
                    // NoSCM = rf.NoSCM17 != null ? (bool)rf.NoSCM17 : false,
                    PANNumber = rf.PANNumber,
                    BlacklistFaculty = rf.Blacklistfaculy != null ? (bool)rf.Blacklistfaculy : false,
                    InvalidPANNo = rf.InvalidPANNumber != null ? (bool)rf.InvalidPANNumber : false,
                    InCompleteCeritificates = rf.IncompleteCertificates != null ? (bool)rf.IncompleteCertificates : false,
                    OriginalCertificatesnotshownFlag = rf.OriginalCertificatesNotShown != null ? (bool)rf.OriginalCertificatesNotShown : false,
                    FalsePAN = rf.FalsePAN != null ? (bool)rf.FalsePAN : false,
                    NOForm16 = rf.NoForm16 != null ? (bool)rf.NoForm16 : false,
                    MultipleReginSamecoll = rf.Invaliddegree != null ? (bool)rf.Invaliddegree : false,
                    XeroxcopyofcertificatesFlag = rf.Xeroxcopyofcertificates != null ? (bool)rf.Xeroxcopyofcertificates : false,
                    NotIdentityFiedForAnyProgramFlag = rf.NotIdentityfiedForanyProgram != null ? (bool)rf.NotIdentityfiedForanyProgram : false,
                    NOrelevantUgFlag = rf.NoRelevantUG == "No" ? false : true,
                    NOrelevantPgFlag = rf.NoRelevantPG == "No" ? false : true,
                    NOrelevantPhdFlag = rf.NORelevantPHD == "No" ? false : true,
                    //NoForm16Verification = rf.Noform16Verification != null ? (bool)rf.Noform16Verification : false,
                    NoSCM17Flag = rf.NoSCM17 != null ? (bool)rf.NoSCM17 : false,
                    //PhotocopyofPAN = rf.PhotoCopyofPAN != null ? (bool)rf.PhotoCopyofPAN : false,
                    PhdUndertakingDocumentstatus = rf.PhdUndertakingDocumentstatus != null ? (bool)(rf.PhdUndertakingDocumentstatus) : false,
                    PHDUndertakingDocumentView = rf.PHDUndertakingDocument,
                    PhdUndertakingDocumentText = rf.PhdUndertakingDocumentText,
                    //AppliedPAN = rf.AppliedPAN != null ? (bool)(rf.AppliedPAN) : false,
                    //SamePANUsedByMultipleFaculty = rf.SamePANUsedByMultipleFaculty != null ? (bool)(rf.SamePANUsedByMultipleFaculty) : false,
                    Basstatus = rf.BAS,
                    Notin116 = rf.Notin116,
                    Blacklistfaculy = rf.Blacklistfaculy,
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : "",
                    HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                    IsApproved = rf.isApproved,
                    PanNumber = rf.PANNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    Photo = rf.Photo,
                    FullName = rf.FirstName + rf.MiddleName + rf.LastName,
                    FacultyEducation = rf.jntuh_registered_faculty_education,
                    DepartmentId = rf.DepartmentId
                }).ToList();


                var RegistrationNumbersCleared = jntuh_registered_faculty1.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false) && (rf.NoSCM17Flag == false) && (rf.PANNumber != null) && (rf.InCompleteCeritificates == false || rf.InCompleteCeritificates == null) && (rf.Blacklistfaculy == false) && (rf.MultipleReginSamecoll == false || rf.MultipleReginSamecoll == null) &&
                       rf.NOrelevantUgFlag == false && rf.NOrelevantPgFlag == false && rf.NOrelevantPhdFlag == false && rf.NotIdentityFiedForAnyProgramFlag == false && (rf.InvalidPANNo == false || rf.InvalidPANNo == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) &&
                    (rf.Basstatus == "Y")) && (rf.DepartmentId != 61 || rf.DepartmentId != 27) && rf.HighestDegreeID >= 4).Select(e => e.RegistrationNumber).ToArray();







                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    Absent = rf.Absent,
                    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE,
                    NoSCM = rf.NoSCM17Flag,
                    PANNumber = rf.PANNumber,
                    PHDundertakingnotsubmitted = rf.PhdUndertakingDocumentstatus,
                    Notin116 = rf.Notin116,
                    Blacklistfaculy = rf.Blacklistfaculy,
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    Photo = rf.Photo,
                    FullName = rf.FullName,
                    faculty_education = rf.FacultyEducation,
                    HighestDegreeID = rf.HighestDegreeID
                }).ToList();


                foreach (var item in jntuh_registered_faculty)
                {
                    var facultyregistered = new FacultyRegistration
                    {
                        RegistrationNumber = item.RegistrationNumber,
                        FirstName = item.FullName,
                        department = item.Department,
                        jntuh_registered_faculty_education = item.faculty_education,
                        facultyPhoto = item.Photo,
                        Absent = item.Absent != null && (bool)item.Absent,
                        NOTQualifiedAsPerAICTE = item.NotQualifiedAsperAICTE != null && (bool)item.NotQualifiedAsperAICTE,
                        NoSCM = item.NoSCM != null && (bool)item.NoSCM,
                        PANNumber = item.PANNumber,
                        PHDundertakingnotsubmitted = item.PHDundertakingnotsubmitted != null && (bool)item.PHDundertakingnotsubmitted,
                        BlacklistFaculty = item.Blacklistfaculy != null && (bool)item.Blacklistfaculy,
                        DegreeId = item.HighestDegreeID
                    };
                    FacultyRegistrationList.Add(facultyregistered);
                }
            }

            ViewBag.collegeid = Collegeid;
            ViewBag.departmentid = departmentid;
            ViewBag.degree = degree;
            ViewBag.specializationid = specializationid;
            ViewBag.deficiencycount = deficencycount;
            return View(FacultyRegistrationList);
            #endregion

        }

        //Reverification Code for Integrated B.Pharmacy Facultyt Dialog  GET And Post Code
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult AppealReverificationIntegratedBPharmacy(string collegeId, string fid, int deficencycount, int departmentid, string degree, string specializationid, string registrationnumber)
        {

            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            //if (userCollegeID == 0 && collegeId != null)
            //{
            //    if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
            //    {
            //        userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
            //    }
            //}

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.registrationnumber = registrationnumber;
            CollegeFaculty faculty = new CollegeFaculty();
            faculty.FacultyRegistrationNumber = registrationnumber;
            faculty.collegeId = Convert.ToInt16(collegeId);
            faculty.DegreeName = degree;
            faculty.SpecializationId = Convert.ToInt16(specializationid);
            faculty.facultyDepartmentId = departmentid;
            faculty.Facultydeficencycount = deficencycount;
            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult AppealFacultyRegistrationNumberIntegratedBPharmacy(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();

            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();

            var physicalpresencpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/PhysicalPresenceReports";
            var appealreverificationSupportdoc = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppealReverificationSupportReports";
            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                var jntuhDepartment = jntuh_deparment.Where(i => i.id == faculty.facultyDepartmentId).FirstOrDefault();
                if (jntuhDepartment != null)
                {
                    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                }
                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        UpdatedFaculty.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }
                }

                //544444444444444
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        UpdatedFaculty.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }






                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added for Re-verification.";
                TempData["Error"] = null;
            }

            else
            {
                var facultydata =
                    db.jntuh_appeal_faculty_registered.Where(
                        i => i.RegistrationNumber == faculty.FacultyRegistrationNumber).FirstOrDefault();


                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        facultydata.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }


                }
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        facultydata.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }

                facultydata.updatedBy = userID;
                facultydata.updatedOn = DateTime.Now;
                db.Entry(facultydata).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully updated for Re-verification..";
                TempData["Error"] = null;

            }

            return RedirectToAction("AppealReverificationIntegratedBpharmacyFaculty", "FacultyVerification", new
            {
                collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]),
                deficencycount = faculty.Facultydeficencycount,
                degree = faculty.DegreeName,
                departmentid = faculty.facultyDepartmentId,
                specializationid = faculty.SpecializationId
            });
        }

        public class Departments
        {
            public int DegreeTypeId { get; set; }
            public int DegreeId { get; set; }
            public string Degree { get; set; }
            public int DepartmentId { get; set; }
            public string Department { get; set; }
            public int SpecializationId { get; set; }
            public string Specialization { get; set; }
        }

        public class MpharmacySpec
        {
            public int MPharmacyspecid { get; set; }
            public string MPharmacyspecname { get; set; }
        }

        #endregion



        #region For Separation of btech,pharmacy faculty

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult ALLCollegeFacultyWithIntakeFaculty()
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            var userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var collegeId = db.jntuh_college_users.Where(u => u.userID == userId).Select(u => u.collegeID).FirstOrDefault();
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            var integreatedIds = new[] { 9, 18, 39, 42, 75, 140, 180, 332, 364, 235 };

            if (integreatedIds.Contains(collegeId))
            {
                return RedirectToAction("IntegratedCollegesFacultyWithIntake", "FacultyVerification");
            }

            var pharmacyids = new[] {6, 24, 27, 30, 34, 44, 47, 52, 54, 55, 58, 60, 65, 78, 90, 95, 97, 104, 105, 107, 110, 114, 117, 118, 120, 127, 135, 136, 139, 146, 150, 159, 169, 202, 204, 206, 213, 219, 234, 237, 252, 253, 262, 263, 267, 283, 290, 295, 297, 298, 301, 302, 303, 313, 314, 315, 317, 318, 319, 320, 348, 353, 370, 376, 379, 384, 389, 392, 395, 410, 428, 436, 442, 445, 448, 454 };

            if (pharmacyids.Contains(collegeId))
            {
                return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification");
            }

            return RedirectToAction("CollegeFacultyBtechWithIntake", "FacultyVerification");
        }

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult CollegeFacultyBtechWithIntake(string type)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            #region Written By Srinivas
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            // Principal Details
            string strPrincipalRegno = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).FirstOrDefault();

            //Reg nos related online facultyIds
            var registeredPrincipal = db.jntuh_registered_faculty.Where(rf => strPrincipalRegno == rf.RegistrationNumber && (rf.collegeId == collegeId)).ToList();


            var jntuh_Principals_registered = registeredPrincipal.Where(rf => rf.DepartmentId != null && rf.DeactivationReason == "")
                                                 .Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.jntuh_department.departmentName,
                                                     HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                     IsApproved = rf.isApproved,
                                                     PanNumber = rf.PANNumber,
                                                     AadhaarNumber = rf.AadhaarNumber
                                                 }).ToList();
            ViewBag.PrincipalRegno = strPrincipalRegno;
            if (jntuh_Principals_registered.Count > 0)
                ViewBag.PrincipalDeficiency = "NO";
            else
                ViewBag.PrincipalDeficiency = "YES";
            #endregion

           #region Faculty Old Code
            //var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            //{
            //    collegeId = c.id,
            //    collegeName = c.collegeCode + "-" + c.collegeName
            //}).OrderBy(c => c.collegeName).ToList();

            ////colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            //ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            //List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            //List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            //if (collegeId != null)
            //{
            //    int userCollegeID = (int)collegeId;
            //    var jntuh_specialization = db.jntuh_specialization.ToList();
            //    int[] collegeIDs = null;
            //    int facultystudentRatio = 0;
            //    decimal facultyRatio = 0m;
            //    if (collegeId != 0)
            //    {
            //        collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
            //    }
            //    else
            //    {
            //        collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
            //    }
            //    var jntuh_academic_year = db.jntuh_academic_year.ToList();
            //    var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
            //    var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
            //    var jntuh_degree = db.jntuh_degree.ToList();

            //    int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            //    var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
            //    int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();


            //    int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
            //    int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
            //    int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
            //    int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
            //    int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();

            //    List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
            //    foreach (var item in intake)
            //    {
            //        CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
            //        newIntake.id = item.id;
            //        newIntake.collegeId = item.collegeId;
            //        newIntake.academicYearId = item.academicYearId;
            //        newIntake.shiftId = item.shiftId;
            //        newIntake.isActive = item.isActive;
            //        newIntake.nbaFrom = item.nbaFrom;
            //        newIntake.nbaTo = item.nbaTo;
            //        newIntake.specializationId = item.specializationId;
            //        newIntake.Specialization = item.jntuh_specialization.specializationName;
            //        newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
            //        newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
            //        newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
            //        newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
            //        newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
            //        newIntake.shiftId = item.shiftId;
            //        newIntake.Shift = item.jntuh_shift.shiftName;
            //        newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
            //        collegeIntakeExisting.Add(newIntake);
            //    }
            //    collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

            //    var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
            //    var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

            //    //college Reg nos
            //    var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
            //    string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

            //    //education categoryIds UG,PG,PHD...........
            //    var jntuh_education_category = db.jntuh_education_category.ToList();

            //    //Reg nos related online facultyIds
            //    var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
            //        : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& (rf.collegeId == null || rf.collegeId == collegeId)
            //    //Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
            //    var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

            //    var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.DepartmentId != null && ((rf.Absent != true) && (rf.NotQualifiedAsperAICTE != true)
            //                                            && (rf.NoSCM != true) && (rf.PANNumber != null) && rf.Notin116 != true && rf.PHDundertakingnotsubmitted != true && rf.Blacklistfaculy != true
            //                                            && (rf.type != "Adjunct"))).Select(rf => new
            //                                            {
            //                                                RegistrationNumber = rf.RegistrationNumber,
            //                                                Department = rf.jntuh_department.departmentName,
            //                                                HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
            //                                                IsApproved = rf.isApproved,
            //                                                PanNumber = rf.PANNumber,
            //                                                AadhaarNumber = rf.AadhaarNumber,
            //                                                TotalExperience = rf.TotalExperience
            //                                            }).ToList();
            //    jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
            //    var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
            //    {
            //        RegistrationNumber = rf.RegistrationNumber,
            //        Department = rf.Department,
            //        HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
            //        Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.IdentifiedFor).FirstOrDefault(),
            //        SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
            //        PanNumber = rf.PanNumber,
            //        AadhaarNumber = rf.AadhaarNumber,
            //        TotalExperience = rf.TotalExperience
            //    }).Where(e => e.Department != null).ToList();

            //    var jjj = jntuh_registered_faculty.Where(i => i.Department == "CSE").ToList();
            //    var pharmacydeptids = new[] { 26, 27, 36, 39 };
            //    collegeIntakeExisting = collegeIntakeExisting.Where(i => !pharmacydeptids.Contains(i.DepartmentID)).ToList();
            //    foreach (var item in collegeIntakeExisting)
            //    {
            //        CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
            //        int phdFaculty = 0;
            //        int pgFaculty = 0;
            //        int ugFaculty = 0;


            //        intakedetails.collegeId = item.collegeId;
            //        intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
            //        intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
            //        intakedetails.Degree = item.Degree;
            //        intakedetails.Department = item.Department;
            //        intakedetails.Specialization = item.Specialization;
            //        intakedetails.specializationId = item.specializationId;
            //        intakedetails.DepartmentID = item.DepartmentID;
            //        intakedetails.shiftId = item.shiftId;

            //        intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
            //        intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
            //        intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
            //        intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);

            //        facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

            //        if (item.Degree == "B.Tech")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
            //                                        (intakedetails.approvedIntake4);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
            //                           Convert.ToDecimal(facultystudentRatio);
            //            //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
            //        }
            //        else if (item.Degree == "M.Tech" || item.Degree == "MBA")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
            //                           Convert.ToDecimal(facultystudentRatio);

            //        }
            //        else if (item.Degree == "MCA")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
            //                                        (intakedetails.approvedIntake3);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
            //                           Convert.ToDecimal(facultystudentRatio);
            //        }
            //        else if (item.Degree == "B.Pharmacy")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
            //                                        (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;

            //        }
            //        else if (item.Degree == "M.Pharmacy")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;

            //        }
            //        else if (item.Degree == "Pharm.D")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
            //                                        (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
            //                                        (intakedetails.approvedIntake5);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
            //        }
            //        else if (item.Degree == "Pharm.D PB")
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
            //        }
            //        else //MAM MTM Pharm.D Pharm.D PB
            //        {
            //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
            //                                        (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
            //                                        (intakedetails.approvedIntake5);
            //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
            //                           Convert.ToDecimal(facultystudentRatio);
            //        }
            //        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
            //        intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

            //        string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
            //        if (strdegreetype == "UG")
            //        {
            //            if (item.Degree == "B.Pharmacy")
            //            {
            //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
            //            }
            //            else if (item.Degree == "Pharm.D")
            //            {
            //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
            //            }
            //            else if (item.Degree == "Pharm.D PB")
            //            {
            //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
            //            }
            //            else
            //            {
            //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department);//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
            //            }
            //        }
            //        if (strdegreetype == "PG")
            //        {
            //            if (item.Degree == "M.Pharmacy")
            //            {
            //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" &&
            //                    f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
            //            }
            //            else
            //            {
            //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department &&
            //                            f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
            //                intakedetails.specializationWiseFacultyPHDFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
            //            }
            //        }

            //        if (strdegreetype == "Dual Degree")
            //        {
            //            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
            //        }
            //        if (item.Degree == "B.Pharmacy")
            //        {
            //            ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
            //            pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
            //            phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
            //            //intakedetails.Department = "Pharmacy";
            //        }
            //        if (item.Degree == "M.Pharmacy")
            //        {
            //            ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
            //            pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) &&
            //                        f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
            //            phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
            //            //noPanOrAadhaarcount =registeredFaculty.Where(f =>f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null &&
            //            //            (f.isApproved == null || f.isApproved == true)).Count();
            //            //intakedetails.Department = "Pharmacy";
            //        }
            //        else if (item.Degree == "Pharm.D")
            //        {
            //            ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
            //            pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
            //            phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
            //            //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
            //            intakedetails.Department = "Pharm.D";
            //        }
            //        else if (item.Degree == "Pharm.D PB")
            //        {
            //            ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
            //            pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
            //            phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
            //            //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
            //            intakedetails.Department = "Pharm.D PB";
            //        }
            //        else
            //        {
            //            ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
            //            pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == item.Department);
            //            phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);


            //        }


            //        intakedetails.phdFaculty = phdFaculty;
            //        intakedetails.pgFaculty = pgFaculty;
            //        intakedetails.ugFaculty = ugFaculty;
            //        intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
            //        //=============//


            //        intakedetailsList.Add(intakedetails);
            //    }
            //    intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

            //    string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others" };
            //    int btechdegreecount = intakedetailsList.Where(d => d.Degree == "B.Tech").Count();
            //    var jntuh_departments = db.jntuh_department.ToList();
            //    if (btechdegreecount != 0)
            //    {
            //        foreach (var department in strOtherDepartments)
            //        {
            //            int speId = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.id).FirstOrDefault();
            //            var deptname = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.departmentName).FirstOrDefault();
            //            var deparmentid = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.departmentId).FirstOrDefault();
            //            int ugFaculty = jntuh_registered_faculty.Where(f => f.Department == department && f.HighestDegree == "UG").Count();
            //            int pgFaculty = jntuh_registered_faculty.Where(f => (f.HighestDegree == "PG" || f.HighestDegree == "M.Phil / Other PG Degree") && f.Department == department).Count();
            //            int phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == department).Count();
            //            intakedetailsList.Add(new CollegeFacultyWithIntakeReport
            //            {
            //                collegeId = (int)collegeId,
            //                Degree = "B.Tech",
            //                Department = department,
            //                Specialization = department,
            //                ugFaculty = ugFaculty,
            //                pgFaculty = pgFaculty,
            //                phdFaculty = phdFaculty,
            //                totalFaculty = ugFaculty + pgFaculty + phdFaculty,
            //                specializationId = speId,
            //                shiftId = 1,
            //                DepartmentID = department != "Others" ? deparmentid : 60,
            //                specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == deptname)
            //            });

            //        }
            //    }

            //    List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.Where(i => i.shiftId == 1).ToList();
            //    int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech").Select(d => d.approvedIntake1).Sum();
            //    var degrees = db.jntuh_degree.ToList();
            //    var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 150);
            //    int remainingFaculty = 0;
            //    int remainingPHDFaculty = 0;
            //    decimal departmentWiseRequiredFaculty = 0;
            //    var distDeptcount = 1;
            //    var deptloop = 1;
            //    intakedetailsList = intakedetailsList.Where(i => i.shiftId == 1).ToList();
            //    foreach (var item in intakedetailsList)
            //    {

            //        var SpecializationwisePHDFaculty = 0;
            //        if (item.Degree == "M.Tech" || item.Degree == "B.Tech")
            //            SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "M.Tech" && D.shiftId == 1).Distinct().Count();
            //        else if (item.Degree == "MCA")
            //            SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MCA" && D.shiftId == 1).Distinct().Count();
            //        else if (item.Degree == "MBA")
            //            SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MBA" && D.shiftId == 1).Distinct().Count();
            //        SpecializationwisePHDFaculty = SpecializationwisePHDFaculty * 2;

            //        distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

            //        int indexnow = facultyCounts.IndexOf(item);

            //        if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
            //        {
            //            deptloop = 1;
            //        }

            //        departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

            //        string minimumRequirementMet = string.Empty;
            //        int facultyShortage = 0;
            //        int adjustedFaculty = 0;
            //        int adjustedPHDFaculty = 0;

            //        int tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));//item.totalFaculty
            //        int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

            //        if (strOtherDepartments.Contains(item.Department))
            //        {
            //            rFaculty = (int)firstYearRequired;
            //            departmentWiseRequiredFaculty = (int)firstYearRequired;
            //        }

            //        var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

            //        if (deptloop == 1)
            //        {
            //            if (rFaculty <= tFaculty)
            //            {
            //                minimumRequirementMet = "YES";
            //                item.deficiency = false;
            //                remainingFaculty = tFaculty - rFaculty;
            //                adjustedFaculty = rFaculty;//tFaculty
            //                item.BtechAdjustedFaculty = adjustedFaculty;
            //            }
            //            else
            //            {
            //                minimumRequirementMet = "NO";
            //                item.deficiency = true;
            //                adjustedFaculty = tFaculty;
            //                item.BtechAdjustedFaculty = adjustedFaculty;
            //                facultyShortage = rFaculty - tFaculty;
            //            }

            //            remainingPHDFaculty = item.phdFaculty;

            //            if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
            //            {
            //                //adjustedPHDFaculty = 1;
            //                item.PHDdeficiency = false;
            //                adjustedPHDFaculty = remainingPHDFaculty;
            //                item.AvailablePHDFaculty = 0;
            //                intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = false);
            //                remainingPHDFaculty = remainingPHDFaculty - 1;
            //            }
            //            else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
            //            {
            //                //adjustedPHDFaculty = 1;
            //                item.PHDdeficiency = true;
            //                adjustedPHDFaculty = remainingPHDFaculty;
            //                item.AvailablePHDFaculty = 2;
            //                intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
            //                remainingPHDFaculty = remainingPHDFaculty - 1;
            //            }
            //        }
            //        else
            //        {
            //            if (rFaculty <= remainingFaculty)
            //            {
            //                minimumRequirementMet = "YES";
            //                item.deficiency = false;
            //                if (rFaculty <= item.specializationWiseFaculty)
            //                {
            //                    remainingFaculty = remainingFaculty - rFaculty;
            //                    adjustedFaculty = rFaculty;
            //                    item.BtechAdjustedFaculty = adjustedFaculty;
            //                }

            //                else if (rFaculty >= item.specializationWiseFaculty)
            //                {
            //                    remainingFaculty = remainingFaculty - item.specializationWiseFaculty;
            //                    adjustedFaculty = item.specializationWiseFaculty;
            //                    item.deficiency = true;
            //                    item.BtechAdjustedFaculty = adjustedFaculty;
            //                }
            //            }
            //            else
            //            {
            //                minimumRequirementMet = "NO";
            //                item.deficiency = true;
            //                adjustedFaculty = remainingFaculty;
            //                item.BtechAdjustedFaculty = adjustedFaculty;
            //                facultyShortage = rFaculty - remainingFaculty;
            //                remainingFaculty = 0;
            //            }
            //            remainingPHDFaculty = item.phdFaculty;
            //            if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
            //            {
            //                //adjustedPHDFaculty = 1;
            //                item.PHDdeficiency = false;
            //                adjustedPHDFaculty = remainingPHDFaculty;
            //                item.AvailablePHDFaculty = 0;
            //                intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = false);
            //                remainingPHDFaculty = remainingPHDFaculty - 1;
            //            }
            //            else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
            //            {
            //                //adjustedPHDFaculty = 1;
            //                item.PHDdeficiency = true;
            //                adjustedPHDFaculty = remainingPHDFaculty;
            //                item.AvailablePHDFaculty = 2;
            //                intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
            //                remainingPHDFaculty = remainingPHDFaculty - 1;
            //            }
            //        }
            //        //if (adjustedPHDFaculty > 0)
            //        //{
            //        //    item.PHDdeficiency = false;
            //        //}
            //        //else if (item.approvedIntake1 > 0)
            //        //{
            //        //    item.PHDdeficiency = true;
            //        //    item.AvailablePHDFaculty = 1;
            //        //}
            //        if (strOtherDepartments.Contains(item.Department))
            //        {
            //            item.totalIntake = totalBtechFirstYearIntake;
            //            item.requiredFaculty = Math.Ceiling((decimal)firstYearRequired);
            //        }
            //        deptloop++;
            //    }
           #endregion
           var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                int userCollegeID = (int)collegeId;
                var jntuh_specialization = db.jntuh_specialization.ToList();
                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_departments = db.jntuh_department.ToList();
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
                var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //New 
                var DeptNameBasedOnSpecialization = (from a in db.jntuh_department
                                                     join b in db.jntuh_specialization on a.id equals b.departmentId
                                                     select new
                                                     {
                                                         DeptId = a.id,
                                                         DeptName = a.departmentName,
                                                         Specid = b.id
                                                     }).ToList();




                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //Reg nos related online facultyIds
                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList()
                    : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& rf.RegistrationNumber != principalRegno
                //&& (rf.collegeId == null || rf.collegeId == collegeId)
                //Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
                var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.OriginalCertificatesNotShown == false) && (rf.Xeroxcopyofcertificates == false || rf.Xeroxcopyofcertificates == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null)
                                                        && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false || rf.IncompleteCertificates == null) && (rf.Blacklistfaculy == false) && rf.NoRelevantUG != "Yes" && rf.NoRelevantPG != "Yes" && rf.NORelevantPHD != "Yes" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.OriginalsVerifiedPHD != true) && (rf.OriginalsVerifiedUG != true) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS != "Yes") && rf.InvalidAadhaar != "Yes" && (rf.DepartmentId != 61 || rf.DepartmentId != 27))
                                                        .Select(rf => new
                                                        {
                                                            RegistrationNumber = rf.RegistrationNumber,
                                                            DeptId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.DepartmentId).FirstOrDefault(),
                                                            SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
                                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                            IsApproved = rf.isApproved,
                                                            PanNumber = rf.PANNumber,
                                                            AadhaarNumber = rf.AadhaarNumber,
                                                            TotalExperience = rf.TotalExperience
                                                        }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.DeptId != null ? jntuh_departments.Where(e => e.id == rf.DeptId).Select(e => e.departmentName).FirstOrDefault() : DeptNameBasedOnSpecialization.Where(e => e.Specid == rf.SpecializationId).Select(e => e.DeptName).FirstOrDefault(),
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    rf.SpecializationId,
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    TotalExperience = rf.TotalExperience
                }).Where(e => e.Department != null).ToList();


                var pharmacydeptids = new[] { 26, 27, 36, 39 };
                collegeIntakeExisting = collegeIntakeExisting.Where(i => !pharmacydeptids.Contains(i.DepartmentID)).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;
                    int SpecializationphdFaculty = 0;
                    int SpecializationpgFaculty = 0;
                    intakedetails.isintakeeditable = false;
                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.DegreeId = item.degreeID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntakeBtech(item.collegeId, AY1, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake2 = GetIntakeBtech(item.collegeId, AY2, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake3 = GetIntakeBtech(item.collegeId, AY3, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake4 = GetIntakeBtech(item.collegeId, AY4, item.specializationId, item.shiftId, 1, item.degreeID);
                    intakedetails.approvedIntake5 = GetIntakeBtech(item.collegeId, AY5, item.specializationId, item.shiftId, 1, item.degreeID);


                    intakedetails.AffiliationStatus2 = GetAcademicYear(item.collegeId, AY1, item.specializationId, item.shiftId, item.degreeID);
                    intakedetails.AffiliationStatus3 = GetAcademicYear(item.collegeId, AY2, item.specializationId, item.shiftId, item.degreeID);
                    intakedetails.AffiliationStatus4 = GetAcademicYear(item.collegeId, AY3, item.specializationId, item.shiftId, item.degreeID);

                    if (item.degreeID == 4)
                    {
                        intakedetails.SanctionIntake1 = GetIntakeBtech(item.collegeId, AY1, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake2 = GetIntakeBtech(item.collegeId, AY2, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake3 = GetIntakeBtech(item.collegeId, AY3, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake4 = GetIntakeBtech(item.collegeId, AY4, item.specializationId, item.shiftId, 0, item.degreeID);
                        intakedetails.SanctionIntake5 = GetIntakeBtech(item.collegeId, AY5, item.specializationId, item.shiftId, 0, item.degreeID);
                    }



                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {

                        //Take Higest of 3 Years Of Admitated Intake
                        //approvedIntake1 means Proposed Intake of Present Year
                        int SanctionIntakeHigest = Max(intakedetails.approvedIntake2, intakedetails.approvedIntake3, intakedetails.approvedIntake4);
                        SanctionIntakeHigest = GetBtechAdmittedIntake(SanctionIntakeHigest);
                        int senondyearpercentage = 0;
                        int thirdyearpercentage = 0;
                        int fourthyearpercentage = 0;
                        if (intakedetails.SanctionIntake2 != 0)
                        {
                            senondyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(intakedetails.approvedIntake2) / Convert.ToDecimal(intakedetails.SanctionIntake2)) * 100));
                        }
                        if (intakedetails.SanctionIntake3 != 0)
                        {
                            thirdyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(intakedetails.approvedIntake3) / Convert.ToDecimal(intakedetails.SanctionIntake3)) * 100));
                        }
                        if (intakedetails.SanctionIntake4 != 0)
                        {
                            fourthyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(intakedetails.approvedIntake4) / Convert.ToDecimal(intakedetails.SanctionIntake4)) * 100));
                        }

                        if (senondyearpercentage < 25 && thirdyearpercentage < 25 && fourthyearpercentage < 25)
                        {
                            intakedetails.ispercentage = true;
                            //studentcount
                            if ((intakedetails.approvedIntake2 >= 15 || intakedetails.approvedIntake3 >= 15 || intakedetails.approvedIntake4 >= 15) && intakedetails.approvedIntake1 != 0)
                            {
                                intakedetails.ispercentage = false;
                                intakedetails.isintakeeditable = true;
                                //intakedetails = false;
                                //intakedetails.ReducedInatke = 60;
                                //if (intakedetails.approvedIntake1 != 60)
                                //{
                                //    intakedetails.Note = "(Reduced from Proposed Intake of <b>";
                                //    intakedetails.Note += intakedetails.approvedIntake1;
                                //    intakedetails.Note += "</b> as per 25% Clause)";
                                //    intakedetails.approvedIntake1 = 60;
                                //}
                            }                          
                        }
                        if (intakedetails.ispercentage == false)
                        {
                            if (intakedetails.isintakeeditable == true)
                            {
                                intakedetails.admittedIntake2 = GetBtechAdmittedIntake(intakedetails.SanctionIntake2);
                                intakedetails.admittedIntake3 = GetBtechAdmittedIntake(intakedetails.SanctionIntake3);
                                intakedetails.admittedIntake4 = GetBtechAdmittedIntake(intakedetails.SanctionIntake4);
                            }
                            else if (SanctionIntakeHigest >= intakedetails.approvedIntake1)
                            {
                                //New Code 
                                intakedetails.admittedIntake2 = GetBtechAdmittedIntake(intakedetails.approvedIntake2);
                                intakedetails.admittedIntake3 = GetBtechAdmittedIntake(intakedetails.approvedIntake3);
                                intakedetails.admittedIntake4 = GetBtechAdmittedIntake(intakedetails.approvedIntake4);

                              

                            }
                            else
                            {
                                intakedetails.admittedIntake2 = GetBtechAdmittedIntake(intakedetails.SanctionIntake2);
                                intakedetails.admittedIntake3 = GetBtechAdmittedIntake(intakedetails.SanctionIntake3);
                                intakedetails.admittedIntake4 = GetBtechAdmittedIntake(intakedetails.SanctionIntake4);
                            }

                            intakedetails.totalIntake = (intakedetails.admittedIntake2) + (intakedetails.admittedIntake3) +
                                                        (intakedetails.admittedIntake4);
                            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                           Convert.ToDecimal(facultystudentRatio);


                            intakedetails.totalAdmittedIntake = (intakedetails.SanctionIntake2) + (intakedetails.SanctionIntake3) + (intakedetails.SanctionIntake4);
                        }

                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        if (item.Degree == "M.Tech")
                        {
                            if (item.Degree == "M.Tech" && item.shiftId == 1)
                            {
                                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                               Convert.ToDecimal(facultystudentRatio);
                                int fratio = (int)facultyRatio;
                                if (fratio < 3)
                                {
                                    fratio = 3;
                                    facultyRatio = Convert.ToDecimal(fratio);
                                }
                            }
                            if (item.Degree == "M.Tech" && item.shiftId == 2)
                            {
                                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                               Convert.ToDecimal(facultystudentRatio);
                                int fratio = (int)facultyRatio;
                                if (fratio < 3)
                                {
                                    fratio = 3;
                                    facultyRatio = Convert.ToDecimal(fratio);
                                }
                                facultyRatio = facultyRatio / 2;
                            }
                        }
                        else
                        {
                            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                           Convert.ToDecimal(facultystudentRatio);
                        }
                        

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                    }
                    intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D PB")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department);//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
                        }
                    }
                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG"));//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                            intakedetails.specializationWiseFacultyPHDFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
                    }
                    if (item.Degree == "B.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);

                    }
                    if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) &&
                                    f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        intakedetails.Department = "Pharm.D";
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);

                        intakedetails.Department = "Pharm.D PB";
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil / Other PG Degree" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        if (item.Degree == "B.Tech")
                            SpecializationphdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && (f.SpecializationId == item.specializationId || f.SpecializationId == null) && f.Department == item.Department);
                        else
                            SpecializationphdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        var reg = jntuh_registered_faculty.Where(f => f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")).Select(S => S.RegistrationNumber).ToList();
                        SpecializationpgFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG"));

                    }


                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.SpecializationsphdFaculty = SpecializationphdFaculty;
                    intakedetails.SpecializationspgFaculty = SpecializationpgFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
                    //=============//


                    intakedetailsList.Add(intakedetails);
                }
                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();
                int[] OthersSpecIds = new int[] { 155, 156, 157, 158 };
                string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others(CSE/IT)", "Others(CIVIL/MECH)", "Others(ECE/EEE)", "Others(MNGT/H&S)" };
                int btechdegreecount = intakedetailsList.Count(d => d.Degree == "B.Tech");

                if (btechdegreecount != 0)
                {
                    foreach (var department in strOtherDepartments)
                    {
                        int speId = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.id).FirstOrDefault();
                        var deptname = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.departmentName).FirstOrDefault();
                        var degreeId = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.degreeId).FirstOrDefault();
                        var deparmentid = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.departmentId).FirstOrDefault();
                        int ugFaculty = jntuh_registered_faculty.Count(f => f.Department == department && f.HighestDegree == "UG");
                        int pgFaculty = jntuh_registered_faculty.Count(f => (f.HighestDegree == "PG" || f.HighestDegree == "M.Phil / Other PG Degree") && f.Department == department);
                        int phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == department);
                        intakedetailsList.Add(new CollegeFacultyWithIntakeReport
                        {
                            collegeId = (int)collegeId,
                            Degree = "B.Tech",
                            Department = department,
                            Specialization = department,
                            DegreeId = degreeId,
                            ugFaculty = ugFaculty,
                            pgFaculty = pgFaculty,
                            phdFaculty = phdFaculty,
                            totalFaculty = ugFaculty + pgFaculty + phdFaculty,
                            specializationId = speId,
                            shiftId = 1,
                            DepartmentID = deparmentid,
                            specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == deptname),
                            approvedIntake1 = 1
                        });

                    }
                }

                List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.Where(i => i.shiftId == 1 || i.shiftId == 2).ToList();
                List<CollegeFacultyWithIntakeReport> facultyCountsmetechsecond = facultyCounts.Where(c => c.shiftId == 2).Select(e => e).ToList();
                foreach (var item in facultyCountsmetechsecond)
                {
                    int id =
                        facultyCounts.Where(
                            s => s.specializationId == item.specializationId && s.shiftId == 1 && s.Degree == "M.Tech" && s.approvedIntake1 != 0)
                            .Select(s => s.shiftId)
                            .FirstOrDefault();
                    if (id == 0)
                    {
                        facultyCounts.Remove(item);
                    }
                }
                List<CollegeFacultyWithIntakeReport> facultyCountper = intakedetailsList.Where(c =>c.collegeId==userCollegeID && ((c.ispercentage==true&&c.approvedIntake1 != 0 && c.Degree == "B.Tech") || c.approvedIntake1 == 0 && c.Degree == "B.Tech")).Select(e => e).ToList();
                foreach (var itemmtech in facultyCountper)
                {
                    if (itemmtech.collegeId == 72 && itemmtech.Department == "IT")
                    {
                    }
                    else if (itemmtech.collegeId == 130 && itemmtech.Department == "IT")
                    {

                    }
                    else
                    {
                        List<CollegeFacultyWithIntakeReport> notshownmtech = facultyCounts.Where(
                           s => s.Department == itemmtech.Department && s.Degree == "M.Tech" && s.approvedIntake1 != 0)
                           .Select(s => s)
                           .ToList();
                        if (notshownmtech.Count() != 0)
                        {
                            // facultyCounts.Remove(itemmtech);
                            foreach (var removemtech in notshownmtech)
                            {
                                facultyCounts.Remove(removemtech);
                            }

                        }
                    }                                  
                }

                int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech" && !strOtherDepartments.Contains(d.Department)).Select(d => d.approvedIntake1).Sum();
                var degrees = db.jntuh_degree.ToList();
                var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 160);
                int remainingFaculty = 0;
                int remainingPHDFaculty = 0;
                decimal departmentWiseRequiredFaculty = 0;
                var distDeptcount = 1;
                var deptloop = 1;
                int HumantitiesminimamRequireMet = 0;
                string HumantitiesminimamRequireMetStatus = "Yes";

                // var TotalRequiredHumanitiesFacultyCount = Math.Ceiling((double)totalBtechFirstYearIntake / 20);
                // ViewBag.TotalRequiredHumanitiesFacultyCount = TotalRequiredHumanitiesFacultyCount;

                intakedetailsList = facultyCounts.Where(i => i.shiftId == 1 || i.shiftId == 2).ToList();


                foreach (var item in intakedetailsList)
                {

                    var SpecializationwisePHDFaculty = 0;
                    //if (item.Degree == "M.Tech" || item.Degree == "B.Tech")
                    //    SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "M.Tech" && D.shiftId == 1).Distinct().Count();
                    //else if (item.Degree == "MCA")
                    //    SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MCA" && D.shiftId == 1).Distinct().Count();
                    //else if (item.Degree == "MBA")
                    //    SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MBA" && D.shiftId == 1).Distinct().Count();
                    //SpecializationwisePHDFaculty = SpecializationwisePHDFaculty * 2;

                    if (item.Degree == "M.Tech" || item.Degree == "MCA" || item.Degree == "MBA" || item.Degree == "5-Year MBA(Integrated)")
                    {

                        if (item.Degree == "M.Tech")
                        {
                            if (item.shiftId ==1)
                            {
                                SpecializationwisePHDFaculty = IntakeWisePhdForMtech(item.approvedIntake1,item.shiftId);
                            }
                            if (item.shiftId == 2)
                            {
                                SpecializationwisePHDFaculty = IntakeWisePhdForMtech(item.approvedIntake1, item.shiftId);
                            }
                        }
                        else if (item.Degree == "MCA")
                        {
                            SpecializationwisePHDFaculty = IntakeWisePhdForMBAandMCA(item.approvedIntake1);
                        }
                        else if (item.Degree == "MBA" || item.Degree == "5-Year MBA(Integrated)")
                        {
                            SpecializationwisePHDFaculty = IntakeWisePhdForMBAandMCA(item.approvedIntake1);
                        }


                    }
                    else if (item.Degree == "B.Tech")
                    {
                        SpecializationwisePHDFaculty = IntakeWisePhdForBtech(item.approvedIntake1);
                    }


                    distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

                    int indexnow = facultyCounts.IndexOf(item);

                    if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
                    {
                        deptloop = 1;
                    }

                    departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

                    string minimumRequirementMet = string.Empty;
                    string PhdminimumRequirementMet = string.Empty;
                    int facultyShortage = 0;
                    int adjustedFaculty = 0;
                    int adjustedPHDFaculty = 0;
                    int tFaculty = 0;
                    int othersRequiredfaculty = 0;

                    if (item.Department == "MBA" || item.Department == "MCA")
                        tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.totalFaculty)); //item.totalFaculty
                    else
                        tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));
                    int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

                    if (strOtherDepartments.Contains(item.Department))
                    {
                        if (OthersSpecIds.Contains(item.specializationId))
                        {

                            double rid = (double)(firstYearRequired / 2);
                            rFaculty = (int)(Math.Ceiling(rid));
                            // rFaculty = (int)firstYearRequired;
                            // othersRequiredfaculty = 1;
                        }
                        else
                        {
                            rFaculty = (int)firstYearRequired;
                        }
                    }

                    var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = false;
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;//tFaculty
                            item.BtechAdjustedFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = true;
                            adjustedFaculty = tFaculty;
                            item.BtechAdjustedFaculty = adjustedFaculty;
                            facultyShortage = rFaculty - tFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)//item.requiredFaculty
                        {

                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;

                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }
                            else
                            {
                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;
                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;

                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }
                            }

                        }
                        else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)//item.requiredFaculty
                        {
                            //adjustedPHDFaculty = 1;
                            item.PHDdeficiency = true;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            //adjustedPHDFaculty = remainingPHDFaculty;
                            //item.AvailablePHDFaculty = 2;
                            //intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
                            //remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty > 0)
                        {
                            //remainingPHDFaculty = remainingPHDFaculty - SpecializationwisePHDFaculty;
                            //adjustedPHDFaculty = SpecializationwisePHDFaculty;
                            if (remainingPHDFaculty >= SpecializationwisePHDFaculty)//item.SpecializationsphdFaculty
                            {
                                remainingPHDFaculty = remainingPHDFaculty - SpecializationwisePHDFaculty;
                                adjustedPHDFaculty = SpecializationwisePHDFaculty; //item.SpecializationsphdFaculty;
                                PhdminimumRequirementMet = "YES";
                                item.PHDdeficiency = false;
                            }
                            else if (remainingPHDFaculty <= SpecializationwisePHDFaculty)//item.SpecializationsphdFaculty
                            {

                                adjustedPHDFaculty = remainingPHDFaculty;//SpecializationwisePHDFaculty;
                                remainingPHDFaculty = 0;//remainingPHDFaculty - SpecializationwisePHDFaculty;
                                // adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                PhdminimumRequirementMet = "NO";
                                item.PHDdeficiency = true;
                            }



                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty <= 0)
                        {
                            // remainingPHDFaculty = SpecializationwisePHDFaculty - remainingPHDFaculty;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;

                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("UG")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (adjustedPHDFaculty <= 0 && (degreeType.Equals("PG")))
                        {
                            PhdminimumRequirementMet = "YES";
                            item.PHDdeficiency = false;
                        }
                        //Dual Degree Checking
                        else if (remainingPHDFaculty >= 2 && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty > 0)
                        {
                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }
                            else
                            {

                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;

                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }

                        }
                        else if (remainingPHDFaculty <= 1 && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty >= 0)
                        {
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("Dual Degree")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }


                    }
                    else
                    {
                        if (rFaculty <= remainingFaculty)
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = false;
                            if (rFaculty <= item.specializationWiseFaculty)
                            {
                                remainingFaculty = remainingFaculty - rFaculty;
                                adjustedFaculty = rFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }

                            else if (rFaculty >= item.specializationWiseFaculty)
                            {
                                remainingFaculty = remainingFaculty - item.specializationWiseFaculty;
                                adjustedFaculty = item.specializationWiseFaculty;
                                item.deficiency = true;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = true;
                            //adjustedFaculty = remainingFaculty;
                            //item.BtechAdjustedFaculty = adjustedFaculty;
                            //facultyShortage = rFaculty - remainingFaculty;
                            //remainingFaculty = 0;
                            if (remainingFaculty >= item.specializationWiseFaculty)
                            {

                                remainingFaculty = remainingFaculty - item.specializationWiseFaculty;
                                adjustedFaculty = item.specializationWiseFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }
                            else
                            {

                                adjustedFaculty = remainingFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                                remainingFaculty = 0;
                            }
                        }
                        //remainingPHDFaculty = item.phdFaculty;
                        //if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
                        //{
                        //    //adjustedPHDFaculty = 1;
                        //    item.PHDdeficiency = false;
                        //    adjustedPHDFaculty = remainingPHDFaculty;
                        //    item.AvailablePHDFaculty = 0;
                        //    intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = false);
                        //    remainingPHDFaculty = remainingPHDFaculty - 1;
                        //}
                        //else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.requiredFaculty > 0)
                        //{
                        //    //adjustedPHDFaculty = 1;
                        //    item.PHDdeficiency = true;
                        //    adjustedPHDFaculty = remainingPHDFaculty;
                        //    item.AvailablePHDFaculty = 2;
                        //    intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
                        //    remainingPHDFaculty = remainingPHDFaculty - 1;
                        //}

                        //New  Code
                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)
                        {

                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }
                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }
                            else
                            {

                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;

                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }

                                else
                                {
                                    PhdminimumRequirementMet = "NO";
                                    item.PHDdeficiency = true;
                                }

                            }

                        }
                        else if (remainingPHDFaculty <= 1 && (degreeType.Equals("PG")) && item.SpecializationsphdFaculty > 0)
                        {

                            adjustedPHDFaculty = remainingPHDFaculty;

                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty > 0)
                        {

                            if (item.SpecializationsphdFaculty >= SpecializationwisePHDFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                PhdminimumRequirementMet = "YES";
                                item.PHDdeficiency = false;
                            }
                            else if (item.SpecializationsphdFaculty <= SpecializationwisePHDFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - SpecializationwisePHDFaculty;
                                adjustedPHDFaculty = SpecializationwisePHDFaculty;
                                PhdminimumRequirementMet = "YES";
                                item.PHDdeficiency = false;
                            }

                        }
                        else if (SpecializationwisePHDFaculty > 0 && (degreeType.Equals("UG")) && remainingPHDFaculty <= 0)
                        {

                            adjustedPHDFaculty = remainingPHDFaculty;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("UG")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (adjustedPHDFaculty <= 0 && (degreeType.Equals("PG")))
                        {
                            PhdminimumRequirementMet = "YES";
                            item.PHDdeficiency = false;
                        }
                        //Dual Degree
                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty > 0)
                        {

                            if (remainingPHDFaculty >= item.SpecializationsphdFaculty)
                            {
                                remainingPHDFaculty = remainingPHDFaculty - item.SpecializationsphdFaculty;
                                adjustedPHDFaculty = item.SpecializationsphdFaculty;
                                if (adjustedPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    PhdminimumRequirementMet = "YES";
                                    item.PHDdeficiency = false;
                                }

                                else
                                {
                                    item.PHDdeficiency = true;
                                    PhdminimumRequirementMet = "NO";
                                }

                            }
                            else
                            {

                                remainingPHDFaculty = remainingPHDFaculty;
                                adjustedPHDFaculty = remainingPHDFaculty;

                                if (remainingPHDFaculty >= SpecializationwisePHDFaculty)
                                {
                                    item.PHDdeficiency = false;
                                    PhdminimumRequirementMet = "YES";
                                }
                                else
                                {
                                    item.PHDdeficiency = true;
                                    PhdminimumRequirementMet = "NO";
                                }

                            }

                        }
                        else if (remainingPHDFaculty <= 1 && (degreeType.Equals("Dual Degree")) && item.SpecializationsphdFaculty > 0)
                        {

                            adjustedPHDFaculty = remainingPHDFaculty;

                            remainingPHDFaculty = remainingPHDFaculty - 1;
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }
                        else if (adjustedPHDFaculty <= 0 && (degreeType.Equals("Dual Degree")))
                        {
                            PhdminimumRequirementMet = "YES";
                            item.PHDdeficiency = false;
                        }
                        else if (SpecializationwisePHDFaculty == 0 && (degreeType.Equals("Dual Degree")))
                        {
                            PhdminimumRequirementMet = "NO";
                            item.PHDdeficiency = true;
                        }


                    }



                    if (minimumRequirementMet == "YES" && PhdminimumRequirementMet == "YES")
                    {
                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            //  minimumRequirementMet = "Deficiency In faculty and Ph.D";
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                        }


                    }
                    else if (minimumRequirementMet == "NO" && PhdminimumRequirementMet == "YES")
                    {

                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            //  minimumRequirementMet = "Deficiency In faculty and Ph.D";
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                        }

                    }
                    else if (minimumRequirementMet == "YES" && PhdminimumRequirementMet == "NO")
                    {

                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                            // minimumRequirementMet = "Deficiency In faculty and Ph.D";
                        }

                    }

                    else if (minimumRequirementMet == "NO" && PhdminimumRequirementMet == "NO")
                    {

                        if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "-";
                            item.deficiency = false;
                            item.PHDdeficiency = false;
                        }
                        else if (rFaculty > adjustedFaculty && SpecializationwisePHDFaculty <= adjustedPHDFaculty)
                        {
                            //  minimumRequirementMet = "Deficiency In faculty";
                            item.deficiency = true;
                        }
                        else if (rFaculty <= adjustedFaculty && SpecializationwisePHDFaculty > adjustedPHDFaculty)
                        {
                            // minimumRequirementMet = "Deficiency In Ph.D";
                            item.PHDdeficiency = true;
                        }
                        else
                        {
                            //  minimumRequirementMet = "Deficiency In faculty and Ph.D";
                            item.deficiency = true;
                            item.PHDdeficiency = true;
                        }
                    }


                    if (strOtherDepartments.Contains(item.Department))
                    {
                        if (OthersSpecIds.Contains(item.DepartmentID))
                        {
                            item.totalIntake = totalBtechFirstYearIntake;
                            //item.requiredFaculty = Math.Ceiling((decimal)othersRequiredfaculty);
                            double rid = (double)(firstYearRequired / 2);
                            rFaculty = (int)(Math.Ceiling(rid));
                            item.requiredFaculty = Math.Ceiling((decimal)rFaculty);
                        }
                        else
                        {
                            item.totalIntake = totalBtechFirstYearIntake;
                            item.requiredFaculty = Math.Ceiling((decimal)firstYearRequired);
                        }
                    }
                    else
                    {
                        if (item.Degree == "B.Tech")
                        {
                            item.division1 = GetSectionBasedonIntake(item.approvedIntake2);
                            item.division2 = GetSectionBasedonIntake(item.approvedIntake3);
                            item.division3 = GetSectionBasedonIntake(item.approvedIntake4);
                        }
                    }
                    deptloop++;
                }
            #endregion


                #region Faculty Appeal Deficiency Status
                var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
                var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
                foreach (var item in intakedetailsList.Where(i => i.shiftId == 1).ToList())
                {

                    var deparment = jntuh_deparment.FirstOrDefault(i => i.id == item.DepartmentID);
                    if (deparment != null)
                    {
                        var jntuh_departmentcount =jntuh_appeal_faculty.Where(i =>i.DepartmentId == item.DepartmentID  &&
                                i.DegreeId == deparment.degreeId && i.collegeId == collegeId && i.NOtificationReport != null).ToList();//&& i.SpecializationId == item.specializationId
                        var facultydefcount = (int)Math.Ceiling(item.requiredFaculty) - item.BtechAdjustedFaculty;
                        if (item.PHDdeficiency == true)
                        {
                            facultydefcount = facultydefcount + item.AvailablePHDFaculty;
                        }
                        //if (facultydefcount <= jntuh_departmentcount.Count && jntuh_departmentcount.Count != 0)
                        //{
                        //    item.deficiencystatus = true;
                        //}

                        if (jntuh_departmentcount.Count >= 2 && jntuh_departmentcount.Count != 0)
                        {
                            item.deficiencystatus = true;
                        }


                    }
                }


                #endregion


                #region Principal Appeal Deficiency Status

                var jntuhAppealPrincipal = db.jntuh_appeal_principal_registered.AsNoTracking().ToList();
                var prinipal = jntuhAppealPrincipal.Where(i => i.collegeId == collegeId).ToList();
                if (prinipal.Count > 0)
                {
                    ViewBag.principaldeficiencystatus = true;
                }
                else
                {
                    ViewBag.principaldeficiencystatus = false;
                }
                #endregion

            }
            return View(intakedetailsList.ToList());
            #endregion
        }


        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        [ActionName("Notusing")]
        public ActionResult AppealReverificationBtechFaculty(string type, string CollegeId, int deficencycount, int departmentid, string degree, int specializationid)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            int Collegeid = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(CollegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"])); ;
            if (Collegeid == 375)
            {
                Collegeid = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            var FacultyRegistrationList = new List<FacultyRegistration>();
            if (Collegeid != null)
            {

                //var department = db.jntuh_department.AsNoTracking().FirstOrDefault(i => i.id == departmentid).departmentName.ToUpper();
                //if (department.Contains("CIVIL"))
                //{
                //    departmentid = 5;
                //}
                //else if (department.Contains("ECE"))
                //{
                //    departmentid = 2;
                //}
                //else if (department.Contains("EEE"))
                //{
                //    departmentid = 1;
                //}
                //else if (department.Contains("MECHANICAL"))
                //{
                //    departmentid = 15;
                //}
                //else if (department.Contains("CSE"))
                //{
                //    departmentid = 3;
                //}

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();


                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList()
                   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& rf.RegistrationNumber != principalRegno && rf.DepartmentId == departmentid


                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //var jntuh_registered_faculty1 = registeredFaculty.Select(rf => new
                //{
                //    type = rf.type,
                //    Absent = rf.Absent != null ? (bool)rf.Absent : false,
                //    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE != null ? (bool)rf.NotQualifiedAsperAICTE : false,
                //    InvalidPANNo = rf.InvalidPANNumber != null ? (bool)rf.InvalidPANNumber : false,
                //    InCompleteCeritificates = rf.IncompleteCertificates != null ? (bool)rf.IncompleteCertificates : false,
                //    PANNumber = rf.PANNumber,
                //    XeroxcopyofcertificatesFlag = rf.Xeroxcopyofcertificates != null ? (bool)rf.Xeroxcopyofcertificates : false,
                //    NOrelevantUgFlag = rf.NoRelevantUG == "Yes" ? true : false,
                //    NOrelevantPgFlag = rf.NoRelevantPG == "Yes" ? true : false,
                //    NOrelevantPhdFlag = rf.NORelevantPHD == "Yes" ? true : false,
                //    BlacklistFaculty = rf.Blacklistfaculy != null ? (bool)rf.Blacklistfaculy : false,
                //    NotIdentityFiedForAnyProgramFlag = rf.NotIdentityfiedForanyProgram != null ? (bool)rf.NotIdentityfiedForanyProgram : false,
                //    OriginalCertificatesnotshownFlag = rf.OriginalCertificatesNotShown != null ? (bool)rf.OriginalCertificatesNotShown : false,
                //    NoSCM = rf.NoSCM != null ? (bool)rf.NoSCM : false,
                //    SamePANUsedByMultipleFaculty = rf.Invaliddegree != null ? (bool)(rf.Invaliddegree) : false,
                //    BASStatusOld = rf.BAS,
                //    BASStatus = rf.InvalidAadhaar,
                //    OriginalsVerifiedUG = rf.OriginalsVerifiedUG == true ? true : false,
                //    OriginalsVerifiedPHD = rf.OriginalsVerifiedPHD == true ? true : false,

                //    // NoSCM = rf.NoSCM17 != null ? (bool)rf.NoSCM17 : false,
                //    // FalsePAN = rf.FalsePAN != null ? (bool)rf.FalsePAN : false,
                //    // NOForm16 = rf.NoForm16 != null ? (bool)rf.NoForm16 : false,
                //    // MultipleReginSamecoll = rf.MultipleRegInSameCollege != null ? (bool)rf.MultipleRegInSameCollege : false,

                //    //NoForm16Verification = rf.Noform16Verification != null ? (bool)rf.Noform16Verification : false,
                //    //PhotocopyofPAN = rf.PhotoCopyofPAN != null ? (bool)rf.PhotoCopyofPAN : false,
                //    PhdUndertakingDocumentstatus = rf.PhdUndertakingDocumentstatus != null ? (bool)(rf.PhdUndertakingDocumentstatus) : false,
                //    PHDUndertakingDocumentView = rf.PHDUndertakingDocument,
                //    PhdUndertakingDocumentText = rf.PhdUndertakingDocumentText,
                //   // AppliedPAN = rf.AppliedPAN != null ? (bool)(rf.AppliedPAN) : false,
                //    Notin116 = rf.Notin116,
                //    Blacklistfaculy = rf.Blacklistfaculy,
                //    RegistrationNumber = rf.RegistrationNumber,
                //    Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : "",
                //    HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                //    IsApproved = rf.isApproved,
                //    PanNumber = rf.PANNumber,
                //    AadhaarNumber = rf.AadhaarNumber,
                //    Photo = rf.Photo,
                //    FullName = rf.FirstName + rf.MiddleName + rf.LastName,
                //    FacultyEducation = rf.jntuh_registered_faculty_education,
                //    DegreeId = rf.jntuh_registered_faculty_education.Count(e => e.facultyId == rf.id) > 0 ? rf.jntuh_registered_faculty_education.Where(e => e.facultyId == rf.id).Select(e => e.educationId).Max() : 0,
                //    DepartmentId = rf.DepartmentId



                //}).ToList();


                //var RegistrationNumbersCleared = jntuh_registered_faculty1.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null) && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.InCompleteCeritificates == false || rf.InCompleteCeritificates == null) && (rf.Blacklistfaculy == false) &&
                //                                 rf.NOrelevantUgFlag == false && rf.NOrelevantPgFlag == false && rf.NOrelevantPhdFlag == false && rf.OriginalCertificatesnotshownFlag == false && rf.NotIdentityFiedForAnyProgramFlag == false && (rf.InvalidPANNo == false || rf.InvalidPANNo == null) && (rf.XeroxcopyofcertificatesFlag == false || rf.XeroxcopyofcertificatesFlag == null) &&  // (rf.AppliedPAN == false || rf.AppliedPAN == null) && && (rf.MultipleReginSamecoll == false || rf.MultipleReginSamecoll == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) 
                //                                 (rf.SamePANUsedByMultipleFaculty == false || rf.SamePANUsedByMultipleFaculty == null) && rf.BASStatus != "Yes" && rf.BASStatusOld != "Yes" && rf.OriginalsVerifiedUG == false && rf.OriginalsVerifiedPHD == false && (rf.DepartmentId != 61 || rf.DepartmentId != 27) && rf.HighestDegreeID >= 4)).Select(e => e.RegistrationNumber).ToArray();

                var RegistrationNumbersCleared = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false || rf.Absent == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null) && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && (rf.Blacklistfaculy == false) &&
                                                 rf.NoRelevantUG != "Yes" && rf.NoRelevantPG != "Yes" && rf.NORelevantPHD != "Yes" && (rf.NotIdentityfiedForanyProgram == false || rf.NotIdentityfiedForanyProgram == false) && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.Xeroxcopyofcertificates == false || rf.Xeroxcopyofcertificates == null) && (rf.NotconsideredPHD == false || rf.NotconsideredPHD == null) &&
                                                 (rf.Genuinenessnotsubmitted == false || rf.Genuinenessnotsubmitted == null) && (rf.IncompleteCertificates == false || rf.IncompleteCertificates == null) && rf.InvalidAadhaar != "Yes" && rf.BAS != "Yes" && (rf.OriginalsVerifiedUG == false || rf.OriginalsVerifiedUG == null) && (rf.OriginalsVerifiedPHD == false || rf.OriginalsVerifiedUG == null) && (rf.DepartmentId != 61 || rf.DepartmentId != 27))).Select(e => e.RegistrationNumber).ToArray();


                var jntuh_registered_faculty = registeredFaculty.Where(e => !RegistrationNumbersCleared.Contains(e.RegistrationNumber)).Select(rf =>rf).ToList();


                foreach (var item in jntuh_registered_faculty)
                {
                    string Reason = null;
                    FacultyRegistration facultyregistered = new FacultyRegistration();

                    facultyregistered.RegistrationNumber = item.RegistrationNumber;
                    facultyregistered.FirstName = item.FirstName;
                    facultyregistered.MiddleName = item.MiddleName;
                    facultyregistered.LastName = item.LastName;
                    //facultyregistered.department = item.;
                    //facultyregistered.DepartmentId = item.DeptId;
                    //facultyregistered.jntuh_registered_faculty_education = item.faculty_education;
                    facultyregistered.facultyPhoto = item.Photo;
                    facultyregistered.Absent = item.Absent != null && (bool)item.Absent;
                    facultyregistered.NOTQualifiedAsPerAICTE = item.NotQualifiedAsperAICTE != null && (bool)item.NotQualifiedAsperAICTE;
                    facultyregistered.NoSCM = item.NoSCM != null && (bool)item.NoSCM;
                    facultyregistered.PANNumber = item.PANNumber;
                    facultyregistered.PHDundertakingnotsubmitted = item.PHDundertakingnotsubmitted != null && (bool)item.PHDundertakingnotsubmitted;
                    facultyregistered.BlacklistFaculty = item.Blacklistfaculy != null && (bool)item.Blacklistfaculy;
                    //facultyregistered.DegreeId = item.HighestDegreeID;

                    if (item.Absent == true)
                        Reason += "Absent";
                    if (item.type == "Adjunct")
                    {
                        if (Reason != null)
                            Reason += ",Adjunct Faculty";
                        else
                            Reason += "Adjunct Faculty";
                    }

                    if (item.Xeroxcopyofcertificates == true)
                    {
                        if (Reason != null)
                            Reason += ",Xerox copyof certificates";
                        else
                            Reason += "Xerox copyof certificates";
                    }

                    if (item.NoRelevantUG == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant UG";
                        else
                            Reason += "NO Relevant UG";
                    }

                    if (item.NoRelevantPG == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PG";
                        else
                            Reason += "NO Relevant PG";
                    }
                    if (item.NORelevantPHD == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PHD";
                        else
                            Reason += "NO Relevant PHD";
                    }

                    if (item.NotQualifiedAsperAICTE == true)
                    {
                        if (Reason != null)
                            Reason += ",NOT Qualified AsPerAICTE";
                        else
                            Reason += "NOT Qualified AsPerAICTE";
                    }

                    if (item.InvalidPANNumber == true)
                    {
                        if (Reason != null)
                            Reason += ",InvalidPANNumber";
                        else
                            Reason += "InvalidPANNumber";
                    }

                    if (item.IncompleteCertificates == true)
                    {
                        if (Reason != null)
                            Reason += ",InComplete Ceritificates";
                        else
                            Reason += "InComplete Ceritificates";
                    }

                    if (item.NoSCM == true)
                    {
                        if (Reason != null)
                            Reason += ",NoSCM";
                        else
                            Reason += "NoSCM";
                    }

                    if (item.OriginalCertificatesNotShown == true)
                    {
                        if (Reason != null)
                            Reason += ",Original Certificates notshown";
                        else
                            Reason += "Original Certificates notshown";
                    }

                    if (item.PANNumber == null)
                    {
                        if (Reason != null)
                            Reason += ",No PANNumber";
                        else
                            Reason += "No PANNumber";
                    }

                    if (item.NotIdentityfiedForanyProgram == true)
                    {
                        if (Reason != null)
                            Reason += ",NotIdentityFied ForAnyProgram";
                        else
                            Reason += "NotIdentityFied ForAnyProgram";
                    }

                    if (item.Invaliddegree == true)
                    {
                        if (Reason != null)
                            Reason += ",Invaliddegree";
                        else
                            Reason += "Invaliddegree";
                    }

                    if (item.InvalidAadhaar == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",No/Invalid Aadhaar Document";
                        else
                            Reason += "No/Invalid Aadhaar Document";
                    }

                    if (item.BAS == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",BAS Flag";
                        else
                            Reason += "BAS Flag";
                    }
                    if (item.OriginalsVerifiedUG == true)
                    {
                        if (Reason != null)
                            Reason += ",Complaint PHD Faculty";
                        else
                            Reason += "Complaint PHD Faculty";
                    }
                    if (item.OriginalsVerifiedPHD == true)
                    {
                        if (Reason != null)
                            Reason += ",No Guide Sign in PHD Thesis";
                        else
                            Reason += "No Guide Sign in PHD Thesis";
                    }
                    if (item.Blacklistfaculy == true)
                    {
                        if (Reason != null)
                            Reason += ",Blacklistfaculy";
                        else
                            Reason += "Blacklistfaculy";
                    }
                    facultyregistered.DeactivationReason = Reason;
                    FacultyRegistrationList.Add(facultyregistered);
                }
            }
            ViewBag.collegeid = Collegeid;
            ViewBag.departmentid = departmentid;
            ViewBag.degree = degree;
            ViewBag.specializationid = specializationid;
            ViewBag.deficiencycount = deficencycount;
            return View(FacultyRegistrationList);
            #endregion

        }


        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        [ActionName("Notusing")]
        public ActionResult FacultyBtechRegistrationNumber(string collegeId, string fid, int deficencycount, int departmentid, string degree, int specializationid)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 375)
            {
                userCollegeID = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            var specializatioName = "";
            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.degree = degree;
            ViewBag.deficiencycount = deficencycount;
            ViewBag.specializationid = specializationid;
            ViewBag.departmentid = departmentid;
            //var jntuhSpecialization = db.jntuh_specialization.FirstOrDefault(i => i.id == specializationid);
            //if (jntuhSpecialization != null)
            //{
            //    specializatioName =  jntuhSpecialization.specializationName;
            //}
            var jntuh_degree = db.jntuh_degree.Where(e => e.isActive == true).Select(e => e).ToList();
            var jntuh_department = db.jntuh_department.Where(e => e.isActive == true).Select(e => e).ToList();
            var jntuh_specialization = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();

            CollegeFaculty faculty = new CollegeFaculty();
            if (degree == "B.Tech")
            {
                faculty.facultyDepartmentId = departmentid;
                faculty.department = jntuh_department.Where(e => e.id == departmentid).Select(e => e.jntuh_degree.degree + " -" + e.departmentName).FirstOrDefault();
            }
            else
            {
                faculty.facultyPGDepartmentId = departmentid;
                faculty.department = jntuh_department.Where(e => e.id == departmentid).Select(e => e.jntuh_degree.degree + " -" + e.departmentName).FirstOrDefault();
            }
            faculty.SpecializationId = specializationid;
            faculty.SpecializationName = specializationid == null ? null : jntuh_specialization.Where(e => e.id == specializationid).Select(w => w.specializationName).FirstOrDefault();
            faculty.DegreeName = degree;
            faculty.facultyRecruitedFor = degree == "B.Tech" ? "UG" : "PG";
            faculty.Facultydeficencycount = deficencycount;
            faculty.collegeId = Convert.ToInt16(collegeId);



            //SpecializationName = specializatioName

            var collegeID = Convert.ToInt16(collegeId);



            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            int actualYear = jntuh_academic_year.Where(s => s.isActive == true && s.isPresentAcademicYear == true).Select(s => s.actualYear).FirstOrDefault();

            int AY1 = jntuh_academic_year.Where(s => s.actualYear == actualYear).Select(s => s.id).FirstOrDefault();
            int AY2 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 1)).Select(s => s.id).FirstOrDefault();
            int AY3 = jntuh_academic_year.Where(s => s.actualYear == (actualYear - 2)).Select(s => s.id).FirstOrDefault();

            var jntuh_college_intake_existing = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeID && (e.academicYearId == AY1 || e.academicYearId == AY2 || e.academicYearId == AY3) && e.courseStatus != "Closure").Select(e => e).ToList();

            var SpecalizationIds = jntuh_college_intake_existing.Select(e => e.specializationId).Distinct().ToList();

            var DepartmentsData = (from s in jntuh_specialization
                                   join d in jntuh_department on s.departmentId equals d.id
                                   join de in jntuh_degree on d.degreeId equals de.id
                                   where SpecalizationIds.Contains(s.id)
                                   select new Departments
                                   {
                                       DegreeTypeId = de.degreeTypeId,
                                       DegreeId = de.id,
                                       Degree = de.degree,
                                       Department = de.degree + "-" + d.departmentName,
                                       DepartmentId = d.id,
                                       Specialization = s.specializationName,
                                       SpecializationId = s.id

                                   }).ToList();

            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 65, Department = "Others(CSE/IT)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 66, Department = "Others(CIVIL/MECH)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 67, Department = "Others(ECE/EEE)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 68, Department = "Others(MNGT/H&S)" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 29, Department = "Physics" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 30, Department = "Mathematics" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 31, Department = "English" });
            DepartmentsData.Add(new Departments() { DegreeTypeId = 1, DepartmentId = 32, Department = "Chemistry" });


            ViewBag.UGDept = DepartmentsData.Where(e => e.DegreeTypeId == 1).Select(
                e => new
                {
                    UgDeptid = e.DepartmentId,
                    UgDeptName = e.Department
                }).Distinct().ToList();

            ViewBag.PGDept = DepartmentsData.Where(e => e.DegreeTypeId == 2).Select(
               e => new
               {
                   PgDeptid = e.DepartmentId,
                   PgDeptName = e.Department
               }).Distinct().ToList();

            ViewBag.DualDept = DepartmentsData.Where(e => e.DegreeTypeId == 3).Select(
              e => new
              {
                  DualDeptid = e.DepartmentId,
                  DualDeptName = e.Department
              }).Distinct().ToList();

            var MPharmacyFacultySpecialization = (from s in jntuh_specialization
                                                  join d in jntuh_department on s.departmentId equals d.id
                                                  join de in jntuh_degree on d.degreeId equals de.id
                                                  where de.id == 2 || de.id == 9 || de.id == 10
                                                  select new MpharmacySpec
                                                  {
                                                      MPharmacyspecid = s.id,
                                                      MPharmacyspecname = s.specializationName
                                                  }).ToList();

            ViewBag.MPharmacyFacultyspec = MPharmacyFacultySpecialization;

            ViewBag.PGSpecializations = DepartmentsData.Where(e => e.DegreeTypeId == 2).Select(e => new { Specid = e.SpecializationId, Specname = e.Specialization }).ToList();

            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult FacultyBtechRegistrationNumber(CollegeFaculty faculty)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            TempData["Error"] = null;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 375)
            {
                userCollegeID = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber &&r.Blacklistfaculy==false).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();


            if (isRegisteredFaculty == null)
            {
                TempData["Error"] = "Invalid Faculty Registration Number.";
                return RedirectToAction("CollegeFacultyBtechWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            }

            if (isExistingFaculty != null)
            {
                if (userCollegeID == isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in your college";
                    return RedirectToAction("CollegeFacultyBtechWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
                if (userCollegeID != isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
                    return RedirectToAction("CollegeFacultyBtechWithIntake", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
            }



            //if (isExistingFaculty != null)
            //{
            //    if (userCollegeID != isExistingFaculty.collegeId && isExistingFaculty.collegeId != null)
            //    {
            //        TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
            //    }
            //    else if (userCollegeID == isExistingFaculty.collegeId)
            //    {
            //        TempData["Error"] = "Faculty is already working in your college";
            //    }

            //    return RedirectToAction("CollegeFacultyWithIntakeFaculty", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            //}


            var notificationPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/NotificationsReports";
            var selectioncommitteePath = "~/Content/Upload/OnlineAppealDocuments/Faculty/SelectionCommitteeReports";
            var appointmentorderPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppointmentOrders";
            var joiningreportpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/JoiningReports";
            var appealReverificationScreenshot = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppealReverificationScreenshot";
            var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";
            
            if (faculty.facultyDepartmentId != null)
            {
               var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
               if (deparment != null)
               {
                   var jntuh_departmentcount =
                   jntuh_appeal_faculty.Where(
                       i =>
                           i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                           i.DegreeId == deparment.degreeId).ToList();

                   if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                   {

                   }
               }
            }
            else
            {
                var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyPGDepartmentId);
                if (deparment != null)
                {
                    var jntuh_departmentcount =
                    jntuh_appeal_faculty.Where(
                        i =>
                            i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                            i.DegreeId == deparment.degreeId).ToList();

                    if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                    {

                    }
                }
            }
            

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                //UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                //UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                if (UpdatedFaculty.IdentifiedFor == "UG")
                {
                    UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                    UpdatedFaculty.SpecializationId = null;
                }
                else
                {
                    UpdatedFaculty.DepartmentId = faculty.facultyPGDepartmentId;
                    UpdatedFaculty.SpecializationId = faculty.SpecializationId;
                }


                var jntuhDepartment = jntuh_deparment.Where(i => i.id == UpdatedFaculty.DepartmentId).FirstOrDefault();
                if (jntuhDepartment != null)
                {
                    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                }
                //New Code Aadhaar Document
                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }

                if (faculty.NotificationDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(notificationPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(notificationPath));
                    }

                    var ext = Path.GetExtension(faculty.NotificationDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.NotificationDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(notificationPath),
                            fileName, ext));
                        UpdatedFaculty.NOtificationReport = string.Format("{0}/{1}{2}", notificationPath, fileName, ext);
                    }
                }
                if (faculty.SelectionCommitteeDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(selectioncommitteePath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(selectioncommitteePath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.SelectionCommitteeDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(selectioncommitteePath), fileName, ext));
                        UpdatedFaculty.SelectionCommiteMinutes = string.Format("{0}/{1}{2}", selectioncommitteePath,
                            fileName, ext);
                    }
                }
                if (faculty.AppointmentOrderDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(appointmentorderPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appointmentorderPath));
                    }

                    var ext = Path.GetExtension(faculty.AppointmentOrderDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppointmentOrderDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(appointmentorderPath), fileName, ext));
                        UpdatedFaculty.AppointMentOrder = string.Format("{0}/{1}{2}", appointmentorderPath, fileName,
                            ext);
                    }
                }
                if (faculty.JoiningReportDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(joiningreportpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(joiningreportpath));
                    }

                    var ext = Path.GetExtension(faculty.JoiningReportDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.JoiningReportDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(joiningreportpath), fileName, ext));
                        UpdatedFaculty.JoiningOrder = string.Format("{0}/{1}{2}", joiningreportpath, fileName, ext);
                    }
                }

                if (faculty.AppealReverificationScreenShot != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealReverificationScreenshot)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealReverificationScreenshot));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationScreenShot.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationScreenShot.SaveAs(string.Format("{0}/{1}{2}",Server.MapPath(appealReverificationScreenshot), fileName, ext));
                        UpdatedFaculty.AppealReverificationScreenshot = string.Format("{0}/{1}{2}", appealReverificationScreenshot, fileName, ext);
                    }
                }





                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added.";
                TempData["Error"] = null;
            }

            else
            {
                TempData["Error"] = "Faculty is already appealed";
            }


            return RedirectToAction("CollegeFacultyBtechWithIntake", "FacultyVerification");
        }


        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        [ActionName("Notusing")]
        public ActionResult AppealReverificationBtech(string collegeId, string fid, int deficencycount, int departmentid, string degree, string specializationid, string registrationnumber)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
          //  userCollegeID = 176;
            //if (userCollegeID == 0 && collegeId != null)
            //{
            //    if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
            //    {
            //        userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
            //    }
            //}

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.registrationnumber = registrationnumber;
            CollegeFaculty faculty = new CollegeFaculty();
            faculty.FacultyRegistrationNumber = registrationnumber;
            faculty.collegeId = Convert.ToInt16(collegeId);
            faculty.DegreeName = degree;
            faculty.SpecializationId = Convert.ToInt16(specializationid);
            faculty.facultyDepartmentId = departmentid;
            faculty.Facultydeficencycount = deficencycount;
            var firstOrDefault = db.jntuh_college_faculty_registered.Where(e => e.RegistrationNumber == registrationnumber).Select(e => e.SpecializationId).FirstOrDefault();
            if (firstOrDefault != null)
                faculty.FacultyAddedSpecializationId = (int)firstOrDefault;


            List<SpecializationList> Specializations = new List<SpecializationList>();
           
            
            Specializations = (from t in db.jntuh_college_intake_existing
                    join cf in db.jntuh_specialization on t.specializationId equals cf.id
                    join dd in db.jntuh_department on cf.departmentId equals dd.id
                    join de in db.jntuh_degree on dd.degreeId equals de.id
                               where t.collegeId == userCollegeID && t.academicYearId == 10 && t.courseStatus != "Closure" && t.proposedIntake!=0
                    select new SpecializationList
                    {
                        SpecializationId = cf.id,
                        SpecializationName = de.degree+"-"+cf.specializationName

                    }).ToList();

            Specializations.Add(new SpecializationList() { SpecializationId = 155, SpecializationName = "BTech-Others(CSE/IT)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 156, SpecializationName = "BTech-Others(CIVIL/MECH)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 157, SpecializationName = "BTech-Others(ECE/EEE)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 158, SpecializationName = "BTech-Others(MNGT/H&S)" });
            Specializations.Add(new SpecializationList() { SpecializationId = 48, SpecializationName = "BTech-Physics" });
            Specializations.Add(new SpecializationList() { SpecializationId = 42, SpecializationName = "BTech-Mathematics" });
            Specializations.Add(new SpecializationList() { SpecializationId = 37, SpecializationName = "BTech-English" });
            Specializations.Add(new SpecializationList() { SpecializationId = 31, SpecializationName = "BTech-Chemistry" });
            ViewBag.Specializations = Specializations;

            faculty.AadhaarFlag =
                db.jntuh_registered_faculty.Where(f => f.RegistrationNumber == registrationnumber.Trim())
                    .Select(s => s.InvalidAadhaar)
                    .FirstOrDefault();

            //var jntuh_college_faculty_registered =
            //    db.jntuh_college_faculty_registered.Where(s => s.RegistrationNumber == registrationnumber)
            //        .Select(s => s)
            //        .FirstOrDefault();
            //faculty.facultyAadhaarNumber = jntuh_college_faculty_registered.AadhaarNumber;
            //faculty.facultyAadharDocument = jntuh_college_faculty_registered.AadhaarDocument;


            //ViewBag.IdentityFied =db.jntuh_college_faculty_registered.Where(e => e.RegistrationNumber == registrationnumber).Select(e => e.IdentifiedFor).FirstOrDefault()!=null?true:false;

            return PartialView(faculty);
        }



        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult AppealFacultyRegistrationNumberBtech(CollegeFaculty faculty)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            TempData["Error"] = null;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();

            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();

            var physicalpresencpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/PhysicalPresenceReports";
            var appealreverificationSupportdoc = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppealReverificationSupportReports";
            var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";
            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =jntuh_appeal_faculty.Where(i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId && i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
               //Old Code
                //UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                //UpdatedFaculty.SpecializationId = faculty.SpecializationId;
                UpdatedFaculty.SpecializationId = faculty.FacultyAddedSpecializationId;
                var jntuhSpecialization = db.jntuh_specialization.Where(i => i.id == faculty.FacultyAddedSpecializationId).FirstOrDefault();
                if (jntuhSpecialization != null)
                {
                    UpdatedFaculty.DepartmentId = jntuhSpecialization.departmentId;

                    var jntuhDepartment = jntuh_deparment.Where(i => i.id == jntuhSpecialization.departmentId).FirstOrDefault();
                    if (jntuhDepartment != null)
                    {
                        UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                    }
                }
                if (UpdatedFaculty.DegreeId == 4)
                {
                    UpdatedFaculty.IdentifiedFor = "UG";
                }
                else
                {
                    UpdatedFaculty.IdentifiedFor = "PG";
                }
                //New Code Aadhaar Faculty
                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }
                if (!String.IsNullOrEmpty(faculty.facultyAadharDocument))
                {
                    UpdatedFaculty.AadhaarDocument = faculty.facultyAadharDocument;
                }
                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),fileName, ext));
                        UpdatedFaculty.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }
                }

                //544444444444444
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),fileName, ext));
                        UpdatedFaculty.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }


                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added for Re-verification.";
                TempData["Error"] = null;
            }

            else
            {
                var facultydata =db.jntuh_appeal_faculty_registered.Where(i => i.RegistrationNumber == faculty.FacultyRegistrationNumber).FirstOrDefault();


                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),fileName, ext));
                        facultydata.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }


                }
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        facultydata.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }


                facultydata.SpecializationId = faculty.FacultyAddedSpecializationId;
                var jntuhSpecialization = db.jntuh_specialization.Where(i => i.id == faculty.FacultyAddedSpecializationId).FirstOrDefault();
                if (jntuhSpecialization != null)
                {
                    facultydata.DepartmentId = jntuhSpecialization.departmentId;



                    var jntuhDepartment = jntuh_deparment.Where(i => i.id == jntuhSpecialization.departmentId).FirstOrDefault();
                    if (jntuhDepartment != null)
                    {
                        facultydata.DegreeId = jntuhDepartment.degreeId;
                    }
                }
                if (facultydata.DegreeId == 4)
                {
                    facultydata.IdentifiedFor = "UG";
                }
                else
                {
                    facultydata.IdentifiedFor = "PG";
                }

                facultydata.updatedBy = userID;
                facultydata.updatedOn = DateTime.Now;
                db.Entry(facultydata).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully updated for Re-verification..";
                TempData["Error"] = null;

            }

            return RedirectToAction("AppealReverificationBtechFaculty", "FacultyVerification", new
            {
                collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]),
                deficencycount = faculty.Facultydeficencycount,
                degree = faculty.DegreeName,
                departmentid = faculty.facultyDepartmentId,
                specializationid = faculty.SpecializationId
            });
        }

        #endregion



        #region For Online Appeal Collegescreeen


        #region For Faculty

       
        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult CollegeFacultyWithIntakeFaculty()
        {

            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();

            //collegeId = 43;
            #region 
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            // Principal Details
            string strPrincipalRegno = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).FirstOrDefault();

            //Reg nos related online facultyIds
            var registeredPrincipal = db.jntuh_registered_faculty.Where(rf => strPrincipalRegno == rf.RegistrationNumber && (rf.collegeId == collegeId)).ToList();


            var jntuh_Principals_registered = registeredPrincipal.Where(rf => rf.DepartmentId != null && rf.DeactivationReason == "")
                                                 .Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.jntuh_department.departmentName,
                                                     HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                     IsApproved = rf.isApproved,
                                                     PanNumber = rf.PANNumber,
                                                     AadhaarNumber = rf.AadhaarNumber
                                                 }).ToList();
            ViewBag.PrincipalRegno = strPrincipalRegno;
            if (jntuh_Principals_registered.Count > 0)
                ViewBag.PrincipalDeficiency = "NO";
            else
                ViewBag.PrincipalDeficiency = "YES";
            #endregion

            #region Faculty
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                int userCollegeID = (int)collegeId;
                var jntuh_specialization = db.jntuh_specialization.ToList();
                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
                var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();


                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //education categoryIds UG,PG,PHD...........
                var jntuh_specializations = db.jntuh_specialization.ToList();
                var jntuh_education_category = db.jntuh_education_category.ToList();
                int pharmacyDeptId = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();
                //Reg nos related online facultyIds
                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& (rf.collegeId == null || rf.collegeId == collegeId)
                //Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
                var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false)//&& rf.Noform16Verification == false && rf.NoForm16 == false
                                                        && (rf.NoSCM17 == false) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false) && (rf.Blacklistfaculy == false) && (rf.Noclass == false || rf.Noclass == null) && rf.NoRelevantUG == "No" && rf.NoRelevantPG == "No" && rf.NORelevantPHD == "No" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS == "Y")).Select(rf => new
                                                        {
                                                            RegistrationNumber = rf.RegistrationNumber,
                                                            Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                            IsApproved = rf.isApproved,
                                                            PanNumber = rf.PANNumber,
                                                            AadhaarNumber = rf.AadhaarNumber,
                                                            PGSpecializationId = rf.PGSpecialization,
                                                            UGDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.DepartmentId).FirstOrDefault(),
                                                            SpecializationId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.SpecializationId).FirstOrDefault(),
                                                            TotalExperience = rf.TotalExperience,
                                                            jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                                                        }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    PGSpecializationId = rf.PGSpecializationId,
                    UGDepartmentId = rf.UGDepartmentId,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    TotalExperience = rf.TotalExperience,
                    registered_faculty_specialization = rf.SpecializationId != null ? jntuh_specializations.Where(S => S.id == rf.SpecializationId).Select(S => S.specializationName).FirstOrDefault() : rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                }).ToList();
                ViewBag.ALLTotalCollegeFaculty = jntuh_registered_faculty.Count;
                var Bpharmacyintake = 0;
                decimal BpharmacyrequiredFaculty = 0;

                var pharmacydeptids = new[] { 26, 27, 36, 39 };
                if (collegeId == 42)
                    jntuh_registered_faculty = jntuh_registered_faculty.Where(R => R.UGDepartmentId == 26 || R.UGDepartmentId == 27 || R.UGDepartmentId == 36 || R.UGDepartmentId == 39).ToList();
                collegeIntakeExisting = collegeIntakeExisting.Where(i => pharmacydeptids.Contains(i.DepartmentID)).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;





                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);

                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {

                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        // var total = intakedetails.totalIntake > 400 ? 100 : 60;
                        // Bpharmacyintake = total;
                        Bpharmacyintake = intakedetails.approvedIntake1;
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D PB")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "UG" || f.Recruitedfor == null));//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
                        }
                    }
                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" &&
                                f.SpecializationId == item.specializationId && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG"));//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department &&
                                        f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
                    }
                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharmacyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        //intakedetails.Department = "Pharmacy";
                    }
                    if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) &&
                                    f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount =registeredFaculty.Where(f =>f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null &&
                        //            (f.isApproved == null || f.isApproved == true)).Count();
                        //intakedetails.Department = "Pharmacy";
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharm.D";
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharm.D PB";
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);

                    }


                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
                    //=============//

                    intakedetails.FacultyWithIntakeReports = new List<CollegeFacultyWithIntakeReport>();
                    intakedetailsList.Add(intakedetails);
                }
                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();



                List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.ToList();
                int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech").Select(d => d.approvedIntake1).Sum();
                var degrees = db.jntuh_degree.ToList();
                var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 150);
                int remainingFaculty = 0;
                int remainingPHDFaculty = 0;
                decimal departmentWiseRequiredFaculty = 0;
                var distDeptcount = 1;
                var deptloop = 1;
                foreach (var item in facultyCounts)
                {
                    distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

                    int indexnow = facultyCounts.IndexOf(item);

                    if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
                    {
                        deptloop = 1;
                    }

                    departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

                    string minimumRequirementMet = string.Empty;
                    int facultyShortage = 0;
                    int adjustedFaculty = 0;
                    int adjustedPHDFaculty = 0;

                    int tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));//item.totalFaculty
                    int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

                    var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = false;
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;//tFaculty
                            item.totalFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = true;
                            adjustedFaculty = tFaculty;
                            facultyShortage = rFaculty - tFaculty;
                            item.totalFaculty = adjustedFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty > 0 && (degreeType.Equals("PG") || degreeType.Equals("UG"))) //degreeType.Equals("PG")
                        {
                            //adjustedPHDFaculty = 1;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    else
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = false;
                            remainingFaculty = remainingFaculty - rFaculty;
                            adjustedFaculty = rFaculty;
                            item.totalFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = true;
                            adjustedFaculty = remainingFaculty;
                            item.totalFaculty = adjustedFaculty;
                            facultyShortage = rFaculty - remainingFaculty;
                            remainingFaculty = 0;
                        }
                        remainingPHDFaculty = item.phdFaculty;
                        if (remainingPHDFaculty > 0 && (degreeType.Equals("PG") || degreeType.Equals("UG")))
                        {
                            //adjustedPHDFaculty = 1;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    if (adjustedPHDFaculty > 0)
                    {
                        item.PHDdeficiency = false;
                    }
                    //else if (degreeType.Equals("PG") && item.approvedIntake1 > 0)
                    //{
                    //    item.PHDdeficiency = true;
                    //    item.AvailablePHDFaculty = 1;
                    //}
                    //else
                    //{
                    //    item.PHDdeficiency = false;
                    //}
                    else if (item.approvedIntake1 > 0)
                    {
                        item.PHDdeficiency = true;
                        item.AvailablePHDFaculty = 1;
                    }

                    deptloop++;
                }
            #endregion

                if (Bpharmacyintake >= 100)
                {
                    BpharmacyrequiredFaculty = Math.Round(BpharmacyrequiredFaculty) - 0;
                    ViewBag.BpharmacyrequiredFaculty = BpharmacyrequiredFaculty;
                }
                else
                {
                    BpharmacyrequiredFaculty = Math.Round(BpharmacyrequiredFaculty) - 0;
                    ViewBag.BpharmacyrequiredFaculty = BpharmacyrequiredFaculty;
                }
                intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharmacyrequiredFaculty);


                #region For Pharmacyview
                var randomcode = "";
                if (collegeId != null)
                {
                    randomcode = db.jntuh_college_randamcodes.FirstOrDefault(i => i.CollegeId == collegeId).RandamCode;
                }
                var pharmadTotalintake = 0;
                var pharmadPBTotalintake = 0;
                var bpharmacyintake = 0;
                decimal BpharcyrequiredFaculty = 0;
                decimal PharmDrequiredFaculty = 0;
                decimal PharmDPBrequiredFaculty = 0;
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.collegeRandomCode = randomcode;
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake5 = GetIntake(item.collegeId, AY5, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        var total = intakedetails.totalIntake > 400 ? 100 : 60;
                        bpharmacyintake = intakedetails.approvedIntake1;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = pharmadTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = pharmadPBTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && f.Recruitedfor == "UG").Count();
                        }
                    }

                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                            switch (item.specializationId)
                            {
                                case 114://Hospital & Clinical Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice/Pharm D";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP" || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization == "PHARMD".ToUpper() || f.registered_faculty_specialization == "PHARM D" || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));

                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == 114));
                                    //phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    break;
                                case 116://Pharmaceutical Analysis & Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharma Chemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA" || f.registered_faculty_specialization == "PA RA" || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    break;
                                case 118://Pharmaceutical Management & Regulatory Affaires
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PMRA/Regulatory Affairs/Pharmaceutics";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PMRA".ToUpper() || f.registered_faculty_specialization == "Regulatory Affairs".ToUpper() || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    break;
                                case 120://Pharmaceutics
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId)); //|| f.registered_faculty_specialization == "Pharmaceutics".ToUpper()
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId)); //|| f.registered_faculty_specialization == "Pharmaceutics".ToUpper()
                                    break;
                                case 122://Pharmacology
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP".ToUpper() || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    break;
                                case 124://Quality Assurance & Pharma Regulatory Affairs
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    var s = jntuh_registered_faculty.Where(f => (f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "PA RA".ToUpper() ||
                                                 f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA"))).ToList();
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    break;
                                case 115://Industrial Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    break;
                                case 121://Pharmacognosy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacognosy/Pharma Biotechnology/Pharmacology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    break;
                                case 117://Pharmaceutical Chemistry
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA")));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    break;
                                case 119://Pharmaceutical Technology (2011-12)
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization.Contains("Bio-Technology".ToUpper()) || f.registered_faculty_specialization.Contains("Pharmaceutical Technology (2011-12)".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    break;
                                case 123://Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA")));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => (f.PGSpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    break;
                                default:
                                    intakedetails.PharmacySpec1 = "";
                                    intakedetails.PharmacyspecializationWiseFaculty = 0;
                                    phdFaculty = 0;
                                    break;
                            }
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                    }

                    int noPanOrAadhaarcount = 0;

                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharcyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";
                        intakedetailsList.Where(i => i.Degree == "M.Pharmacy" && i.specializationId == item.specializationId).ToList().ForEach(c => c.PharmacyspecializationWiseFaculty = intakedetails.PharmacyspecializationWiseFaculty);

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        PharmDrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        PharmDPBrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == item.DepartmentID && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }

                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);

                    intakedetails.facultyWithoutPANAndAadhaar = noPanOrAadhaarcount;

                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(intakedetails);
                }

                #region pharmcy specializations
                var pharmdspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Practice",
                    //    Specialization = "Pharm.D"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharm D",
                    //    Specialization = "Pharm.D"
                    //}

                    new PharmacySpecilaizationList()
						{
							PharmacyspecName = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)",
							Specialization = "Pharm.D"
						}
                };
                var pharmdpbspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Practice",
                    //    Specialization = "Pharm.D PB"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharm D",
                    //    Specialization = "Pharm.D PB"
                    //}

                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)",
                        Specialization = "Pharm.D PB"
                    }
                };

                var pharmacyspeclist = new List<PharmacySpecilaizationList>
                {
                   
                    
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmaceutics)",//, Industrial Pharmacy, Pharmacy BioTechnology, Pharmaceutical Technology
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group2 (Pharmaceutical Chemistry,Pharmacy Analysis, PAQA)",
                        Specialization = "B.Pharmacy"
                    },
                   
                   new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group3 (Pharmacology)",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group4 (Pharmacognosy)",
                        Specialization = "B.Pharmacy"
                    },
                };
                #endregion
                #region All B.Pharmacy Specializations

                var reg_facultyspecilaizationsdistinct = jntuh_registered_faculty.Select(i => i.registered_faculty_specialization).Distinct().ToArray();

                var reg_facultyspecilaizations =
                    jntuh_registered_faculty.Where(
                        i =>
                            i.registered_faculty_specialization == "Pharmaceutics".ToUpper() ||
                            i.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy Analysis".ToUpper() ||
                            i.registered_faculty_specialization == "PAQA".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharma D".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacognosy" ||
                            i.registered_faculty_specialization == "English".ToUpper() ||
                            i.registered_faculty_specialization == "Mathematics".ToUpper() ||
                            i.registered_faculty_specialization == "Computers".ToUpper() ||
                            i.registered_faculty_specialization == "Zoology".ToUpper()).ToList();

                var group1Subcount = 0; var group2Subcount = 0; var group3Subcount = 0; var group4Subcount = 0; var group5Subcount = 0; var group6Subcount = 0;
                var pharmadgroup1Subcount = 0; var pharmadPBgroup1Subcount = 0;
                string subgroupconditionsmet;
                string conditionbpharm = null;
                string conditionpharmd = null;
                string conditionphardpb = null;
                foreach (var list in pharmacyspeclist)
                {
                    int phd;
                    int pg;
                    int ug;
                    var bpharmacylist = new CollegeFacultyWithIntakeReport();
                    bpharmacylist.Specialization = list.Specialization;
                    bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                    bpharmacylist.collegeId = (int)collegeId;
                    bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                    bpharmacylist.collegeRandomCode = randomcode;
                    bpharmacylist.shiftId = 1;
                    bpharmacylist.Degree = "B.Pharmacy";
                    bpharmacylist.Department = "Pharmacy";
                    bpharmacylist.PharmacyGroup1 = "Group1";

                    bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                    bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                    bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                    bpharmacylist.totalFaculty = ug + pg + phd;
                    bpharmacylist.BphramacyrequiredFaculty = BpharcyrequiredFaculty;
                    bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                    #region bpharmacyspecializationcount

                    if (list.PharmacyspecName == "Pharmaceutics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "Industrial Pharmacy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy BioTechnology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                        f.registered_faculty_specialization == "Bio-Technology".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmaceutical Technology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper() ||
                            f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmaceutical Chemistry")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy Analysis")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "PAQA")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                     f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                            //f.registered_faculty_specialization == "Quality Assurance".ToUpper() ||
                            //f.registered_faculty_specialization == "QualityAssurance".ToUpper() ||
                                     f.registered_faculty_specialization == "QAPRA".ToUpper() ||
                                     f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper() ||
                                     f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "Pharma D")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                      f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                      f.registered_faculty_specialization == "Pharm.D".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacognosy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy & Phytochemistry".ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy&Phytochemistry".ToUpper());
                    }

                    else if (list.PharmacyspecName == "English")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Mathematics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Computers")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Computer Science")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Zoology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    #endregion





                    if (list.PharmacyspecName == "Group1 (Pharmaceutics)")//|| list.PharmacyspecName == "Industrial Pharmacy" || list.PharmacyspecName == "Pharmacy BioTechnology" || list.PharmacyspecName == "Pharmaceutical Technology"
                    {
                        group1Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 120 && f.RegistrationNumber != principalRegno);
                        int Required = bpharmacyintake >= 100 ? 6 : 4;
                        if (Required >= group1Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = group1Subcount;
                        else if (Required <= group1Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = Required;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                    }

                    else if (list.PharmacyspecName == "Group2 (Pharmaceutical Chemistry,Pharmacy Analysis, PAQA)")//|| list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA")
                    {
                        //group2Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                        //                 jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));

                        group2Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno) +
                                             jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno) +
                                             jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);

                        int Required = bpharmacyintake >= 100 ? 6 : 5;
                        if (Required >= group2Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                        else if (Required <= group2Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = Required;

                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 5;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup2";
                    }
                    //else if (list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                    //{
                    //    var y = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()).ToList();
                    //    var g = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization.Contains("QA")).ToList();
                    //    var g1 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PAQA".ToUpper()).ToList();
                    //    var g2 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PA & QA".ToUpper()).ToList();

                    //    group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                    //    bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                    //    bpharmacylist.BPharmacySubGroupRequired = 1;
                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    //}

                    else if (list.PharmacyspecName == "Group3 (Pharmacology)")//|| list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D"
                    {
                        // group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacology".ToUpper());

                        group3Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);

                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                        //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;

                        int Required = bpharmacyintake >= 100 ? 5 : 4;
                        if (Required >= group3Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                        else if (Required <= group3Subcount)
                            bpharmacylist.BPharmacySubGroup1Count = Required;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 5 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    }

                    else if (list.PharmacyspecName == "Group4 (Pharmacognosy)")
                    {
                        //group4Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy".ToUpper()) +
                        //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy&Phytochemistryc".ToUpper()) +
                        //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("PHARMACOGNOSY & PHYTOCHEMISTRY".ToUpper()));
                        //bpharmacylist.BPharmacySubGroup1Count = group4Subcount;

                        int PharmacognosySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 121 && f.RegistrationNumber != principalRegno);
                        int PharmaceuticalChemistrySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno);
                        int PAQASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno);
                        int QAPRASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);
                        int Required = bpharmacyintake >= 100 ? 6 : 5;
                        int Total1 = Required - (PAQASp + QAPRASp);
                        int Total = (PAQASp + QAPRASp + PharmaceuticalChemistrySp) - Required;
                        if (Total > 0)
                            group4Subcount = PharmacognosySp + (PharmaceuticalChemistrySp - (Total1 < 0 ? 0 : Total1));
                        else if (Total <= 0)
                            group4Subcount = PharmacognosySp;
                        else if (PharmacognosySp == Required)
                            group4Subcount = PharmacognosySp;
                        bpharmacylist.BPharmacySubGroup1Count = group4Subcount > 3 ? 3 : group4Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = 3; ;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup4";
                    }

                    //else if (list.PharmacyspecName == "English" || list.PharmacyspecName == "Mathematics" || list.PharmacyspecName == "Computers" || list.PharmacyspecName == "Computer Science")//|| list.PharmacyspecName == "Zoology"
                    //{
                    //    group6Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "English".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Mathematics".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER SCIENCE")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("CSE"));
                    //    //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("ZOOLOGY"));
                    //    bpharmacylist.BPharmacySubGroup1Count = group6Subcount;
                    //    if (bpharmacyintake == 100)
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 3;
                    //    }
                    //    else
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 2;
                    //    }

                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup6";
                    //}


                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                }


                //for pharma D specializations
                var pharmaD = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                if (pharmaD.Count > 0)
                {
                    foreach (var list in pharmdspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D";
                        bpharmacylist.Department = "Pharm.D";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadrequiredfaculty = PharmDrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                            //               f.registered_faculty_specialization == "PharmD".ToUpper() ||
                            //              f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                            //              f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                            //              f.registered_faculty_specialization == "Pharma D".ToUpper());

                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18 || f.PGSpecializationId == 122);
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            //pharmadgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                            //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practise".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper());

                            //int HospitalSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);
                            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                            int Required = bpharmacyintake >= 100 ? 5 : 4;
                            int Total = (PharmacologySp) - Required;
                            int Total1 = Required - PharmacologySp;
                            if (Total > 0)
                                pharmadgroup1Subcount = PharmDSp + (PharmacologySp - Required);
                            else if (Total <= 0)
                                pharmadgroup1Subcount = PharmDSp;
                            else if (PharmacologySp == Required)
                                pharmadgroup1Subcount = PharmDSp;
                            bpharmacylist.BPharmacySubGroup1Count = pharmadgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadTotalintake / 30;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                            intakedetailsList.Where(i => i.Degree == "Pharm.D" && i.Department == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroup1Count = pharmadgroup1Subcount);
                            intakedetailsList.Where(i => i.Degree == "Pharm.D" && i.Department == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupRequired = bpharmacylist.BPharmacySubGroupRequired);
                        }

                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                    }
                }


                //for pharma.D PB specializations
                var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                if (pharmaDPB.Count > 0)
                {
                    foreach (var list in pharmdpbspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D PB";
                        bpharmacylist.Department = "Pharm.D PB";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadPBrequiredfaculty = PharmDPBrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadPbSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            //pharmadPBgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                            //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practise".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;

                            // int HospitalSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);
                            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                            int Required = bpharmacyintake >= 100 ? 5 : 4;
                            int Total = (PharmacologySp) - Required;
                            int Total1 = Required - PharmacologySp;
                            int pharmadgroup1Subcount1 = 0;
                            if (Total > 0)
                                pharmadPBgroup1Subcount = PharmDSp + (PharmacologySp - Required);
                            else if (Total <= 0)
                                pharmadPBgroup1Subcount = PharmDSp + PharmacologySp;


                            bpharmacylist.BPharmacySubGroup1Count = pharmadPBgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadPBTotalintake / 10;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                            intakedetailsList.Where(i => i.Degree == "Pharm.D PB" && i.Department == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroup1Count = pharmadPBgroup1Subcount);
                            intakedetailsList.Where(i => i.Degree == "Pharm.D PB" && i.Department == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupRequired = bpharmacylist.BPharmacySubGroupRequired);
                        }
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                    }
                }

                if (BpharcyrequiredFaculty > 0)
                {
                    if (bpharmacyintake >= 100)
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    else
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    //intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);
                    intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);

                    Group1PharmacyFaculty = group1Subcount; Group2PharmacyFaculty = group2Subcount; Group3PharmacyFaculty = group3Subcount;
                    Group4PharmacyFaculty = group4Subcount; Group5PharmacyFaculty = group5Subcount; Group6PharmacyFaculty = group6Subcount;
                    if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty)
                    {
                        if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)// && group5Subcount >= 2 && group6Subcount >= (bpharmacyintake >= 100 ? 3 : 2)
                        {
                            subgroupconditionsmet = conditionbpharm = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionbpharm = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionbpharm = "Yes";
                    }

                    ViewBag.BpharmcyCondition = conditionbpharm;
                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                }
                ViewBag.PharmDrequiredFaculty = PharmDrequiredFaculty;
                if (PharmDrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDrequiredFaculty)
                    {
                        if (pharmadgroup1Subcount >= pharmadTotalintake / 30)
                        {
                            subgroupconditionsmet = conditionpharmd = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionpharmd = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionpharmd = "Yes";
                    }

                    ViewBag.PharmaDCondition = conditionpharmd;
                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    //if (conditionbpharm == "No")
                    //{
                    //    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    //}
                    //else
                    //{
                    //    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    //}


                }


                else if (PharmDrequiredFaculty == 0 && conditionbpharm == "No")
                {
                    ViewBag.PharmaDCondition = "No";
                }


                ViewBag.PharmDPBrequiredFaculty = PharmDPBrequiredFaculty;
                if (PharmDPBrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDPBrequiredFaculty)
                    {
                        if (pharmadPBgroup1Subcount >= pharmadPBTotalintake / 10)
                        {
                            subgroupconditionsmet = conditionphardpb = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionphardpb = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionphardpb = "Yes";
                    }

                    ViewBag.PharmaDPBCondition = conditionphardpb;
                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    //if (conditionbpharm == "No" && conditionpharmd == "No")
                    //{
                    //    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    //}
                    //else
                    //{
                    //    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    //}

                }

                else if (PharmDPBrequiredFaculty == 0 && conditionbpharm == "No")
                {
                    ViewBag.PharmaDPBCondition = "No";
                }

                intakedetailsList.FirstOrDefault().FacultyWithIntakeReports = intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                #endregion



                #endregion

                #region Faculty Appeal Deficiency Status
                var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
                var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
                foreach (var item in intakedetailsList)
                {
                    var deparment = jntuh_deparment.FirstOrDefault(i => i.id == item.DepartmentID);
                    if (deparment != null)
                    {
                        var jntuh_departmentcount =
                        jntuh_appeal_faculty.Where(
                            i =>
                                i.DepartmentId == item.DepartmentID && i.SpecializationId == item.specializationId &&
                                i.DegreeId == deparment.degreeId && i.collegeId == collegeId && i.NOtificationReport != null).ToList();
                        var facultydefcount = (int)Math.Ceiling(item.requiredFaculty) - item.totalFaculty;

                        if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty && (item.Department == "B.Pharmacy"))
                        {
                            if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                            {
                                Allgroupscount = 0;
                            }
                            else
                            {
                                //var bpharmacyIntake = (bpharmacyintake >= 100 ? 3 : 2);
                                if (group1Subcount < (bpharmacyintake >= 100 ? 6 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 4) - group1Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group2Subcount < (bpharmacyintake >= 100 ? 6 : 5))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 5) - group2Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group3Subcount < (bpharmacyintake >= 100 ? 5 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 5 : 4) - group3Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group4Subcount < 3)
                                {
                                    var count = 3 - group4Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                //if (group5Subcount < 2)
                                //{
                                //    var count = 2 - group5Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                                //if (group6Subcount < bpharmacyIntake)
                                //{
                                //    var count = bpharmacyIntake - group6Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                            }
                            facultydefcount = Allgroupscount;
                        }

                        else if (jntuh_registered_faculty.Count < BpharcyrequiredFaculty && (item.Department == "B.Pharmacy"))
                        {
                            if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                            {
                                Allgroupscount = 0;
                            }
                            else
                            {
                                //var bpharmacyIntake = (bpharmacyintake >= 100 ? 3 : 2);
                                if (group1Subcount < (bpharmacyintake >= 100 ? 6 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 4) - group1Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group2Subcount < (bpharmacyintake >= 100 ? 6 : 5))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 5) - group2Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group3Subcount < (bpharmacyintake >= 100 ? 5 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 5 : 4) - group3Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group4Subcount < 3)
                                {
                                    var count = 3 - group4Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                //if (group5Subcount < 2)
                                //{
                                //    var count = 2 - group5Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                                //if (group6Subcount < bpharmacyIntake)
                                //{
                                //    var count = bpharmacyIntake - group6Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                            }

                            var lessfaculty = BpharcyrequiredFaculty - jntuh_registered_faculty.Count;

                            if (lessfaculty > Allgroupscount)
                            {
                                facultydefcount = Allgroupscount;//(int)lessfaculty + 
                            }
                            else if (Allgroupscount > lessfaculty)
                            {
                                facultydefcount = Allgroupscount;//+ (int)lessfaculty
                            }
                        }

                        if (item.Department == "B.Pharmacy")
                        {
                            if (Allgroupscount > 0) { item.deficiency = true; }
                            ViewBag.BpharmacyRequired = facultydefcount;
                        }

                        if (item.PharmacyspecializationWiseFaculty < 1 && item.Department == "M.Pharmacy" && item.requiredFaculty > 0)
                        {
                            facultydefcount = (int)Math.Ceiling(item.requiredFaculty) + 1;
                        }
                        if (item.PharmacyspecializationWiseFaculty >= 1 && item.Department == "M.Pharmacy" && item.requiredFaculty > 0)
                        {
                            facultydefcount = (int)Math.Ceiling(item.requiredFaculty);
                        }
                        if (item.Department == "Pharm.D" || item.Department == "Pharm.D PB")
                        {
                            facultydefcount = item.BPharmacySubGroupRequired - item.BPharmacySubGroup1Count;
                        }
                        if (facultydefcount <= jntuh_departmentcount.Count && jntuh_departmentcount.Count != 0)
                        {
                            item.deficiencystatus = true;
                        }
                    }
                }


                #endregion

            }
            return View(intakedetailsList);
            #endregion

        }


        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        [ActionName("Notusing")]
        public ActionResult CollegeFacultyAddedDetails()
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
          //  collegeId = 29;
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);  
            }
            
            List<jntuh_appeal_faculty_registered> facultydetails = new List<jntuh_appeal_faculty_registered>();
            if (collegeId != 0)
            {
                facultydetails = db.jntuh_appeal_faculty_registered.Where(i => i.collegeId == collegeId).Select(i => i).ToList();
            }
            return View(facultydetails);
        }

        //
       

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        [ActionName("Notusing")]
        public ActionResult CollegePrincipalAddedDetails()
        {
            var userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            var facultydetails = new List<jntuh_appeal_principal_registered>();
            if (collegeId != 0)
            {
                facultydetails = db.jntuh_appeal_principal_registered.Where(i => i.collegeId == collegeId).Select(i => i).ToList();
            }
            return View(facultydetails);
        }
        #endregion


        //[Authorize(Roles = "Admin,College")]
        //[HttpGet]
        //public ActionResult CollegeFacultyWithIntake(string type)
        //{
        //    #region old code
        //    //var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
        //    //{
        //    //    collegeId = c.id,
        //    //    collegeName = c.collegeCode + "-" + c.collegeName
        //    //}).OrderBy(c => c.collegeName).ToList();

        //    ////colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

        //    //ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
        //    //List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
        //    //List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
        //    //if (collegeId != null)
        //    //{
        //    //    int[] collegeIDs = null;
        //    //    int facultystudentRatio = 0;
        //    //    decimal facultyRatio = 0m;
        //    //    if (collegeId != 0)
        //    //    {
        //    //        collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
        //    //    }
        //    //    else
        //    //    {
        //    //        collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
        //    //    }
        //    //    var jntuh_academic_year = db.jntuh_academic_year.ToList();
        //    //    var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
        //    //    var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
        //    //    var jntuh_degree = db.jntuh_degree.ToList();

        //    //    int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
        //    //    int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
        //    //    int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
        //    //    int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
        //    //    int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();

        //    //    List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
        //    //    foreach (var item in intake)
        //    //    {
        //    //        CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
        //    //        newIntake.id = item.id;
        //    //        newIntake.collegeId = item.collegeId;
        //    //        newIntake.academicYearId = item.academicYearId;
        //    //        newIntake.shiftId = item.shiftId;
        //    //        newIntake.isActive = item.isActive;
        //    //        newIntake.nbaFrom = item.nbaFrom;
        //    //        newIntake.nbaTo = item.nbaTo;
        //    //        newIntake.specializationId = item.specializationId;
        //    //        newIntake.Specialization = item.jntuh_specialization.specializationName;
        //    //        newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
        //    //        newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
        //    //        newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
        //    //        newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
        //    //        newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
        //    //        newIntake.shiftId = item.shiftId;
        //    //        newIntake.Shift = item.jntuh_shift.shiftName;
        //    //        collegeIntakeExisting.Add(newIntake);
        //    //    }
        //    //    collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

        //    //    //college Reg nos
        //    //    var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
        //    //    string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

        //    //    //education categoryIds UG,PG,PHD...........
        //    //    var jntuh_education_category = db.jntuh_education_category.ToList();

        //    //    //Reg nos related online facultyIds
        //    //    var jntuh_registered_faculty = db.jntuh_registered_faculty
        //    //                                     .Where(rf => strRegnos.Contains(rf.RegistrationNumber) && (rf.collegeId == null || rf.collegeId == collegeId))
        //    //                                     .Select(rf => new
        //    //                                     {
        //    //                                         RegistrationNumber = rf.RegistrationNumber,
        //    //                                         Department = rf.jntuh_department.departmentName,
        //    //                                         HighestDegreeID = rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max()
        //    //                                     }).Where(e => e.HighestDegreeID != 0)
        //    //                                     .ToList()
        //    //                                     .Select(rf => new
        //    //                                     {
        //    //                                         RegistrationNumber = rf.RegistrationNumber,
        //    //                                         Department = rf.Department,
        //    //                                         HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
        //    //                                         Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
        //    //                                         SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault()
        //    //                                     }).Where(e => e.Department != null)
        //    //                                     .ToList();


        //    //    foreach (var item in collegeIntakeExisting)
        //    //    {
        //    //        CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
        //    //        int phdFaculty = 0;
        //    //        int pgFaculty = 0;
        //    //        int ugFaculty = 0;


        //    //        intakedetails.collegeId = item.collegeId;
        //    //        intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
        //    //        intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
        //    //        intakedetails.Degree = item.Degree;
        //    //        intakedetails.Department = item.Department;
        //    //        intakedetails.Specialization = item.Specialization;
        //    //        intakedetails.specializationId = item.specializationId;
        //    //        intakedetails.DepartmentID = item.DepartmentID;
        //    //        intakedetails.shiftId = item.shiftId;

        //    //        intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
        //    //        intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
        //    //        intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
        //    //        intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
        //    //        facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());
        //    //        if (item.Degree == "B.Tech" || item.Degree == "B.Pharmacy")
        //    //        {
        //    //            intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
        //    //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
        //    //        }
        //    //        else if (item.Degree == "M.Tech" || item.Degree == "M.Pharmacy" || item.Degree == "MBA")
        //    //        {
        //    //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake1);
        //    //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);

        //    //        }
        //    //        else if (item.Degree == "MCA")
        //    //        {
        //    //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3);
        //    //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
        //    //        }
        //    //        else //MAM MTM Pharm.D Pharm.D PB
        //    //        {
        //    //            intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
        //    //            facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
        //    //        }
        //    //        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
        //    //        intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

        //    //        string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
        //    //        if (strdegreetype == "UG")
        //    //        {
        //    //            if (item.Degree == "B.Pharmacy")
        //    //            {
        //    //                ugFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
        //    //            }
        //    //            else
        //    //            {
        //    //                ugFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && f.Recruitedfor == "UG").Count();
        //    //            }
        //    //        }
        //    //        if (strdegreetype == "PG")
        //    //        {
        //    //            if (item.Degree == "M.Pharmacy")
        //    //            {
        //    //                pgFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId).Count();
        //    //            }
        //    //            else
        //    //            {
        //    //                pgFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId).Count();
        //    //            }
        //    //        }
        //    //        if (item.Degree == "B.Pharmacy" || item.Degree == "M.Pharmacy")
        //    //        {
        //    //            phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy").Count();

        //    //        }
        //    //        else
        //    //        {
        //    //            phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == item.Department).Count();
        //    //        }


        //    //        intakedetails.phdFaculty = phdFaculty;
        //    //        intakedetails.pgFaculty = pgFaculty;
        //    //        intakedetails.ugFaculty = ugFaculty;
        //    //        intakedetails.totalFaculty = (ugFaculty + pgFaculty);
        //    //        //=============//


        //    //        intakedetailsList.Add(intakedetails);
        //    //    }
        //    //    intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

        //    //    string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others" };
        //    //    int btechdegreecount = intakedetailsList.Where(d => d.Degree == "B.Tech").Count();
        //    //    if (btechdegreecount != 0)
        //    //    {
        //    //        foreach (var department in strOtherDepartments)
        //    //        {
        //    //            int ugFaculty = jntuh_registered_faculty.Where(f => f.Department == department && f.Recruitedfor == "UG").Count();
        //    //            int pgFaculty = jntuh_registered_faculty.Where(f => f.Department == department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")).Count();
        //    //            int phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == department).Count();
        //    //            intakedetailsList.Add(new CollegeFacultyWithIntakeReport { collegeId = (int)collegeId, Degree = "B.Tech", Department = department, Specialization = department, ugFaculty = ugFaculty, pgFaculty = pgFaculty, phdFaculty = phdFaculty });

        //    //        }
        //    //    }

        //    //    if (type == "Excel")
        //    //    {
        //    //        string strcollegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
        //    //        Response.ClearContent();
        //    //        Response.Buffer = true;
        //    //        Response.AddHeader("content-disposition", "attachment; filename=" + strcollegeCode + "-Faculty.xls");
        //    //        Response.ContentType = "application/vnd.ms-excel";
        //    //        return PartialView("_CollegeFacultyWithIntake", intakedetailsList);
        //    //    }
        //    //}
        //    //return View(intakedetailsList);
        //    #endregion

        //    #region new code
        //    int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
        //    int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();

        //    #region Written By Srinivas
        //    var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

        //    var currentDate = DateTime.Now;
        //    DateTime EditFromDate;
        //    DateTime EditTODate;
        //    int collegeid = 0;
        //    bool PageEdible = false;
        //    if (CollegeDetails != null)
        //    {
        //        EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
        //        EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
        //        collegeid = Convert.ToInt32(CollegeDetails.collegeId);
        //        PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

        //        if (currentDate >= EditFromDate && currentDate <= EditTODate)
        //        {
        //            if (PageEdible == false)
        //            {
        //                return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
        //            }
        //        }
        //        else
        //        {
        //            return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
        //        }
        //    }
        //    else
        //    {
        //        return RedirectToAction("College", "Dashboard");
        //    }

        //    // Principal Details
        //    string strPrincipalRegno = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).FirstOrDefault();

        //    //Reg nos related online facultyIds
        //    var registeredPrincipal = db.jntuh_registered_faculty.Where(rf => strPrincipalRegno == rf.RegistrationNumber && (rf.collegeId == collegeId)).ToList();


        //    var jntuh_Principals_registered = registeredPrincipal.Where(rf => rf.DepartmentId != null && rf.DeactivationReason == "")
        //                                         .Select(rf => new
        //                                         {
        //                                             RegistrationNumber = rf.RegistrationNumber,
        //                                             Department = rf.jntuh_department.departmentName,
        //                                             HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
        //                                             IsApproved = rf.isApproved,
        //                                             PanNumber = rf.PANNumber,
        //                                             AadhaarNumber = rf.AadhaarNumber
        //                                         }).ToList();
        //    ViewBag.PrincipalRegno = strPrincipalRegno;
        //    if (jntuh_Principals_registered.Count > 0)
        //        ViewBag.PrincipalDeficiency = "NO";
        //    else
        //        ViewBag.PrincipalDeficiency = "YES";
        //    #endregion

        //    #region Faculty
        //    var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
        //    {
        //        collegeId = c.id,
        //        collegeName = c.collegeCode + "-" + c.collegeName
        //    }).OrderBy(c => c.collegeName).ToList();

        //    //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

        //    ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
        //    List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
        //    List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
        //    if (collegeId != null)
        //    {
        //        int userCollegeID = (int)collegeId;
        //        var jntuh_specialization = db.jntuh_specialization.ToList();
        //        int[] collegeIDs = null;
        //        int facultystudentRatio = 0;
        //        decimal facultyRatio = 0m;
        //        if (collegeId != 0)
        //        {
        //            collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
        //        }
        //        else
        //        {
        //            collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
        //        }
        //        var jntuh_academic_year = db.jntuh_academic_year.ToList();
        //        var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
        //        var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
        //        var jntuh_degree = db.jntuh_degree.ToList();

        //        int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
        //        var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
        //        int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();


        //        int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
        //        int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
        //        int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
        //        int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
        //        int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();

        //        List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
        //        foreach (var item in intake)
        //        {
        //            CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
        //            newIntake.id = item.id;
        //            newIntake.collegeId = item.collegeId;
        //            newIntake.academicYearId = item.academicYearId;
        //            newIntake.shiftId = item.shiftId;
        //            newIntake.isActive = item.isActive;
        //            newIntake.nbaFrom = item.nbaFrom;
        //            newIntake.nbaTo = item.nbaTo;
        //            newIntake.specializationId = item.specializationId;
        //            newIntake.Specialization = item.jntuh_specialization.specializationName;
        //            newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
        //            newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
        //            newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
        //            newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
        //            newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
        //            newIntake.shiftId = item.shiftId;
        //            newIntake.Shift = item.jntuh_shift.shiftName;
        //            newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
        //            collegeIntakeExisting.Add(newIntake);
        //        }
        //        collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

        //        //college Reg nos
        //        var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
        //        string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

        //        //education categoryIds UG,PG,PHD...........
        //        var jntuh_education_category = db.jntuh_education_category.ToList();

        //        //Reg nos related online facultyIds
        //        var registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber)).ToList();//&& (rf.collegeId == null || rf.collegeId == collegeId)
        //        //Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
        //        var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

        //        var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.DepartmentId != null && ((rf.Absent != true) && (rf.NotQualifiedAsperAICTE != true)
        //                                                && (rf.NoSCM != true) && (rf.PANNumber != null) && rf.Notin116 != true && rf.PHDundertakingnotsubmitted != true && rf.Blacklistfaculy != true)).Select(rf => new
        //                                                {
        //                                                    RegistrationNumber = rf.RegistrationNumber,
        //                                                    Department = rf.jntuh_department.departmentName,
        //                                                    HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
        //                                                    IsApproved = rf.isApproved,
        //                                                    PanNumber = rf.PANNumber,
        //                                                    AadhaarNumber = rf.AadhaarNumber,
        //                                                    TotalExperience = rf.TotalExperience
        //                                                }).ToList();
        //        jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
        //        var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
        //        {
        //            RegistrationNumber = rf.RegistrationNumber,
        //            Department = rf.Department,
        //            HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
        //            Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
        //            SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
        //            PanNumber = rf.PanNumber,
        //            AadhaarNumber = rf.AadhaarNumber,
        //            TotalExperience = rf.TotalExperience
        //        }).Where(e => e.Department != null).ToList();

        //        var jjj = jntuh_registered_faculty.Where(i => i.Department == "CSE").ToList();
        //        foreach (var item in collegeIntakeExisting)
        //        {
        //            CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
        //            int phdFaculty = 0;
        //            int pgFaculty = 0;
        //            int ugFaculty = 0;





        //            intakedetails.collegeId = item.collegeId;
        //            intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
        //            intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
        //            intakedetails.Degree = item.Degree;
        //            intakedetails.Department = item.Department;
        //            intakedetails.Specialization = item.Specialization;
        //            intakedetails.specializationId = item.specializationId;
        //            intakedetails.DepartmentID = item.DepartmentID;
        //            intakedetails.shiftId = item.shiftId;

        //            intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
        //            intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
        //            intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
        //            intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);

        //            facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

        //            if (item.Degree == "B.Tech")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
        //                                            (intakedetails.approvedIntake4);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
        //                               Convert.ToDecimal(facultystudentRatio);
        //                //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
        //            }
        //            else if (item.Degree == "M.Tech" || item.Degree == "MBA")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
        //                               Convert.ToDecimal(facultystudentRatio);

        //            }
        //            else if (item.Degree == "MCA")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
        //                                            (intakedetails.approvedIntake3);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
        //                               Convert.ToDecimal(facultystudentRatio);
        //            }
        //            else if (item.Degree == "B.Pharmacy")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
        //                                            (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;

        //            }
        //            else if (item.Degree == "M.Pharmacy")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;

        //            }
        //            else if (item.Degree == "Pharm.D")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
        //                                            (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
        //                                            (intakedetails.approvedIntake5);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
        //            }
        //            else if (item.Degree == "Pharm.D PB")
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
        //            }
        //            else //MAM MTM Pharm.D Pharm.D PB
        //            {
        //                intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
        //                                            (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
        //                                            (intakedetails.approvedIntake5);
        //                facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
        //                               Convert.ToDecimal(facultystudentRatio);
        //            }
        //            intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
        //            intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

        //            string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
        //            if (strdegreetype == "UG")
        //            {
        //                if (item.Degree == "B.Pharmacy")
        //                {
        //                    intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
        //                }
        //                else if (item.Degree == "Pharm.D")
        //                {
        //                    intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
        //                }
        //                else if (item.Degree == "Pharm.D PB")
        //                {
        //                    intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
        //                }
        //                else
        //                {
        //                    intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department);//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
        //                }
        //            }
        //            if (strdegreetype == "PG")
        //            {
        //                if (item.Degree == "M.Pharmacy")
        //                {
        //                    intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" &&
        //                        f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
        //                }
        //                else
        //                {
        //                    intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department &&
        //                                f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
        //                }
        //            }

        //            if (strdegreetype == "Dual Degree")
        //            {
        //                intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
        //            }
        //            if (item.Degree == "B.Pharmacy")
        //            {
        //                ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
        //                pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
        //                phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
        //                //intakedetails.Department = "Pharmacy";
        //            }
        //            if (item.Degree == "M.Pharmacy")
        //            {
        //                ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
        //                pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) &&
        //                            f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
        //                phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
        //                //noPanOrAadhaarcount =registeredFaculty.Where(f =>f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null &&
        //                //            (f.isApproved == null || f.isApproved == true)).Count();
        //                //intakedetails.Department = "Pharmacy";
        //            }
        //            else if (item.Degree == "Pharm.D")
        //            {
        //                ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
        //                pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
        //                phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
        //                //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
        //                intakedetails.Department = "Pharm.D";
        //            }
        //            else if (item.Degree == "Pharm.D PB")
        //            {
        //                ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
        //                pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
        //                phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
        //                //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
        //                intakedetails.Department = "Pharm.D PB";
        //            }
        //            else
        //            {
        //                ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
        //                pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
        //                phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);

        //            }


        //            intakedetails.phdFaculty = phdFaculty;
        //            intakedetails.pgFaculty = pgFaculty;
        //            intakedetails.ugFaculty = ugFaculty;
        //            intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
        //            //=============//


        //            intakedetailsList.Add(intakedetails);
        //        }
        //        intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

        //        string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others" };
        //        int btechdegreecount = intakedetailsList.Where(d => d.Degree == "B.Tech").Count();
        //        var jntuh_departments = db.jntuh_department.ToList();
        //        if (btechdegreecount != 0)
        //        {
        //            foreach (var department in strOtherDepartments)
        //            {
        //                int speId = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.id).FirstOrDefault();
        //                var deptname = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.departmentName).FirstOrDefault();
        //                var deparmentid = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.departmentId).FirstOrDefault();
        //                int ugFaculty = jntuh_registered_faculty.Where(f => f.Department == department && f.HighestDegree == "UG").Count();
        //                int pgFaculty = jntuh_registered_faculty.Where(f => (f.HighestDegree == "PG" || f.HighestDegree == "M.Phil") && f.Department == department).Count();
        //                int phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == department).Count();
        //                intakedetailsList.Add(new CollegeFacultyWithIntakeReport
        //                {
        //                    collegeId = (int)collegeId,
        //                    Degree = "B.Tech",
        //                    Department = department,
        //                    Specialization = department,
        //                    ugFaculty = ugFaculty,
        //                    pgFaculty = pgFaculty,
        //                    phdFaculty = phdFaculty,
        //                    totalFaculty = ugFaculty + pgFaculty + phdFaculty,
        //                    specializationId = speId,
        //                    shiftId = 1,
        //                    DepartmentID = department != "Others" ? deparmentid : 60,
        //                    specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == deptname)
        //                });

        //            }
        //        }

        //        List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.ToList();
        //        int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech").Select(d => d.approvedIntake1).Sum();
        //        var degrees = db.jntuh_degree.ToList();
        //        var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 150);
        //        int remainingFaculty = 0;
        //        int remainingPHDFaculty = 0;
        //        decimal departmentWiseRequiredFaculty = 0;
        //        var distDeptcount = 1;
        //        var deptloop = 1;
        //        foreach (var item in facultyCounts)
        //        {
        //            distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

        //            int indexnow = facultyCounts.IndexOf(item);

        //            if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
        //            {
        //                deptloop = 1;
        //            }

        //            departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

        //            string minimumRequirementMet = string.Empty;
        //            int facultyShortage = 0;
        //            int adjustedFaculty = 0;
        //            int adjustedPHDFaculty = 0;

        //            int tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));//item.totalFaculty
        //            int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

        //            if (strOtherDepartments.Contains(item.Department))
        //            {
        //                rFaculty = (int)firstYearRequired;
        //                departmentWiseRequiredFaculty = (int)firstYearRequired;
        //            }

        //            var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

        //            if (deptloop == 1)
        //            {
        //                if (rFaculty <= tFaculty)
        //                {
        //                    minimumRequirementMet = "NO";
        //                    item.deficiency = false;
        //                    remainingFaculty = tFaculty - rFaculty;
        //                    adjustedFaculty = rFaculty;//tFaculty
        //                    item.totalFaculty = adjustedFaculty;
        //                }
        //                else
        //                {
        //                    minimumRequirementMet = "YES";
        //                    item.deficiency = true;
        //                    adjustedFaculty = tFaculty;
        //                    facultyShortage = rFaculty - tFaculty;
        //                    item.totalFaculty = adjustedFaculty;
        //                }

        //                remainingPHDFaculty = item.phdFaculty;

        //                if (remainingPHDFaculty > 0 && (degreeType.Equals("PG") || degreeType.Equals("UG"))) //degreeType.Equals("PG")
        //                {
        //                    //adjustedPHDFaculty = 1;
        //                    adjustedPHDFaculty = remainingPHDFaculty;
        //                    remainingPHDFaculty = remainingPHDFaculty - 1;
        //                }
        //            }
        //            else
        //            {
        //                if (rFaculty <= tFaculty)
        //                {
        //                    minimumRequirementMet = "NO";
        //                    item.deficiency = false;
        //                    remainingFaculty = remainingFaculty - rFaculty;
        //                    adjustedFaculty = rFaculty;
        //                    item.totalFaculty = adjustedFaculty;
        //                }
        //                else
        //                {
        //                    minimumRequirementMet = "YES";
        //                    item.deficiency = true;
        //                    adjustedFaculty = remainingFaculty;
        //                    item.totalFaculty = adjustedFaculty;
        //                    facultyShortage = rFaculty - remainingFaculty;
        //                    remainingFaculty = 0;
        //                }
        //                remainingPHDFaculty = item.phdFaculty;
        //                if (remainingPHDFaculty > 0 && (degreeType.Equals("PG") || degreeType.Equals("UG")))
        //                {
        //                    //adjustedPHDFaculty = 1;
        //                    adjustedPHDFaculty = remainingPHDFaculty;
        //                    remainingPHDFaculty = remainingPHDFaculty - 1;
        //                }
        //            }
        //            if (adjustedPHDFaculty > 0)
        //            {
        //                item.PHDdeficiency = false;
        //            }
        //            //else if (degreeType.Equals("PG") && item.approvedIntake1 > 0)
        //            //{
        //            //    item.PHDdeficiency = true;
        //            //    item.AvailablePHDFaculty = 1;
        //            //}
        //            //else
        //            //{
        //            //    item.PHDdeficiency = false;
        //            //}
        //            else if (item.approvedIntake1 > 0)
        //            {
        //                item.PHDdeficiency = true;
        //                item.AvailablePHDFaculty = 1;
        //            }
        //            if (strOtherDepartments.Contains(item.Department))
        //            {
        //                item.totalIntake = totalBtechFirstYearIntake;
        //                item.requiredFaculty = Math.Ceiling((decimal)firstYearRequired);
        //            }
        //            deptloop++;
        //        }
        //    #endregion


        //        #region Faculty Appeal Deficiency Status
        //        var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
        //        var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
        //        foreach (var item in intakedetailsList)
        //        {
        //            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == item.DepartmentID);
        //            if (deparment != null)
        //            {
        //                var jntuh_departmentcount =
        //                jntuh_appeal_faculty.Where(
        //                    i =>
        //                        i.DepartmentId == item.DepartmentID && i.SpecializationId == item.specializationId &&
        //                        i.DegreeId == deparment.degreeId && i.collegeId == collegeId).ToList();
        //                var facultydefcount = (int)Math.Ceiling(item.requiredFaculty) - item.totalFaculty;
        //                if (item.PHDdeficiency == true)
        //                {
        //                    facultydefcount = facultydefcount + item.AvailablePHDFaculty;
        //                }
        //                if (facultydefcount <= jntuh_departmentcount.Count && jntuh_departmentcount.Count != 0)
        //                {
        //                    item.deficiencystatus = true;
        //                }
        //            }
        //        }


        //        #endregion


        //        #region Principal Appeal Deficiency Status

        //        var jntuhAppealPrincipal = db.jntuh_appeal_principal_registered.AsNoTracking().ToList();
        //        var prinipal = jntuhAppealPrincipal.Where(i => i.collegeId == collegeId).ToList();
        //        if (prinipal.Count > 0)
        //        {
        //            ViewBag.principaldeficiencystatus = true;
        //        }
        //        else
        //        {
        //            ViewBag.principaldeficiencystatus = false;
        //        }
        //        #endregion


        //        #region For labs
        //        int[] specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeId).Select(e => e.specializationId).Distinct().ToArray();
        //        List<Lab> collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
        //                                                    .Where(l => specializationIds.Contains(l.SpecializationID))
        //                                                    .Select(l => new Lab
        //                                                    {
        //                                                        EquipmentID = l.id,
        //                                                        degreeId = l.DegreeID,
        //                                                        degree = l.jntuh_degree.degree,
        //                                                        degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
        //                                                        departmentId = l.DepartmentID,
        //                                                        department = l.jntuh_department.departmentName,
        //                                                        specializationId = l.SpecializationID,
        //                                                        specializationName = l.jntuh_specialization.specializationName,
        //                                                        year = l.Year,
        //                                                        Semester = l.Semester,
        //                                                        Labcode = l.Labcode,
        //                                                        LabName = l.LabName,
        //                                                        EquipmentName = l.EquipmentName
        //                                                    })
        //                                                    .OrderBy(l => l.degreeDisplayOrder)
        //                                                    .ThenBy(l => l.department)
        //                                                    .ThenBy(l => l.specializationName)
        //                                                    .ThenBy(l => l.year).ThenBy(l => l.Semester)
        //                                                    .ToList();

        //        List<AnonymousLabclass> collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
        //                                                    .Where(l => specializationIds.Contains(l.SpecializationID))
        //                                                    .Select(l => new AnonymousLabclass
        //                                                    {
        //                                                        id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
        //                                                        EquipmentID = l.id,
        //                                                        LabName = l.LabName,
        //                                                        EquipmentName = l.EquipmentName,
        //                                                        LabCode = l.Labcode,
        //                                                    })
        //                                                    .OrderBy(l => l.LabName)
        //                                                    .ThenBy(l => l.EquipmentName)
        //                                                    .ToList();

        //        var collegeEquipments = db.jntuh_college_laboratories_dataentry2.Where(l => l.CollegeID == collegeId).Select(l => l.EquipmentID).Distinct().ToArray();

        //        var list = collegeLabMaster.Where(c => !collegeEquipments.Contains(c.EquipmentID)).Select(c => new { EquipmentID = c.id, LabCode = c.Labcode, LabName = c.LabName, EquipmentName = c.EquipmentName })
        //                                   .OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

        //        var labDeficiencies = db.jntuh_college_laboratories_deficiency.Where(ld => ld.CollegeId == collegeId && ld.Deficiency == true).Select(ld => ld.LabCode).ToArray();

        //        var list1 = collegeLabAnonymousLabclass.OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

        //        list = list.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();
        //        list1 = list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

        //        #region this code written by suresh

        //        int?[] labequipmentIds = list1.Select(i => i.EquipmentID).ToArray();

        //        int[] clgequipmentIDs =
        //            db.jntuh_college_laboratories.Where(
        //                l => l.CollegeID == collegeId && labequipmentIds.Contains(l.EquipmentID))
        //                .Select(i => i.EquipmentID)
        //                .ToArray();

        //        list1 = list1.Where(l => !clgequipmentIDs.Contains((int)l.EquipmentID))
        //                .ToList();


        //        #endregion
        //        if (facultyCounts.Count > 0)
        //        {
        //            facultyCounts.FirstOrDefault().LabsListDefs1 = list1.ToList();
        //            //facultyCounts.FirstOrDefault().LabsListDefs = list1;
        //        }
        //        ViewBag.labslist = list;
        //        //ViewBag.labslistcount = list.Count;
        //        //TempData["labslist"] = list;
        //        #endregion


        //        #region For CollegeIntake


        //        int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
        //        ViewBag.FirstYear = String.Format("{0}-{1}", (actualYear).ToString(), (actualYear + 1).ToString().Substring(2, 2));
        //        ViewBag.SecondYear = String.Format("{0}-{1}", (actualYear - 1).ToString(), (actualYear).ToString().Substring(2, 2));
        //        ViewBag.ThirdYear = String.Format("{0}-{1}", (actualYear - 2).ToString(), (actualYear - 1).ToString().Substring(2, 2));
        //        ViewBag.FourthYear = String.Format("{0}-{1}", (actualYear - 3).ToString(), (actualYear - 2).ToString().Substring(2, 2));
        //        ViewBag.FifthYear = String.Format("{0}-{1}", (actualYear - 4).ToString(), (actualYear - 3).ToString().Substring(2, 2));


        //        int AY0 = jntuh_academic_year.Where(a => a.actualYear == (actualYear + 1)).Select(a => a.id).FirstOrDefault();
        //        // var presentYear = db.jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
        //        var AYY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
        //        var AYY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
        //        var AYY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
        //        var AYY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
        //        var AYY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();



        //        var intakelists = new List<CollegeIntakeExisting>();
        //        foreach (var item in collegeIntakeExisting)
        //        {

        //            if (item.nbaFrom != null)
        //                item.nbaFromDate = Utilities.MMDDYY2DDMMYY(item.nbaFrom.ToString());
        //            if (item.nbaTo != null)
        //                item.nbaToDate = Utilities.MMDDYY2DDMMYY(item.nbaTo.ToString());

        //            //FLAG : 1 - Approved, 0 - Admitted
        //            jntuh_college_intake_existing details = db.jntuh_college_intake_existing
        //                                                      .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == item.specializationId && e.shiftId == item.shiftId)
        //                                                      .Select(e => e)
        //                                                      .FirstOrDefault();
        //            if (details != null)
        //            {
        //                item.ApprovedIntake = details.approvedIntake;
        //                item.letterPath = details.approvalLetter;
        //                item.ProposedIntake = details.proposedIntake;
        //                item.courseStatus = details.courseStatus;
        //            }

        //            item.approvedIntake1 = GetIntake(userCollegeID, AYY1, item.specializationId, item.shiftId, 1);
        //            item.admittedIntake1 = GetIntake(userCollegeID, AYY1, item.specializationId, item.shiftId, 0);

        //            item.approvedIntake2 = GetIntake(userCollegeID, AYY2, item.specializationId, item.shiftId, 1);
        //            item.admittedIntake2 = GetIntake(userCollegeID, AYY2, item.specializationId, item.shiftId, 0);

        //            item.approvedIntake3 = GetIntake(userCollegeID, AYY3, item.specializationId, item.shiftId, 1);
        //            item.admittedIntake3 = GetIntake(userCollegeID, AYY3, item.specializationId, item.shiftId, 0);

        //            item.approvedIntake4 = GetIntake(userCollegeID, AYY4, item.specializationId, item.shiftId, 1);
        //            item.admittedIntake4 = GetIntake(userCollegeID, AYY4, item.specializationId, item.shiftId, 0);

        //            item.approvedIntake5 = GetIntake(userCollegeID, AYY5, item.specializationId, item.shiftId, 1);
        //            item.admittedIntake5 = GetIntake(userCollegeID, AYY5, item.specializationId, item.shiftId, 0);

        //            intakelists.Add(item);


        //        }

        //        if (intakelists.Count > 0)
        //        {
        //            intakedetailsList.FirstOrDefault().CollegeIntakeExistings = intakelists.OrderBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Department).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();
        //        }
        //        else
        //        {
        //            intakedetailsList.FirstOrDefault().CollegeIntakeExistings = new List<CollegeIntakeExisting>();
        //        }

        //        #endregion

        //        if (type == "Excel")
        //        {
        //            string strcollegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
        //            Response.ClearContent();
        //            Response.Buffer = true;
        //            Response.AddHeader("content-disposition", "attachment; filename=" + strcollegeCode + "-Faculty.xls");
        //            Response.ContentType = "application/vnd.ms-excel";
        //            return View("_CollegeFacultyWithIntake", intakedetailsList);
        //        }
        //    }
        //    return View(intakedetailsList);
        //    #endregion

        //}


        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult AppealAddEditCollegeIntake(int? id, int collegeId)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            CollegeIntakeExisting collegeIntakeExisting = new CollegeIntakeExisting();
            int userCollegeID = collegeId;
            if (id != null && userCollegeID == 0)
            {
                userCollegeID = db.jntuh_college_intake_existing.Where(i => i.id == id).Select(i => i.collegeId).FirstOrDefault();
            }

            ViewBag.IsUpdate = true;
            int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
            collegeIntakeExisting.collegeId = userCollegeID;
            collegeIntakeExisting.AICTEApprovalLettr = AICTEApprovalLettr;

            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            ViewBag.AcademicYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.academicYear).FirstOrDefault();
            int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

            //RAMESH: ADDED to MERGE BOTH EXISTING & PROPOSED INTAKE
            ViewBag.NextYear = String.Format("{0}-{1}", (actualYear + 1).ToString(), (actualYear + 2).ToString().Substring(2, 2));
            int AY0 = jntuh_academic_year.Where(a => a.actualYear == (actualYear + 1)).Select(a => a.id).FirstOrDefault();

            ViewBag.FirstYear = String.Format("{0}-{1}", (actualYear).ToString(), (actualYear + 1).ToString().Substring(2, 2));
            ViewBag.SecondYear = String.Format("{0}-{1}", (actualYear - 1).ToString(), (actualYear).ToString().Substring(2, 2));
            ViewBag.ThirdYear = String.Format("{0}-{1}", (actualYear - 2).ToString(), (actualYear - 1).ToString().Substring(2, 2));
            ViewBag.FourthYear = String.Format("{0}-{1}", (actualYear - 3).ToString(), (actualYear - 2).ToString().Substring(2, 2));
            ViewBag.FifthYear = String.Format("{0}-{1}", (actualYear - 4).ToString(), (actualYear - 3).ToString().Substring(2, 2));
            if (id != null)
            {
                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == userCollegeID && i.id == id).ToList();

                foreach (var item in intake)
                {
                    collegeIntakeExisting.id = item.id;
                    collegeIntakeExisting.collegeId = item.collegeId;
                    collegeIntakeExisting.academicYearId = item.academicYearId;
                    collegeIntakeExisting.shiftId = item.shiftId;
                    collegeIntakeExisting.isActive = item.isActive;
                    collegeIntakeExisting.nbaFrom = item.nbaFrom;
                    collegeIntakeExisting.nbaTo = item.nbaTo;
                    collegeIntakeExisting.specializationId = item.specializationId;
                    collegeIntakeExisting.Specialization = db.jntuh_specialization.Where(s => s.id == item.specializationId).Select(s => s.specializationName).FirstOrDefault();
                    collegeIntakeExisting.DepartmentID = db.jntuh_specialization.Where(s => s.id == item.specializationId).Select(s => s.departmentId).FirstOrDefault();
                    collegeIntakeExisting.Department = db.jntuh_department.Where(d => d.id == collegeIntakeExisting.DepartmentID).Select(d => d.departmentName).FirstOrDefault();
                    collegeIntakeExisting.degreeID = db.jntuh_department.Where(d => d.id == collegeIntakeExisting.DepartmentID).Select(d => d.degreeId).FirstOrDefault();
                    collegeIntakeExisting.Degree = db.jntuh_degree.Where(d => d.id == collegeIntakeExisting.degreeID).Select(d => d.degree).FirstOrDefault();
                    collegeIntakeExisting.shiftId = item.shiftId;
                    collegeIntakeExisting.Shift = db.jntuh_shift.Where(s => s.id == item.shiftId).Select(s => s.shiftName).FirstOrDefault();
                }

                if (collegeIntakeExisting.nbaFrom != null)
                    collegeIntakeExisting.nbaFromDate = Utilities.MMDDYY2DDMMYY(collegeIntakeExisting.nbaFrom.ToString());
                if (collegeIntakeExisting.nbaTo != null)
                    collegeIntakeExisting.nbaToDate = Utilities.MMDDYY2DDMMYY(collegeIntakeExisting.nbaTo.ToString());

                //FLAG : 1 - Approved, 0 - Admitted
                jntuh_college_intake_existing details = db.jntuh_college_intake_existing
                                                          .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == collegeIntakeExisting.specializationId && e.shiftId == collegeIntakeExisting.shiftId)
                                                          .Select(e => e)
                                                          .FirstOrDefault();
                if (details != null)
                {
                    collegeIntakeExisting.ApprovedIntake = details.approvedIntake;
                    collegeIntakeExisting.letterPath = details.approvalLetter;
                    collegeIntakeExisting.ProposedIntake = details.proposedIntake;
                    collegeIntakeExisting.courseStatus = details.courseStatus;
                }

                collegeIntakeExisting.approvedIntake1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake1 = GetIntake(userCollegeID, AY1, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);

                collegeIntakeExisting.approvedIntake2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake2 = GetIntake(userCollegeID, AY2, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);

                collegeIntakeExisting.approvedIntake3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake3 = GetIntake(userCollegeID, AY3, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);

                collegeIntakeExisting.approvedIntake4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake4 = GetIntake(userCollegeID, AY4, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);

                collegeIntakeExisting.approvedIntake5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 1);
                collegeIntakeExisting.admittedIntake5 = GetIntake(userCollegeID, AY5, collegeIntakeExisting.specializationId, collegeIntakeExisting.shiftId, 0);

            }
            else
            {
                ViewBag.IsUpdate = false;
            }

            var degrees = db.jntuh_college_degree.Join(db.jntuh_degree, collegeDegree => collegeDegree.degreeId, degree => degree.id,
                                                                 (collegeDegree, degree) => new
                                                                 {
                                                                     collegeDegree.degreeId,
                                                                     collegeDegree.collegeId,
                                                                     collegeDegree.isActive,
                                                                     degree.degree
                                                                 })
                                                             .Where(collegeDegree => collegeDegree.collegeId == userCollegeID && collegeDegree.isActive == true)
                                                             .Select(collegeDegree => new
                                                             {
                                                                 collegeDegree.degreeId,
                                                                 collegeDegree.degree
                                                             }).ToList();
            ViewBag.Degree = degrees.OrderBy(d => d.degree);
            ViewBag.Department = db.jntuh_department.Where(d => d.isActive == true);
            ViewBag.Specialization = db.jntuh_specialization.Where(s => s.isActive == true);
            ViewBag.Shift = db.jntuh_shift.Where(s => s.isActive == true);
            ViewBag.Count = degrees.Count();
            return PartialView("_AppealAddEditCollegeIntake", collegeIntakeExisting);

        }

        [Authorize(Roles = "Admin,College")]
        [HttpPost]
        public ActionResult AppealAddEditCollegeIntake(CollegeIntakeExisting collegeIntakeExisting, string cmd)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = collegeIntakeExisting.collegeId;

            if (collegeIntakeExisting.nbaFromDate != null)
                collegeIntakeExisting.nbaFrom = Convert.ToDateTime(Utilities.DDMMYY2MMDDYY(collegeIntakeExisting.nbaFromDate));
            if (collegeIntakeExisting.nbaToDate != null)
                collegeIntakeExisting.nbaTo = Convert.ToDateTime(Utilities.DDMMYY2MMDDYY(collegeIntakeExisting.nbaToDate));
            var errors = ModelState.Where(x => x.Value.Errors.Count > 0).Select(x => new { x.Key, x.Value.Errors }).ToArray();
            if (ModelState.IsValid)
            {
                collegeIntakeExisting.collegeId = userCollegeID;
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                int presentAY = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

                for (int i = -1; i < 5; i++)
                {
                    int? approved = 0;
                    int admitted = 0;
                    int academicYear = 0;

                    int? proposed = null;
                    string letterPath = null;

                    if (i == -1)
                    {
                        approved = collegeIntakeExisting.ApprovedIntake != null ? collegeIntakeExisting.ApprovedIntake : 0;
                        admitted = 0;
                        academicYear = presentAY + 1;
                        //academicYear = presentAY + 1;

                        letterPath = collegeIntakeExisting.letterPath;
                        proposed = collegeIntakeExisting.ProposedIntake;
                    }
                    if (i == 0)
                    {
                        approved = collegeIntakeExisting.approvedIntake1;
                        admitted = collegeIntakeExisting.admittedIntake1;
                        academicYear = presentAY - i;
                        //academicYear = presentAY + 1;
                    }
                    if (i == 1)
                    {
                        approved = collegeIntakeExisting.approvedIntake2;
                        admitted = collegeIntakeExisting.admittedIntake2;
                        academicYear = presentAY - i;
                        //academicYear = presentAY;
                    }
                    if (i == 2)
                    {
                        approved = collegeIntakeExisting.approvedIntake3;
                        admitted = collegeIntakeExisting.admittedIntake3;
                        academicYear = presentAY - i;
                        //academicYear = presentAY - 1;
                    }
                    if (i == 3)
                    {
                        approved = collegeIntakeExisting.approvedIntake4;
                        admitted = collegeIntakeExisting.admittedIntake4;
                        academicYear = presentAY - i;
                        //academicYear = presentAY - 2;
                    }
                    if (i == 4)
                    {
                        approved = collegeIntakeExisting.approvedIntake5;
                        admitted = collegeIntakeExisting.admittedIntake5;
                        academicYear = presentAY - i;
                        //academicYear = presentAY - 3;
                    }

                    var jntuh_college_intake_existing = new jntuh_appeal_college_intake_existing();
                    jntuh_college_intake_existing.academicYearId = db.jntuh_academic_year.Where(a => a.actualYear == academicYear).Select(a => a.id).FirstOrDefault();

                    var existingId = db.jntuh_appeal_college_intake_existing.Where(p => p.specializationId == collegeIntakeExisting.specializationId
                                                                                && p.shiftId == collegeIntakeExisting.shiftId
                                                                                && p.collegeId == collegeIntakeExisting.collegeId
                                                                                && p.academicYearId == jntuh_college_intake_existing.academicYearId).Select(p => p.id).FirstOrDefault();
                    int createdByu = Convert.ToInt32(db.jntuh_college_intake_existing.Where(a => a.collegeId == userCollegeID && a.id == existingId).Select(a => a.createdBy).FirstOrDefault());
                    DateTime createdonu = Convert.ToDateTime(db.jntuh_college_intake_existing.Where(a => a.collegeId == userCollegeID && a.id == existingId).Select(a => a.createdOn).FirstOrDefault());

                    var AppealAICTEApprovalReportspath = "~/Content/Upload/OnlineAppealDocuments/Intake/AppealAICTEApprovalReports";


                    if ((approved > 0 && i != -1) || (i != -1 && admitted > 0 && existingId == 0) || (existingId > 0) || (i == -1))
                    {
                        jntuh_college_intake_existing.id = collegeIntakeExisting.id;
                        jntuh_college_intake_existing.collegeId = collegeIntakeExisting.collegeId;
                        jntuh_college_intake_existing.academicYearId = jntuh_academic_year.Where(a => a.actualYear == academicYear).Select(a => a.id).FirstOrDefault();
                        jntuh_college_intake_existing.specializationId = collegeIntakeExisting.specializationId;
                        jntuh_college_intake_existing.shiftId = collegeIntakeExisting.shiftId;
                        jntuh_college_intake_existing.approvedIntake = (int)approved;
                        jntuh_college_intake_existing.admittedIntake = admitted;
                        jntuh_college_intake_existing.approvalLetter = letterPath; //new
                        jntuh_college_intake_existing.proposedIntake = proposed;  //new
                        jntuh_college_intake_existing.nbaFrom = collegeIntakeExisting.nbaFrom;
                        jntuh_college_intake_existing.nbaTo = collegeIntakeExisting.nbaTo;
                        jntuh_college_intake_existing.isActive = true;
                        jntuh_college_intake_existing.courseStatus = collegeIntakeExisting.courseStatus ?? "";

                        if (collegeIntakeExisting.AppealApprovalLetter != null)
                        {
                            if (!Directory.Exists(Server.MapPath(AppealAICTEApprovalReportspath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(AppealAICTEApprovalReportspath));
                            }

                            var ext = Path.GetExtension(collegeIntakeExisting.AppealApprovalLetter.FileName);
                            if (ext.ToUpper().Equals(".PDF"))
                            {
                                var fileName =
                                    db.jntuh_college.Where(c => c.id == userCollegeID)
                                        .Select(c => c.collegeCode)
                                        .FirstOrDefault() + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                                collegeIntakeExisting.AppealApprovalLetter.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealAICTEApprovalReportspath),
                                    fileName, ext));
                                jntuh_college_intake_existing.IntakeApprovalLetter = fileName;
                            }
                        }
                        if (existingId == 0)
                        {
                            jntuh_college_intake_existing.createdBy = userID;
                            jntuh_college_intake_existing.createdOn = DateTime.Now;
                            db.jntuh_appeal_college_intake_existing.Add(jntuh_college_intake_existing);
                            db.SaveChanges();
                        }
                        else
                        {
                            jntuh_college_intake_existing.id = existingId;
                            jntuh_college_intake_existing.createdBy = createdByu;
                            jntuh_college_intake_existing.createdOn = createdonu;
                            jntuh_college_intake_existing.updatedBy = userID;
                            jntuh_college_intake_existing.updatedOn = DateTime.Now;
                            db.Entry(jntuh_college_intake_existing).State = EntityState.Modified;
                            try
                            {
                                db.SaveChanges();
                            }
                            catch (DbEntityValidationException dbEx)
                            {
                                foreach (var validationErrors in dbEx.EntityValidationErrors)
                                {
                                    foreach (var validationError in validationErrors.ValidationErrors)
                                    {
                                        Trace.TraceInformation("Property: {0} Error: {1}",
                                                                validationError.PropertyName,
                                                                validationError.ErrorMessage);
                                    }
                                }
                            }



                        }

                    }
                }

                if (cmd == "Add")
                {
                    TempData["Success"] = "Intake Added successfully.";
                }
                else
                {
                    TempData["Success"] = "Intake Updated successfully.";
                }

                return RedirectToAction("ExistingAndProposedIntakeForAppeal");
            }
            else
            {
                return RedirectToAction("ExistingAndProposedIntakeForAppeal");
            }

        }


        [Authorize(Roles = "Admin,College")]
        public ActionResult AppealDeleteCollegeIntake(int id)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                userCollegeID = db.jntuh_college_intake_existing.Where(i => i.id == id).Select(i => i.collegeId).FirstOrDefault();
            }
            int specid = db.jntuh_college_intake_existing.Where(p => p.id == id).Select(p => p.specializationId).FirstOrDefault();
            int shiftid = db.jntuh_college_intake_existing.Where(p => p.id == id).Select(p => p.shiftId).FirstOrDefault();
            List<jntuh_college_intake_existing> jntuh_college_intake_existing = db.jntuh_college_intake_existing.Where(p => p.specializationId == specid && p.shiftId == shiftid && p.collegeId == userCollegeID).ToList();
            foreach (var item in jntuh_college_intake_existing)
            {
                db.jntuh_college_intake_existing.Remove(item);
                //db.SaveChanges();
                TempData["Success"] = "College Intake Deleted successfully";
            }

            return RedirectToAction("CollegeFacultyWithIntake");
        }

        public ActionResult AppealFileUpload(HttpPostedFileBase fileUploader, string collegeId)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                userCollegeID = Convert.ToInt32(collegeId);
            }
            //To Save File in jntuh_college_enclosures
            string fileName = string.Empty;
            int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            var college_enclosures = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e).FirstOrDefault();
            jntuh_college_enclosures jntuh_college_enclosures = new jntuh_college_enclosures();
            jntuh_college_enclosures.collegeID = userCollegeID;
            jntuh_college_enclosures.enclosureId = enclosureId;
            jntuh_college_enclosures.isActive = true;

            if (fileUploader != null)
            {
                string ext = Path.GetExtension(fileUploader.FileName);
                fileName = db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_APL_" + enclosureId + ext;
                fileUploader.SaveAs(string.Format("{0}/{1}", Server.MapPath("~/Content/Upload/CollegeEnclosures"), fileName));
                jntuh_college_enclosures.path = fileName;
            }
            else if (!string.IsNullOrEmpty(college_enclosures.path))
            {
                fileName = college_enclosures.path;
                jntuh_college_enclosures.path = fileName;
            }

            if (college_enclosures == null)
            {
                jntuh_college_enclosures.createdBy = userID;
                jntuh_college_enclosures.createdOn = DateTime.Now;
                db.jntuh_college_enclosures.Add(jntuh_college_enclosures);
                //db.SaveChanges();
            }
            else
            {
                college_enclosures.path = fileName;
                college_enclosures.updatedBy = userID;
                college_enclosures.updatedOn = DateTime.Now;
                db.Entry(college_enclosures).State = EntityState.Modified;
                //db.SaveChanges();
            }
            return RedirectToAction("CollegeFacultyWithIntake");

        }

        [Authorize(Roles = "Admin,College")]
        [HttpPost]
        public ActionResult AppealDepartmentWiseDocs(CollegeFacultyWithIntakeReport collegeFacultyWithIntake, string cmd)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var jntuh_college = db.jntuh_college.AsNoTracking().ToList();
            var collegeintakeexistingdepatrtments = collegeFacultyWithIntake.CollegeIntakeExistings.ToList();

            if (collegeintakeexistingdepatrtments.Count > 0)
            {
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var acadamicyearId = jntuh_academic_year.Where(a => a.actualYear == 2016).Select(a => a.id).FirstOrDefault();
                foreach (var existing in collegeintakeexistingdepatrtments)
                {
                    if (existing.nbaFromDate != null)
                        existing.nbaFrom = Convert.ToDateTime(Utilities.DDMMYY2MMDDYY(existing.nbaFromDate));
                    if (existing.nbaToDate != null)
                        existing.nbaTo = Convert.ToDateTime(Utilities.DDMMYY2MMDDYY(existing.nbaToDate));


                    var jntuh_college_intake_existing = new jntuh_appeal_college_intake_existing_supportingdocuments();
                    var jntuh_appeal_college_intake_existing_supportingdocuments =
                        db.jntuh_appeal_college_intake_existing_supportingdocuments.AsNoTracking().ToList();
                    var existingId = jntuh_appeal_college_intake_existing_supportingdocuments.Where(p => p.specializationId == existing.specializationId
                                                                                && p.shiftId == existing.shiftId
                                                                                && p.collegeId == existing.collegeId
                                                                                && p.academicYearId == acadamicyearId).Select(p => p.id).FirstOrDefault();
                    var createdByu = Convert.ToInt32(jntuh_appeal_college_intake_existing_supportingdocuments.Where(a => a.collegeId == existing.collegeId && a.id == existingId).Select(a => a.createdBy).FirstOrDefault());
                    var createdonu = Convert.ToDateTime(jntuh_appeal_college_intake_existing_supportingdocuments.Where(a => a.collegeId == existing.collegeId && a.id == existingId).Select(a => a.createdOn).FirstOrDefault());

                    var SCMApprovalReportspath = "~/Content/Upload/OnlineAppealDocuments/Intake/IntakeSCMApprovalReports";
                    var Form16ApprovalReportspath = "~/Content/Upload/OnlineAppealDocuments/Intake/IntakeForm16ApprovalReports";

                    if (existing.SCMApprovalLetter != null || existing.Form16ApprovalLetter != null)
                    {
                        jntuh_college_intake_existing.id = existing.id;
                        jntuh_college_intake_existing.collegeId = existing.collegeId;
                        jntuh_college_intake_existing.academicYearId = acadamicyearId;
                        jntuh_college_intake_existing.specializationId = existing.specializationId;
                        jntuh_college_intake_existing.shiftId = existing.shiftId;
                        //jntuh_college_intake_existing.approvedIntake = (int)approved;
                        //jntuh_college_intake_existing.admittedIntake = admitted;
                        //jntuh_college_intake_existing.proposedIntake = proposed;  //new
                        jntuh_college_intake_existing.approvalLetter = existing.letterPath; //new

                        jntuh_college_intake_existing.nbaFrom = existing.nbaFrom;
                        jntuh_college_intake_existing.nbaTo = existing.nbaTo;
                        jntuh_college_intake_existing.isActive = true;
                        jntuh_college_intake_existing.courseStatus = existing.courseStatus;

                        if (existing.SCMApprovalLetter != null)
                        {
                            if (!Directory.Exists(Server.MapPath(SCMApprovalReportspath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(SCMApprovalReportspath));
                            }

                            var ext = Path.GetExtension(existing.SCMApprovalLetter.FileName);
                            if (ext.ToUpper().Equals(".PDF"))
                            {
                                var fileName = jntuh_college.Where(c => c.id == existing.collegeId).Select(c => c.collegeCode).FirstOrDefault() + "_SCM_" + DateTime.Now.ToString("yyyMMddHHmmss");
                                existing.SCMApprovalLetter.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(SCMApprovalReportspath),
                                    fileName, ext));
                                jntuh_college_intake_existing.SCM = fileName;
                            }
                        }
                        if (existing.Form16ApprovalLetter != null)
                        {
                            if (!Directory.Exists(Server.MapPath(Form16ApprovalReportspath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(Form16ApprovalReportspath));
                            }

                            var ext = Path.GetExtension(existing.Form16ApprovalLetter.FileName);
                            if (ext.ToUpper().Equals(".PDF"))
                            {
                                var fileName = jntuh_college.Where(c => c.id == existing.collegeId).Select(c => c.collegeCode).FirstOrDefault() + "_Form16_" + DateTime.Now.ToString("yyyMMddHHmmss");
                                existing.Form16ApprovalLetter.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(Form16ApprovalReportspath),
                                    fileName, ext));
                                jntuh_college_intake_existing.FORM16 = fileName;
                            }
                        }
                        if (existingId == 0)
                        {
                            jntuh_college_intake_existing.createdBy = userID;
                            jntuh_college_intake_existing.createdOn = DateTime.Now;
                            db.jntuh_appeal_college_intake_existing_supportingdocuments.Add(jntuh_college_intake_existing);
                            try
                            {
                                db.SaveChanges();
                                TempData["Success"] = "Documents Uploaded Successfully..";
                            }
                            catch (DbEntityValidationException dbEx)
                            {
                                foreach (var validationErrors in dbEx.EntityValidationErrors)
                                {
                                    foreach (var validationError in validationErrors.ValidationErrors)
                                    {
                                        Trace.TraceInformation("Property: {0} Error: {1}",
                                                                validationError.PropertyName,
                                                                validationError.ErrorMessage);
                                    }
                                }
                            }
                        }
                        else
                        {
                            jntuh_college_intake_existing.id = existingId;
                            jntuh_college_intake_existing.createdBy = createdByu;
                            jntuh_college_intake_existing.createdOn = createdonu;
                            jntuh_college_intake_existing.updatedBy = userID;
                            jntuh_college_intake_existing.updatedOn = DateTime.Now;
                            db.Entry(jntuh_college_intake_existing).State = EntityState.Modified;
                            try
                            {
                                db.SaveChanges();
                                TempData["Success"] = "Documents Uploaded Successfully..";
                            }
                            catch (DbEntityValidationException dbEx)
                            {
                                foreach (var validationErrors in dbEx.EntityValidationErrors)
                                {
                                    foreach (var validationError in validationErrors.ValidationErrors)
                                    {
                                        Trace.TraceInformation("Property: {0} Error: {1}",
                                                                validationError.PropertyName,
                                                                validationError.ErrorMessage);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            return RedirectToAction("SupportingDocumentsForAppeal");
        }



        #region ////////////////////////////////////////////Separates Views Writeen by Suresh


        #region Principal This code is added on CollegeAppeal Controller

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult CollegeFacultyWithIntakePrincipal()
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            var userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            //collegeId = 52;
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            var jntuhcollege = db.jntuh_college.AsNoTracking().ToList();
            var intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            var intakelist = new CollegeFacultyWithIntakeReport();
            #region 
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }

            // Principal Details
            var strPrincipalRegno = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).FirstOrDefault();
            var principal = string.Empty;
            var Reason = string.Empty;
            var prinicpalexists = false;
            //Reg nos related online facultyIds
            var regdata = db.jntuh_registered_faculty.FirstOrDefault(rf => strPrincipalRegno == rf.RegistrationNumber);
            ViewBag.principaldata = regdata;
            if (regdata != null)
            {
                if (!string.IsNullOrEmpty(regdata.DeactivationReason))
                    Reason = regdata.DeactivationReason;
                //if (regdata.Absent == true)
                //{
                //    Reason = "NOT AVAILABLE" + ",";
                //}
                //if (regdata.NotQualifiedAsperAICTE == true)
                //{
                //    Reason += "NOT QUALIFIED " + ",";
                //}
                //if (regdata.InvalidPANNumber == true)
                //{
                //    Reason += "NO PAN" + ",";
                //}
                //if (regdata.FalsePAN == true)
                //{
                //    Reason += "FALSE PAN" + ",";
                //}
                //if (regdata.NoSCM == true)
                //{
                //    Reason += "NO SCM/RATIFICATION" + ",";
                //}
                //if (regdata.IncompleteCertificates == true)
                //{
                //    Reason += "Incomplete Certificates" + ",";
                //}
                //if (regdata.PHDundertakingnotsubmitted == true)
                //{
                //    Reason += "No Undertaking" + ",";
                //}
                //if (regdata.Blacklistfaculy == true)
                //{
                //    Reason += "Blacklisted" + ",";
                //}
                if (regdata.BAS =="Yes")
                {
                    if (!String.IsNullOrEmpty(Reason))
                        Reason += ",Not Fulfilling Biometric Attendance";
                    else
                        Reason += "Not Fulfilling Biometric Attendance";
                }            
                if (Reason != "")
                {
                    Reason = Reason;

                }
                else
                {
                    Reason = "Dr. " + regdata.FirstName.First().ToString().ToUpper() + regdata.FirstName.Substring(1) + " " + regdata.LastName.First().ToString().ToUpper() + regdata.LastName.Substring(1);
                    prinicpalexists = true;
                }

                intakelist.RegistrationNumber = regdata.RegistrationNumber;
            }
            else
            {
                Reason = "NO PRINCIPAL";
            }

            ViewBag.PrincipalRegno = Reason;
            if (prinicpalexists == true)

                ViewBag.PrincipalDeficiency = "NO Principal Deficiency";

            else
                ViewBag.PrincipalDeficiency = "Principal Deficiency";
            intakelist.collegeId = collegeid;
            intakelist.collegeName = jntuhcollege.Where(i => i.id == collegeId).Select(i => i.collegeName).FirstOrDefault();
            intakelist.collegeCode = jntuhcollege.Where(i => i.id == collegeId).Select(i => i.collegeCode).FirstOrDefault();

            intakedetailsList.Add(intakelist);
            #endregion
            #region Principal Appeal Deficiency Status

            //  var jntuhAppealPrincipal = db.jntuh_appeal_principal_registered.AsNoTracking().ToList();
            var prinipal = db.jntuh_appeal_principal_registered.Where(i => i.collegeId == collegeId).ToList();

            if (prinipal.Count > 0)
            {
                ViewBag.principaldeficiencystatus = true;

            }
            else
            {
                ViewBag.principaldeficiencystatus = false;
            }
            #endregion
            return View(intakedetailsList);
        }

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult AppealReverificationforPrincipal(string collegeId, string registrationnumber)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            List<FacultyRegistration> facultyDetails = new List<FacultyRegistration>();
            ViewBag.DeactivationReason = null;
            if (!string.IsNullOrEmpty(collegeId))
            {
                int CollegeId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]));
                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //Reg nos related online facultyIds
                var rg = db.jntuh_registered_faculty.Where(rf => rf.RegistrationNumber == registrationnumber).FirstOrDefault();

                if (rg != null)
                {
                    string Reason = null;
                    FacultyRegistration FR = new FacultyRegistration();
                    FR.RegistrationNumber = rg.RegistrationNumber;
                    FR.id = rg.id;
                    FR.CollegeId = CollegeId;
                    FR.DepartmentId = rg.DepartmentId;
                    FR.department = db.jntuh_department.Where(i => i.id == rg.DepartmentId).Select(i => i.departmentName).FirstOrDefault();
                    FR.FirstName = rg.FirstName + rg.MiddleName + rg.LastName;
                    FR.facultyPhoto = rg.Photo;
                    FR.DeactivationReason = rg.DeactivationReason;

                    FR.Type = rg.type;
                    FR.Absent = rg.Absent != null ? (bool)rg.Absent : false;
                    FR.NOTQualifiedAsPerAICTE = rg.NotQualifiedAsperAICTE != null ? (bool)rg.NotQualifiedAsperAICTE : false;
                    FR.InvalidPANNo = rg.InvalidPANNumber != null ? (bool)rg.InvalidPANNumber : false;
                    FR.InCompleteCeritificates = rg.IncompleteCertificates != null ? (bool)rg.IncompleteCertificates : false;
                    FR.PANNumber = rg.PANNumber;
                    FR.XeroxcopyofcertificatesFlag = rg.Xeroxcopyofcertificates != null ? (bool)rg.Xeroxcopyofcertificates : false;
                    FR.NOrelevantUgFlag = rg.NoRelevantUG == "Yes" ? true : false;
                    FR.NOrelevantPgFlag = rg.NoRelevantPG == "Yes" ? true : false;
                    FR.NOrelevantPhdFlag = rg.NORelevantPHD == "Yes" ? true : false;
                    FR.BlacklistFaculty = rg.Blacklistfaculy != null ? (bool)rg.Blacklistfaculy : false;
                    FR.NotIdentityFiedForAnyProgramFlag = rg.NotIdentityfiedForanyProgram != null ? (bool)rg.NotIdentityfiedForanyProgram : false;
                    FR.OriginalCertificatesnotshownFlag = rg.OriginalCertificatesNotShown != null ? (bool)rg.OriginalCertificatesNotShown : false;
                    FR.NoSCM = rg.NoSCM != null ? (bool)rg.NoSCM : false;
                    //FR.SamePANUsedByMultipleFaculty = rg.SamePANUsedByMultipleFaculty != null ? (bool)(rg.SamePANUsedByMultipleFaculty) : false;
                    //FR.BasstatusOld = rg.BASStatusOld;
                    //FR.Basstatus = rg.BASStatus;
                    FR.OriginalsVerifiedUG = rg.OriginalsVerifiedUG == true ? true : false;
                    FR.OriginalsVerifiedPHD = rg.OriginalsVerifiedPHD == true ? true : false;

                    FR.jntuh_registered_faculty_education = db.jntuh_registered_faculty_education.Where(i => i.facultyId == rg.id).ToList();


                    if (FR.Absent == true)
                        Reason += "Absent";
                    if (FR.Type == "Adjunct")
                    {
                        if (Reason != null)
                            Reason += ",Adjunct Faculty";
                        else
                            Reason += "Adjunct Faculty";
                    }

                    if (FR.XeroxcopyofcertificatesFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",Xerox copyof certificates";
                        else
                            Reason += "Xerox copyof certificates";
                    }

                    if (FR.NOrelevantUgFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant UG";
                        else
                            Reason += "NO Relevant UG";
                    }

                    if (FR.NOrelevantPgFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PG";
                        else
                            Reason += "NO Relevant PG";
                    }

                    if (FR.NOrelevantPhdFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PHD";
                        else
                            Reason += "NO Relevant PHD";
                    }

                    if (FR.NotIdentityFiedForAnyProgramFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NOT Qualified AsPerAICTE";
                        else
                            Reason += "NOT Qualified AsPerAICTE";
                    }

                    if (FR.InvalidPANNo == true)
                    {
                        if (Reason != null)
                            Reason += ",InvalidPANNumber";
                        else
                            Reason += "InvalidPANNumber";
                    }

                    if (FR.InCompleteCeritificates == true)
                    {
                        if (Reason != null)
                            Reason += ",InComplete Ceritificates";
                        else
                            Reason += "InComplete Ceritificates";
                    }

                    if (FR.NoSCM == true)
                    {
                        if (Reason != null)
                            Reason += ",NoSCM";
                        else
                            Reason += "NoSCM";
                    }

                    if (FR.OriginalCertificatesnotshownFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",Original Certificates notshown";
                        else
                            Reason += "Original Certificates notshown";
                    }

                    if (FR.PANNumber == null)
                    {
                        if (Reason != null)
                            Reason += ",No PANNumber";
                        else
                            Reason += "No PANNumber";
                    }

                    if (FR.NotIdentityFiedForAnyProgramFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NotIdentityFied ForAnyProgram";
                        else
                            Reason += "NotIdentityFied ForAnyProgram";
                    }

                    if (FR.SamePANUsedByMultipleFaculty == true)
                    {
                        if (Reason != null)
                            Reason += ",SamePANUsedByMultipleFaculty";
                        else
                            Reason += "SamePANUsedByMultipleFaculty";
                    }

                    if (FR.Basstatus == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",No/Invalid Aadhaar Document";
                        else
                            Reason += "No/Invalid Aadhaar Document";
                    }

                    if (FR.BasstatusOld == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",BAS Flag";
                        else
                            Reason += "BAS Flag";
                    }

                    if (FR.OriginalsVerifiedUG == true)
                    {
                        if (Reason != null)
                            Reason += ",Complaint PHD Faculty";
                        else
                            Reason += "Complaint PHD Faculty";
                    }

                    if (FR.OriginalsVerifiedPHD == true)
                    {
                        if (Reason != null)
                            Reason += ",No Guide Sign in PHD Thesis";
                        else
                            Reason += "No Guide Sign in PHD Thesis";
                    }
                    if (FR.BlacklistFaculty == true)
                    {
                        if (Reason != null)
                            Reason += ",Blacklistfaculy";
                        else
                            Reason += "Blacklistfaculy";
                    }
                    if (FR.DeactivationReason != null)
                    {
                        if (Reason != null)
                            Reason += "," + FR.DeactivationReason;
                        else
                            Reason += FR.DeactivationReason;
                    }


                    facultyDetails.Add(FR);
                    ViewBag.collegeid = rg.collegeId;
                    ViewBag.Rgno = rg.RegistrationNumber;
                    ViewBag.DeactivationReason = Reason;


                }


                //ViewBag.degree = db.jntuh_degree.Where(i => i.id == rg.jntuh_department.degreeId).Select(i => i.id).FirstOrDefault();
                //ViewBag.departmentid = rg.DepartmentId;
                //    ViewBag.specializationid=
            }
            return View(facultyDetails);

        }
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult PrincipalVerificationCheck(string fid, string collegeid, string registrationnumber)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                //fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                //ViewBag.FacultyID = fID;
                ViewBag.collegeid = collegeid;
                ViewBag.fid = fid;
                jntuh_registered_faculty faculty =
                    db.jntuh_registered_faculty.Where(i => i.RegistrationNumber == registrationnumber).FirstOrDefault();
                if (faculty != null)
                {
                    regFaculty.id = faculty.id;
                    ViewBag.FacultyID = faculty.id;
                    regFaculty.Type = faculty.type;
                    regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                    regFaculty.Email = faculty.Email;
                    regFaculty.FirstName = faculty.FirstName;
                    regFaculty.MiddleName = faculty.MiddleName;
                    regFaculty.LastName = faculty.LastName;
                    regFaculty.facultyPhoto = faculty.Photo;

                    regFaculty.Type = faculty.type;
                    regFaculty.Absent = faculty.Absent != null ? (bool)faculty.Absent : false;
                    regFaculty.NOTQualifiedAsPerAICTE = faculty.NotQualifiedAsperAICTE != null ? (bool)faculty.NotQualifiedAsperAICTE : false;
                    regFaculty.InvalidPANNo = faculty.InvalidPANNumber != null ? (bool)faculty.InvalidPANNumber : false;
                    regFaculty.InCompleteCeritificates = faculty.IncompleteCertificates != null ? (bool)faculty.IncompleteCertificates : false;
                    regFaculty.PANNumber = faculty.PANNumber;
                    regFaculty.XeroxcopyofcertificatesFlag = faculty.Xeroxcopyofcertificates != null ? (bool)faculty.Xeroxcopyofcertificates : false;
                    regFaculty.NOrelevantUgFlag = faculty.NoRelevantUG == "Yes" ? true : false;
                    regFaculty.NOrelevantPgFlag = faculty.NoRelevantPG == "Yes" ? true : false;
                    regFaculty.NOrelevantPhdFlag = faculty.NORelevantPHD == "Yes" ? true : false;
                    regFaculty.BlacklistFaculty = faculty.Blacklistfaculy != null ? (bool)faculty.Blacklistfaculy : false;
                    regFaculty.NotIdentityFiedForAnyProgramFlag = faculty.NotIdentityfiedForanyProgram != null ? (bool)faculty.NotIdentityfiedForanyProgram : false;
                    regFaculty.OriginalCertificatesnotshownFlag = faculty.OriginalCertificatesNotShown != null ? (bool)faculty.OriginalCertificatesNotShown : false;
                    regFaculty.NoSCM = faculty.NoSCM != null ? (bool)faculty.NoSCM : false;
                    //regFaculty.SamePANUsedByMultipleFaculty = faculty.SamePANUsedByMultipleFaculty != null ? (bool)(faculty.SamePANUsedByMultipleFaculty) : false;
                    regFaculty.BasstatusOld = faculty.BAS;
                    regFaculty.Basstatus = faculty.InvalidAadhaar;
                    regFaculty.OriginalsVerifiedUG = faculty.OriginalsVerifiedUG == true ? true : false;
                    regFaculty.OriginalsVerifiedPHD = faculty.OriginalsVerifiedPHD == true ? true : false;

                    regFaculty.NOForm16 = faculty.NoForm16 != false ? true : false;
                    regFaculty.ModifiedPANNo = faculty.ModifiedPANNumber;


                    regFaculty.DeactivationReason = faculty.DeactivationReason;
                    regFaculty.PanDeactivationReasion = faculty.PanDeactivationReason;
                    regFaculty.PanVerificationStatus = faculty.PanVerificationStatus;
                }

            }
            return PartialView("_PrincipalVerificationCheck", regFaculty);

        }


        #endregion




        //list od equipments not Available 
        //  [Authorize(Roles = "Admin,College")]
        // [HttpGet]
        //public ActionResult LabsForAppeal()
        //{
        //    int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
        //    int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
        //    List<CollegeFacultyWithIntakeReport> facultyCounts = new List<CollegeFacultyWithIntakeReport>();
        //    List<AnonymousLabclass> collegeLabAnonymousLabclass = new List<AnonymousLabclass>();
        //    var collegefaculty = new CollegeFacultyWithIntakeReport()
        //    {
        //        collegeId = collegeId
        //    };
        //    facultyCounts.Add(collegefaculty);


        //    #region CollegeEditStatus
        //    var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

        //    var currentDate = DateTime.Now;
        //    DateTime EditFromDate;
        //    DateTime EditTODate;
        //    int collegeid = 0;
        //    bool PageEdible = false;
        //    if (CollegeDetails != null)
        //    {
        //        EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
        //        EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
        //        collegeid = Convert.ToInt32(CollegeDetails.collegeId);
        //        PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

        //        if (currentDate >= EditFromDate && currentDate <= EditTODate)
        //        {
        //            if (PageEdible == false)
        //            {
        //                return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
        //            }
        //        }
        //        else
        //        {
        //            return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
        //        }
        //    }
        //    else
        //    {
        //        return RedirectToAction("College", "Dashboard");
        //    }
        //    #endregion
        //    #region For labs
        //    int[] specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeId).Select(e => e.specializationId).Distinct().ToArray();
        //    List<Lab> collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
        //                                                .Where(l => specializationIds.Contains(l.SpecializationID))
        //                                                .Select(l => new Lab
        //                                                {
        //                                                    EquipmentID = l.id,
        //                                                    degreeId = l.DegreeID,
        //                                                    degree = l.jntuh_degree.degree,
        //                                                    degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
        //                                                    departmentId = l.DepartmentID,
        //                                                    department = l.jntuh_department.departmentName,
        //                                                    specializationId = l.SpecializationID,
        //                                                    specializationName = l.jntuh_specialization.specializationName,
        //                                                    year = l.Year,
        //                                                    Semester = l.Semester,
        //                                                    Labcode = l.Labcode,
        //                                                    LabName = l.LabName,
        //                                                    EquipmentName = l.EquipmentName
        //                                                })
        //                                                .OrderBy(l => l.degreeDisplayOrder)
        //                                                .ThenBy(l => l.department)
        //                                                .ThenBy(l => l.specializationName)
        //                                                .ThenBy(l => l.year).ThenBy(l => l.Semester)
        //                                                .ToList();


        //    string CollegeAffiliationStatus = db.jntuh_college_affiliation.Where(u => u.collegeId == collegeId && u.affiliationTypeId == 7).Select(u => u.affiliationStatus).FirstOrDefault();

        //    if (CollegeAffiliationStatus == "Yes")
        //    {
        //        collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
        //                                             .Where(l => specializationIds.Contains(l.SpecializationID))
        //                                             .Select(l => new AnonymousLabclass
        //                                             {
        //                                                 id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
        //                                                 EquipmentID = l.id,
        //                                                 LabName = l.LabName,
        //                                                 EquipmentName = l.EquipmentName,
        //                                                 LabCode = l.Labcode,
        //                                                 year = l.Year,
        //                                                 Semester = l.Semester
        //                                             })
        //                                             .OrderBy(l => l.LabName)
        //                                             .ThenBy(l => l.EquipmentName)
        //                                             .ToList();

        //    }
        //    else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
        //    {

        //        collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
        //                                           .Where(l => specializationIds.Contains(l.SpecializationID) && l.Labcode != "TMP-CL")
        //                                           .Select(l => new AnonymousLabclass
        //                                           {
        //                                               id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
        //                                               EquipmentID = l.id,
        //                                               LabName = l.LabName,
        //                                               EquipmentName = l.EquipmentName,
        //                                               LabCode = l.Labcode,
        //                                               year = l.Year,
        //                                               Semester = l.Semester
        //                                           })
        //                                           .OrderBy(l => l.LabName)
        //                                           .ThenBy(l => l.EquipmentName)
        //                                           .ToList();
        //    }

        //    var collegeEquipments = db.jntuh_college_laboratories_dataentry2.Where(l => l.CollegeID == collegeId).Select(l => l.EquipmentID).Distinct().ToArray();

        //    var list = collegeLabMaster.Where(c => !collegeEquipments.Contains(c.EquipmentID)).Select(c => new { EquipmentID = c.id, LabCode = c.Labcode, LabName = c.LabName, EquipmentName = c.EquipmentName })
        //                               .OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

        //    var labDeficiencies = db.jntuh_college_laboratories_deficiency.Where(ld => ld.CollegeId == collegeId && ld.Deficiency == true).Select(ld => ld.LabCode).ToArray();

        //    var list1 = collegeLabAnonymousLabclass.OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

        //    list = list.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();
        //    list1 = list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

        //    #region this code written by suresh

        //    int?[] labequipmentIds = list1.Select(i => i.EquipmentID).ToArray();

        //    int[] clgequipmentIDs =
        //        db.jntuh_college_laboratories.Where(
        //            l => l.CollegeID == collegeId && labequipmentIds.Contains(l.EquipmentID))
        //            .Select(i => i.EquipmentID)
        //            .ToArray();

        //    list1 = list1.Where(l => !clgequipmentIDs.Contains((int)l.EquipmentID))
        //            .ToList();


        //    #endregion
        //    if (facultyCounts.Count > 0)
        //    {
        //        facultyCounts.FirstOrDefault().LabsListDefs1 = list1.ToList();
        //        //facultyCounts.FirstOrDefault().LabsListDefs = list1;
        //    }
        //    //facultyCounts.FirstOrDefault().LabsListDefs1 = list1.ToList();
        //    ViewBag.labslist = list;
        //    //ViewBag.labslistcount = list.Count;
        //    //TempData["labslist"] = list;
        //    #endregion
        //    List<AnonymousMBAMACclass> MBAMACDetails = new List<AnonymousMBAMACclass>();
        //    if (collegeId != null)
        //    {
        //        var mbadef = db.jntuh_appeal_mbadeficiency.FirstOrDefault(i => i.CollegeId == collegeId);
        //        if (mbadef != null)
        //        {
        //            var colcode = db.jntuh_college.FirstOrDefault(i => i.id == collegeId).collegeCode;
        //            var macadreess = new AnonymousMBAMACclass();
        //            macadreess.CollegeId = collegeId;
        //            macadreess.CollegeCode = colcode;
        //            macadreess.ComputerDeficiencyCount = mbadef.ComputersDeficencyCount;
        //            macadreess.id = mbadef.Id;
        //            MBAMACDetails.Add(macadreess);
        //            facultyCounts.FirstOrDefault().MBAMACDetails = MBAMACDetails;
        //        }

        //        int[] collegeids = new int[] { 343, 13, 101, 67, 394 };
        //        if (collegeids.Contains(collegeId))
        //        {
        //            ViewBag.Ismbaclg = true;
        //        }
        //        else
        //        {
        //            ViewBag.Ismbaclg = false;
        //        }

        //    }




        //    return View(facultyCounts);
        //}
        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult LabsForAppeal()
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            List<CollegeFacultyWithIntakeReport> facultyCounts = new List<CollegeFacultyWithIntakeReport>();
            List<AnonymousLabclass> collegeLabAnonymousLabclass = new List<AnonymousLabclass>();
            var collegefaculty = new CollegeFacultyWithIntakeReport()
            {
                collegeId = collegeId
            };
            facultyCounts.Add(collegefaculty);


            #region CollegeEditStatus
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }
            #endregion
            #region For labs
            var jntuh_specialization = db.jntuh_specialization.AsNoTracking().ToList();
            var jntuh_department = db.jntuh_department.AsNoTracking().ToList();

            int[] specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeId && e.courseStatus!="Closure" &&  e.academicYearId ==  10&& e.proposedIntake!=0).Select(e => e.specializationId).Distinct().ToArray();
            int[] DegreeIDs = db.jntuh_lab_master.AsNoTracking().Where(l => l.DegreeID == 4 && specializationIds.Contains(l.SpecializationID)).Select(l => l.DegreeID).ToArray();


            //List<Lab> collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
            //                                            .Where(l => specializationIds.Contains(l.SpecializationID))
            //                                            .Select(l => new Lab
            //                                            {
            //                                                EquipmentID = l.id,
            //                                                degreeId = l.DegreeID,
            //                                                degree = l.jntuh_degree.degree,
            //                                                degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
            //                                                departmentId = l.DepartmentID,
            //                                                department = l.jntuh_department.departmentName,
            //                                                specializationId = l.SpecializationID,
            //                                                specializationName = l.jntuh_specialization.specializationName,
            //                                                year = l.Year,
            //                                                Semester = l.Semester,
            //                                                Labcode = l.Labcode,
            //                                                LabName = l.LabName,
            //                                                EquipmentName = l.EquipmentName
            //                                            })
            //                                            .OrderBy(l => l.degreeDisplayOrder)
            //                                            .ThenBy(l => l.department)
            //                                            .ThenBy(l => l.specializationName)
            //                                            .ThenBy(l => l.year).ThenBy(l => l.Semester)
            //                                            .ToList();


            string CollegeAffiliationStatus = db.jntuh_college_affiliation.Where(u => u.collegeId == collegeId && u.affiliationTypeId == 7).Select(u => u.affiliationStatus).FirstOrDefault();
           // var jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().ToList();
            List<jntuh_lab_master> jntuh_lab_masters = new List<jntuh_lab_master>();

            if (CollegeAffiliationStatus == "Yes")
            {
                if (DegreeIDs.Contains(4))
                {
                    jntuh_lab_masters =db.jntuh_lab_master.AsNoTracking().Where(l =>(l.SpecializationID == 39 || specializationIds.Contains(l.SpecializationID)) && l.CollegeId == collegeId).ToList();
                }
                else
                {
                    jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l =>specializationIds.Contains(l.SpecializationID) && l.CollegeId == collegeId&&!l.EquipmentName.Contains("desirable")).ToList();
                }

            }
            else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
            {

                if (DegreeIDs.Contains(4))
                {
                    jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => (l.SpecializationID == 39 || specializationIds.Contains(l.SpecializationID)) && l.CollegeId == null).ToList();
                }
                else
                {
                    jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => specializationIds.Contains(l.SpecializationID) && l.CollegeId == null && !l.EquipmentName.Contains("desirable")).ToList();
                }
            }



            //if (DegreeIDs.Contains(4))
            //{
            //    jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => (l.SpecializationID == 39 || specializationIds.Contains(l.SpecializationID)) && l.CollegeId == collegeId).ToList();
            //}
            //else
            //{
            //    jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => (l.SpecializationID == 39 || specializationIds.Contains(l.SpecializationID)) && l.CollegeId == null).ToList();
            //}



            if (CollegeAffiliationStatus == "Yes")
            {
                collegeLabAnonymousLabclass = jntuh_lab_masters.Select(l => new AnonymousLabclass
                                                     {
                                                         id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
                                                         EquipmentID = l.id,
                                                         Department = l.jntuh_department.departmentName,
                                                         LabName = l.LabName,
                                                         EquipmentName = l.EquipmentName,
                                                         LabCode = l.Labcode,
                                                         year = l.Year,
                                                         Semester = l.Semester,
                                                         specializationId = l.SpecializationID
                                                         // DepartmentId=(int)jntuh_specialization.Where(e=>e.id==l.SpecializationID).Select(e=>e.departmentId).FirstOrDefault(),
                                                         //Department = jntuh_department.Where(t => t.id == DepartmentId).Select(t => t.departmentName).FirstOrDefault(),
                                                     })
                                                     .OrderBy(l => l.LabName)
                                                     .ThenBy(l => l.EquipmentName)
                                                     .ToList();

            }
            else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
            {

                collegeLabAnonymousLabclass = jntuh_lab_masters.Select(l => new AnonymousLabclass
                                                   {
                                                       id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
                                                       EquipmentID = l.id,
                                                       Department = l.jntuh_department.departmentName,
                                                       LabName = l.LabName,
                                                       EquipmentName = l.EquipmentName,
                                                       LabCode = l.Labcode,
                                                       year = l.Year,
                                                       Semester = l.Semester,
                                                       specializationId = l.SpecializationID
                                                   })
                                                   .OrderBy(l => l.LabName)
                                                   .ThenBy(l => l.EquipmentName)
                                                   .ToList();
            }

           // var collegeEquipments = db.jntuh_college_laboratories_dataentry2.Where(l => l.CollegeID == collegeId).Select(l => l.EquipmentID).Distinct().ToArray();

            //var list = collegeLabMaster.Where(c => !collegeEquipments.Contains(c.EquipmentID)).Select(c => new { EquipmentID = c.id, LabCode = c.Labcode, LabName = c.LabName, EquipmentName = c.EquipmentName })
            //                           .OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();
            //list = list.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

           // var labDeficiencies = db.jntuh_college_laboratories_deficiency.Where(ld => ld.CollegeId == collegeId && ld.Deficiency == true).Select(ld => ld.LabCode).ToArray();

            //foreach (var coll in collegeLabAnonymousLabclass)
            //{
            //    var deptname = jntuh_specialization.FirstOrDefault(i => i.id == coll.specializationId).jntuh_department.departmentName;
            //    coll.Department = deptname;
            //}


            //collegeLabAnonymousLabclass = collegeLabAnonymousLabclass.ToList().ForEach(i => i.DepartmentId = jntuh_specialization.FirstOrDefault(l => l.id == i.specializationId).departmentId);

            var list1 = collegeLabAnonymousLabclass.OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();


          //  list1 = list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

            #region this code written by suresh

            int?[] labequipmentIds = list1.Select(i => i.EquipmentID).ToArray();

            int[] clgequipmentIDs =db.jntuh_college_laboratories.Where(l => l.CollegeID == collegeId && labequipmentIds.Contains(l.EquipmentID) && l.isActive==true).Select(i => i.EquipmentID).ToArray();

            list1 = list1.Where(l => !clgequipmentIDs.Contains((int)l.EquipmentID)).ToList();


            #endregion
            if (facultyCounts.Count > 0)
            {
                facultyCounts.FirstOrDefault().LabsListDefs1 = list1.ToList();
                //facultyCounts.FirstOrDefault().LabsListDefs = list1;
            }
          
            #endregion
            List<AnonymousMBAMACclass> MBAMACDetails = new List<AnonymousMBAMACclass>();
            if (collegeId != null)
            {
                //Commented on 18-06-2018 by Narayana Reddy
                //var mbadef = db.jntuh_appeal_mbadeficiency.FirstOrDefault(i => i.CollegeId == collegeId);
                //if (mbadef != null)
                //{
                    var colcode = db.jntuh_college.FirstOrDefault(i => i.id == collegeId).collegeCode;
                    var macadreess = new AnonymousMBAMACclass();
                    macadreess.CollegeId = collegeId;
                    macadreess.CollegeCode = colcode;
                    //macadreess.ComputerDeficiencyCount = mbadef.ComputersDeficencyCount;
                    //macadreess.id = mbadef.Id;
                    MBAMACDetails.Add(macadreess);
                    facultyCounts.FirstOrDefault().MBAMACDetails = MBAMACDetails;
                //}

                int[] collegeids = new int[] { 343, 13, 101, 67, 394 };
                if (collegeids.Contains(collegeId))
                {
                    ViewBag.Ismbaclg = true;
                }
                else
                {
                    ViewBag.Ismbaclg = false;
                }

            }
            return View(facultyCounts);
        }


        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult PhysicalLabsUploading()
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (collegeId == 375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }

            List<PhysicalLabMaster> physicallabs = new List<PhysicalLabMaster>();

            List<UAAAS.Controllers.Reports.DeficiencyReportWordController.physicalLabs> CollegePhysicalLabMaster = new List<UAAAS.Controllers.Reports.DeficiencyReportWordController.physicalLabs>();

            #region CollegeEditStatus
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == collegeId).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }
            #endregion

            //physicallabs = db.jntuh_college_laboratories_deficiency.Where(e => e.CollegeId == collegeId).Select(e => new PhysicalLabMaster
            //{
            //    NoofAvailable = e.Semister,
            //    DepartmentName = e.LabCode
            //}).ToList();

            CollegePhysicalLabMaster =
                      db.jntuh_physical_labmaster_copy.Where(e => e.Collegeid == collegeId && e.Numberofrequiredlabs != null)
                          .Select(e => new UAAAS.Controllers.Reports.DeficiencyReportWordController.physicalLabs
                          {
                              department = db.jntuh_department.Where(d => d.id == e.DepartmentId).Select(s => s.departmentName).FirstOrDefault(),
                              NoOfRequiredLabs = e.Numberofrequiredlabs,
                              Labname = e.LabName,
                              year = e.Year,
                              semister = e.Semister,
                              LabCode = e.Labcode,
                              NoOfAvailabeLabs = db.jntuh_physical_labmaster_copy.Where(a => a.Collegeid == collegeId && a.Semister == e.Semister && a.Year == e.Year && a.Labcode == e.Labcode).Select(s => s.Numberofavilablelabs).FirstOrDefault() == null ? 0 : db.jntuh_physical_labmaster_copy.Where(a => a.Collegeid == collegeId && a.DepartmentId == e.DepartmentId && a.Semister == e.Semister && a.Year == e.Year && a.Labcode == e.Labcode).Select(s => s.Numberofavilablelabs).FirstOrDefault()
                          }).ToList();
            foreach (var item in CollegePhysicalLabMaster)
            {
                if (item.NoOfAvailabeLabs < item.NoOfRequiredLabs)
                {
                    PhysicalLabMaster PhysicalLabMaster= new PhysicalLabMaster();
                    PhysicalLabMaster.DepartmentName = item.department;
                    PhysicalLabMaster.NoofAvailable = (int)item.NoOfAvailabeLabs;
                    PhysicalLabMaster.NoofRequeried = (int)item.NoOfRequiredLabs;
                    PhysicalLabMaster.Labname = item.Labname;
                    physicallabs.Add(PhysicalLabMaster);
                }
            }
            string physicalpath =db.jntuh_college_enclosures.Where(e => e.enclosureId == 26 && e.collegeID == collegeId).Select(e => e.path).FirstOrDefault();
            if (!string.IsNullOrEmpty(physicalpath))
            {
                if (physicallabs.Count!=0)
                {
                    physicallabs[0].PhysicalLabUploadingview = physicalpath;
                }
                
            }
            return View(physicallabs);
        }

        [Authorize(Roles = "Admin,College")]
        [HttpPost]
        public ActionResult PhysicalLabsUploading(List<PhysicalLabMaster> model)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            
            var physicalpath = "~/Content/Upload/OnlineAppealDocuments/Labs/PhysicalLabsSupportingDocument";
            if (model[0].PhysicalLabsuploading != null)
            {
                string FileName = string.Empty;
                if (!Directory.Exists(Server.MapPath(physicalpath)))
                {
                    Directory.CreateDirectory(Server.MapPath(physicalpath));
                }

                var ext = Path.GetExtension(model[0].PhysicalLabsuploading.FileName);
                if (ext.ToUpper().Equals(".PDF"))
                {
                    string fileName = db.jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault() + "-" + DateTime.Now.ToString("yyyMMddHHmmss");
                    model[0].PhysicalLabsuploading.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpath), fileName, ext));
                    FileName = string.Format("{0}/{1}{2}", physicalpath, fileName, ext);
                }
                var PhysicalId =db.jntuh_college_enclosures.Where(e => e.collegeID == collegeId && e.enclosureId == 26).Select(e => e).FirstOrDefault();

                if (PhysicalId != null)
                {
                    PhysicalId.path = FileName;
                    PhysicalId.updatedBy = userID;
                    PhysicalId.updatedOn = DateTime.Now;
                    db.Entry(PhysicalId).State=EntityState.Modified;
                    db.SaveChanges();
                    TempData["Success"] = "Physical Labs Supporting Document Updated Successfully.";
                }
                else
                {
                  jntuh_college_enclosures physical=new jntuh_college_enclosures();
                    physical.enclosureId = 26;
                    physical.collegeID = collegeId;
                    physical.path = FileName;
                    physical.isActive = true;
                    physical.createdBy = userID;
                    physical.createdOn = DateTime.Now;
                    db.jntuh_college_enclosures.Add(physical);
                    db.SaveChanges();
                    TempData["Success"] = "Physical Labs Supporting Document Uploaded Successfully.";
                }
            }
            return RedirectToAction("PhysicalLabsUploading", "FacultyVerification");
        }





        [Authorize(Roles = "Admin,College")]
        [HttpPost]
        public ActionResult LabsForAppeal(CollegeFacultyWithIntakeReport CollegeFaculty)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            int idvalue = (int)CollegeFaculty.MBAMACDetails[0].id.Value;
            int collegeid = (int)CollegeFaculty.MBAMACDetails[0].CollegeId;
            //var macDetails = db.jntuh_appeal_mbadeficiency.Where(i => i.Id == idvalue).Select(e => e).FirstOrDefault();
            //if (macDetails != null)
            //{
                if (CollegeFaculty.MBAMACDetails.FirstOrDefault().MACSupportingDoc != null)
                {
                    string ext = Path.GetExtension(CollegeFaculty.MBAMACDetails.FirstOrDefault().MACSupportingDoc.FileName);
                    var fileName = db.jntuh_college.Where(c => c.id == collegeid).Select(c => c.collegeCode).FirstOrDefault() + "_MACLIST_16" + ext;
                    var SCMApprovalReportspath = "~/Content/Upload/OnlineAppealDocuments/MBAMACLIST";
                    if (!Directory.Exists(Server.MapPath(SCMApprovalReportspath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(SCMApprovalReportspath));
                    }
                    CollegeFaculty.MBAMACDetails[0].MACSupportingDoc.SaveAs(string.Format("{0}/{1}", Server.MapPath(SCMApprovalReportspath), fileName));
                    //macDetails.MacAddressDocument = fileName;
                }
               // macDetails.Updatedon = DateTime.Now;
                db.SaveChanges();
                TempData["Success"] = "MAC Addresses List Uploaded Successfully";
            //}
            return RedirectToAction("LabsForAppeal");

        }

        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult ExistingAndProposedIntakeForAppeal()
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 375)
            {
                userCollegeID = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            #region CollegeEditStatus
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == userCollegeID).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }
            #endregion

            #region For CollegeIntake

            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            var collegefacultyreport = new CollegeFacultyWithIntakeReport()
            {
                collegeId = userCollegeID
            };
            intakedetailsList.Add(collegefacultyreport);


            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
            var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
            var jntuh_degree = db.jntuh_degree.ToList();
            int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
            int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
            ViewBag.FirstYear = String.Format("{0}-{1}", (actualYear).ToString(), (actualYear + 1).ToString().Substring(2, 2));
            ViewBag.SecondYear = String.Format("{0}-{1}", (actualYear - 1).ToString(), (actualYear).ToString().Substring(2, 2));
            ViewBag.ThirdYear = String.Format("{0}-{1}", (actualYear - 2).ToString(), (actualYear - 1).ToString().Substring(2, 2));
            ViewBag.FourthYear = String.Format("{0}-{1}", (actualYear - 3).ToString(), (actualYear - 2).ToString().Substring(2, 2));
            ViewBag.FifthYear = String.Format("{0}-{1}", (actualYear - 4).ToString(), (actualYear - 3).ToString().Substring(2, 2));


            int AY0 = jntuh_academic_year.Where(a => a.actualYear == (actualYear + 1)).Select(a => a.id).FirstOrDefault();
            // var presentYear = db.jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
            var AYY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
            var AYY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
            var AYY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
            var AYY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
            var AYY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();
            int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
            int[] collegeIDs = null;


            if (userCollegeID != 0)
            {
                //Commented for just checking
                //collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == userCollegeID).Select(c => c.id).ToArray();
                
            }

            //Inactive specialization Ids
            int[] inactivespids = db.jntuh_specialization.Where(s => s.isActive == false).Select(s => s.id).ToArray();

            //List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId) && i.courseStatus != "Closure" && i.academicYearId == 10 && i.proposedIntake != 0 && !inactivespids.Contains(i.specializationId)).ToList();
            List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => i.collegeId == userCollegeID && i.courseStatus != "Closure" && i.academicYearId == 10 && i.proposedIntake != 0 && !inactivespids.Contains(i.specializationId)).ToList();
            foreach (var item in intake)
            {
                CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                newIntake.id = item.id;
                newIntake.collegeId = item.collegeId;
                newIntake.academicYearId = item.academicYearId;
                newIntake.shiftId = item.shiftId;
                newIntake.isActive = item.isActive;
                newIntake.nbaFrom = item.nbaFrom;
                newIntake.nbaTo = item.nbaTo;
                newIntake.specializationId = item.specializationId;
                newIntake.Specialization = item.jntuh_specialization.specializationName;
                newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                newIntake.shiftId = item.shiftId;
                newIntake.Shift = item.jntuh_shift.shiftName;
                newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                collegeIntakeExisting.Add(newIntake);
            }
            collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

            var intakelists = new List<CollegeIntakeExisting>();
            foreach (var item in collegeIntakeExisting)
            {
                item.ispercentage = false;
                item.isintakeediable = true;
                if (item.nbaFrom != null)
                    item.nbaFromDate = Utilities.MMDDYY2DDMMYY(item.nbaFrom.ToString());
                if (item.nbaTo != null)
                    item.nbaToDate = Utilities.MMDDYY2DDMMYY(item.nbaTo.ToString());

                //FLAG : 1 - Approved, 0 - Admitted

                jntuh_appeal_college_intake_existing detailsappeal = db.jntuh_appeal_college_intake_existing
                                                          .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == item.specializationId && e.shiftId == item.shiftId)
                                                          .Select(e => e)
                                                          .FirstOrDefault();
                if (detailsappeal != null)
                {
                    item.ApprovedIntake = detailsappeal.approvedIntake;
                    item.letterPath = detailsappeal.approvalLetter;
                    item.ProposedIntake = detailsappeal.proposedIntake;
                    item.courseStatus = detailsappeal.courseStatus;
                }
                else
                {
                    jntuh_college_intake_existing details = db.jntuh_college_intake_existing
                                                          .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == item.specializationId && e.shiftId == item.shiftId)
                                                          .Select(e => e)
                                                          .FirstOrDefault();

                    if (details != null)
                    {
                        item.ApprovedIntake = details.approvedIntake;
                        item.letterPath = details.approvalLetter;
                        item.ProposedIntake = details.proposedIntake;
                        item.courseStatus = details.courseStatus;
                    }
                }
                item.approvedIntake1 = GetIntake(userCollegeID, AYY1, item.specializationId, item.shiftId, 1);
                item.admittedIntake1 = GetIntake(userCollegeID, AYY1, item.specializationId, item.shiftId, 0);

                item.approvedIntake2 = GetIntake(userCollegeID, AYY2, item.specializationId, item.shiftId, 1);
                item.admittedIntake2 = GetIntake(userCollegeID, AYY2, item.specializationId, item.shiftId, 0);

                item.approvedIntake3 = GetIntake(userCollegeID, AYY3, item.specializationId, item.shiftId, 1);
                item.admittedIntake3 = GetIntake(userCollegeID, AYY3, item.specializationId, item.shiftId, 0);

                item.approvedIntake4 = GetIntake(userCollegeID, AYY4, item.specializationId, item.shiftId, 1);
                item.admittedIntake4 = GetIntake(userCollegeID, AYY4, item.specializationId, item.shiftId, 0);

                item.approvedIntake5 = GetIntake(userCollegeID, AYY5, item.specializationId, item.shiftId, 1);
                item.admittedIntake5 = GetIntake(userCollegeID, AYY5, item.specializationId, item.shiftId, 0);
                item.isintakeediable = true;
                if (item.Degree == "B.Tech")
                {
                    int senondyearpercentage = 0;
                    int thirdyearpercentage = 0;
                    int fourthyearpercentage = 0;
                    if (item.admittedIntake1 != 0)
                    {
                        senondyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(item.admittedIntake1) / Convert.ToDecimal(item.approvedIntake1)) * 100));
                    }
                    if (item.admittedIntake2 != 0)
                    {
                        thirdyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(item.admittedIntake2) / Convert.ToDecimal(item.approvedIntake2)) * 100));
                    }
                    if (item.admittedIntake3 != 0)
                    {
                        fourthyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(item.admittedIntake3) / Convert.ToDecimal(item.approvedIntake3)) * 100));
                    }

                    if (senondyearpercentage < 25 && thirdyearpercentage < 25 && fourthyearpercentage < 25)
                    {
                        item.ispercentage = true;
                        //studentcount
                        if ((item.admittedIntake1 >= 15 || item.admittedIntake2 >= 15 || item.admittedIntake3 >= 15) && item.ProposedIntake != 0)
                        {
                            item.ispercentage = false;
                            item.isintakeediable = false;
                            //intakedetails.ReducedInatke = 60;
                            //if (intakedetails.approvedIntake1 != 60)
                            //{
                            //    intakedetails.Note = "(Reduced from Proposed Intake of <b>";
                            //    intakedetails.Note += intakedetails.approvedIntake1;
                            //    intakedetails.Note += "</b> as per 25% Clause)";
                            //    intakedetails.approvedIntake1 = 60;
                            //}
                        }                          
                    }
                    //int SanctionIntakeHigest = Max(item.admittedIntake1, item.admittedIntake2, item.admittedIntake3);
                    //SanctionIntakeHigest = GetBtechAdmittedIntake(SanctionIntakeHigest);
                    //if (SanctionIntakeHigest >= item.ProposedIntake)
                    //{
                    //    item.isintakeediable = true;
                    //}
                    //else
                    //{
                    //    item.isintakeediable = false;
                    //}
                } 
            
                intakelists.Add(item);
            }

            if (intakelists.Count > 0)
            {
                intakedetailsList.FirstOrDefault().CollegeIntakeExistings = intakelists.Where(i => i.shiftId == 1 || i.shiftId == 2).OrderBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Department).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();
            }
            else
            {
                intakedetailsList.FirstOrDefault().CollegeIntakeExistings = new List<CollegeIntakeExisting>();
            }

            #endregion
            return View(intakedetailsList.Where(i=>i.ispercentage==false).ToList());
        }

        private int Max(int AdmittedIntake2, int AdmittedIntake3, int AdmittedIntake4)
        {
            return Math.Max(AdmittedIntake2, Math.Max(AdmittedIntake3, AdmittedIntake4));
        }


        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult SupportingDocumentsForAppeal()
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();

            #region CollegeEditStatus
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == userCollegeID).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }
            #endregion

            #region For CollegeIntake

            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            var collegefacultyreport = new CollegeFacultyWithIntakeReport()
            {
                collegeId = userCollegeID
            };
            intakedetailsList.Add(collegefacultyreport);

            var jntuh_academic_year = db.jntuh_academic_year.ToList();
            var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
            var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
            var jntuh_degree = db.jntuh_degree.ToList();
            int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

            int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
            ViewBag.FirstYear = String.Format("{0}-{1}", (actualYear).ToString(), (actualYear + 1).ToString().Substring(2, 2));
            ViewBag.SecondYear = String.Format("{0}-{1}", (actualYear - 1).ToString(), (actualYear).ToString().Substring(2, 2));
            ViewBag.ThirdYear = String.Format("{0}-{1}", (actualYear - 2).ToString(), (actualYear - 1).ToString().Substring(2, 2));
            ViewBag.FourthYear = String.Format("{0}-{1}", (actualYear - 3).ToString(), (actualYear - 2).ToString().Substring(2, 2));
            ViewBag.FifthYear = String.Format("{0}-{1}", (actualYear - 4).ToString(), (actualYear - 3).ToString().Substring(2, 2));

            //  int actualYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();

            int AY0 = jntuh_academic_year.Where(a => a.actualYear == (actualYear + 1)).Select(a => a.id).FirstOrDefault();
            // var presentYear = db.jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
            var AYY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
            var AYY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
            var AYY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
            var AYY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
            var AYY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();

            int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
            var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
            int[] collegeIDs = null;


            if (userCollegeID != 0)
            {
                collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == userCollegeID).Select(c => c.id).ToArray();
            }



            List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId) ).ToList();
            foreach (var item in intake)
            {
                CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                newIntake.id = item.id;
                newIntake.collegeId = item.collegeId;
                newIntake.academicYearId = item.academicYearId;
                newIntake.shiftId = item.shiftId;
                newIntake.isActive = item.isActive;
                newIntake.nbaFrom = item.nbaFrom;
                newIntake.nbaTo = item.nbaTo;
                newIntake.specializationId = item.specializationId;
                newIntake.Specialization = item.jntuh_specialization.specializationName;
                newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                newIntake.shiftId = item.shiftId;
                newIntake.Shift = item.jntuh_shift.shiftName;
                newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                collegeIntakeExisting.Add(newIntake);
            }
            collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

            var intakelists = new List<CollegeIntakeExisting>();
            foreach (var item in collegeIntakeExisting)
            {

                if (item.nbaFrom != null)
                    item.nbaFromDate = Utilities.MMDDYY2DDMMYY(item.nbaFrom.ToString());
                if (item.nbaTo != null)
                    item.nbaToDate = Utilities.MMDDYY2DDMMYY(item.nbaTo.ToString());

                //FLAG : 1 - Approved, 0 - Admitted
                jntuh_college_intake_existing details = db.jntuh_college_intake_existing
                                                          .Where(e => e.collegeId == userCollegeID && e.academicYearId == AY0 && e.specializationId == item.specializationId && e.shiftId == item.shiftId)
                                                          .Select(e => e)
                                                          .FirstOrDefault();
                if (details != null)
                {
                    item.ApprovedIntake = details.approvedIntake;
                    item.letterPath = details.approvalLetter;
                    item.ProposedIntake = details.proposedIntake;
                    item.courseStatus = details.courseStatus;
                }

                item.approvedIntake1 = GetIntake(userCollegeID, AYY1, item.specializationId, item.shiftId, 1);
                item.admittedIntake1 = GetIntake(userCollegeID, AYY1, item.specializationId, item.shiftId, 0);

                item.approvedIntake2 = GetIntake(userCollegeID, AYY2, item.specializationId, item.shiftId, 1);
                item.admittedIntake2 = GetIntake(userCollegeID, AYY2, item.specializationId, item.shiftId, 0);

                item.approvedIntake3 = GetIntake(userCollegeID, AYY3, item.specializationId, item.shiftId, 1);
                item.admittedIntake3 = GetIntake(userCollegeID, AYY3, item.specializationId, item.shiftId, 0);

                item.approvedIntake4 = GetIntake(userCollegeID, AYY4, item.specializationId, item.shiftId, 1);
                item.admittedIntake4 = GetIntake(userCollegeID, AYY4, item.specializationId, item.shiftId, 0);

                item.approvedIntake5 = GetIntake(userCollegeID, AYY5, item.specializationId, item.shiftId, 1);
                item.admittedIntake5 = GetIntake(userCollegeID, AYY5, item.specializationId, item.shiftId, 0);

                intakelists.Add(item);


            }

            if (intakelists.Count > 0)
            {
                intakedetailsList.FirstOrDefault().CollegeIntakeExistings = intakelists.Where(i => i.shiftId == 1).OrderBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Department).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();
            }
            else
            {
                intakedetailsList.FirstOrDefault().CollegeIntakeExistings = new List<CollegeIntakeExisting>();
            }

            #endregion


            return View(intakedetailsList);
        }




        #endregion

        #endregion


        #region For Online-Appeal Faculty Submission complicance start
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult FacultyRegistrationNumber(string collegeId, string fid, int deficencycount, int departmentid, string degree, int specializationid)
        {
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            //if (userCollegeID == 0 && collegeId != null)
            //{
            //    if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
            //    {
            //        userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
            //    }
            //}

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.degree = degree;
            ViewBag.deficiencycount = deficencycount;
            ViewBag.specializationid = specializationid;
            ViewBag.departmentid = departmentid;
            var faculty = new CollegeFaculty
            {
                facultyDepartmentId = departmentid,
                SpecializationId = specializationid,
                DegreeName = degree,
                Facultydeficencycount = deficencycount,
                collegeId = Convert.ToInt16(collegeId)
            };
            #region oldcode
            //if (facultyId != 0)
            //{
            //    jntuh_college_faculty existingfaculty = db.jntuh_college_faculty.Find(facultyId);

            //    faculty.collegeId = userCollegeID;
            //    faculty.id = facultyId;
            //    faculty.facultyFirstName = existingfaculty.facultyFirstName;
            //    faculty.facultyLastName = existingfaculty.facultyLastName;
            //    faculty.facultySurname = existingfaculty.facultySurname;
            //    faculty.facultyDesignationId = existingfaculty.facultyDesignationId;
            //    faculty.designation = db.jntuh_designation.Where(d => d.id == faculty.facultyDesignationId).Select(d => d.designation).FirstOrDefault();
            //    faculty.facultyOtherDesignation = existingfaculty.facultyOtherDesignation;
            //    faculty.facultyDepartmentId = existingfaculty.facultyDepartmentId;
            //    faculty.department = db.jntuh_department.Where(d => d.id == faculty.facultyDepartmentId).Select(d => d.departmentName).FirstOrDefault();
            //    faculty.DegreeName = degree;
            //}

            //ViewBag.PGSpecializations = db.jntuh_college_intake_existing
            //                             .Where(e => e.collegeId == userCollegeID && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 4 && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 5)
            //                             .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationName })
            //                             .GroupBy(e => new { e.id, e.spec })
            //                             .OrderBy(e => e.Key.spec)
            //                             .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();
            #endregion
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.Where(R => R.collegeId == faculty.collegeId).ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount >= jntuh_departmentcount.Count)
                {
                    ViewBag.deficiencystatus = true;
                }
            }

            return PartialView(faculty);
        }



        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult FacultyRegistrationNumber(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();

            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber&&r.Blacklistfaculy==false).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();
            //int? [] PharmacySpecializationIds= new int?[]{12,18,19};
            //int? [] MPharmacySpecializationIds = new int?[] { 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124 };
            //    if(PharmacySpecializationIds.Contains(faculty.SpecializationId))
            //    {
            //        var PharmacyFacultyCount = db.jntuh_appeal_faculty_registered.Where(F => F.collegeId == userCollegeID && PharmacySpecializationIds.Contains(F.SpecializationId)).Select(F => F).ToList();
            //        if (PharmacyFacultyCount.Count > 4)
            //             {
            //            ViewBag.BpharmacyMeet="Yes";
            //                 TempData["Error"] = "Appeal Submitted";
            //    return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification", new { collegeId = faculty.collegeId.ToString() });
            //             }
            //        ViewBag.BpharmacyMeet="No";
            //    }

            //if(MPharmacySpecializationIds.Contains(faculty.SpecializationId))
            //    {
            //         var PharmacyFacultyCount1=db.jntuh_appeal_faculty_registered.Where(F=>F.collegeId==userCollegeID &&PharmacySpecializationIds.Contains(F.SpecializationId)).Select(F=>F).ToList();
            //             if(PharmacyFacultyCount1.Count>2)
            //             {
            //                 ViewBag.MpharmacyMeet = "Yes";
            //                 TempData["Error"] = "Appeal Submitted";
            //    return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification", new { collegeId = faculty.collegeId.ToString() });
            //             }
            //    ViewBag.BpharmacyMeet="No";
            //    }


            if (isRegisteredFaculty == null)
            {
                TempData["Error"] = "Invalid Faculty Registration Number.";
                return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification", new { collegeId = faculty.collegeId.ToString() });
            }

            if (isExistingFaculty != null)
            {
                if (userCollegeID == isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in your college";
                    return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification", new { collegeId = faculty.collegeId.ToString() });
                }
                if (userCollegeID != isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
                    return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification", new { collegeId = faculty.collegeId.ToString() });
                }
            }



            //if (isExistingFaculty != null)
            //{
            //    if (userCollegeID != isExistingFaculty.collegeId && isExistingFaculty.collegeId != null)
            //    {
            //        TempData["Error"] = "Faculty is already working in other JNTUH affiliated college.";
            //    }
            //    else if (userCollegeID == isExistingFaculty.collegeId)
            //    {
            //        TempData["Error"] = "Faculty is already working in your college";
            //    }

            //    return RedirectToAction("CollegeFacultyWithIntakeFaculty", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            //}


            var notificationPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/NotificationsReports";
            var selectioncommitteePath = "~/Content/Upload/OnlineAppealDocuments/Faculty/SelectionCommitteeReports";
            var appointmentorderPath = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppointmentOrders";
            var joiningreportpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/JoiningReports";
            var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";
            var appealReverificationScreenshot = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppealReverificationScreenshot";

            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }


                var jntuhDepartment = jntuh_deparment.Where(i => i.id == faculty.facultyDepartmentId).FirstOrDefault();
                if (jntuhDepartment != null)
                {
                    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                }
                if (faculty.NotificationDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(notificationPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(notificationPath));
                    }

                    var ext = Path.GetExtension(faculty.NotificationDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.NotificationDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(notificationPath),
                            fileName, ext));
                        UpdatedFaculty.NOtificationReport = string.Format("{0}/{1}{2}", notificationPath, fileName, ext);
                    }
                }
                if (faculty.SelectionCommitteeDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(selectioncommitteePath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(selectioncommitteePath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.SelectionCommitteeDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(selectioncommitteePath), fileName, ext));
                        UpdatedFaculty.SelectionCommiteMinutes = string.Format("{0}/{1}{2}", selectioncommitteePath,
                            fileName, ext);
                    }
                }
                if (faculty.AppointmentOrderDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(appointmentorderPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appointmentorderPath));
                    }

                    var ext = Path.GetExtension(faculty.AppointmentOrderDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppointmentOrderDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(appointmentorderPath), fileName, ext));
                        UpdatedFaculty.AppointMentOrder = string.Format("{0}/{1}{2}", appointmentorderPath, fileName,
                            ext);
                    }
                }
                if (faculty.JoiningReportDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(joiningreportpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(joiningreportpath));
                    }

                    var ext = Path.GetExtension(faculty.JoiningReportDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.JoiningReportDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(joiningreportpath), fileName, ext));
                        UpdatedFaculty.JoiningOrder = string.Format("{0}/{1}{2}", joiningreportpath, fileName, ext);
                    }
                }
                if (faculty.AppealReverificationScreenShot != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealReverificationScreenshot)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealReverificationScreenshot));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationScreenShot.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName = db.jntuh_college.Where(c => c.id == userCollegeID).Select(c => c.collegeCode).FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationScreenShot.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealReverificationScreenshot), fileName, ext));
                        UpdatedFaculty.AppealReverificationScreenshot = string.Format("{0}/{1}{2}", appealReverificationScreenshot, fileName, ext);
                    }
                }
                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added.";
                TempData["Error"] = null;
            }

            else
            {
                TempData["Error"] = "Faculty is already appealed";
            }


            return RedirectToAction("CollegeFacultyWithIntakeFacultyPharmacy", "FacultyVerification");
        }



        #endregion


        #region For Principal Compliance & re-verification code

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult PrincipalFacultyRegistrationNumber(string collegeId, string fid, int deficencycount, int departmentid, string degree, int specializationid)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 0 && collegeId != null)
            {
                if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
                {
                    userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
                }
            }

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.degree = degree;
            ViewBag.deficiencycount = deficencycount;
            ViewBag.specializationid = specializationid;
            ViewBag.departmentid = departmentid;
            var faculty = new CollegeFaculty
            {
                facultyDepartmentId = departmentid,
                SpecializationId = specializationid,
                DegreeName = degree,
                Facultydeficencycount = deficencycount,
                collegeId = Convert.ToInt16(collegeId)
            };
            

            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult PrincipalFacultyRegistrationNumber(CollegeFaculty faculty)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            TempData["Error"] = null;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_principal_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();


            if (isRegisteredFaculty == null)
            {
                TempData["Error"] = "Invalid Principal Registration Number.";
                return RedirectToAction("CollegeFacultyWithIntakePrincipal", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            }

            if (isExistingFaculty != null)
            {
                if (userCollegeID != isExistingFaculty.collegeId)
                {
                    TempData["Error"] = "Principal is already working in other JNTUH affiliated college.";
                    return RedirectToAction("CollegeFacultyWithIntakePrincipal", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
                }
            }



            //if (isRegisteredFaculty != null)
            //{
            //    if (userCollegeID != isExistingFaculty.collegeId && isExistingFaculty.collegeId != null)
            //    {
            //        TempData["Error"] = "Principal is already working in other JNTUH affiliated college.";
            //        return RedirectToAction("CollegeFacultyWithIntakePrincipal", "FacultyVerification", new { collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString() });
            //    }
            //    //else if (userCollegeID == isExistingFaculty.collegeId)
            //    //{
            //    //    TempData["Error"] = "Principal is already working in your college";
            //    //}
            //}

            var notificationPath = "~/Content/Upload/OnlineAppealDocuments/Principal/NotificationsReports";
            var selectioncommitteePath = "~/Content/Upload/OnlineAppealDocuments/Principal/SelectionCommitteeReports";
            var appointmentorderPath = "~/Content/Upload/OnlineAppealDocuments/Principal/AppointmentOrders";
            var joiningreportpath = "~/Content/Upload/OnlineAppealDocuments/Principal/JoiningReports";
            var phdundertakingdocpath = "~/Content/Upload/OnlineAppealDocuments/Principal/PhdUndertakingReports";
            var PrinicipalAadhaarDocument = "~/Content/Upload/OnlineAppealDocuments/Principal/AadhaarDocuments";
            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);


            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_principal_registered UpdatedFaculty = new jntuh_appeal_principal_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                //UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                //UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                //var jntuhDepartment = jntuh_deparment.Where(i => i.id == faculty.facultyDepartmentId).FirstOrDefault();
                //if (jntuhDepartment != null)
                //{
                //    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                //}

                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(PrinicipalAadhaarDocument)))
                    {
                        Directory.CreateDirectory(Server.MapPath(PrinicipalAadhaarDocument));
                    }

                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(PrinicipalAadhaarDocument),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", PrinicipalAadhaarDocument, fileName, ext);
                    }
                }

                if (faculty.NotificationDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(notificationPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(notificationPath));
                    }

                    var ext = Path.GetExtension(faculty.NotificationDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.NotificationDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(notificationPath),
                            fileName, ext));
                        UpdatedFaculty.NOtificationReport = string.Format("{0}/{1}{2}", notificationPath, fileName, ext);
                    }
                }
                if (faculty.SelectionCommitteeDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(selectioncommitteePath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(selectioncommitteePath));
                    }

                    var ext = Path.GetExtension(faculty.SelectionCommitteeDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.SelectionCommitteeDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(selectioncommitteePath), fileName, ext));
                        UpdatedFaculty.SelectionCommiteMinutes = string.Format("{0}/{1}{2}", selectioncommitteePath,
                            fileName, ext);
                    }
                }
                if (faculty.AppointmentOrderDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(appointmentorderPath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appointmentorderPath));
                    }

                    var ext = Path.GetExtension(faculty.AppointmentOrderDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppointmentOrderDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(appointmentorderPath), fileName, ext));
                        UpdatedFaculty.AppointMentOrder = string.Format("{0}/{1}{2}", appointmentorderPath, fileName,
                            ext);
                    }
                }
                if (faculty.JoiningReportDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(joiningreportpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(joiningreportpath));
                    }

                    var ext = Path.GetExtension(faculty.JoiningReportDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.JoiningReportDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(joiningreportpath), fileName, ext));
                        UpdatedFaculty.JoiningOrder = string.Format("{0}/{1}{2}", joiningreportpath, fileName, ext);
                    }
                }
                //phd Undertaking Doc
                if (faculty.PhdUndertakingDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(phdundertakingdocpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(phdundertakingdocpath));
                    }

                    var ext = Path.GetExtension(faculty.PhdUndertakingDocument.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhdUndertakingDocument.SaveAs(string.Format("{0}/{1}{2}",
                            Server.MapPath(phdundertakingdocpath), fileName, ext));
                        UpdatedFaculty.PHDUndertakingDocument = string.Format("{0}/{1}{2}", phdundertakingdocpath, fileName, ext);
                    }
                }





                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_principal_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Principal Registration Number Successfully Added.";
                TempData["Error"] = null;
            }

            else
            {
                TempData["Error"] = "Principal Registration Number is already appealed";
            }


            return RedirectToAction("CollegeFacultyWithIntakePrincipal", "FacultyVerification");
        }


        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult PrincipalAppealReverification(string collegeId, string fid, int deficencycount, int departmentid, string degree, string specializationid, string registrationnumber)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 0 && collegeId != null)
            {
                if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
                {
                    userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
                }
            }

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.registrationnumber = registrationnumber;
            CollegeFaculty faculty = new CollegeFaculty();
            faculty.FacultyRegistrationNumber = registrationnumber;
            faculty.collegeId = Convert.ToInt16(collegeId);
            faculty.DegreeName = degree;
            faculty.SpecializationId = Convert.ToInt16(specializationid);
            faculty.facultyDepartmentId = departmentid;
            faculty.Facultydeficencycount = deficencycount;
            faculty.AadhaarFlag =
                db.jntuh_registered_faculty.Where(f => f.RegistrationNumber == registrationnumber.Trim())
                    .Select(s => s.InvalidAadhaar)
                    .FirstOrDefault();
            //var aadharflag =
            //    db.jntuh_registered_faculty.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber)
            //        .Select(s => s.BASStatus)
            //        .FirstOrDefault();
            //if (aadharflag != "Yes")
            //{
                
            //}
            //var jntuh_college_faculty_registered =
            //    db.jntuh_college_faculty_registered.Where(s => s.RegistrationNumber == registrationnumber)
            //        .Select(s => s)
            //        .FirstOrDefault();
            //faculty.facultyAadhaarNumber = jntuh_college_faculty_registered.AadhaarNumber;
            //faculty.facultyAadharDocument = jntuh_college_faculty_registered.AadhaarDocument;
            return PartialView(faculty);
        }


        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult PrincipalAppealFacultyRegistrationNumber(CollegeFaculty faculty)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            TempData["Error"] = null;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();

            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_principal_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();

            var physicalpresencpath = "~/Content/Upload/OnlineAppealDocuments/Principal/PhysicalPresenceReports";
            var phdundertakingdocpath = "~/Content/Upload/OnlineAppealDocuments/Principal/PhdUndertakingReports";
            var PrinicipalAadhaarDocument = "~/Content/Upload/OnlineAppealDocuments/Principal/AadhaarDocuments";
            //var PrinicipalAadhaarDocument = "~/Content";
            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_principal_registered UpdatedFaculty = new jntuh_appeal_principal_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(PrinicipalAadhaarDocument)))
                    {
                        Directory.CreateDirectory(Server.MapPath(PrinicipalAadhaarDocument));
                    }

                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(PrinicipalAadhaarDocument),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", PrinicipalAadhaarDocument, fileName, ext);
                    }
                }
                if (!String.IsNullOrEmpty(faculty.facultyAadharDocument))
                {
                    UpdatedFaculty.AadhaarDocument = faculty.facultyAadharDocument;
                }
                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        UpdatedFaculty.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }
                }
                //pdf saving code 

                if (faculty.PhdUndertakingDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(phdundertakingdocpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(phdundertakingdocpath));
                    }

                    var ext1 = Path.GetExtension(faculty.PhdUndertakingDocument.FileName);
                    if (ext1.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhdUndertakingDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(phdundertakingdocpath),
                            fileName, ext1));
                        UpdatedFaculty.PHDUndertakingDocument = string.Format("{0}/{1}{2}", phdundertakingdocpath, fileName, ext1);
                    }
                }








                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_principal_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Principal Registration Number Successfully Added for Re-verification.";
                TempData["Error"] = null;
            }

            else
            {
                var facultydata =
                    db.jntuh_appeal_principal_registered.Where(
                        i => i.RegistrationNumber == faculty.FacultyRegistrationNumber).FirstOrDefault();

                facultydata.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(PrinicipalAadhaarDocument)))
                    {
                        Directory.CreateDirectory(Server.MapPath(PrinicipalAadhaarDocument));
                    }

                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(PrinicipalAadhaarDocument),
                            fileName, ext));
                        facultydata.AadhaarDocument = string.Format("{0}/{1}{2}", PrinicipalAadhaarDocument, fileName, ext);
                    }
                }

                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        facultydata.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }
                    //pdf saving code 

                    if (faculty.PhdUndertakingDocument != null)
                    {
                        if (!Directory.Exists(Server.MapPath(phdundertakingdocpath)))
                        {
                            Directory.CreateDirectory(Server.MapPath(phdundertakingdocpath));
                        }

                        var ext1 = Path.GetExtension(faculty.PhdUndertakingDocument.FileName);
                        if (ext1.ToUpper().Equals(".PDF"))
                        {
                            string fileName =
                                db.jntuh_college.Where(c => c.id == userCollegeID)
                                    .Select(c => c.collegeCode)
                                    .FirstOrDefault() + "_" +
                                faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                            faculty.PhdUndertakingDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(phdundertakingdocpath),
                                fileName, ext1));
                            facultydata.PHDUndertakingDocument = string.Format("{0}/{1}{2}", phdundertakingdocpath, fileName, ext1);
                        }
                    }

                    facultydata.updatedBy = userID;
                    facultydata.updatedOn = DateTime.Now;
                    db.Entry(facultydata).State = EntityState.Modified;
                    db.SaveChanges();
                    TempData["Success"] = "Faculty Registration Number Successfully updated for Re-verification..";
                    TempData["Error"] = null;
                }
            }

            return RedirectToAction("AppealReverificationforPrincipal", "FacultyVerification", new { @collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]), @registrationnumber = faculty.FacultyRegistrationNumber });
        }

        #endregion


        #region For Appeal Reverification faculty


        [Authorize(Roles = "Admin,College")]
        [HttpGet]
        public ActionResult AppealReverificationFaculty(string type, string CollegeId, int deficencycount, int departmentid, string degree, int specializationid)
        {
            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            //int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            // int Collegeid = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(CollegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"])); ;
            int Collegeid = 0;
            if (!string.IsNullOrEmpty(CollegeId))
                Collegeid = Convert.ToInt32(CollegeId);
            else
                Collegeid = 0;
            var FacultyRegistrationList = new List<FacultyRegistration>();
            if (Collegeid != null && Collegeid != 0)
            {

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();


                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == Collegeid).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();


                //education categoryIds UG,PG,PHD...........
                var jntuh_education_category = db.jntuh_education_category.ToList();

                var jntuh_registered_faculty1 = registeredFaculty.Select(rf => new
                {
                    type = rf.type,
                    Absent = rf.Absent != null ? (bool)rf.Absent : false,
                    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE != null ? (bool)rf.NotQualifiedAsperAICTE : false,
                    InvalidPANNo = rf.InvalidPANNumber != null ? (bool)rf.InvalidPANNumber : false,
                    InCompleteCeritificates = rf.IncompleteCertificates != null ? (bool)rf.IncompleteCertificates : false,
                    PANNumber = rf.PANNumber,
                    XeroxcopyofcertificatesFlag = rf.Xeroxcopyofcertificates != null ? (bool)rf.Xeroxcopyofcertificates : false,
                    NOrelevantUgFlag = rf.NoRelevantUG == "Yes" ? true : false,
                    NOrelevantPgFlag = rf.NoRelevantPG == "Yes" ? true : false,
                    NOrelevantPhdFlag = rf.NORelevantPHD == "Yes" ? true : false,
                    BlacklistFaculty = rf.Blacklistfaculy != null ? (bool)rf.Blacklistfaculy : false,
                    NotIdentityFiedForAnyProgramFlag = rf.NotIdentityfiedForanyProgram != null ? (bool)rf.NotIdentityfiedForanyProgram : false,
                    OriginalCertificatesnotshownFlag = rf.OriginalCertificatesNotShown != null ? (bool)rf.OriginalCertificatesNotShown : false,
                    NoSCM = rf.NoSCM != null ? (bool)rf.NoSCM : false,
                    SamePANUsedByMultipleFaculty = rf.Invaliddegree != null ? (bool)(rf.Invaliddegree) : false,
                    BASStatusOld = rf.BAS,
                    BASStatus = rf.InvalidAadhaar,
                    OriginalsVerifiedUG = rf.OriginalsVerifiedUG == true ? true : false,
                    OriginalsVerifiedPHD = rf.OriginalsVerifiedPHD == true ? true : false,

                    // NoSCM = rf.NoSCM17 != null ? (bool)rf.NoSCM17 : false,
                    // FalsePAN = rf.FalsePAN != null ? (bool)rf.FalsePAN : false,
                    // NOForm16 = rf.NoForm16 != null ? (bool)rf.NoForm16 : false,
                    // MultipleReginSamecoll = rf.MultipleRegInSameCollege != null ? (bool)rf.MultipleRegInSameCollege : false,

                    //NoForm16Verification = rf.Noform16Verification != null ? (bool)rf.Noform16Verification : false,
                    //PhotocopyofPAN = rf.PhotoCopyofPAN != null ? (bool)rf.PhotoCopyofPAN : false,
                    PhdUndertakingDocumentstatus = rf.PhdUndertakingDocumentstatus != null ? (bool)(rf.PhdUndertakingDocumentstatus) : false,
                    PHDUndertakingDocumentView = rf.PHDUndertakingDocument,
                    PhdUndertakingDocumentText = rf.PhdUndertakingDocumentText,
                    //AppliedPAN = rf.AppliedPAN != null ? (bool)(rf.AppliedPAN) : false,
                    Notin116 = rf.Notin116,
                    Blacklistfaculy = rf.Blacklistfaculy,
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : "",
                    HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                    IsApproved = rf.isApproved,
                    PanNumber = rf.PANNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    Photo = rf.Photo,
                    FullName = rf.FirstName + rf.MiddleName + rf.LastName,
                    FacultyEducation = rf.jntuh_registered_faculty_education,
                    DegreeId = rf.jntuh_registered_faculty_education.Count(e => e.facultyId == rf.id) > 0 ? rf.jntuh_registered_faculty_education.Where(e => e.facultyId == rf.id).Select(e => e.educationId).Max() : 0,
                    DepartmentId = rf.DepartmentId,
                    PgSpecialization = rf.PGSpecialization



                }).ToList();
                var jntuh_specializations = db.jntuh_specialization.Select(S => S).ToList();
                var RegistrationNumbersCleared = jntuh_registered_faculty1.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null) && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.InCompleteCeritificates == false || rf.InCompleteCeritificates == null) && (rf.Blacklistfaculy == false) &&
                                                 rf.NOrelevantUgFlag == false && rf.NOrelevantPgFlag == false && rf.NOrelevantPhdFlag == false && rf.OriginalCertificatesnotshownFlag == false && rf.NotIdentityFiedForAnyProgramFlag == false && (rf.InvalidPANNo == false || rf.InvalidPANNo == null) && (rf.XeroxcopyofcertificatesFlag == false || rf.XeroxcopyofcertificatesFlag == null) &&  // (rf.AppliedPAN == false || rf.AppliedPAN == null) && && (rf.MultipleReginSamecoll == false || rf.MultipleReginSamecoll == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) 
                                                 (rf.SamePANUsedByMultipleFaculty == false || rf.SamePANUsedByMultipleFaculty == null) && rf.BASStatus != "Yes" && rf.BASStatusOld != "Yes" && rf.OriginalsVerifiedUG == false && rf.OriginalsVerifiedPHD == false && (rf.DepartmentId != 61 || rf.DepartmentId != 27) && rf.HighestDegreeID >= 4)).Select(e => e.RegistrationNumber).ToArray();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Where(R => !RegistrationNumbersCleared.Contains(R.RegistrationNumber)).Select(rf => new
                {
                    type = rf.type,
                    Absent = rf.Absent,
                    NotQualifiedAsperAICTE = rf.NotQualifiedAsperAICTE,
                    InCompleteCeritificates = rf.InCompleteCeritificates,
                    InvalidPANNo = rf.InvalidPANNo,
                    NOrelevantPgFlag = rf.NOrelevantPgFlag,
                    NOrelevantUgFlag = rf.NOrelevantUgFlag,
                    NOrelevantPhdFlag = rf.NOrelevantPhdFlag,
                    XeroxcopyofcertificatesFlag = rf.XeroxcopyofcertificatesFlag,
                    NoSCM = rf.NoSCM,
                    PANNumber = rf.PANNumber,
                    NotIdentityFiedForAnyProgramFlag = rf.NotIdentityFiedForAnyProgramFlag,
                    BASStatus = rf.BASStatus,
                    BASStatusOld = rf.BASStatusOld,
                    OriginalsVerifiedUG = rf.OriginalsVerifiedUG,
                    OriginalsVerifiedPHD = rf.OriginalsVerifiedPHD,
                    SamePANUsedByMultipleFaculty = rf.SamePANUsedByMultipleFaculty,
                    OriginalCertificatesnotshownFlag = rf.OriginalCertificatesnotshownFlag,
                    Blacklistfaculy = rf.Blacklistfaculy,

                    PHDundertakingnotsubmitted = rf.PhdUndertakingDocumentstatus,
                    Notin116 = rf.Notin116,

                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                    Specializationname = jntuh_specializations.Where(S => S.id == rf.PgSpecialization).Select(S => S.specializationName).FirstOrDefault(),
                    DeptId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.DepartmentId).FirstOrDefault(),

                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    Photo = rf.Photo,
                    FullName = rf.FullName,
                    faculty_education = rf.FacultyEducation,
                    HighestDegreeID = rf.HighestDegreeID
                }).ToList();


                foreach (var item in jntuh_registered_faculty)
                {
                    // var facultyregistered = new FacultyRegistration
                    //{
                    string Reason = null;
                    FacultyRegistration facultyregistered = new FacultyRegistration();
                    facultyregistered.RegistrationNumber = item.RegistrationNumber;
                    facultyregistered.FirstName = item.FullName;
                    facultyregistered.department = item.Department;
                    facultyregistered.DepartmentId = item.DeptId;
                    facultyregistered.SpecializationName = item.Specializationname;
                    facultyregistered.PGSpecialization = item.SpecializationId;
                    facultyregistered.jntuh_registered_faculty_education = item.faculty_education;
                    facultyregistered.facultyPhoto = item.Photo;
                    facultyregistered.Absent = item.Absent != null && (bool)item.Absent;
                    facultyregistered.NOTQualifiedAsPerAICTE = item.NotQualifiedAsperAICTE != null && (bool)item.NotQualifiedAsperAICTE;
                    facultyregistered.NoSCM = item.NoSCM != null && (bool)item.NoSCM;
                    facultyregistered.PANNumber = item.PANNumber;
                    facultyregistered.PHDundertakingnotsubmitted = item.PHDundertakingnotsubmitted != null && (bool)item.PHDundertakingnotsubmitted;
                    facultyregistered.BlacklistFaculty = item.Blacklistfaculy != null && (bool)item.Blacklistfaculy;
                    facultyregistered.DegreeId = item.HighestDegreeID;
                    facultyregistered.AadhaarNumber = jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarNumber).FirstOrDefault() == null ? null : jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarNumber).FirstOrDefault();
                    facultyregistered.facultyAadhaarCardDocument = jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarDocument).FirstOrDefault() == null ? null : jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == item.RegistrationNumber).Select(e => e.AadhaarDocument).FirstOrDefault();
                    if (item.Absent == true)
                        Reason += "Absent";

                    if (item.type == "Adjunct")
                    {
                        if (Reason != null)
                            Reason += ",Adjunct Faculty";
                        else
                            Reason += "Adjunct Faculty";
                    }

                    if (item.XeroxcopyofcertificatesFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",Xerox copyof certificates";
                        else
                            Reason += "Xerox copyof certificates";
                    }

                    if (item.NOrelevantUgFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant UG";
                        else
                            Reason += "NO Relevant UG";
                    }

                    if (item.NOrelevantPgFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PG";
                        else
                            Reason += "NO Relevant PG";
                    }

                    if (item.NOrelevantPhdFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NO Relevant PHD";
                        else
                            Reason += "NO Relevant PHD";
                    }

                    if (item.NotQualifiedAsperAICTE == true)
                    {
                        if (Reason != null)
                            Reason += ",NOT Qualified AsPerAICTE";
                        else
                            Reason += "NOT Qualified AsPerAICTE";
                    }

                    if (item.InvalidPANNo == true)
                    {
                        if (Reason != null)
                            Reason += ",InvalidPANNumber";
                        else
                            Reason += "InvalidPANNumber";
                    }

                    if (item.InCompleteCeritificates == true)
                    {
                        if (Reason != null)
                            Reason += ",InComplete Ceritificates";
                        else
                            Reason += "InComplete Ceritificates";
                    }

                    if (item.NoSCM == true)
                    {
                        if (Reason != null)
                            Reason += ",NoSCM";
                        else
                            Reason += "NoSCM";
                    }

                    if (item.OriginalCertificatesnotshownFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",Original Certificates notshown";
                        else
                            Reason += "Original Certificates notshown";
                    }

                    if (item.PANNumber == null)
                    {
                        if (Reason != null)
                            Reason += ",No PANNumber";
                        else
                            Reason += "No PANNumber";
                    }

                    if (item.NotIdentityFiedForAnyProgramFlag == true)
                    {
                        if (Reason != null)
                            Reason += ",NotIdentityFied ForAnyProgram";
                        else
                            Reason += "NotIdentityFied ForAnyProgram";
                    }

                    if (item.SamePANUsedByMultipleFaculty == true)
                    {
                        if (Reason != null)
                            Reason += ",SamePANUsedByMultipleFaculty";
                        else
                            Reason += "SamePANUsedByMultipleFaculty";
                    }

                    if (item.BASStatus == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",No/Invalid Aadhaar Document";
                        else
                            Reason += "No/Invalid Aadhaar Document";
                    }

                    if (item.BASStatusOld == "Yes")
                    {
                        if (Reason != null)
                            Reason += ",BAS Flag";
                        else
                            Reason += "BAS Flag";
                    }

                    if (item.OriginalsVerifiedUG == true)
                    {
                        if (Reason != null)
                            Reason += ",Complaint PHD Faculty";
                        else
                            Reason += "Complaint PHD Faculty";
                    }

                    if (item.OriginalsVerifiedPHD == true)
                    {
                        if (Reason != null)
                            Reason += ",No Guide Sign in PHD Thesis";
                        else
                            Reason += "No Guide Sign in PHD Thesis";
                    }
                    if (item.Blacklistfaculy == true)
                    {
                        if (Reason != null)
                            Reason += ",Blacklistfaculy";
                        else
                            Reason += "Blacklistfaculy";
                    }
                    facultyregistered.DeactivationReason = Reason;
                    //};
                    FacultyRegistrationList.Add(facultyregistered);
                }
            }

            ViewBag.collegeid = Collegeid;
            ViewBag.departmentid = departmentid;
            ViewBag.degree = degree;
            if (degree == "Pharm.D PB")
            {
                ViewBag.degree = "Pharm.DPB";
            }
            ViewBag.specializationid = specializationid;
            ViewBag.deficiencycount = deficencycount;
            return View(FacultyRegistrationList);
            #endregion

        }









        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpGet]
        public ActionResult AppealReverification(string collegeId, string fid, int deficencycount, int departmentid, string degree, string specializationid, string registrationnumber)
        {
            return RedirectToAction("CollegeDashboard", "Dashboard");
            int facultyId = 0;
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 0 && collegeId != null)
            {
                if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
                {
                    userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
                }
            }

            if (!string.IsNullOrEmpty(fid))
            {
                facultyId = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
            }

            ViewBag.collegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.registrationnumber = registrationnumber;
            CollegeFaculty faculty = new CollegeFaculty();
            faculty.FacultyRegistrationNumber = registrationnumber;
            faculty.collegeId = Convert.ToInt16(collegeId);
            faculty.DegreeName = degree;
            if (!string.IsNullOrEmpty(specializationid))
            {
                faculty.SpecializationId = Convert.ToInt16(specializationid);
            }
            else
            {
                faculty.SpecializationId = 0;
            }

            faculty.facultyDepartmentId = departmentid;
            faculty.Facultydeficencycount = deficencycount;

            List<int> pharmacyIds = new List<int> { 12, 18, 13, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 19 };

            ViewBag.PGSpecializations = db.jntuh_college_intake_existing.Where(e =>e.collegeId == userCollegeID && pharmacyIds.Contains(e.specializationId))
                                       .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationDescription })
                                       .GroupBy(e => new { e.id, e.spec })
                                       .OrderBy(e => e.Key.spec)
                                       .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();



            return PartialView(faculty);
        }





        [Authorize(Roles = "Admin,SuperAdmin,College")]
        [HttpPost]
        public ActionResult AppealFacultyRegistrationNumber(CollegeFaculty faculty)
        {
            TempData["Error"] = null;

            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();

            if (userCollegeID == 375)
                userCollegeID = Convert.ToInt32(WebConfigurationManager.AppSettings["PharmacyId"]);

            jntuh_registered_faculty isRegisteredFaculty = db.jntuh_registered_faculty.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            jntuh_college_faculty_registered isExistingFaculty = db.jntuh_college_faculty_registered.Where(r => r.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(r => r).FirstOrDefault();
            var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
            var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
            string[] RegistrationNumber = jntuh_appeal_faculty.Select(i => i.RegistrationNumber).ToArray();

            var physicalpresencpath = "~/Content/Upload/OnlineAppealDocuments/Faculty/PhysicalPresenceReports";
            var appealreverificationSupportdoc = "~/Content/Upload/OnlineAppealDocuments/Faculty/AppealReverificationSupportReports";
            var AppealFacultyAadhaarDocuments = "~/Content/Upload/OnlineAppealDocuments/Faculty/FacultyAadhaarDocuments";

            var deparment = jntuh_deparment.FirstOrDefault(i => i.id == faculty.facultyDepartmentId);
            if (deparment != null)
            {
                var jntuh_departmentcount =
                jntuh_appeal_faculty.Where(
                    i =>
                        i.DepartmentId == faculty.facultyDepartmentId && i.SpecializationId == faculty.SpecializationId &&
                        i.DegreeId == deparment.degreeId).ToList();

                if (faculty.Facultydeficencycount > jntuh_departmentcount.Count)
                {

                }
            }

            if (!RegistrationNumber.Contains(faculty.FacultyRegistrationNumber.Trim()))
            {
                //int FacultyId = db.jntuh_college_faculty_registered.Where(F => F.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(F => F.id).FirstOrDefault();
                //jntuh_college_faculty_registered fToDelete = db.jntuh_college_faculty_registered.Where(f => f.RegistrationNumber == faculty.FacultyRegistrationNumber).Select(i => i).FirstOrDefault();

                jntuh_appeal_faculty_registered UpdatedFaculty = new jntuh_appeal_faculty_registered();
                UpdatedFaculty.collegeId = isRegisteredFaculty.collegeId != null
                    ? (int)isRegisteredFaculty.collegeId
                    : 0;
                UpdatedFaculty.collegeId = faculty.collegeId;
                UpdatedFaculty.RegistrationNumber = faculty.FacultyRegistrationNumber;
                UpdatedFaculty.existingFacultyId = isRegisteredFaculty.id;
                UpdatedFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                UpdatedFaculty.DepartmentId = faculty.facultyDepartmentId;
                UpdatedFaculty.SpecializationId = faculty.SpecializationId;

                UpdatedFaculty.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        UpdatedFaculty.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }

                var jntuhDepartment = jntuh_deparment.Where(i => i.id == faculty.facultyDepartmentId).FirstOrDefault();
                if (jntuhDepartment != null)
                {
                    UpdatedFaculty.DegreeId = jntuhDepartment.degreeId;
                }
                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        UpdatedFaculty.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }
                }

                //544444444444444
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        UpdatedFaculty.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }






                UpdatedFaculty.createdOn = DateTime.Now;
                UpdatedFaculty.createdBy = userID;
                db.jntuh_appeal_faculty_registered.Add(UpdatedFaculty);
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully Added for Re-verification.";
                TempData["Error"] = null;
            }

            else
            {
                var facultydata =
                    db.jntuh_appeal_faculty_registered.Where(
                        i => i.RegistrationNumber == faculty.FacultyRegistrationNumber).FirstOrDefault();


                if (faculty.PhysicalPresenceDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(physicalpresencpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(physicalpresencpath));
                    }

                    var ext = Path.GetExtension(faculty.PhysicalPresenceDocument.FileName);
                    if (ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.PhysicalPresenceDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(physicalpresencpath),
                            fileName, ext));
                        facultydata.PhysicalPresenceonInspection = string.Format("{0}/{1}{2}", physicalpresencpath, fileName, ext);
                    }


                }
                if (faculty.AppealReverificationSupportDoc != null)
                {
                    if (!Directory.Exists(Server.MapPath(appealreverificationSupportdoc)))
                    {
                        Directory.CreateDirectory(Server.MapPath(appealreverificationSupportdoc));
                    }

                    var ext = Path.GetExtension(faculty.AppealReverificationSupportDoc.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string fileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.collegeCode)
                                .FirstOrDefault() + "_" +
                            faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.AppealReverificationSupportDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealreverificationSupportdoc),
                            fileName, ext));
                        facultydata.AppealReverificationSupportingDocument = string.Format("{0}/{1}{2}", appealreverificationSupportdoc, fileName, ext);
                    }
                }

                facultydata.AadhaarNumber = faculty.facultyAadhaarNumber;

                if (faculty.facultyAadharPhotoDocument != null)
                {
                    if (!Directory.Exists(Server.MapPath(AppealFacultyAadhaarDocuments)))
                    {
                        Directory.CreateDirectory(Server.MapPath(AppealFacultyAadhaarDocuments));
                    }
                    var ext = Path.GetExtension(faculty.facultyAadharPhotoDocument.FileName);
                    if (ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG"))
                    {
                        string fileName =
                           db.jntuh_college.Where(c => c.id == userCollegeID)
                               .Select(c => c.collegeCode)
                               .FirstOrDefault() + "_" +
                           faculty.FacultyRegistrationNumber + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        faculty.facultyAadharPhotoDocument.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(AppealFacultyAadhaarDocuments),
                            fileName, ext));
                        facultydata.AadhaarDocument = string.Format("{0}/{1}{2}", AppealFacultyAadhaarDocuments, fileName, ext);
                    }
                }

                facultydata.updatedBy = userID;
                facultydata.updatedOn = DateTime.Now;
                db.Entry(facultydata).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Registration Number Successfully updated for Re-verification..";
                TempData["Error"] = null;

            }

            return RedirectToAction("AppealReverificationFaculty", "FacultyVerification", new
            {
                //collegeId = UAAAS.Models.Utilities.EncryptString(faculty.collegeId.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]),
                collegeId = faculty.collegeId.ToString(),
                deficencycount = faculty.Facultydeficencycount,
                degree = faculty.DegreeName,
                departmentid = faculty.facultyDepartmentId,
                specializationid = faculty.SpecializationId
            });
        }


        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AppealReverificationFacultyView(string fid, string registrationnumber)
        {

            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                //fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                jntuh_registered_faculty faculty =
                    db.jntuh_registered_faculty.Where(i => i.RegistrationNumber == registrationnumber).FirstOrDefault();

                if (faculty != null)
                {
                    regFaculty.id = faculty.id;
                    regFaculty.Type = faculty.type;
                    regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                    regFaculty.UserName = db.my_aspnet_users.Where(u => u.id == faculty.UserId).Select(u => u.name).FirstOrDefault();
                    regFaculty.Email = faculty.Email;
                    regFaculty.UniqueID = faculty.UniqueID;
                    regFaculty.FirstName = faculty.FirstName;
                    regFaculty.MiddleName = faculty.MiddleName;
                    regFaculty.LastName = faculty.LastName;
                    regFaculty.FatherOrhusbandName = faculty.FatherOrHusbandName;
                    regFaculty.MotherName = faculty.MotherName;
                    regFaculty.GenderId = faculty.GenderId;
                    if (faculty.DateOfBirth != null)
                    {
                        regFaculty.facultyDateOfBirth = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfBirth.ToString());
                    }
                    regFaculty.Mobile = faculty.Mobile;
                    regFaculty.facultyPhoto = faculty.Photo;
                    regFaculty.PANNumber = faculty.PANNumber;
                    regFaculty.facultyPANCardDocument = faculty.PANDocument;
                    regFaculty.AadhaarNumber = faculty.AadhaarNumber;
                    regFaculty.facultyAadhaarCardDocument = faculty.AadhaarDocument;
                    regFaculty.WorkingStatus = faculty.WorkingStatus;
                    regFaculty.TotalExperience = faculty.TotalExperience;
                    regFaculty.OrganizationName = faculty.OrganizationName;
                    if (faculty.collegeId != null)
                    {
                        regFaculty.CollegeName = db.jntuh_college.Find(faculty.collegeId).collegeName;
                    }
                    regFaculty.CollegeId = faculty.collegeId;
                    if (faculty.DepartmentId != null)
                    {
                        regFaculty.department = db.jntuh_department.Find(faculty.DepartmentId).departmentName;
                    }
                    regFaculty.DepartmentId = faculty.DepartmentId;
                    regFaculty.OtherDepartment = faculty.OtherDepartment;

                    if (faculty.DesignationId != null)
                    {
                        regFaculty.designation = db.jntuh_designation.Find(faculty.DesignationId).designation;
                    }
                    regFaculty.DesignationId = faculty.DesignationId;
                    regFaculty.OtherDesignation = faculty.OtherDesignation;

                    if (faculty.DateOfAppointment != null)
                    {
                        regFaculty.facultyDateOfAppointment = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfAppointment.ToString());
                    }
                    regFaculty.TotalExperiencePresentCollege = faculty.TotalExperiencePresentCollege;
                    regFaculty.isFacultyRatifiedByJNTU = faculty.isFacultyRatifiedByJNTU;
                    if (faculty.DateOfRatification != null)
                    {
                        regFaculty.facultyDateOfRatification = UAAAS.Models.Utilities.MMDDYY2DDMMYY(faculty.DateOfRatification.ToString());
                    }
                    regFaculty.ProceedingsNo = faculty.ProceedingsNumber;
                    regFaculty.SelectionCommitteeProcedings = faculty.ProceedingDocument;
                    regFaculty.AICTEFacultyId = faculty.AICTEFacultyId;
                    regFaculty.GrossSalary = faculty.grosssalary;
                    regFaculty.National = faculty.National;
                    regFaculty.InterNational = faculty.InterNational;
                    regFaculty.Citation = faculty.Citation;
                    regFaculty.Awards = faculty.Awards;
                    regFaculty.isActive = faculty.isActive;
                    regFaculty.isApproved = faculty.isApproved;
                    regFaculty.isView = true;
                    regFaculty.DeactivationReason = faculty.DeactivationReason;

                    regFaculty.FacultyEducation = db.jntuh_education_category.Where(e => e.isActive == true && (e.id == 1 || e.id == 3 || e.id == 4 || e.id == 5 || e.id == 6))
                                                           .Select(e => new RegisteredFacultyEducation
                                                           {
                                                               educationId = e.id,
                                                               educationName = e.educationCategoryName,
                                                               studiedEducation = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.courseStudied).FirstOrDefault(),
                                                               specialization = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.specialization).FirstOrDefault(),
                                                               passedYear = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.passedYear).FirstOrDefault(),
                                                               percentage = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.marksPercentage).FirstOrDefault(),
                                                               division = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.division).FirstOrDefault(),
                                                               university = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.boardOrUniversity).FirstOrDefault(),
                                                               place = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.placeOfEducation).FirstOrDefault(),
                                                               facultyCertificate = db.jntuh_registered_faculty_education.Where(fe => fe.educationId == e.id && fe.facultyId == faculty.id).Select(fe => fe.certificate).FirstOrDefault(),
                                                           }).ToList();
                }



                foreach (var item in regFaculty.FacultyEducation)
                {
                    if (item.division == null)
                        item.division = 0;
                }

                string registrationNumber = db.jntuh_registered_faculty.Where(of => of.id == faculty.id).Select(of => of.RegistrationNumber).FirstOrDefault();
                int facultyId = db.jntuh_college_faculty_registered.Where(of => of.RegistrationNumber == registrationNumber).Select(of => of.id).FirstOrDefault();
                //Commented on 18-06-2018 by Narayana Reddy
                //int[] verificationOfficers = db.jntuh_college_faculty_verified.Where(v => v.FacultyId == facultyId).Select(v => v.VerificationOfficer).Distinct().ToArray();
                int userId = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);



                ViewBag.HideVerifyLink = regFaculty.isApproved != null ? true : false;
            }

            return View(regFaculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult FacultyVerificationCheck(string fid, string collegeid, string registrationnumber)
        {
            FacultyRegistration regFaculty = new FacultyRegistration();
            int fID = 0;

            if (fid != null)
            {
                regFaculty.GenderId = null;
                regFaculty.isFacultyRatifiedByJNTU = null;
                //fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                //ViewBag.FacultyID = fID;
                ViewBag.collegeid = collegeid;
                ViewBag.fid = fid;
                jntuh_registered_faculty faculty =
                    db.jntuh_registered_faculty.Where(i => i.RegistrationNumber == registrationnumber).FirstOrDefault();
                if (faculty != null)
                {
                    regFaculty.id = faculty.id;
                    ViewBag.FacultyID = faculty.id;
                    regFaculty.Type = faculty.type;
                    regFaculty.RegistrationNumber = faculty.RegistrationNumber;
                    regFaculty.Email = faculty.Email;
                    regFaculty.FirstName = faculty.FirstName;
                    regFaculty.MiddleName = faculty.MiddleName;
                    regFaculty.LastName = faculty.LastName;
                    regFaculty.facultyPhoto = faculty.Photo;
                    regFaculty.Absent = faculty.Absent != false ? true : false;
                    regFaculty.InvalidPANNo = faculty.InvalidPANNumber != false ? true : false;
                    regFaculty.NoSCM = faculty.NoSCM != false ? true : false;
                    regFaculty.NORelevantPG = faculty.NoRelevantPG;
                    regFaculty.NOForm16 = faculty.NoForm16 != false ? true : false;
                    regFaculty.NOTQualifiedAsPerAICTE = faculty.NotQualifiedAsperAICTE != false ? true : false;
                    regFaculty.ModifiedPANNo = faculty.ModifiedPANNumber;
                    regFaculty.InCompleteCeritificates = faculty.IncompleteCertificates != false ? true : false;
                    regFaculty.DeactivationReason = faculty.DeactivationReason;
                    regFaculty.PanDeactivationReasion = faculty.PanDeactivationReason;
                    regFaculty.PanVerificationStatus = faculty.PanVerificationStatus;
                }

            }
            return PartialView("_FacultyVerificationCheck", regFaculty);
        }
        #endregion


        #region LabsVerification

        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AddEditRecord(int? id, string collegeId, int? eqpid, int? eqpno)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
                {
                    if (collegeId != null)
                    {
                        userCollegeID = Convert.ToInt32(Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
                    }
                    else if (id != null)
                    {
                        userCollegeID = db.jntuh_college_laboratories.Where(i => i.id == id).Select(i => i.CollegeID).FirstOrDefault();
                    }
                }
            }

            Lab laboratories = new Lab();
            laboratories.collegeId = userCollegeID;

            if (Request.IsAjaxRequest())
            {
                if (id != null)
                {
                    ViewBag.IsUpdate = true;
                    laboratories = (from m in db.jntuh_lab_master
                                    join labs in db.jntuh_appeal_college_laboratories on m.id equals labs.EquipmentID
                                    where (labs.CollegeID == userCollegeID && labs.id == id)
                                    select new Lab
                                    {
                                        id = labs.id,
                                        collegeId = userCollegeID,
                                        EquipmentID = labs.EquipmentID,
                                        EquipmentName = m.EquipmentName,
                                        LabEquipmentName = labs.EquipmentName,
                                        EquipmentNo = labs.EquipmentNo,
                                        Make = labs.Make,
                                        Model = labs.Model,
                                        EquipmentUniqueID = labs.EquipmentUniqueID,
                                        AvailableUnits = labs.AvailableUnits,
                                        AvailableArea = labs.AvailableArea,
                                        RoomNumber = labs.RoomNumber,
                                        createdBy = labs.createdBy,
                                        createdOn = labs.createdOn,
                                        IsActive = true,

                                        degreeId = m.DegreeID,
                                        departmentId = m.DepartmentID,
                                        specializationId = m.SpecializationID,
                                        degree = m.jntuh_degree.degree,
                                        department = m.jntuh_department.departmentName,
                                        specializationName = m.jntuh_specialization.specializationName,
                                        year = m.Year,
                                        Semester = m.Semester,
                                        Labcode = m.Labcode,
                                        LabName = m.LabName,
                                        EquipmentDateOfPurchasing = labs.EquipmentDateOfPurchasing,
                                        // EquipmentDateOfPurchasing1 = labs.EquipmentDateOfPurchasing != null ? string.Format("{0:yyyy-MM-dd}", labs.EquipmentDateOfPurchasing.Value) : null
                                        //,
                                        DelivaryChalanaDate = labs.DelivaryChalanaDate,
                                        ViewEquipmentPhoto = labs.EquipmentPhoto,
                                        ViewDelivaryChalanaImage = labs.DelivaryChalanaImage,
                                        ViewBankStatementImage = labs.BankStatementImage,
                                        ViewStockRegisterEntryImage = labs.StockRegisterEntryImage,
                                        ViewReVerificationScreenImage = labs.ReVerificationScreenShot
                                        // AffiliationStatus=labs.

                                    }).FirstOrDefault();
                    if (laboratories != null)
                    {
                        laboratories.EquipmentDateOfPurchasing1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing.ToString()) : null;
                        laboratories.DelivaryChalanaDate1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate.ToString()) : null;
                        return PartialView("_LaboratoriesData", laboratories);
                    }
                    else
                    {
                        eqpid = id;
                        ViewBag.IsUpdate = false;
                        jntuh_lab_master master = db.jntuh_lab_master.Find(eqpid);
                        laboratories.collegeId = userCollegeID;
                        laboratories.degreeId = master.DegreeID;
                        laboratories.degree = master.jntuh_degree.degree;
                        laboratories.departmentId = master.DepartmentID;
                        laboratories.department = master.jntuh_department.departmentName;
                        laboratories.specializationId = master.SpecializationID;
                        laboratories.specializationName = master.jntuh_specialization.specializationName;
                        laboratories.year = master.Year;
                        laboratories.LabName = master.LabName;
                        laboratories.EquipmentName = master.EquipmentName;
                        laboratories.EquipmentNo = eqpno;
                        string EIds = master.ExperimentsIds;
                        if (EIds != null && EIds != "")
                            laboratories.EquipmentIds = EIds.Remove(EIds.Length - 1, 1);
                        laboratories.NoofUnits = master.noofUnits;
                        //int? eqno = db.jntuh_college_laboratories.Where(l => l.EquipmentID == eqpid && l.CollegeID == userCollegeID).OrderByDescending(l => l.EquipmentNo).Select(l => l.EquipmentNo).FirstOrDefault();
                        //if (eqno != null)
                        //{
                        //    laboratories.EquipmentNo = eqno + 1;
                        //}
                        //else
                        //{
                        //    laboratories.EquipmentNo = 1;
                        //}
                        laboratories.EquipmentID = master.id;
                        laboratories.Semester = master.Semester;
                        laboratories.Labcode = master.Labcode;

                        return PartialView("_LaboratoriesData", laboratories);
                    }

                }
                else
                {
                    ViewBag.IsUpdate = false;
                    jntuh_lab_master master = db.jntuh_lab_master.Find(eqpid);
                    laboratories.collegeId = userCollegeID;
                    laboratories.degreeId = master.DegreeID;
                    laboratories.degree = master.jntuh_degree.degree;
                    laboratories.departmentId = master.DepartmentID;
                    laboratories.department = master.jntuh_department.departmentName;
                    laboratories.specializationId = master.SpecializationID;
                    laboratories.specializationName = master.jntuh_specialization.specializationName;
                    laboratories.year = master.Year;
                    laboratories.LabName = master.LabName;
                    laboratories.EquipmentName = master.EquipmentName;
                    laboratories.EquipmentNo = eqpno;
                    string EIds = master.ExperimentsIds;
                    if (EIds != null && EIds != "")
                        laboratories.EquipmentIds = EIds.Remove(EIds.Length - 1, 1);
                    laboratories.NoofUnits = master.noofUnits;
                    //int? eqno = db.jntuh_college_laboratories.Where(l => l.EquipmentID == eqpid && l.CollegeID == userCollegeID).OrderByDescending(l => l.EquipmentNo).Select(l => l.EquipmentNo).FirstOrDefault();
                    //if (eqno != null)
                    //{
                    //    laboratories.EquipmentNo = eqno + 1;
                    //}
                    //else
                    //{
                    //    laboratories.EquipmentNo = 1;
                    //}
                    laboratories.EquipmentID = master.id;
                    laboratories.Semester = master.Semester;
                    laboratories.Labcode = master.Labcode;

                    return PartialView("_LaboratoriesData", laboratories);
                }
            }
            else
            {
                if (id != null)
                {
                    ViewBag.IsUpdate = true;
                    laboratories = (from m in db.jntuh_lab_master
                                    join labs in db.jntuh_college_laboratories on m.id equals labs.EquipmentID
                                    where (labs.CollegeID == userCollegeID && labs.id == id)
                                    select new Lab
                                    {
                                        id = labs.id,
                                        collegeId = userCollegeID,
                                        EquipmentID = labs.EquipmentID,
                                        EquipmentName = m.EquipmentName,
                                        LabEquipmentName = labs.EquipmentName,
                                        EquipmentNo = labs.EquipmentNo,
                                        Make = labs.Make,
                                        Model = labs.Model,
                                        EquipmentUniqueID = labs.EquipmentUniqueID,
                                        AvailableUnits = labs.AvailableUnits,
                                        AvailableArea = labs.AvailableArea,
                                        RoomNumber = labs.RoomNumber,
                                        createdBy = labs.createdBy,
                                        createdOn = labs.createdOn,
                                        IsActive = true,

                                        degreeId = m.DegreeID,
                                        departmentId = m.DepartmentID,
                                        specializationId = m.SpecializationID,
                                        degree = m.jntuh_degree.degree,
                                        department = m.jntuh_department.departmentName,
                                        specializationName = m.jntuh_specialization.specializationName,
                                        year = m.Year,
                                        Semester = m.Semester,
                                        Labcode = m.Labcode,
                                        LabName = m.LabName,
                                        EquipmentDateOfPurchasing = labs.EquipmentDateOfPurchasing,
                                        DelivaryChalanaDate = labs.DelivaryChalanaDate,
                                        ViewEquipmentPhoto = labs.EquipmentPhoto
                                        // EquipmentPhoto  = labs.EquipmentPhoto
                                    }).FirstOrDefault();
                    laboratories.EquipmentDateOfPurchasing1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing.ToString()) : null;
                    laboratories.DelivaryChalanaDate1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate.ToString()) : null;
                }
                else
                {
                    ViewBag.IsUpdate = false;
                    jntuh_lab_master master = db.jntuh_lab_master.Find(eqpid);
                    laboratories.collegeId = userCollegeID;
                    laboratories.degreeId = master.DegreeID;
                    laboratories.degree = master.jntuh_degree.degree;
                    laboratories.departmentId = master.DepartmentID;
                    laboratories.department = master.jntuh_department.departmentName;
                    laboratories.specializationId = master.SpecializationID;
                    laboratories.specializationName = master.jntuh_specialization.specializationName;
                    laboratories.year = master.Year;
                    laboratories.LabName = master.LabName;
                    laboratories.EquipmentName = master.EquipmentName;
                    //int? eqno = db.jntuh_college_laboratories.Where(l => l.EquipmentID == eqpid && l.CollegeID == userCollegeID).OrderByDescending(l => l.EquipmentNo).Select(l => l.EquipmentNo).FirstOrDefault();
                    //if (eqno != null)
                    //{
                    //    laboratories.EquipmentNo = eqno + 1;
                    //}
                    //else
                    //{
                    //    laboratories.EquipmentNo = 1;
                    //}
                    laboratories.EquipmentID = master.id;
                    laboratories.Semester = master.Semester;
                    laboratories.Labcode = master.Labcode;
                    string EIds = master.ExperimentsIds;
                    if (EIds != null && EIds != "")
                        laboratories.EquipmentIds = EIds.Remove(EIds.Length - 1, 1);
                }

                return View("LaboratoriesData", laboratories);
            }

            return PartialView("_LaboratoriesData", laboratories);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AddEditRecord(Lab laboratories, string cmd, int? pageNumber)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                userCollegeID = laboratories.collegeId;
            }
            if (laboratories.EquipmentUniqueID == null)
            {
                laboratories.EquipmentUniqueID = string.Empty;
            }
            if (ModelState.IsValid)
            {

                jntuh_appeal_college_laboratories jntuh_appeal_college_laboratories = new jntuh_appeal_college_laboratories();
                jntuh_appeal_college_laboratories.CollegeID = userCollegeID;
                jntuh_appeal_college_laboratories.EquipmentID = laboratories.EquipmentID;
                jntuh_appeal_college_laboratories.LabName = laboratories.LabName;
                jntuh_appeal_college_laboratories.Make = laboratories.Make;
                jntuh_appeal_college_laboratories.Model = laboratories.Model;
                jntuh_appeal_college_laboratories.EquipmentUniqueID = laboratories.EquipmentUniqueID;
                jntuh_appeal_college_laboratories.EquipmentName = laboratories.EquipmentName;
                jntuh_appeal_college_laboratories.AvailableUnits = laboratories.AvailableUnits;
                jntuh_appeal_college_laboratories.AvailableArea = laboratories.AvailableArea;
                jntuh_appeal_college_laboratories.RoomNumber = laboratories.RoomNumber;
                jntuh_appeal_college_laboratories.EquipmentNo = laboratories.EquipmentNo;
                jntuh_appeal_college_laboratories.isActive = true;
                if (laboratories.EquipmentDateOfPurchasing1 != null)
                {
                    laboratories.EquipmentDateOfPurchasing1 = UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing1);
                    jntuh_appeal_college_laboratories.EquipmentDateOfPurchasing = Convert.ToDateTime(laboratories.EquipmentDateOfPurchasing1);

                }

                if (laboratories.DelivaryChalanaDate1 != null)
                {
                    laboratories.DelivaryChalanaDate1 = UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate1);
                    jntuh_appeal_college_laboratories.DelivaryChalanaDate = Convert.ToDateTime(laboratories.DelivaryChalanaDate1);
                }

                var fileName = "";
                string randID = string.Empty;
                if (laboratories.EquipmentPhoto != null)
                {
                    // int Id = db.jntuh_college_news.Count() > 0 ? db.jntuh_newsevents.Select(d => d.id).Max() : 0;
                    // Id = Id + 1;
                    // string RamdomCode = db.jntuh_college_randamcodes.Where(r => r.CollegeId == collegeNews.collegeId).Select(r => r.RandamCode).FirstOrDefault();                
                    // Random rnd = new Random();
                    //int RandomNumber = rnd.Next(1000, 9999);
                    //string randID = string.Empty;
                    //// RamdomCode; + Id;
                    if (!Directory.Exists(Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos")))
                    {
                        Directory.CreateDirectory(Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos"));
                    }

                    var ext = Path.GetExtension(laboratories.EquipmentPhoto.FileName);
                    if (ext.ToUpper().Equals(".GIF") || ext.ToUpper().Equals(".BMP") || ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG") || ext.ToUpper().Equals(".PNG"))
                    {
                        string fileName1 = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff"); //+ "-" + laboratories.EquipmentPhoto.FileName.Substring(0, 1);
                        fileName = userCollegeID + "-" + laboratories.EquipmentID + "-" + fileName1;
                        //string path = Server.MapPath("~/Content/Upload/EquipmentsPhotos/" + DateTime.Now.ToString()+fileName);
                        var PicName = userCollegeID + "-" + laboratories.EquipmentID + "-" + DateTime.Now.ToString() + "-";
                        laboratories.EquipmentPhoto.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos"), fileName, ext));

                        //jntuh_college_laboratories.EquipmentPhoto = fileName;
                        jntuh_appeal_college_laboratories.EquipmentPhoto = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else
                {
                    jntuh_appeal_college_laboratories.EquipmentPhoto = laboratories.ViewEquipmentPhoto;
                }


                //Delivery challan pdf code
                var deliverychallanpath = "~/Content/Upload/OnlineAppealDocuments/Labs/DeliverychallanDocuments";
                if (laboratories.DelivaryChalanaImage != null)
                {
                    if (!Directory.Exists(Server.MapPath(deliverychallanpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(deliverychallanpath));
                    }

                    var ext = Path.GetExtension(laboratories.DelivaryChalanaImage.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string labfileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.id)
                                .FirstOrDefault() + "_" +
                            laboratories.EquipmentID + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        laboratories.DelivaryChalanaImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(deliverychallanpath), labfileName, ext));
                        jntuh_appeal_college_laboratories.DelivaryChalanaImage = string.Format("{0}/{1}{2}", deliverychallanpath, labfileName, ext);
                    }
                }
                else if (laboratories.ViewDelivaryChalanaImage != null)
                {
                    jntuh_appeal_college_laboratories.DelivaryChalanaImage = laboratories.ViewDelivaryChalanaImage;
                }

                //Bank statement Pdf code
                var bankstatmentpath = "~/Content/Upload/OnlineAppealDocuments/Labs/BankstatementDocuments";
                if (laboratories.BankStatementImage != null)
                {
                    if (!Directory.Exists(Server.MapPath(bankstatmentpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(bankstatmentpath));
                    }

                    var ext = Path.GetExtension(laboratories.BankStatementImage.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string labfileName1 =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.id)
                                .FirstOrDefault() + "_" +
                            laboratories.EquipmentID + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        laboratories.BankStatementImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(bankstatmentpath), labfileName1, ext));
                        jntuh_appeal_college_laboratories.BankStatementImage = string.Format("{0}/{1}{2}", bankstatmentpath, labfileName1, ext);
                    }
                }
                else if (laboratories.ViewBankStatementImage != null)
                {
                    jntuh_appeal_college_laboratories.BankStatementImage = laboratories.ViewBankStatementImage;
                }

                //Stock Register Pdf code
                var stockregisterpath = "~/Content/Upload/OnlineAppealDocuments/Labs/StockregisterentryDocuments";
                if (laboratories.StockRegisterEntryImage != null)
                {
                    if (!Directory.Exists(Server.MapPath(stockregisterpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(stockregisterpath));
                    }

                    var ext = Path.GetExtension(laboratories.StockRegisterEntryImage.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string labfileName2 =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.id)
                                .FirstOrDefault() + "_" +
                            laboratories.EquipmentID + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        laboratories.StockRegisterEntryImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(stockregisterpath), labfileName2, ext));
                        jntuh_appeal_college_laboratories.StockRegisterEntryImage = string.Format("{0}/{1}{2}", stockregisterpath, labfileName2, ext);
                    }
                }
                else if (laboratories.ViewStockRegisterEntryImage != null)
                {
                    jntuh_appeal_college_laboratories.StockRegisterEntryImage = laboratories.ViewStockRegisterEntryImage;
                }

                if (cmd == "Save")
                {
                    var existingID = db.jntuh_appeal_college_laboratories.Where(c => c.CollegeID == userCollegeID && c.EquipmentID == laboratories.EquipmentID && c.EquipmentNo == laboratories.EquipmentNo).Select(c => c).FirstOrDefault();

                    if (existingID == null)
                    {
                        jntuh_appeal_college_laboratories.createdBy = userID;
                        jntuh_appeal_college_laboratories.createdOn = DateTime.Now;
                        db.jntuh_appeal_college_laboratories.Add(jntuh_appeal_college_laboratories);
                        db.SaveChanges();
                        TempData["Success"] = "Lab Added Successfully.";
                    }
                    else
                    {
                        TempData["Success"] = "Lab already exists.";
                    }
                }
                else
                {
                    jntuh_appeal_college_laboratories.id = (int)laboratories.id;
                    jntuh_appeal_college_laboratories.createdBy = laboratories.createdBy;
                    jntuh_appeal_college_laboratories.createdOn = laboratories.createdOn;
                    jntuh_appeal_college_laboratories.updatedBy = userID;
                    jntuh_appeal_college_laboratories.updatedOn = DateTime.Now;
                    jntuh_appeal_college_laboratories.isActive = true;
                    jntuh_appeal_college_laboratories.ReVerificationScreenShot =
                        db.jntuh_appeal_college_laboratories.Where(i => i.id == (int)laboratories.id)
                            .Select(i => i.ReVerificationScreenShot)
                            .FirstOrDefault();
                    db.Entry(jntuh_appeal_college_laboratories).State = EntityState.Modified;
                    db.SaveChanges();
                    TempData["Success"] = "Lab Updated Successfully.";
                }
            }
            int? pageNo = null;
            if (Request.Params["pageNumber"] != null)
            {
                pageNo = Convert.ToInt32(Request.QueryString["pageNumber"].ToString());
            }
            return RedirectToAction("LabsForAppeal");
        }


        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AddEditRecordReverification(int? id, string collegeId, int? eqpid, int? eqpno)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
                {
                    if (collegeId != null)
                    {
                        userCollegeID = Convert.ToInt32(Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
                    }
                    else if (id != null)
                    {
                        userCollegeID = db.jntuh_college_laboratories.Where(i => i.id == id).Select(i => i.CollegeID).FirstOrDefault();
                    }
                }
            }

            Lab laboratories = new Lab();
            laboratories.collegeId = userCollegeID;

            if (Request.IsAjaxRequest())
            {
                if (id != null)
                {
                    ViewBag.IsUpdate = true;
                    laboratories = (from m in db.jntuh_lab_master
                                    join labs in db.jntuh_appeal_college_laboratories on m.id equals labs.EquipmentID
                                    where (labs.CollegeID == userCollegeID && labs.id == id)
                                    select new Lab
                                    {
                                        id = labs.id,
                                        collegeId = userCollegeID,
                                        EquipmentID = labs.EquipmentID,
                                        EquipmentName = m.EquipmentName,
                                        LabEquipmentName = labs.EquipmentName,
                                        EquipmentNo = labs.EquipmentNo,
                                        Make = labs.Make,
                                        Model = labs.Model,
                                        EquipmentUniqueID = labs.EquipmentUniqueID,
                                        AvailableUnits = labs.AvailableUnits,
                                        AvailableArea = labs.AvailableArea,
                                        RoomNumber = labs.RoomNumber,
                                        createdBy = labs.createdBy,
                                        createdOn = labs.createdOn,
                                        IsActive = true,

                                        degreeId = m.DegreeID,
                                        departmentId = m.DepartmentID,
                                        specializationId = m.SpecializationID,
                                        degree = m.jntuh_degree.degree,
                                        department = m.jntuh_department.departmentName,
                                        specializationName = m.jntuh_specialization.specializationName,
                                        year = m.Year,
                                        Semester = m.Semester,
                                        Labcode = m.Labcode,
                                        LabName = m.LabName,
                                        EquipmentDateOfPurchasing = labs.EquipmentDateOfPurchasing,
                                        // EquipmentDateOfPurchasing1 = labs.EquipmentDateOfPurchasing != null ? string.Format("{0:yyyy-MM-dd}", labs.EquipmentDateOfPurchasing.Value) : null
                                        //,
                                        DelivaryChalanaDate = labs.DelivaryChalanaDate,
                                        ViewEquipmentPhoto = labs.EquipmentPhoto,
                                        ViewDelivaryChalanaImage = labs.DelivaryChalanaImage,
                                        ViewBankStatementImage = labs.BankStatementImage,
                                        ViewStockRegisterEntryImage = labs.StockRegisterEntryImage,
                                        ViewReVerificationScreenImage = labs.ReVerificationScreenShot
                                        // AffiliationStatus=labs.

                                    }).FirstOrDefault();
                    if (laboratories != null)
                    {
                        laboratories.EquipmentDateOfPurchasing1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing.ToString()) : null;
                        laboratories.DelivaryChalanaDate1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate.ToString()) : null;
                        return PartialView("_LaboratoriesDataReverificationStatus", laboratories);
                    }
                    else
                    {
                        eqpid = id;
                        ViewBag.IsUpdate = false;
                        jntuh_lab_master master = db.jntuh_lab_master.Find(eqpid);
                        laboratories.collegeId = userCollegeID;
                        laboratories.degreeId = master.DegreeID;
                        laboratories.degree = master.jntuh_degree.degree;
                        laboratories.departmentId = master.DepartmentID;
                        laboratories.department = master.jntuh_department.departmentName;
                        laboratories.specializationId = master.SpecializationID;
                        laboratories.specializationName = master.jntuh_specialization.specializationName;
                        laboratories.year = master.Year;
                        laboratories.LabName = master.LabName;
                        laboratories.EquipmentName = master.EquipmentName;
                        laboratories.EquipmentNo = eqpno;
                        string EIds = master.ExperimentsIds;
                        if (EIds != null && EIds != "")
                            laboratories.EquipmentIds = EIds.Remove(EIds.Length - 1, 1);
                        laboratories.NoofUnits = master.noofUnits;
                        //int? eqno = db.jntuh_college_laboratories.Where(l => l.EquipmentID == eqpid && l.CollegeID == userCollegeID).OrderByDescending(l => l.EquipmentNo).Select(l => l.EquipmentNo).FirstOrDefault();
                        //if (eqno != null)
                        //{
                        //    laboratories.EquipmentNo = eqno + 1;
                        //}
                        //else
                        //{
                        //    laboratories.EquipmentNo = 1;
                        //}
                        laboratories.EquipmentID = master.id;
                        laboratories.Semester = master.Semester;
                        laboratories.Labcode = master.Labcode;

                        return PartialView("_LaboratoriesDataReverificationStatus", laboratories);
                    }

                }
                else
                {
                    ViewBag.IsUpdate = false;
                    jntuh_lab_master master = db.jntuh_lab_master.Find(eqpid);
                    laboratories.collegeId = userCollegeID;
                    laboratories.degreeId = master.DegreeID;
                    laboratories.degree = master.jntuh_degree.degree;
                    laboratories.departmentId = master.DepartmentID;
                    laboratories.department = master.jntuh_department.departmentName;
                    laboratories.specializationId = master.SpecializationID;
                    laboratories.specializationName = master.jntuh_specialization.specializationName;
                    laboratories.year = master.Year;
                    laboratories.LabName = master.LabName;
                    laboratories.EquipmentName = master.EquipmentName;
                    laboratories.EquipmentNo = eqpno;
                    string EIds = master.ExperimentsIds;
                    if (EIds != null && EIds != "")
                        laboratories.EquipmentIds = EIds.Remove(EIds.Length - 1, 1);
                    laboratories.NoofUnits = master.noofUnits;
                    //int? eqno = db.jntuh_college_laboratories.Where(l => l.EquipmentID == eqpid && l.CollegeID == userCollegeID).OrderByDescending(l => l.EquipmentNo).Select(l => l.EquipmentNo).FirstOrDefault();
                    //if (eqno != null)
                    //{
                    //    laboratories.EquipmentNo = eqno + 1;
                    //}
                    //else
                    //{
                    //    laboratories.EquipmentNo = 1;
                    //}
                    laboratories.EquipmentID = master.id;
                    laboratories.Semester = master.Semester;
                    laboratories.Labcode = master.Labcode;

                    return PartialView("_LaboratoriesDataReverificationStatus", laboratories);
                }
            }
            else
            {
                if (id != null)
                {
                    ViewBag.IsUpdate = true;
                    laboratories = (from m in db.jntuh_lab_master
                                    join labs in db.jntuh_college_laboratories on m.id equals labs.EquipmentID
                                    where (labs.CollegeID == userCollegeID && labs.id == id)
                                    select new Lab
                                    {
                                        id = labs.id,
                                        collegeId = userCollegeID,
                                        EquipmentID = labs.EquipmentID,
                                        EquipmentName = m.EquipmentName,
                                        LabEquipmentName = labs.EquipmentName,
                                        EquipmentNo = labs.EquipmentNo,
                                        Make = labs.Make,
                                        Model = labs.Model,
                                        EquipmentUniqueID = labs.EquipmentUniqueID,
                                        AvailableUnits = labs.AvailableUnits,
                                        AvailableArea = labs.AvailableArea,
                                        RoomNumber = labs.RoomNumber,
                                        createdBy = labs.createdBy,
                                        createdOn = labs.createdOn,
                                        IsActive = true,

                                        degreeId = m.DegreeID,
                                        departmentId = m.DepartmentID,
                                        specializationId = m.SpecializationID,
                                        degree = m.jntuh_degree.degree,
                                        department = m.jntuh_department.departmentName,
                                        specializationName = m.jntuh_specialization.specializationName,
                                        year = m.Year,
                                        Semester = m.Semester,
                                        Labcode = m.Labcode,
                                        LabName = m.LabName,
                                        EquipmentDateOfPurchasing = labs.EquipmentDateOfPurchasing,
                                        DelivaryChalanaDate = labs.DelivaryChalanaDate,
                                        ViewEquipmentPhoto = labs.EquipmentPhoto
                                        // EquipmentPhoto  = labs.EquipmentPhoto
                                    }).FirstOrDefault();
                    laboratories.EquipmentDateOfPurchasing1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing.ToString()) : null;
                    laboratories.DelivaryChalanaDate1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate.ToString()) : null;
                }
                else
                {
                    ViewBag.IsUpdate = false;
                    jntuh_lab_master master = db.jntuh_lab_master.Find(eqpid);
                    laboratories.collegeId = userCollegeID;
                    laboratories.degreeId = master.DegreeID;
                    laboratories.degree = master.jntuh_degree.degree;
                    laboratories.departmentId = master.DepartmentID;
                    laboratories.department = master.jntuh_department.departmentName;
                    laboratories.specializationId = master.SpecializationID;
                    laboratories.specializationName = master.jntuh_specialization.specializationName;
                    laboratories.year = master.Year;
                    laboratories.LabName = master.LabName;
                    laboratories.EquipmentName = master.EquipmentName;
                    //int? eqno = db.jntuh_college_laboratories.Where(l => l.EquipmentID == eqpid && l.CollegeID == userCollegeID).OrderByDescending(l => l.EquipmentNo).Select(l => l.EquipmentNo).FirstOrDefault();
                    //if (eqno != null)
                    //{
                    //    laboratories.EquipmentNo = eqno + 1;
                    //}
                    //else
                    //{
                    //    laboratories.EquipmentNo = 1;
                    //}
                    laboratories.EquipmentID = master.id;
                    laboratories.Semester = master.Semester;
                    laboratories.Labcode = master.Labcode;
                    string EIds = master.ExperimentsIds;
                    if (EIds != null && EIds != "")
                        laboratories.EquipmentIds = EIds.Remove(EIds.Length - 1, 1);
                }

                return View("LaboratoriesData", laboratories);
            }

            return PartialView("_LaboratoriesDataReverificationStatus", laboratories);
        }
        [HttpPost]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AddEditRecordReverification(Lab laboratories, string cmd, int? pageNumber)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            if (userCollegeID == 0)
            {
                userCollegeID = laboratories.collegeId;
            }
            if (laboratories.EquipmentUniqueID == null)
            {
                laboratories.EquipmentUniqueID = string.Empty;
            }
            if (ModelState.IsValid)
            {

                jntuh_appeal_college_laboratories jntuh_appeal_college_laboratories = new jntuh_appeal_college_laboratories();
                jntuh_appeal_college_laboratories.CollegeID = userCollegeID;
                jntuh_appeal_college_laboratories.EquipmentID = laboratories.EquipmentID;
                jntuh_appeal_college_laboratories.LabName = laboratories.LabName;
                jntuh_appeal_college_laboratories.Make = laboratories.Make;
                jntuh_appeal_college_laboratories.Model = laboratories.Model;
                jntuh_appeal_college_laboratories.EquipmentUniqueID = laboratories.EquipmentUniqueID;
                jntuh_appeal_college_laboratories.EquipmentName = laboratories.EquipmentName;
                jntuh_appeal_college_laboratories.AvailableUnits = laboratories.AvailableUnits;
                jntuh_appeal_college_laboratories.AvailableArea = laboratories.AvailableArea;
                jntuh_appeal_college_laboratories.RoomNumber = laboratories.RoomNumber;
                jntuh_appeal_college_laboratories.EquipmentNo = laboratories.EquipmentNo;
                jntuh_appeal_college_laboratories.isActive = true;
                if (laboratories.EquipmentDateOfPurchasing1 != null)
                {
                    laboratories.EquipmentDateOfPurchasing1 = UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing1);
                    jntuh_appeal_college_laboratories.EquipmentDateOfPurchasing = Convert.ToDateTime(laboratories.EquipmentDateOfPurchasing1);

                }

                if (laboratories.DelivaryChalanaDate1 != null)
                {
                    laboratories.DelivaryChalanaDate1 = UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate1);
                    jntuh_appeal_college_laboratories.DelivaryChalanaDate = Convert.ToDateTime(laboratories.DelivaryChalanaDate1);
                }

                var fileName = "";
                string randID = string.Empty;
                if (laboratories.EquipmentPhoto != null)
                {
                    // int Id = db.jntuh_college_news.Count() > 0 ? db.jntuh_newsevents.Select(d => d.id).Max() : 0;
                    // Id = Id + 1;
                    // string RamdomCode = db.jntuh_college_randamcodes.Where(r => r.CollegeId == collegeNews.collegeId).Select(r => r.RandamCode).FirstOrDefault();                
                    // Random rnd = new Random();
                    //int RandomNumber = rnd.Next(1000, 9999);
                    //string randID = string.Empty;
                    //// RamdomCode; + Id;
                    if (!Directory.Exists(Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos")))
                    {
                        Directory.CreateDirectory(Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos"));
                    }

                    var ext = Path.GetExtension(laboratories.EquipmentPhoto.FileName);
                    if (ext.ToUpper().Equals(".GIF") || ext.ToUpper().Equals(".BMP") || ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG") || ext.ToUpper().Equals(".PNG"))
                    {
                        string fileName1 = DateTime.Now.ToString("yyyyMMdd-HHmmssffffff");// + "-" + laboratories.EquipmentPhoto.FileName.Substring(0, 1);
                        fileName = userCollegeID + "-" + laboratories.EquipmentID + "-" + fileName1;
                        //string path = Server.MapPath("~/Content/Upload/EquipmentsPhotos/" + DateTime.Now.ToString()+fileName);
                        var PicName = userCollegeID + "-" + laboratories.EquipmentID + "-" + DateTime.Now.ToString() + "-";
                        laboratories.EquipmentPhoto.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/EquipmentsPhotos"), fileName, ext));

                        //jntuh_college_laboratories.EquipmentPhoto = fileName;
                        jntuh_appeal_college_laboratories.EquipmentPhoto = string.Format("{0}{1}", fileName, ext);
                    }
                }
                else
                {
                    jntuh_appeal_college_laboratories.EquipmentPhoto = laboratories.ViewEquipmentPhoto;
                }


                //Delivery challan pdf code
                var deliverychallanpath = "~/Content/Upload/OnlineAppealDocuments/Labs/DeliverychallanDocuments";
                if (laboratories.DelivaryChalanaImage != null)
                {
                    if (!Directory.Exists(Server.MapPath(deliverychallanpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(deliverychallanpath));
                    }

                    var ext = Path.GetExtension(laboratories.DelivaryChalanaImage.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string labfileName =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.id)
                                .FirstOrDefault() + "_" +
                            laboratories.EquipmentID + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        laboratories.DelivaryChalanaImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(deliverychallanpath), labfileName, ext));
                        jntuh_appeal_college_laboratories.DelivaryChalanaImage = string.Format("{0}/{1}{2}", deliverychallanpath, labfileName, ext);
                    }
                }
                else if (laboratories.ViewDelivaryChalanaImage != null)
                {
                    jntuh_appeal_college_laboratories.DelivaryChalanaImage = laboratories.ViewDelivaryChalanaImage;
                }

                //Bank statement Pdf code
                var bankstatmentpath = "~/Content/Upload/OnlineAppealDocuments/Labs/BankstatementDocuments";
                if (laboratories.BankStatementImage != null)
                {
                    if (!Directory.Exists(Server.MapPath(bankstatmentpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(bankstatmentpath));
                    }

                    var ext = Path.GetExtension(laboratories.BankStatementImage.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string labfileName1 =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.id)
                                .FirstOrDefault() + "_" +
                            laboratories.EquipmentID + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        laboratories.BankStatementImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(bankstatmentpath), labfileName1, ext));
                        jntuh_appeal_college_laboratories.BankStatementImage = string.Format("{0}/{1}{2}", bankstatmentpath, labfileName1, ext);
                    }
                }
                else if (laboratories.ViewBankStatementImage != null)
                {
                    jntuh_appeal_college_laboratories.BankStatementImage = laboratories.ViewBankStatementImage;
                }

                //Stock Register Pdf code
                var stockregisterpath = "~/Content/Upload/OnlineAppealDocuments/Labs/StockregisterentryDocuments";
                if (laboratories.StockRegisterEntryImage != null)
                {
                    if (!Directory.Exists(Server.MapPath(stockregisterpath)))
                    {
                        Directory.CreateDirectory(Server.MapPath(stockregisterpath));
                    }

                    var ext = Path.GetExtension(laboratories.StockRegisterEntryImage.FileName);
                    if (ext.ToUpper().Equals(".PDF"))
                    {
                        string labfileName2 =
                            db.jntuh_college.Where(c => c.id == userCollegeID)
                                .Select(c => c.id)
                                .FirstOrDefault() + "_" +
                            laboratories.EquipmentID + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                        laboratories.StockRegisterEntryImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(stockregisterpath), labfileName2, ext));
                        jntuh_appeal_college_laboratories.StockRegisterEntryImage = string.Format("{0}/{1}{2}", stockregisterpath, labfileName2, ext);
                    }
                }
                else if (laboratories.ViewStockRegisterEntryImage != null)
                {
                    jntuh_appeal_college_laboratories.StockRegisterEntryImage = laboratories.ViewStockRegisterEntryImage;
                }
                //Reverification screen shot image code
                var ReverificationfileName = "";

                if (laboratories.ReVerificationScreenImage != null)
                {

                    if (!Directory.Exists(Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/Reverificationscreenshot")))
                    {
                        Directory.CreateDirectory(Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/Reverificationscreenshot"));
                    }

                    var ext = Path.GetExtension(laboratories.ReVerificationScreenImage.FileName);
                    if (ext.ToUpper().Equals(".GIF") || ext.ToUpper().Equals(".BMP") || ext.ToUpper().Equals(".JPEG") || ext.ToUpper().Equals(".JPG") || ext.ToUpper().Equals(".PNG"))
                    {
                        string fileName1 = "Rev" + "-" + DateTime.Now.ToString("yyyyMMdd-HHmmssffffff");
                        ReverificationfileName = userCollegeID + "-" + laboratories.EquipmentID + "-" + fileName1;
                        //string path = Server.MapPath("~/Content/Upload/EquipmentsPhotos/" + DateTime.Now.ToString()+fileName);
                        var PicName = userCollegeID + "-" + laboratories.EquipmentID + "-" + DateTime.Now.ToString() + "-";
                        laboratories.ReVerificationScreenImage.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath("~/Content/Upload/OnlineAppealDocuments/Labs/Reverificationscreenshot"), ReverificationfileName, ext));

                        //jntuh_college_laboratories.EquipmentPhoto = fileName;
                        jntuh_appeal_college_laboratories.ReVerificationScreenShot = string.Format("{0}{1}", ReverificationfileName, ext);
                    }
                }
                else
                {
                    jntuh_appeal_college_laboratories.ReVerificationScreenShot = laboratories.ViewReVerificationScreenImage;
                }

                if (cmd == "Save")
                {
                    var existingID = db.jntuh_appeal_college_laboratories.Where(c => c.CollegeID == userCollegeID && c.EquipmentID == laboratories.EquipmentID && c.EquipmentNo == laboratories.EquipmentNo).Select(c => c).FirstOrDefault();

                    if (existingID == null)
                    {
                        jntuh_appeal_college_laboratories.createdBy = userID;
                        jntuh_appeal_college_laboratories.createdOn = DateTime.Now;
                        db.jntuh_appeal_college_laboratories.Add(jntuh_appeal_college_laboratories);
                        db.SaveChanges();
                        TempData["Success"] = "Lab Added Successfully.";
                    }
                    else
                    {
                        TempData["Success"] = "Lab already exists.";
                    }
                }
                else
                {
                    jntuh_appeal_college_laboratories.id = (int)laboratories.id;
                    jntuh_appeal_college_laboratories.createdBy = laboratories.createdBy;
                    jntuh_appeal_college_laboratories.createdOn = laboratories.createdOn;
                    jntuh_appeal_college_laboratories.updatedBy = userID;
                    jntuh_appeal_college_laboratories.updatedOn = DateTime.Now;
                    jntuh_appeal_college_laboratories.isActive = true;
                    db.Entry(jntuh_appeal_college_laboratories).State = EntityState.Modified;
                    db.SaveChanges();
                    TempData["Success"] = "Lab Updated Successfully.";
                }
            }
            int? pageNo = null;
            if (Request.Params["pageNumber"] != null)
            {
                pageNo = Convert.ToInt32(Request.QueryString["pageNumber"].ToString());
            }
            return RedirectToAction("LabsForAppeal");
        }

        #endregion


        #region For Faculty Registration Number check

        [HttpPost]
        public JsonResult CheckRegistrationNumber(string FacultyRegistrationNumber)
        {
            var RegistrationNumber = db.jntuh_registered_faculty.Where(F => F.RegistrationNumber == FacultyRegistrationNumber).FirstOrDefault();
            if (RegistrationNumber != null)
            {
                if (RegistrationNumber.WorkingStatus == true)
                    return Json(false);
                else
                    return Json(true);
            }
            else
                return Json(true);

        }
        #endregion


        #region For submit in online appeal screen
        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AppealSubmission(string collegeId)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 375)
            {
                userCollegeID = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            string CollegeCode = db.jntuh_college.Where(C => C.id == userCollegeID).Select(C => C.collegeCode).FirstOrDefault();
            if (userCollegeID == 0 && collegeId != null)
            {
                if (Roles.IsUserInRole("Admin") || Roles.IsUserInRole("DataEntry"))
                {
                    userCollegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(collegeId, WebConfigurationManager.AppSettings["CryptoKey"]));
                }
            }

            #region CollegeEditStatus
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == userCollegeID).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();

            var currentDate = DateTime.Now;
            DateTime EditFromDate;
            DateTime EditTODate;
            int collegeid = 0;
            bool PageEdible = false;
            if (CollegeDetails != null)
            {
                EditFromDate = Convert.ToDateTime(CollegeDetails.editFromDate);
                EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
                collegeid = Convert.ToInt32(CollegeDetails.collegeId);
                PageEdible = Convert.ToBoolean(CollegeDetails.IsCollegeEditable);

                if (currentDate >= EditFromDate && currentDate <= EditTODate)
                {
                    if (PageEdible == false)
                    {
                        return RedirectToAction("ViewCollegeFacultyWithIntake", "FacultyVerification");
                    }
                }
                else
                {
                    return RedirectToAction("College", "Dashboard");
                }
            }
            else
            {
                return RedirectToAction("College", "Dashboard");
            }
            #endregion

            SubmitData submitData = new SubmitData();
            submitData.collegeId = userCollegeID;
            ViewBag.CollegeId = UAAAS.Models.Utilities.EncryptString(userCollegeID.ToString(), WebConfigurationManager.AppSettings["CryptoKey"]).ToString();
            ViewBag.IscollegeEditable = db.jntuh_appeal_college_edit_status.Where(i => i.collegeId == userCollegeID).Select(i => i.IsCollegeEditable).FirstOrDefault();
            string clgCode = db.jntuh_college.Where(C => C.id == userCollegeID).Select(C => C.collegeCode).FirstOrDefault();
            var currentYear = DateTime.Now.Year;
            var isPaid = db.jntuh_paymentresponse.Count(it => it.CollegeId == clgCode && it.TxnDate.Year == currentYear && it.AuthStatus == "0300" && it.PaymentTypeID == 6) > 0;

            ViewBag.IsLatePaymentDone = isPaid;
            if (!isPaid)
            {
                TempData["Payment"] = "Please Pay The Appeal Fee. Colleges are requested to pay the Appeal Online Processing Fee.";
            }
            jntuh_appeal_college_edit_status jntuh_appeal_college_edit_status =
                db.jntuh_appeal_college_edit_status.Where(c => c.collegeId == userCollegeID)
                    .Select(s => s)
                    .FirstOrDefault();
            if (jntuh_appeal_college_edit_status.DeclarationPath!=null)
            {
                submitData.DeclarationPathdoc = jntuh_appeal_college_edit_status.DeclarationPath;
            }
            if (jntuh_appeal_college_edit_status.FurtherAppealSupportingDocument != null)
            {
                submitData.OtherSupportingDocpath = jntuh_appeal_college_edit_status.FurtherAppealSupportingDocument;
            }
            return View(submitData);
        }

        [HttpPost]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult AppealSubmission(SubmitData submitData, string cmd)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
            if (userCollegeID == 375)
            {
                userCollegeID = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }
            if (userCollegeID == 0)
            {
                userCollegeID = submitData.collegeId;
                if (userCollegeID == 0)
                {
                    return RedirectToAction("Create", "CollegeInformation");
                }
            }
            var currentDate = DateTime.Now;
            DateTime EditTODate;
            var CollegeDetails = db.jntuh_appeal_college_edit_status.Where(C => C.collegeId == userCollegeID).Select(C => new { C.collegeId, C.editFromDate, C.editToDate, C.IsCollegeEditable }).FirstOrDefault();
            EditTODate = Convert.ToDateTime(CollegeDetails.editToDate);
            if (cmd == "Submit Appeal")
            {
                if (currentDate >= EditTODate)
                    return RedirectToAction("College", "Dashboard");
                else
                    SaveSubmitData(submitData);
            }
            return RedirectToAction("AppealSubmission", "FacultyVerification");//, new { collegeId = userCollegeID }

        }

        private void SaveSubmitData(SubmitData submitData)
        {
            if (ModelState.IsValid)
            {
                int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
                int userCollegeID = db.jntuh_college_users.Where(collegeUser => collegeUser.userID == userID).Select(collegeUser => collegeUser.collegeID).FirstOrDefault();
                string clgCode = db.jntuh_college.Where(C => C.id == userCollegeID).Select(C => C.collegeCode).FirstOrDefault();
                var currentYear = DateTime.Now.Year;
                var isPaid = db.jntuh_paymentresponse.Count(it => it.CollegeId == clgCode && it.TxnDate.Year == currentYear && it.AuthStatus == "0300" && it.PaymentTypeID == 6) > 0;

                ViewBag.IsLatePaymentDone = isPaid;
                if (isPaid)
                {

                    var jntuhAppealCollegeEditStatus = db.jntuh_appeal_college_edit_status.Where(i => i.collegeId == userCollegeID).Select(i => i).FirstOrDefault();
                    if (jntuhAppealCollegeEditStatus != null)
                    {
                        //Delivery challan pdf code
                        var appealsubmissionpath = "~/Content/Upload/OnlineAppealDocuments/Appealsubmission/AppealsubmissionDocuments";
                        var othersupportingdocpath = "~/Content/Upload/OnlineAppealDocuments/Appealsubmission/OthersupportingDocument";
                        if (submitData.DeclarationPath != null)
                        {
                            if (!Directory.Exists(Server.MapPath(appealsubmissionpath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(appealsubmissionpath));
                            }

                            var ext = Path.GetExtension(submitData.DeclarationPath.FileName);
                            if (ext.ToUpper().Equals(".PDF"))
                            {
                                string labfileName =
                                    db.jntuh_college.Where(c => c.id == userCollegeID)
                                        .Select(c => c.id)
                                        .FirstOrDefault() + "_" + "Appeal" + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                                submitData.DeclarationPath.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(appealsubmissionpath), labfileName, ext));
                                jntuhAppealCollegeEditStatus.DeclarationPath = string.Format("{0}/{1}{2}", appealsubmissionpath, labfileName, ext);
                            }
                        }

                        //other supporting Document Code
                        if (submitData.OtherSupportingDoc != null)
                        {
                            if (!Directory.Exists(Server.MapPath(othersupportingdocpath)))
                            {
                                Directory.CreateDirectory(Server.MapPath(othersupportingdocpath));
                            }

                            var ext = Path.GetExtension(submitData.OtherSupportingDoc.FileName);
                            if (ext.ToUpper().Equals(".PDF"))
                            {
                                string docfileName =
                                    db.jntuh_college.Where(c => c.id == userCollegeID)
                                        .Select(c => c.id)
                                        .FirstOrDefault() + "_" + "Appeal" + "_" + DateTime.Now.ToString("yyyMMddHHmmss");
                                submitData.OtherSupportingDoc.SaveAs(string.Format("{0}/{1}{2}", Server.MapPath(othersupportingdocpath), docfileName, ext));
                                jntuhAppealCollegeEditStatus.FurtherAppealSupportingDocument = string.Format("{0}/{1}{2}", othersupportingdocpath, docfileName, ext);
                            }
                        }

                        jntuhAppealCollegeEditStatus.Remarks = submitData.Remarks;
                        jntuhAppealCollegeEditStatus.IsCollegeEditable = false;
                        jntuhAppealCollegeEditStatus.updatedBy = userID;
                        jntuhAppealCollegeEditStatus.updatedOn = DateTime.Now;
                        db.SaveChanges();
                        TempData["Success"] = "Appeal Submitted SuccessFully.";

                    }
                }
                else
                {
                    TempData["Payment"] = "Please Pay The Appeal Fee. Colleges are requested to pay the Fee from Online Payment Portal. Please logout from Application here and login into online payment portal for Payments.";
                }

            }
        }

        #endregion

        #region After Submission of onlineAppeal View
        public ActionResult ViewCollegeFacultyWithIntake(string type)
        {


            #region new code
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int collegeId = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            //collegeId = 42;
            if (collegeId==375)
            {
                collegeId = Convert.ToInt32(ConfigurationManager.AppSettings["appCollegeId"]);
            }

            ViewBag.IscollegeEditable = db.jntuh_appeal_college_edit_status.Where(i => i.collegeId == collegeId).Select(i => i.IsCollegeEditable).FirstOrDefault();
            #region Written By Srinivas


            // Principal Details
            string strPrincipalRegno = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).Select(cf => cf.RegistrationNumber).FirstOrDefault();

            var principal = string.Empty;
            var Reason = string.Empty;
            var prinicpalexists = false;
            //Reg nos related online facultyIds
            var regdata = db.jntuh_registered_faculty.FirstOrDefault(rf => strPrincipalRegno == rf.RegistrationNumber);

            if (regdata != null)
            {
                if (!string.IsNullOrEmpty(regdata.DeactivationReason))
                    Reason = regdata.DeactivationReason;
                //if (regdata.Absent == true)
                //{
                //    Reason = "NOT AVAILABLE" + ",";
                //}
                //if (regdata.NotQualifiedAsperAICTE == true)
                //{
                //    Reason += "NOT QUALIFIED " + ",";
                //}
                //if (regdata.InvalidPANNumber == true)
                //{
                //    Reason += "NO PAN" + ",";
                //}
                //if (regdata.FalsePAN == true)
                //{
                //    Reason += "FALSE PAN" + ",";
                //}
                //if (regdata.NoSCM == true)
                //{
                //    Reason += "NO SCM/RATIFICATION" + ",";
                //}


                if (regdata.BAS == "Yes")
                {
                    if (!String.IsNullOrEmpty(Reason))
                        Reason += ",Not Fulfilling Biometric Attendance";
                    else
                        Reason += "Not Fulfilling Biometric Attendance";
                }           

                if (Reason != "")
                {
                    Reason = Reason;
                }
                else
                {
                    Reason = "Dr. " + regdata.FirstName.First().ToString().ToUpper() + regdata.FirstName.Substring(1) + " " + regdata.LastName.First().ToString().ToUpper() + regdata.LastName.Substring(1);
                    prinicpalexists = true;
                }
            }
            else
            {
                Reason = "NO PRINCIPAL";
            }

            ViewBag.PrincipalRegno = Reason;
            if (prinicpalexists == true)

                ViewBag.PrincipalDeficiency = "NO Principal Deficiency";

            else
                ViewBag.PrincipalDeficiency = "Principal Deficiency";
            #endregion


            #region Faculty
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                int userCollegeID = (int)collegeId;
                var jntuh_specialization = db.jntuh_specialization.ToList();
                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int enclosureId = db.jntuh_enclosures.Where(e => e.documentName == "AICTE INTAKE APPROVAL LETTER").Select(e => e.id).FirstOrDefault();
                var AICTEApprovalLettr = db.jntuh_college_enclosures.Where(e => e.enclosureId == enclosureId && e.collegeID == userCollegeID).Select(e => e.path).FirstOrDefault();
                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();


                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 4)).Select(a => a.id).FirstOrDefault();

                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    newIntake.AICTEApprovalLettr = AICTEApprovalLettr;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();


                #region old Code


                ////college Reg nos
                //var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                //string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                //var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                //var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                ////education categoryIds UG,PG,PHD...........
                //var jntuh_education_category = db.jntuh_education_category.ToList();
                //int pharmacyDeptId = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();
                ////Reg nos related online facultyIds
                //var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                //   : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();//&& (rf.collegeId == null || rf.collegeId == collegeId)
                ////Reg nos related online facultyIds`-- (rf.isApproved == null || rf.isApproved == true)
                //var regfacultywithoutdepts = registeredFaculty.Where(r => r.DepartmentId == null).Select(i => i.type);

                //var jntuh_registered_faculty1 = registeredFaculty.Where(rf => ((rf.Absent != true) && (rf.NotQualifiedAsperAICTE != true)
                //                                        && (rf.NoSCM != true) && (rf.PANNumber != null) && (rf.PHDundertakingnotsubmitted != true)
                //                                        && (rf.Notin116 != true) && (rf.Blacklistfaculy != true))).Select(rf => new
                //                                        {
                //                                            RegistrationNumber = rf.RegistrationNumber,
                //                                            Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                //                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                //                                            IsApproved = rf.isApproved,
                //                                            PanNumber = rf.PANNumber,
                //                                            AadhaarNumber = rf.AadhaarNumber,
                //                                            TotalExperience = rf.TotalExperience,
                //                                            jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                //                                        }).ToList();
                //jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                //var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                //{
                //    RegistrationNumber = rf.RegistrationNumber,
                //    Department = rf.Department,
                //    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                //    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.IdentifiedFor).FirstOrDefault(),
                //    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
                //    PanNumber = rf.PanNumber,
                //    AadhaarNumber = rf.AadhaarNumber,
                //    TotalExperience = rf.TotalExperience,
                //  registered_faculty_specialization = rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                //}).ToList();

                #endregion


                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //education categoryIds UG,PG,PHD...........

                var jntuh_specializations = db.jntuh_specialization.ToList();
                var jntuh_departments = db.jntuh_department.ToList();
                int pharmacyDeptId = jntuh_departments.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();
                var collegeaffliations = db.jntuh_college_affliationstatus.AsNoTracking().ToList();
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                //    : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();


                var registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();
                var scm = registeredFaculty.Where(i => i.NoSCM == true).ToList();
                //Reg nos related online facultyIds
                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.OriginalCertificatesNotShown == false) && (rf.Xeroxcopyofcertificates == false || rf.Xeroxcopyofcertificates == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null)
                                                      && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false || rf.IncompleteCertificates == null) && (rf.Blacklistfaculy == false) && rf.NoRelevantUG != "Yes" && rf.NoRelevantPG != "Yes" && rf.NORelevantPHD != "Yes" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.OriginalsVerifiedPHD != true) && (rf.OriginalsVerifiedUG != true) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS != "Yes") && rf.InvalidAadhaar != "Yes" && (rf.DepartmentId != 61 || rf.DepartmentId != 27))
                                                        .Select(rf => new
                                                        {
                                                            RegistrationNumber = rf.RegistrationNumber,
                                                            Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                                                            //Department=
                                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                            IsApproved = rf.isApproved,
                                                            PanNumber = rf.PANNumber,
                                                            AadhaarNumber = rf.AadhaarNumber,
                                                            PGSpecializationId = rf.PGSpecialization,
                                                            UGDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.DepartmentId).FirstOrDefault(),
                                                            SpecializationId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.SpecializationId).FirstOrDefault(),
                                                            jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                                                        }).ToList();
                //var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.OriginalCertificatesNotShown == false) && (rf.Xeroxcopyofcertificates == false || rf.Xeroxcopyofcertificates == null) && (rf.NotQualifiedAsperAICTE == false || rf.NotQualifiedAsperAICTE == null)
                //                                        && (rf.NoSCM == false || rf.NoSCM == null) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false || rf.IncompleteCertificates == null) && (rf.Blacklistfaculy == false) && rf.NoRelevantUG != "Yes" && rf.NoRelevantPG != "Yes" && rf.NORelevantPHD != "Yes" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.OriginalsVerifiedPHD != true) && (rf.OriginalsVerifiedUG != true) && (rf.SamePANUsedByMultipleFaculty == false || rf.SamePANUsedByMultipleFaculty == null) && rf.BASStatusOld != "Yes") && rf.BASStatus != "Yes" && (rf.DepartmentId != 61 || rf.DepartmentId != 27))
                //                                        .Select(rf => new
                //                                        {
                //                                            RegistrationNumber = rf.RegistrationNumber,
                //                                            Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                //                                            DeptId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.DepartmentId).FirstOrDefault(),
                //                                            SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber.Trim() == rf.RegistrationNumber.Trim()).Select(c => c.SpecializationId).FirstOrDefault(),
                //                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                //                                            IsApproved = rf.isApproved,
                //                                            PanNumber = rf.PANNumber,
                //                                            PGSpecializationId = rf.PGSpecialization,
                //                                            AadhaarNumber = rf.AadhaarNumber,
                //                                            UGDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.DepartmentId).FirstOrDefault(),
                //                                            jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education,
                //                                            TotalExperience = rf.TotalExperience
                //                                        }).ToList();

                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    //Department=rf.UGDepartmentId!=null?jntuh_departments.Where(D=>D.id==rf.UGDepartmentId).Select(D=>D.departmentName).FirstOrDefault():"",
                    PGSpecializationId = rf.PGSpecializationId,
                    UGDepartmentId = rf.UGDepartmentId,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    //registered_faculty_specialization = rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                    registered_faculty_specialization = rf.SpecializationId != null ? jntuh_specializations.Where(S => S.id == rf.SpecializationId).Select(S => S.specializationName).FirstOrDefault() : rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : "",
                }).ToList();







                var Bpharmacyintake = 0;
                decimal BpharmacyrequiredFaculty = 0;
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;





                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);

                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        int senondyearpercentage = 0;
                        int thirdyearpercentage = 0;
                        int fourthyearpercentage = 0;
                        if (item.admittedIntake1 != 0)
                        {
                            senondyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(item.admittedIntake1) / Convert.ToDecimal(item.approvedIntake1)) * 100));
                        }
                        if (item.admittedIntake2 != 0)
                        {
                            thirdyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(item.admittedIntake2) / Convert.ToDecimal(item.approvedIntake2)) * 100));
                        }
                        if (item.admittedIntake3 != 0)
                        {
                            fourthyearpercentage = (int)Math.Ceiling(Convert.ToDecimal((Convert.ToDecimal(item.admittedIntake3) / Convert.ToDecimal(item.approvedIntake3)) * 100));
                        }

                        if (senondyearpercentage < 25 && thirdyearpercentage < 25 && fourthyearpercentage < 25)
                        {
                            item.ispercentage = true;
                            //studentcount
                            if ((item.admittedIntake1 >= 15 || item.admittedIntake2 >= 15 || item.admittedIntake3 >= 15) && item.ProposedIntake != 0)
                            {
                                item.ispercentage = false;
                                item.isintakeediable = false;
                                //intakedetails.ReducedInatke = 60;
                                //if (intakedetails.approvedIntake1 != 60)
                                //{
                                //    intakedetails.Note = "(Reduced from Proposed Intake of <b>";
                                //    intakedetails.Note += intakedetails.approvedIntake1;
                                //    intakedetails.Note += "</b> as per 25% Clause)";
                                //    intakedetails.approvedIntake1 = 60;
                                //}
                            }
                        }

                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        var total = intakedetails.totalIntake / 4;
                        Bpharmacyintake = total;
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D" && f.Recruitedfor == "UG");
                        }
                        else if (item.Degree == "Pharm.D PB")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharm.D PB" && f.Recruitedfor == "UG");
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department);//&& (f.Recruitedfor == "UG" || f.Recruitedfor == null)
                        }
                    }
                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" &&
                                f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department &&
                                        f.SpecializationId == item.specializationId);//&& (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG")
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.SpecializationId == item.specializationId);
                    }
                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharmacyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => "PG" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.SpecializationId == item.specializationId);
                        //intakedetails.Department = "Pharmacy";
                    }
                    if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) &&
                                    f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount =registeredFaculty.Where(f =>f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null &&
                        //            (f.isApproved == null || f.isApproved == true)).Count();
                        //intakedetails.Department = "Pharmacy";
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharm.D";
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        //noPanOrAadhaarcount = registeredFaculty.Where(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true)).Count();
                        intakedetails.Department = "Pharm.D PB";
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);

                    }


                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);
                    //=============//

                    intakedetails.FacultyWithIntakeReports = new List<CollegeFacultyWithIntakeReport>();
                    intakedetailsList.Add(intakedetails);
                }
                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                string[] strOtherDepartments = { "English", "Mathematics", "Physics", "Chemistry", "Others" };
                int btechdegreecount = intakedetailsList.Where(d => d.Degree == "B.Tech").Count();
               // var jntuh_departments = db.jntuh_department.ToList();
                if (btechdegreecount != 0)
                {
                    foreach (var department in strOtherDepartments)
                    {
                        int speId = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.id).FirstOrDefault();
                        var deptname = jntuh_departments.Where(i => i.departmentName == department).Select(i => i.departmentName).FirstOrDefault();
                        var deparmentid = jntuh_specialization.Where(s => s.jntuh_department.departmentName == department).Select(s => s.departmentId).FirstOrDefault();
                        int ugFaculty = jntuh_registered_faculty.Where(f => f.Department == department && f.HighestDegree == "UG").Count();
                        int pgFaculty = jntuh_registered_faculty.Where(f => (f.HighestDegree == "PG" || f.HighestDegree == "M.Phil") && f.Department == department).Count();
                        int phdFaculty = jntuh_registered_faculty.Where(f => "Ph.D" == f.HighestDegree && f.Department == department).Count();
                        intakedetailsList.Add(new CollegeFacultyWithIntakeReport
                        {
                            collegeId = (int)collegeId,
                            Degree = "B.Tech",
                            Department = department,
                            Specialization = department,
                            ugFaculty = ugFaculty,
                            pgFaculty = pgFaculty,
                            phdFaculty = phdFaculty,
                            totalFaculty = ugFaculty + pgFaculty + phdFaculty,
                            specializationId = speId,
                            shiftId = 1,
                            DepartmentID = department != "Others" ? deparmentid : 60,
                            specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == deptname)
                        });

                    }
                }

                List<CollegeFacultyWithIntakeReport> facultyCounts = intakedetailsList.Where(i => i.shiftId == 1).ToList();
                int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech").Select(d => d.approvedIntake1).Sum();
                var degrees = db.jntuh_degree.ToList();
                var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 150);
                int remainingFaculty = 0;
                int remainingPHDFaculty = 0;
                decimal departmentWiseRequiredFaculty = 0;
                var distDeptcount = 1;
                var deptloop = 1;
                foreach (var item in intakedetailsList)
                {

                    var SpecializationwisePHDFaculty = 0;
                    if (item.Degree == "M.Tech" || item.Degree == "B.Tech")
                        SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "M.Tech" && D.shiftId == 1).Distinct().Count();
                    else if (item.Degree == "MCA")
                        SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MCA" && D.shiftId == 1).Distinct().Count();
                    else if (item.Degree == "MBA")
                        SpecializationwisePHDFaculty = intakedetailsList.Where(D => D.Department == item.Department && D.Degree == "MBA" && D.shiftId == 1).Distinct().Count();
                    SpecializationwisePHDFaculty = SpecializationwisePHDFaculty * 2;

                    distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();

                    int indexnow = facultyCounts.IndexOf(item);

                    if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
                    {
                        deptloop = 1;
                    }

                    departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

                    string minimumRequirementMet = string.Empty;
                    int facultyShortage = 0;
                    int adjustedFaculty = 0;
                    int adjustedPHDFaculty = 0;

                    int tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.specializationWiseFaculty));//item.totalFaculty
                    int rFaculty = (int)Math.Ceiling(item.requiredFaculty);

                    if (strOtherDepartments.Contains(item.Department))
                    {
                        rFaculty = (int)firstYearRequired;
                        departmentWiseRequiredFaculty = (int)firstYearRequired;
                    }

                    var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();

                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = false;
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;//tFaculty
                            item.BtechAdjustedFaculty = adjustedFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = true;
                            adjustedFaculty = tFaculty;
                            item.BtechAdjustedFaculty = adjustedFaculty;
                            facultyShortage = rFaculty - tFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")))
                        {
                            //adjustedPHDFaculty = 1;
                            item.PHDdeficiency = false;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            item.AvailablePHDFaculty = 0;
                            intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = false);
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                        else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")))
                        {
                            //adjustedPHDFaculty = 1;
                            item.PHDdeficiency = true;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            item.AvailablePHDFaculty = 2;
                            intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    else
                    {
                        if (rFaculty <= remainingFaculty)
                        {
                            minimumRequirementMet = "YES";
                            item.deficiency = false;
                            if (rFaculty <= item.specializationWiseFaculty)
                            {
                                remainingFaculty = remainingFaculty - rFaculty;
                                adjustedFaculty = rFaculty;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }

                            else if (rFaculty >= item.specializationWiseFaculty)
                            {
                                remainingFaculty = remainingFaculty - item.specializationWiseFaculty;
                                adjustedFaculty = item.specializationWiseFaculty;
                                item.deficiency = true;
                                item.BtechAdjustedFaculty = adjustedFaculty;
                            }
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            item.deficiency = true;
                            adjustedFaculty = remainingFaculty;
                            item.BtechAdjustedFaculty = adjustedFaculty;
                            facultyShortage = rFaculty - remainingFaculty;
                            remainingFaculty = 0;
                        }
                        remainingPHDFaculty = item.phdFaculty;
                        if (remainingPHDFaculty >= SpecializationwisePHDFaculty && (degreeType.Equals("PG")))
                        {
                            //adjustedPHDFaculty = 1;
                            item.PHDdeficiency = false;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            item.AvailablePHDFaculty = 0;
                            intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = false);
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                        else if (remainingPHDFaculty < SpecializationwisePHDFaculty && (degreeType.Equals("PG")))
                        {
                            //adjustedPHDFaculty = 1;
                            item.PHDdeficiency = true;
                            adjustedPHDFaculty = remainingPHDFaculty;
                            item.AvailablePHDFaculty = 2;
                            intakedetailsList.Where(i => i.Department == item.Department && i.Degree == "B.Tech").ToList().ForEach(c => c.PHDBtechdeficiency = true);
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    //else if (degreeType.Equals("PG") && item.approvedIntake1 > 0)
                    //{
                    //    item.PHDdeficiency = true;
                    //    item.AvailablePHDFaculty = 1;
                    //}
                    //else
                    //{
                    //    item.PHDdeficiency = false;
                    //}
                    if (strOtherDepartments.Contains(item.Department))
                    {
                        item.totalIntake = totalBtechFirstYearIntake;
                        item.requiredFaculty = Math.Ceiling((decimal)firstYearRequired);
                    }

                    deptloop++;
                }
            #endregion

                if (Bpharmacyintake >= 100)
                {
                    BpharmacyrequiredFaculty = Math.Round(BpharmacyrequiredFaculty) - 0;
                    ViewBag.BpharmacyrequiredFaculty = BpharmacyrequiredFaculty;
                }
                else
                {
                    BpharmacyrequiredFaculty = Math.Round(BpharmacyrequiredFaculty) - 0;
                    ViewBag.BpharmacyrequiredFaculty = BpharmacyrequiredFaculty;
                }
                intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharmacyrequiredFaculty);


                #region For Pharmacyview
                var randomcode = "";
                if (collegeId != null)
                {
                    randomcode = db.jntuh_college_randamcodes.FirstOrDefault(i => i.CollegeId == collegeId).RandamCode;
                }
                var pharmadTotalintake = 0;
                var pharmadPBTotalintake = 0;
                var bpharmacyintake = 0;
                decimal BpharcyrequiredFaculty = 0;
                decimal PharmDrequiredFaculty = 0;
                decimal PharmDPBrequiredFaculty = 0;
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.collegeRandomCode = randomcode;
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake5 = GetIntake(item.collegeId, AY5, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {

                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        var total = intakedetails.totalIntake / 4;
                        bpharmacyintake = total;
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = pharmadTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = pharmadPBTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && f.Recruitedfor == "UG").Count();
                        }
                    }

                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                            switch (item.specializationId)
                            {
                                case 114://Hospital & Clinical Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice/Pharm D";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP" || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization == "PHARMD".ToUpper() || f.registered_faculty_specialization == "PHARM D" || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    break;
                                case 116://Pharmaceutical Analysis & Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharma Chemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA" || f.registered_faculty_specialization == "PA RA" || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    break;
                                case 118://Pharmaceutical Management & Regulatory Affaires
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PMRA/Regulatory Affairs/Pharmaceutics";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PMRA".ToUpper() || f.registered_faculty_specialization == "Regulatory Affairs".ToUpper() || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    break;
                                case 120://Pharmaceutics
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    break;
                                case 122://Pharmacology
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP".ToUpper() || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    break;
                                case 124://Quality Assurance & Pharma Regulatory Affairs
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    var s = jntuh_registered_faculty.Where(f => (f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "PA RA".ToUpper() ||
                                                 f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA"))).ToList();
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    break;
                                case 115://Industrial Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    break;
                                case 121://Pharmacognosy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacognosy/Pharma Biotechnology/Pharmacology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    break;
                                case 117://Pharmaceutical Chemistry
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    break;
                                case 119://Pharmaceutical Technology (2011-12)
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization.Contains("Bio-Technology".ToUpper()) || f.registered_faculty_specialization.Contains("Pharmaceutical Technology (2011-12)".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    break;
                                case 123://Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    break;
                                default:
                                    intakedetails.PharmacySpec1 = "";
                                    intakedetails.PharmacyspecializationWiseFaculty = 0;
                                    break;
                            }
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                    }

                    int noPanOrAadhaarcount = 0;

                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharcyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";
                        intakedetailsList.Where(i => i.Degree == "M.Pharmacy" && i.specializationId == item.specializationId).ToList().ForEach(c => c.PharmacyspecializationWiseFaculty = intakedetails.PharmacyspecializationWiseFaculty);

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        PharmDrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        PharmDPBrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == item.DepartmentID && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }

                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);

                    intakedetails.facultyWithoutPANAndAadhaar = noPanOrAadhaarcount;

                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(intakedetails);
                }

                #region pharmcy specializations
                var pharmdspeclist = new List<PharmacySpecilaizationList>
                {
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacy Practice",
                        Specialization = "Pharm.D"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharm D",
                        Specialization = "Pharm.D"
                    }
                };
                var pharmdpbspeclist = new List<PharmacySpecilaizationList>
                {
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacy Practice",
                        Specialization = "Pharm.D PB"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharm D",
                        Specialization = "Pharm.D PB"
                    }
                };

                var pharmacyspeclist = new List<PharmacySpecilaizationList>
                {
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmaceutics",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Industrial Pharmacy",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy BioTechnology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmaceutical Technology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmaceutical Chemistry",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacy Analysis",
                        Specialization = "B.Pharmacy"
                    },

                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "PAQA",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacology",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharma D",
                    //    Specialization = "B.Pharmacy"
                    //},
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacognosy",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "English",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Mathematics",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Computers",
                    //    Specialization = "B.Pharmacy"
                    //},new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Computer Science",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Zoology",
                    //    Specialization = "B.Pharmacy"
                    //}
                };
                #endregion
                #region All B.Pharmacy Specializations

                var reg_facultyspecilaizationsdistinct = jntuh_registered_faculty.Select(i => i.registered_faculty_specialization).Distinct().ToArray();

                var reg_facultyspecilaizations =
                    jntuh_registered_faculty.Where(
                        i =>
                            i.registered_faculty_specialization == "Pharmaceutics".ToUpper() ||
                            i.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy Analysis".ToUpper() ||
                            i.registered_faculty_specialization == "PAQA".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharma D".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacognosy" ||
                            i.registered_faculty_specialization == "English".ToUpper() ||
                            i.registered_faculty_specialization == "Mathematics".ToUpper() ||
                            i.registered_faculty_specialization == "Computers".ToUpper() ||
                            i.registered_faculty_specialization == "Zoology".ToUpper()).ToList();

                var group1Subcount = 0; var group2Subcount = 0; var group3Subcount = 0; var group4Subcount = 0; var group5Subcount = 0; var group6Subcount = 0;
                var pharmadgroup1Subcount = 0; var pharmadPBgroup1Subcount = 0;
                string subgroupconditionsmet;
                string conditionbpharm = null;
                string conditionpharmd = null;
                string conditionphardpb = null;
                foreach (var list in pharmacyspeclist)
                {
                    int phd;
                    int pg;
                    int ug;
                    var bpharmacylist = new CollegeFacultyWithIntakeReport();
                    bpharmacylist.Specialization = list.Specialization;
                    bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                    bpharmacylist.collegeId = (int)collegeId;
                    bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                    bpharmacylist.collegeRandomCode = randomcode;
                    bpharmacylist.shiftId = 1;
                    bpharmacylist.Degree = "B.Pharmacy";
                    bpharmacylist.Department = "Pharmacy";
                    bpharmacylist.PharmacyGroup1 = "Group1";

                    bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                    bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                    bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                    bpharmacylist.totalFaculty = ug + pg + phd;
                    bpharmacylist.BphramacyrequiredFaculty = BpharcyrequiredFaculty;
                    bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                    #region bpharmacyspecializationcount

                    if (list.PharmacyspecName == "Pharmaceutics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "Industrial Pharmacy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy BioTechnology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                        f.registered_faculty_specialization == "Bio-Technology".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmaceutical Technology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper() ||
                            f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmaceutical Chemistry")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy Analysis")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "PAQA")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                     f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                            //f.registered_faculty_specialization == "Quality Assurance".ToUpper() ||
                            //f.registered_faculty_specialization == "QualityAssurance".ToUpper() ||
                                     f.registered_faculty_specialization == "QAPRA".ToUpper() ||
                                     f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper() ||
                                     f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "Pharma D")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                      f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                      f.registered_faculty_specialization == "Pharm.D".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacognosy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy & Phytochemistry".ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy&Phytochemistry".ToUpper());
                    }

                    else if (list.PharmacyspecName == "English")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Mathematics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Computers")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Computer Science")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    //else if (list.PharmacyspecName == "Zoology")
                    //{
                    //    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    //}
                    #endregion





                    if (list.PharmacyspecName == "Pharmaceutics")//|| list.PharmacyspecName == "Industrial Pharmacy" || list.PharmacyspecName == "Pharmacy BioTechnology" || list.PharmacyspecName == "Pharmaceutical Technology"
                    {
                        group1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutics".ToUpper());
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Bio-Technology".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                        bpharmacylist.BPharmacySubGroup1Count = group1Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                    }

                    else if (list.PharmacyspecName == "Pharmaceutical Chemistry" || list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                    {
                        group2Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                        bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 5;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup2";
                    }
                    //else if (list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                    //{
                    //    var y = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()).ToList();
                    //    var g = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization.Contains("QA")).ToList();
                    //    var g1 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PAQA".ToUpper()).ToList();
                    //    var g2 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PA & QA".ToUpper()).ToList();

                    //    group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                    //    bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                    //    bpharmacylist.BPharmacySubGroupRequired = 1;
                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    //}

                    else if (list.PharmacyspecName == "Pharmacology")//|| list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D"
                    {
                        group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacology".ToUpper());
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                        //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;
                        bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 5 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    }

                    else if (list.PharmacyspecName == "Pharmacognosy")
                    {
                        group4Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy".ToUpper()) +
                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy&Phytochemistryc".ToUpper()) +
                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("PHARMACOGNOSY & PHYTOCHEMISTRY".ToUpper()));
                        bpharmacylist.BPharmacySubGroup1Count = group4Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = 3; ;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup4";
                    }

                    //else if (list.PharmacyspecName == "English" || list.PharmacyspecName == "Mathematics" || list.PharmacyspecName == "Computers" || list.PharmacyspecName == "Computer Science")//|| list.PharmacyspecName == "Zoology"
                    //{
                    //    group6Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "English".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Mathematics".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER SCIENCE")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("CSE"));
                    //    //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("ZOOLOGY"));
                    //    bpharmacylist.BPharmacySubGroup1Count = group6Subcount;
                    //    if (bpharmacyintake == 100)
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 3;
                    //    }
                    //    else
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 2;
                    //    }

                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup6";
                    //}


                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                }


                //for pharma D specializations
                var pharmaD = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                if (pharmaD.Count > 0)
                {
                    foreach (var list in pharmdspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D";
                        bpharmacylist.Department = "Pharm.D";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadrequiredfaculty = PharmDrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            pharmadgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper());
                            bpharmacylist.BPharmacySubGroup1Count = pharmadgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadTotalintake / 30;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                            intakedetailsList.Where(i => i.Degree == "Pharm.D" && i.Department == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroup1Count = pharmadgroup1Subcount);
                            intakedetailsList.Where(i => i.Degree == "Pharm.D" && i.Department == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupRequired = bpharmacylist.BPharmacySubGroupRequired);
                        }

                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                    }
                }


                //for pharma.D PB specializations
                var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                if (pharmaDPB.Count > 0)
                {
                    foreach (var list in pharmdpbspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D PB";
                        bpharmacylist.Department = "Pharm.D PB";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadPBrequiredfaculty = PharmDPBrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadPbSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            pharmadPBgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;
                            bpharmacylist.BPharmacySubGroup1Count = pharmadPBgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadPBTotalintake / 10;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                            intakedetailsList.Where(i => i.Degree == "Pharm.D PB" && i.Department == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroup1Count = pharmadPBgroup1Subcount);
                            intakedetailsList.Where(i => i.Degree == "Pharm.D PB" && i.Department == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupRequired = bpharmacylist.BPharmacySubGroupRequired);
                        }
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Add(bpharmacylist);
                    }
                }

                if (BpharcyrequiredFaculty > 0)
                {
                    if (bpharmacyintake >= 100)
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    else
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);
                    intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);

                    Group1PharmacyFaculty = group1Subcount; Group2PharmacyFaculty = group2Subcount; Group3PharmacyFaculty = group3Subcount;
                    Group4PharmacyFaculty = group4Subcount; Group5PharmacyFaculty = group5Subcount; Group6PharmacyFaculty = group6Subcount;
                    if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty)
                    {
                        if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                        {
                            subgroupconditionsmet = conditionbpharm = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionbpharm = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionbpharm = "Yes";
                    }

                    ViewBag.BpharmcyCondition = conditionbpharm;
                    intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                }

                if (PharmDrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDrequiredFaculty)
                    {
                        if (pharmadgroup1Subcount >= pharmadTotalintake / 30)
                        {
                            subgroupconditionsmet = conditionpharmd = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionpharmd = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionpharmd = "Yes";
                    }

                    ViewBag.PharmaDCondition = conditionpharmd;
                    if (conditionbpharm == "No")
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }


                }

                ViewBag.PharmDPBrequiredFaculty = PharmDPBrequiredFaculty;
                if (PharmDPBrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDPBrequiredFaculty)
                    {
                        if (pharmadPBgroup1Subcount >= pharmadPBTotalintake / 10)
                        {
                            subgroupconditionsmet = conditionphardpb = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionphardpb = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionphardpb = "Yes";
                    }

                    ViewBag.PharmaDPBCondition = conditionphardpb;
                    if (conditionbpharm == "No" && conditionpharmd == "No")
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }

                }


                intakedetailsList.FirstOrDefault().FacultyWithIntakeReports = intakedetailsList.FirstOrDefault().FacultyWithIntakeReports.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                #endregion



                #endregion

                #region Faculty Appeal Deficiency Status
                var jntuh_appeal_faculty = db.jntuh_appeal_faculty_registered.AsNoTracking().ToList();
                var jntuh_deparment = db.jntuh_department.AsNoTracking().ToList();
                foreach (var item in intakedetailsList)
                {
                    var deparment = jntuh_deparment.FirstOrDefault(i => i.id == item.DepartmentID);
                    if (deparment != null)
                    {
                        var jntuh_departmentcount =
                        jntuh_appeal_faculty.Where(
                            i =>
                                i.DepartmentId == item.DepartmentID && i.SpecializationId == item.specializationId &&
                                i.DegreeId == deparment.degreeId && i.collegeId == collegeId).ToList();
                        var facultydefcount = (int)Math.Ceiling(item.requiredFaculty) - item.totalFaculty;

                        if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty && (item.Department == "B.Pharmacy"))
                        {
                            if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                            {
                                Allgroupscount = 0;
                            }
                            else
                            {
                                //var bpharmacyIntake = (bpharmacyintake >= 100 ? 3 : 2);
                                if (group1Subcount < (bpharmacyintake >= 100 ? 6 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 4) - group1Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group2Subcount < (bpharmacyintake >= 100 ? 6 : 5))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 5) - group2Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group3Subcount < (bpharmacyintake >= 100 ? 5 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 5 : 4) - group3Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group4Subcount < 3)
                                {
                                    var count = 3 - group4Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                //if (group5Subcount < 2)
                                //{
                                //    var count = 2 - group5Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                                //if (group6Subcount < bpharmacyIntake)
                                //{
                                //    var count = bpharmacyIntake - group6Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                            }
                            facultydefcount = Allgroupscount;
                        }

                        else if (jntuh_registered_faculty.Count < BpharcyrequiredFaculty && (item.Department == "B.Pharmacy"))
                        {
                            if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                            {
                                Allgroupscount = 0;
                            }
                            else
                            {
                                //var bpharmacyIntake = (bpharmacyintake >= 100 ? 3 : 2);
                                if (group1Subcount < (bpharmacyintake >= 100 ? 6 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 4) - group1Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group2Subcount < (bpharmacyintake >= 100 ? 6 : 5))
                                {
                                    var count = (bpharmacyintake >= 100 ? 6 : 5) - group2Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group3Subcount < (bpharmacyintake >= 100 ? 5 : 4))
                                {
                                    var count = (bpharmacyintake >= 100 ? 5 : 4) - group3Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                if (group4Subcount < 3)
                                {
                                    var count = 3 - group4Subcount;
                                    Allgroupscount = Allgroupscount + count;
                                }
                                //if (group5Subcount < 2)
                                //{
                                //    var count = 2 - group5Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                                //if (group6Subcount < bpharmacyIntake)
                                //{
                                //    var count = bpharmacyIntake - group6Subcount;
                                //    Allgroupscount = Allgroupscount + count;
                                //}
                            }

                            var lessfaculty = BpharcyrequiredFaculty - jntuh_registered_faculty.Count;

                            if (lessfaculty > Allgroupscount)
                            {
                                facultydefcount = (int)lessfaculty + Allgroupscount;
                            }
                            else if (Allgroupscount > lessfaculty)
                            {
                                facultydefcount = Allgroupscount + (int)lessfaculty;
                            }
                        }

                        if (item.Department == "B.Pharmacy")
                        {
                            ViewBag.BpharmacyRequired = facultydefcount;
                        }

                        if (item.PharmacyspecializationWiseFaculty < 1 && item.Department == "M.Pharmacy" && item.requiredFaculty > 0)
                        {
                            facultydefcount = 1;
                        }

                        if (item.Department == "Pharm.D" || item.Department == "Pharm.D PB")
                        {
                            facultydefcount = item.BPharmacySubGroupRequired - item.BPharmacySubGroup1Count;
                        }
                        if (facultydefcount <= jntuh_departmentcount.Count && jntuh_departmentcount.Count != 0)
                        {
                            item.deficiencystatus = true;
                        }
                    }
                }


                #endregion

                #region For labs
                List<AnonymousLabclass> collegeLabAnonymousLabclass = new List<AnonymousLabclass>();

                int[] specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeId && e.academicYearId==10 && e.courseStatus!="Closure" && e.proposedIntake!=0).Select(e => e.specializationId).Distinct().ToArray();

                int[] DegreeIDs = db.jntuh_lab_master.AsNoTracking().Where(l => l.DegreeID == 4 && specializationIds.Contains(l.SpecializationID)).Select(l => l.DegreeID).ToArray();
                List<Lab> collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
                                                            .Where(l => specializationIds.Contains(l.SpecializationID))
                                                            .Select(l => new Lab
                                                            {
                                                                EquipmentID = l.id,
                                                                degreeId = l.DegreeID,
                                                                degree = l.jntuh_degree.degree,
                                                                degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
                                                                departmentId = l.DepartmentID,
                                                                department = l.jntuh_department.departmentName,
                                                                specializationId = l.SpecializationID,
                                                                specializationName = l.jntuh_specialization.specializationName,
                                                                year = l.Year,
                                                                Semester = l.Semester,
                                                                Labcode = l.Labcode,
                                                                LabName = l.LabName,
                                                                EquipmentName = l.EquipmentName
                                                            })
                                                            .OrderBy(l => l.degreeDisplayOrder)
                                                            .ThenBy(l => l.department)
                                                            .ThenBy(l => l.specializationName)
                                                            .ThenBy(l => l.year).ThenBy(l => l.Semester)
                                                            .ToList();


                string CollegeAffiliationStatus = db.jntuh_college_affiliation.Where(u => u.collegeId == collegeId && u.affiliationTypeId == 7).Select(u => u.affiliationStatus).FirstOrDefault();



                List<jntuh_lab_master> jntuh_lab_masters = new List<jntuh_lab_master>();

                if (CollegeAffiliationStatus == "Yes")
                {
                    if (DegreeIDs.Contains(4))
                    {
                        jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => (l.SpecializationID == 39 || specializationIds.Contains(l.SpecializationID)) && l.CollegeId == collegeId && !l.EquipmentName.Contains("desirable")).ToList();
                    }
                    else
                    {
                        jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => specializationIds.Contains(l.SpecializationID) && l.CollegeId == collegeId && !l.EquipmentName.Contains("desirable")).ToList();
                    }

                }
                else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
                {

                    if (DegreeIDs.Contains(4))
                    {
                        jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => (l.SpecializationID == 39 || specializationIds.Contains(l.SpecializationID)) && l.CollegeId == null && !l.EquipmentName.Contains("desirable")).ToList();
                    }
                    else
                    {
                        jntuh_lab_masters = db.jntuh_lab_master.AsNoTracking().Where(l => specializationIds.Contains(l.SpecializationID) && l.CollegeId == null && !l.EquipmentName.Contains("desirable")).ToList();
                    }
                }









                if (CollegeAffiliationStatus == "Yes")
                {
                    collegeLabAnonymousLabclass = jntuh_lab_masters
                        //db.jntuh_lab_master.AsNoTracking().Where(l => specializationIds.Contains(l.SpecializationID))
                                                         .Select(l => new AnonymousLabclass
                                                         {
                                                             id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
                                                             EquipmentID = l.id,
                                                             LabName = l.LabName,
                                                             EquipmentName = l.EquipmentName,
                                                             LabCode = l.Labcode,
                                                         })
                                                         .OrderBy(l => l.LabName)
                                                         .ThenBy(l => l.EquipmentName)
                                                         .ToList();

                }
                else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
                {

                    collegeLabAnonymousLabclass = jntuh_lab_masters
                        //db.jntuh_lab_master.AsNoTracking().Where(l => specializationIds.Contains(l.SpecializationID) && l.Labcode != "TMP-CL")
                                                       .Select(l => new AnonymousLabclass
                                                       {
                                                           id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeId).Select(l1 => l1.id).FirstOrDefault(),
                                                           EquipmentID = l.id,
                                                           LabName = l.LabName,
                                                           EquipmentName = l.EquipmentName,
                                                           LabCode = l.Labcode,
                                                       })
                                                       .OrderBy(l => l.LabName)
                                                       .ThenBy(l => l.EquipmentName)
                                                       .ToList();
                }

             //   var labDeficiencies = db.jntuh_college_laboratories_deficiency.Where(ld => ld.CollegeId == collegeId && ld.Deficiency == true).Select(ld => ld.LabCode).ToArray();

                var list1 = collegeLabAnonymousLabclass.OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

              //  list1 = list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

                #region this code written by suresh

                int?[] labequipmentIds = list1.Select(i => i.EquipmentID).ToArray();

                int[] clgequipmentIDs =db.jntuh_college_laboratories.Where(l => l.CollegeID == collegeId && labequipmentIds.Contains(l.EquipmentID) && l.isActive==true).Select(i => i.EquipmentID).ToArray();

                list1 = list1.Where(l => !clgequipmentIDs.Contains((int)l.EquipmentID)).ToList();


                #endregion
                if (facultyCounts.Count > 0)
                {
                    facultyCounts.FirstOrDefault().LabsListDefs1 = list1.ToList();
                }



                List<PhysicalLabMaster> physicallabs = new List<PhysicalLabMaster>();
                List<UAAAS.Controllers.Reports.DeficiencyReportWordController.physicalLabs> CollegePhysicalLabMaster = new List<UAAAS.Controllers.Reports.DeficiencyReportWordController.physicalLabs>();
                CollegePhysicalLabMaster =
                      db.jntuh_physical_labmaster_copy.Where(e => e.Collegeid == collegeId && e.Numberofrequiredlabs != null)
                          .Select(e => new UAAAS.Controllers.Reports.DeficiencyReportWordController.physicalLabs
                          {
                              department = db.jntuh_department.Where(d => d.id == e.DepartmentId).Select(s => s.departmentName).FirstOrDefault(),
                              NoOfRequiredLabs = e.Numberofrequiredlabs,
                              Labname = e.LabName,
                              year = e.Year,
                              semister = e.Semister,
                              LabCode = e.Labcode,
                              NoOfAvailabeLabs = db.jntuh_physical_labmaster_copy.Where(a => a.Collegeid == collegeId && a.Semister == e.Semister && a.Year == e.Year && a.Labcode == e.Labcode).Select(s => s.Numberofavilablelabs).FirstOrDefault() == null ? 0 : db.jntuh_physical_labmaster_copy.Where(a => a.Collegeid == collegeId && a.DepartmentId == e.DepartmentId && a.Semister == e.Semister && a.Year == e.Year && a.Labcode == e.Labcode).Select(s => s.Numberofavilablelabs).FirstOrDefault()
                          }).ToList();
                foreach (var item in CollegePhysicalLabMaster)
                {
                    if (item.NoOfAvailabeLabs < item.NoOfRequiredLabs)
                    {
                        PhysicalLabMaster PhysicalLabMaster = new PhysicalLabMaster();
                        PhysicalLabMaster.DepartmentName = item.department;
                        PhysicalLabMaster.NoofAvailable = (int)item.NoOfAvailabeLabs;
                        PhysicalLabMaster.NoofRequeried = (int)item.NoOfRequiredLabs;
                        PhysicalLabMaster.Labname = item.Labname;
                        physicallabs.Add(PhysicalLabMaster);
                    }
                }
                string physicalpath = db.jntuh_college_enclosures.Where(e => e.enclosureId == 26 && e.collegeID == collegeId).Select(e => e.path).FirstOrDefault();
                if (!string.IsNullOrEmpty(physicalpath))
                {
                    if (physicallabs.Count != 0)
                    {
                        physicallabs[0].PhysicalLabUploadingview = physicalpath;
                    }

                }
                //physicallabs = db.jntuh_college_laboratories_deficiency.Where(e => e.CollegeId == collegeId).Select(e => new PhysicalLabMaster
                //{
                //    NoofAvailable = e.Semister,
                //    DepartmentName = e.LabCode
                //}).ToList();

                //string physicalpath = db.jntuh_college_enclosures.Where(e => e.enclosureId == 26 && e.collegeID == collegeId).Select(e => e.path).FirstOrDefault();
                //if (!string.IsNullOrEmpty(physicalpath))
                //{
                //    physicallabs[0].PhysicalLabUploadingview = physicalpath;
                //}

                if (facultyCounts.Count > 0)
                {
                    facultyCounts.FirstOrDefault().PhysicalLabs = physicallabs.ToList();
                }







                #endregion
            }
            //Showing supporting Documents
            jntuh_appeal_college_edit_status jntuh_appeal_college_edit_status =
                db.jntuh_appeal_college_edit_status.Where(e => e.collegeId == collegeId).Select(s => s).FirstOrDefault();
            ViewBag.DeclarationPath=
            jntuh_appeal_college_edit_status.DeclarationPath;
            ViewBag.FurtherAppealSupportingDocument =
          jntuh_appeal_college_edit_status.FurtherAppealSupportingDocument;
            return View(intakedetailsList);
            #endregion

        }


        [HttpGet]
        [Authorize(Roles = "Admin,SuperAdmin,College")]
        public ActionResult ViewLabDetails(int? id, string collegeId, int? eqpid, int? eqpno)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int userCollegeID = db.jntuh_college_users.Where(u => u.userID == userID).Select(u => u.collegeID).FirstOrDefault();
            Lab laboratories = new Lab();
            laboratories.collegeId = userCollegeID;

            if (id != null)
            {
                ViewBag.IsUpdate = true;
                laboratories = (from m in db.jntuh_lab_master
                                join labs in db.jntuh_appeal_college_laboratories on m.id equals labs.EquipmentID
                                where (labs.CollegeID == userCollegeID && labs.id == id)
                                select new Lab
                                {
                                    id = labs.id,
                                    collegeId = userCollegeID,
                                    EquipmentID = labs.EquipmentID,
                                    EquipmentName = m.EquipmentName,
                                    LabEquipmentName = labs.EquipmentName,
                                    EquipmentNo = labs.EquipmentNo,
                                    Make = labs.Make,
                                    Model = labs.Model,
                                    EquipmentUniqueID = labs.EquipmentUniqueID,
                                    AvailableUnits = labs.AvailableUnits,
                                    AvailableArea = labs.AvailableArea,
                                    RoomNumber = labs.RoomNumber,
                                    createdBy = labs.createdBy,
                                    createdOn = labs.createdOn,
                                    IsActive = true,

                                    degreeId = m.DegreeID,
                                    departmentId = m.DepartmentID,
                                    specializationId = m.SpecializationID,
                                    degree = m.jntuh_degree.degree,
                                    department = m.jntuh_department.departmentName,
                                    specializationName = m.jntuh_specialization.specializationName,
                                    year = m.Year,
                                    Semester = m.Semester,
                                    Labcode = m.Labcode,
                                    LabName = m.LabName,
                                    EquipmentDateOfPurchasing = labs.EquipmentDateOfPurchasing,
                                    // EquipmentDateOfPurchasing1 = labs.EquipmentDateOfPurchasing != null ? string.Format("{0:yyyy-MM-dd}", labs.EquipmentDateOfPurchasing.Value) : null
                                    //,
                                    DelivaryChalanaDate = labs.DelivaryChalanaDate,
                                    ViewEquipmentPhoto = labs.EquipmentPhoto,
                                    ViewDelivaryChalanaImage = labs.DelivaryChalanaImage,
                                    ViewBankStatementImage = labs.BankStatementImage,
                                    ViewStockRegisterEntryImage = labs.StockRegisterEntryImage,
                                    ViewReVerificationScreenImage = labs.ReVerificationScreenShot
                                    // AffiliationStatus=labs.

                                }).FirstOrDefault();
                if (laboratories != null)
                {
                    laboratories.EquipmentDateOfPurchasing1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.EquipmentDateOfPurchasing.ToString()) : null;
                    laboratories.DelivaryChalanaDate1 = laboratories.EquipmentDateOfPurchasing != null ? UAAAS.Models.Utilities.MMDDYY2DDMMYY(laboratories.DelivaryChalanaDate.ToString()) : null;
                    return PartialView("_ViewLabsDetails", laboratories);
                }

            }

            return RedirectToAction("ViewCollegeFacultyWithIntake");
        }
        #endregion

        



        #region Pharmacy Colleges New collegefacultywith intake

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpGet]
        public ActionResult PharmacyCollegeFacultyWithIntakeNew(int? collegeId, string type)
        {
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();



            var randomcode = "";
            if (collegeId != null)
            {
                randomcode = db.jntuh_college_randamcodes.FirstOrDefault(i => i.CollegeId == collegeId).RandamCode;
            }
            var pharmadTotalintake = 0;
            var pharmadPBTotalintake = 0;

            #region PharmacyCode
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                //Commented on 18-06-2018 by Narayana Reddy
                var jntuh_Bpharmacy_faculty_deficiency = db.jntuh_bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId).ToList();
                var jntuh_specialization = db.jntuh_specialization.ToList();

                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber.Trim()).ToArray();

                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //education categoryIds UG,PG,PHD...........

                int pharmacyDeptId = db.jntuh_department.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();

                var jntuh_education_category = db.jntuh_education_category.ToList();

                var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                    : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();
                var scm = registeredFaculty.Where(i => i.NoSCM == true).ToList();
                var absent = registeredFaculty.Where(i => i.Absent == true).ToList();
                var aicte = registeredFaculty.Where(i => i.NotQualifiedAsperAICTE == true).ToList();
                var pan = registeredFaculty.Where(i => (i.PANNumber == null || i.PANNumber == "")).ToList();
                var phdnot = registeredFaculty.Where(i => i.PHDundertakingnotsubmitted == true).ToList();
                var notin116 = registeredFaculty.Where(i => i.Notin116 == true).ToList();
                //Reg nos related online facultyIds
                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => ((rf.Absent != true) && (rf.NotQualifiedAsperAICTE != true)
                                                        && (rf.NoSCM != true) && (rf.PANNumber != null) && (rf.PHDundertakingnotsubmitted != true)
                                                        && (rf.Notin116 != true) && (rf.Blacklistfaculy != true)))
                                                 .Select(rf => new
                                                 {
                                                     RegistrationNumber = rf.RegistrationNumber,
                                                     Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                                                     HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                     IsApproved = rf.isApproved,
                                                     PanNumber = rf.PANNumber,
                                                     AadhaarNumber = rf.AadhaarNumber,
                                                     jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                                                 }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    registered_faculty_specialization = rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                }).ToList();

                ViewBag.ALLTotalCollegeFaculty = jntuh_registered_faculty.Count;
                var bpharmacyintake = 0;
                decimal BpharcyrequiredFaculty = 0;
                decimal PharmDrequiredFaculty = 0;
                decimal PharmDPBrequiredFaculty = 0;
                var pharmacydeptids = new[] { 26, 27, 36, 39 };
                collegeIntakeExisting = collegeIntakeExisting.Where(i => pharmacydeptids.Contains(i.DepartmentID)).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.collegeRandomCode = randomcode;
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;

                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake5 = GetIntake(item.collegeId, AY5, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {

                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        var total = intakedetails.totalIntake > 400 ? 100 : 60;
                        bpharmacyintake = total;
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = pharmadTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = pharmadPBTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }

                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    //====================================
                    // intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(s => s.SpecializationId == item.specializationId).Count();



                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && f.Recruitedfor == "UG").Count();
                        }
                    }

                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                            switch (item.specializationId)
                            {
                                case 114://Hospital & Clinical Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice/Pharm D";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP" || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization == "PHARMD".ToUpper() || f.registered_faculty_specialization == "PHARM D" || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    break;
                                case 116://Pharmaceutical Analysis & Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharma Chemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA" || f.registered_faculty_specialization == "PA RA" || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    break;
                                case 118://Pharmaceutical Management & Regulatory Affaires
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PMRA/Regulatory Affairs/Pharmaceutics";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PMRA".ToUpper() || f.registered_faculty_specialization == "Regulatory Affairs".ToUpper() || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    break;
                                case 120://Pharmaceutics
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    break;
                                case 122://Pharmacology
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP".ToUpper() || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    break;
                                case 124://Quality Assurance & Pharma Regulatory Affairs
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    var s = jntuh_registered_faculty.Where(f => (f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "QA".ToUpper() ||
                                                 f.registered_faculty_specialization == "PA RA".ToUpper() ||
                                                 f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA"))).ToList();
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    break;
                                case 115://Industrial Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()));
                                    break;
                                case 121://Pharmacognosy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacognosy/Pharma Biotechnology/Pharmacology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacognosy".ToUpper()));
                                    break;
                                case 117://Pharmaceutical Chemistry
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()));
                                    break;
                                case 119://Pharmaceutical Technology (2011-12)
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization.Contains("Bio-Technology".ToUpper()) || f.registered_faculty_specialization.Contains("Pharmaceutical Technology (2011-12)".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()));
                                    break;
                                case 123://Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Quality Assurance".ToUpper()));
                                    break;
                                default:
                                    intakedetails.PharmacySpec1 = "";
                                    intakedetails.PharmacyspecializationWiseFaculty = 0;
                                    break;
                            }
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                    }
                    intakedetails.id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.SpecializationId == item.specializationId && fd.ShiftId == item.shiftId).Select(fd => fd.Id).FirstOrDefault();

                    if (intakedetails.id > 0)
                    {
                        int? swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                        if (swf != null)
                        {
                            intakedetails.specializationWiseFaculty = (int)swf;
                        }
                        intakedetails.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.Deficiency).FirstOrDefault();
                        intakedetails.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.Shortage).FirstOrDefault();
                    }

                    //============================================

                    int noPanOrAadhaarcount = 0;

                    if (item.Degree == "B.Pharmacy")
                    {
                        BpharcyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        PharmDrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        PharmDPBrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == item.DepartmentID && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }

                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);

                    intakedetails.facultyWithoutPANAndAadhaar = noPanOrAadhaarcount;
                    //=============//


                    //intakedetails.PharmacySpecilaizationList = pharmacyspeclist;
                    intakedetailsList.Add(intakedetails);
                }
            #endregion

                var pharmdspeclist = new List<PharmacySpecilaizationList>
                {
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacy Practice",
                        Specialization = "Pharm.D"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharm D",
                        Specialization = "Pharm.D"
                    }
                };
                var pharmdpbspeclist = new List<PharmacySpecilaizationList>
                {
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacy Practice",
                        Specialization = "Pharm.D PB"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharm D",
                        Specialization = "Pharm.D PB"
                    }
                };

                var pharmacyspeclist = new List<PharmacySpecilaizationList>
                {
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmaceutics",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Industrial Pharmacy",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy BioTechnology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmaceutical Technology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmaceutical Chemistry",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacy Analysis",
                        Specialization = "B.Pharmacy"
                    },

                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "PAQA",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacology",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharma D",
                    //    Specialization = "B.Pharmacy"
                    //},
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Pharmacognosy",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "English",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Mathematics",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Computers",
                    //    Specialization = "B.Pharmacy"
                    //},new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Computer Science",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Zoology",
                    //    Specialization = "B.Pharmacy"
                    //}
                };

                #region All B.Pharmacy Specializations

                var reg_facultyspecilaizationsdistinct = jntuh_registered_faculty.Select(i => i.registered_faculty_specialization).Distinct().ToArray();

                var reg_facultyspecilaizations =
                    jntuh_registered_faculty.Where(
                        i =>
                            i.registered_faculty_specialization == "Pharmaceutics".ToUpper() ||
                            i.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacy Analysis".ToUpper() ||
                            i.registered_faculty_specialization == "PAQA".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacology".ToUpper() ||
                            i.registered_faculty_specialization == "Pharma D".ToUpper() ||
                            i.registered_faculty_specialization == "Pharmacognosy" ||
                            i.registered_faculty_specialization == "English".ToUpper() ||
                            i.registered_faculty_specialization == "Mathematics".ToUpper() ||
                            i.registered_faculty_specialization == "Computers".ToUpper() ||
                            i.registered_faculty_specialization == "Zoology".ToUpper()).ToList();

                var group1Subcount = 0; var group2Subcount = 0; var group3Subcount = 0; var group4Subcount = 0; var group5Subcount = 0; var group6Subcount = 0;
                var pharmadgroup1Subcount = 0; var pharmadPBgroup1Subcount = 0;
                string subgroupconditionsmet;
                string conditionbpharm = null;
                string conditionpharmd = null;
                string conditionphardpb = null;
                foreach (var list in pharmacyspeclist)
                {
                    int phd;
                    int pg;
                    int ug;
                    var bpharmacylist = new CollegeFacultyWithIntakeReport();
                    bpharmacylist.Specialization = list.Specialization;
                    bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                    bpharmacylist.collegeId = (int)collegeId;
                    bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                    bpharmacylist.collegeRandomCode = randomcode;
                    bpharmacylist.shiftId = 1;
                    bpharmacylist.Degree = "B.Pharmacy";
                    bpharmacylist.Department = "Pharmacy";
                    bpharmacylist.PharmacyGroup1 = "Group1";

                    bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                    bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                    bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                    bpharmacylist.totalFaculty = ug + pg + phd;
                    bpharmacylist.BphramacyrequiredFaculty = BpharcyrequiredFaculty;
                    bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                    #region bpharmacyspecializationcount

                    if (list.PharmacyspecName == "Pharmaceutics")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    //else if (list.PharmacyspecName == "Industrial Pharmacy")
                    //{
                    //    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    //}
                    //else if (list.PharmacyspecName == "Pharmacy BioTechnology")
                    //{
                    //    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                    //                    f.registered_faculty_specialization == "Bio-Technology".ToUpper());
                    //}
                    //else if (list.PharmacyspecName == "Pharmaceutical Technology")
                    //{
                    //    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper() ||
                    //        f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                    //}
                    else if (list.PharmacyspecName == "Pharmaceutical Chemistry")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacy Analysis")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    else if (list.PharmacyspecName == "PAQA")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                     f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                            //f.registered_faculty_specialization == "Quality Assurance".ToUpper() ||
                            //f.registered_faculty_specialization == "QualityAssurance".ToUpper() ||
                                     f.registered_faculty_specialization == "QAPRA".ToUpper() ||
                                     f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper() ||
                                     f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper());
                    }
                    else if (list.PharmacyspecName == "Pharmacology")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    }

                    //else if (list.PharmacyspecName == "Pharma D")
                    //{
                    //    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                    //                   f.registered_faculty_specialization == "PharmD".ToUpper() ||
                    //                  f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                    //                  f.registered_faculty_specialization == "Pharm.D".ToUpper());
                    //}
                    else if (list.PharmacyspecName == "Pharmacognosy")
                    {
                        bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy & Phytochemistry".ToUpper() ||
                                       f.registered_faculty_specialization == "Pharmacognosy&Phytochemistry".ToUpper());
                    }

                    ////else if (list.PharmacyspecName == "English")
                    ////{
                    ////    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    ////}
                    ////else if (list.PharmacyspecName == "Mathematics")
                    ////{
                    ////    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    ////}
                    ////else if (list.PharmacyspecName == "Computers")
                    ////{
                    ////    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    ////}
                    ////else if (list.PharmacyspecName == "Computer Science")
                    ////{
                    ////    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    ////}
                    //else if (list.PharmacyspecName == "Zoology")
                    //{
                    //    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                    //}
                    #endregion





                    if (list.PharmacyspecName == "Pharmaceutics")//|| list.PharmacyspecName == "Industrial Pharmacy" || list.PharmacyspecName == "Pharmacy BioTechnology" || list.PharmacyspecName == "Pharmaceutical Technology"
                    {
                        group1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutics".ToUpper());
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Bio-Technology".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                        bpharmacylist.BPharmacySubGroup1Count = group1Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                    }

                    else if (list.PharmacyspecName == "Pharmaceutical Chemistry" || list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                    {
                        group2Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                                         jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                        bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 5;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup2";
                    }
                    //else if (list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                    //{
                    //    var y = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()).ToList();
                    //    var g = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization.Contains("QA")).ToList();
                    //    var g1 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PAQA".ToUpper()).ToList();
                    //    var g2 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PA & QA".ToUpper()).ToList();

                    //    group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                    //    bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                    //    bpharmacylist.BPharmacySubGroupRequired = 1;
                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    //}

                    else if (list.PharmacyspecName == "Pharmacology")//|| list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D"
                    {
                        group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacology".ToUpper());
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                        //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                        //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;
                        bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 5 : 4;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup3";
                    }

                    else if (list.PharmacyspecName == "Pharmacognosy")
                    {
                        group4Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy".ToUpper()) +
                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy&Phytochemistryc".ToUpper()) +
                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("PHARMACOGNOSY & PHYTOCHEMISTRY".ToUpper()));
                        bpharmacylist.BPharmacySubGroup1Count = group4Subcount;
                        bpharmacylist.BPharmacySubGroupRequired = 3; ;
                        bpharmacylist.PharmacySubGroup1 = "SubGroup4";
                    }

                    //else if (list.PharmacyspecName == "English" || list.PharmacyspecName == "Mathematics" || list.PharmacyspecName == "Computers" || list.PharmacyspecName == "Computer Science")//|| list.PharmacyspecName == "Zoology"
                    //{
                    //    group6Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "English".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Mathematics".ToUpper()) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("COMPUTER SCIENCE")) +
                    //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("CSE"));
                    //    //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("ZOOLOGY"));
                    //    bpharmacylist.BPharmacySubGroup1Count = group6Subcount;
                    //    if (bpharmacyintake == 100)
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 3;
                    //    }
                    //    else
                    //    {
                    //        bpharmacylist.BPharmacySubGroupRequired = 2;
                    //    }

                    //    bpharmacylist.PharmacySubGroup1 = "SubGroup6";
                    //}



                    var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                    if (id > 0)
                    {
                        var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                        if (swf != null)
                        {
                            bpharmacylist.specializationWiseFaculty = (int)swf;
                        }
                        bpharmacylist.id = id;
                        bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                        bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                    }

                    intakedetailsList.Add(bpharmacylist);
                }


                //for pharma D specializations
                var pharmaD = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                if (pharmaD.Count > 0)
                {
                    foreach (var list in pharmdspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D";
                        bpharmacylist.Department = "Pharm.D";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadrequiredfaculty = PharmDrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            pharmadgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper());
                            bpharmacylist.BPharmacySubGroup1Count = pharmadgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadTotalintake / 30;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                        }






                        var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                        if (id > 0)
                        {
                            var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                            if (swf != null)
                            {
                                bpharmacylist.specializationWiseFaculty = (int)swf;
                            }
                            bpharmacylist.id = id;
                            bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                            bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                        }

                        intakedetailsList.Add(bpharmacylist);
                    }
                }


                //for pharma.D PB specializations
                var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                if (pharmaDPB.Count > 0)
                {
                    foreach (var list in pharmdpbspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "Pharm.D PB";
                        bpharmacylist.Department = "Pharm.D PB";
                        bpharmacylist.PharmacyGroup1 = "Group1";
                        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB");
                        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                        bpharmacylist.totalFaculty = ug + pg + phd;
                        bpharmacylist.pharmadPBrequiredfaculty = PharmDPBrequiredFaculty;
                        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;

                        #region pharmadPbSpecializationcount
                        if (list.PharmacyspecName == "Pharm D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy Practice")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        #endregion



                        if (list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            pharmadPBgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                                            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                                        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); ;
                            bpharmacylist.BPharmacySubGroup1Count = pharmadPBgroup1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = pharmadPBTotalintake / 10;
                            bpharmacylist.PharmacySubGroup1 = "SubGroup1";
                        }

                        //else if (list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D")
                        //{
                        //    group2Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                        //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper());
                        //    bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                        //    bpharmacylist.BPharmacySubGroupRequired = 2;
                        //    bpharmacylist.PharmacySubGroup1 = "SubGroup2";
                        //}




                        var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                        if (id > 0)
                        {
                            var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                            if (swf != null)
                            {
                                bpharmacylist.specializationWiseFaculty = (int)swf;
                            }
                            bpharmacylist.id = id;
                            bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                            bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                        }

                        intakedetailsList.Add(bpharmacylist);
                    }
                }

                if (BpharcyrequiredFaculty > 0)
                {
                    if (bpharmacyintake >= 100)
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    else
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);

                    if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty)
                    {
                        if (group1Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group2Subcount >= (bpharmacyintake >= 100 ? 6 : 5) && group3Subcount >= (bpharmacyintake >= 100 ? 5 : 4) && group4Subcount >= 3)//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                        {
                            subgroupconditionsmet = conditionbpharm = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionbpharm = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionbpharm = "Yes";
                    }

                    ViewBag.BpharmcyCondition = conditionbpharm;
                    intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                }
                ViewBag.PharmDrequiredFaculty = PharmDrequiredFaculty;
                if (PharmDrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDrequiredFaculty)
                    {
                        if (pharmadgroup1Subcount >= pharmadTotalintake / 30)
                        {
                            subgroupconditionsmet = conditionpharmd = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionpharmd = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionpharmd = "Yes";
                    }

                    ViewBag.PharmaDCondition = conditionpharmd;
                    if (conditionbpharm == "No")
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }


                }

                ViewBag.PharmDPBrequiredFaculty = PharmDPBrequiredFaculty;
                if (PharmDPBrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDPBrequiredFaculty)
                    {
                        if (pharmadPBgroup1Subcount >= pharmadPBTotalintake / 10)
                        {
                            subgroupconditionsmet = conditionphardpb = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionphardpb = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionphardpb = "Yes";
                    }

                    ViewBag.PharmaDPBCondition = conditionphardpb;
                    if (conditionbpharm == "No" && conditionpharmd == "No")
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }

                }



                #endregion

                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();

                if (type == "Excel")
                {

                    //string strcollegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    Response.ClearContent();
                    Response.Buffer = true;
                    Response.AddHeader("content-disposition", "attachment; filename=" + randomcode + "-PharmacyFaculty.xls");
                    Response.ContentType = "application/vnd.ms-excel";//
                    return PartialView("_PharmacyCollegeFacultyWithIntakeNew", intakedetailsList.Where(c => c.shiftId == 1).ToList());
                }


                //if (type == "Excel")
                //{

                //    //string strcollegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                //    Response.ClearContent();
                //    Response.Buffer = true;
                //    Response.AddHeader("content-disposition", "attachment; filename=" + randomcode + "-Deficiency Report" + ".doc");
                //    // Response.AddHeader("content-disposition", "attachment; filename=" + randomcode + "-PharmacyFaculty.xls");
                //    Response.ContentType = "application/vnd.ms-word ";//application/vnd.ms-excel
                //    return PartialView("PharmacyCollegeFacultyDeficiencyInDoc", intakedetailsList.Where(c => c.shiftId == 1).ToList());
                //}
            }
            return View(intakedetailsList.Where(c => c.shiftId == 1).ToList());
        }

        [Authorize(Roles = "Admin,DataEntry,FacultyVerification")]
        [HttpPost]
        public ActionResult PharmacyCollegeFacultyWithIntakeNew(List<CollegeFacultyWithIntakeReport> facultyList)
        {
            var collegeId = facultyList.Select(c => c.collegeId).FirstOrDefault();
            var userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            var faculty = facultyList.Where(ld => ld.deficiency != null).ToList();
            if (faculty.Count > 0)
            {
                if (ModelState.IsValid)
                {
                    //foreach (var item in faculty)
                    //{
                    //    jntuh_bpharmacy_faculty_deficiency facultyDeficiency = new jntuh_bpharmacy_faculty_deficiency();
                    //    facultyDeficiency.CollegeId = item.collegeId;
                    //    facultyDeficiency.SpecializationId = item.specializationId;
                    //    if (item.PharmacySpec1 != null)
                    //    {
                    //        facultyDeficiency.BpharmacySpecialization = item.PharmacySpec1;
                    //    }
                    //    facultyDeficiency.ShiftId = item.shiftId;
                    //    facultyDeficiency.SpecializationWiseFaculty = item.specializationWiseFaculty;
                    //    facultyDeficiency.Deficiency = item.deficiency != null && (bool)item.deficiency;
                    //    facultyDeficiency.Shortage = item.shortage;
                    //    facultyDeficiency.IsActive = true;
                    //    facultyDeficiency.SpecializationId = item.specializationId;
                    //    if (item.id == 0)
                    //    {
                    //        facultyDeficiency.CreatedBy = userID;
                    //        facultyDeficiency.CreatedOn = DateTime.Now;
                    //        db.jntuh_bpharmacy_faculty_deficiency.Add(facultyDeficiency);
                    //        TempData["Success"] = "Data Saved Successfully..";
                    //    }
                    //    else
                    //    {
                    //        jntuh_bpharmacy_faculty_deficiency facultyDeficiencyupdate = db.jntuh_bpharmacy_faculty_deficiency.Find(item.id);
                    //        facultyDeficiencyupdate.SpecializationWiseFaculty = item.specializationWiseFaculty;
                    //        facultyDeficiencyupdate.Deficiency = item.deficiency != null && (bool)item.deficiency;
                    //        facultyDeficiencyupdate.Shortage = item.shortage;
                    //        facultyDeficiencyupdate.UpdatedBy = userID;
                    //        facultyDeficiencyupdate.UpdatedOn = DateTime.Now;
                    //        db.Entry(facultyDeficiencyupdate).State = EntityState.Modified;
                    //        TempData["Success"] = "Data Saved Successfully..";
                    //    }
                    //}
                    //db.SaveChanges();
                }

            }
            return RedirectToAction("PharmacyCollegeFacultyWithIntakeNew", new { collegeId = collegeId });
        }


        public string Header()
        {
            string header = string.Empty;
            header += "<table width='100%'>";
            header += "<tr><td align='center' width='80%' style='font-size: 16px; font-weight: normal;' colspan='2'><b><u> CORRIGENDUM: IN MODIFICATION TO THE DEFICIENCY REPORTS " +
                      "ISSUED ON 18:05:2017 AND 19:05:2017, THE INSTITUTIONS ARE HEREBY ISSUED THE FOLLOWING REVISED DEFICIENCY REPORTS AS PER REVISED PCI NORMS.</u></b></td></tr></br>";

            header += "<tr><td align='right' width='80%' style='font-size: 16px; font-weight: normal;' colspan='2'><b><u> Date : " + DateTime.Now.ToString("G") + "</u></b></td></tr></br>";
            header += "<tr></tr>";
            header += "</table>";
            header += "<table width='100%'>";
            header += "<tr>";
            header += "<td rowspan='4' align='center' width='20%'><img src='http://jntuhaac.in:76/Content/Images/new_logo.jpg' height='70' width='70' style='text-align: center' align='middle' /></td>";
            header += "<td align='center' width='80%' style='font-size: 14px; font-weight: normal;'><b>JAWAHARLAL NEHRU TECHNOLOGICAL UNIVERSITY HYDERABAD</b></td>";
            header += "</tr>";
            header += "<tr>";
            header += "<td align='center' style='font-size: 11px; font-weight: normal;'><b>KUKATPALLY, HYDERABAD, TELANGANA, INDIA - 500 085</b></td>";
            header += "</tr>";
            header += "<tr>";
            header += "<td  align='center' style='font-weight: normal;'><u><b>DEFICIENCY REPORT AS PER FORM 417</b></u></td>";
            header += "</tr>";
            header += "<tr>";
            header += "<td  align='center' style='font-weight: normal;'><u><b>(for Academic Year 2017-2018)</b></u></td>";
            header += "</tr>";
            header += "</table>";
            return header;
        }

        public string CollegeInformation(int? collegeID)
        {
            string collegeInformation = string.Empty;

            jntuh_college college = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeID).Select(c => c).FirstOrDefault();

            collegeInformation += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
            collegeInformation += "<tr>";
            collegeInformation += "<td align='left' width='75%'><b>College Name: </b><u>" + college.collegeName + "</u>";
            collegeInformation += "<td align='left' width='25%'><b>CC:  </b><u>" + college.collegeCode + "</u></td>";
            collegeInformation += "</tr>";

            collegeInformation += "</table>";

            return collegeInformation;
        }

        public string Principal(int? collegeID)
        {
            var principal = string.Empty;
            var Reason = string.Empty;
            var OriginalReason = string.Empty;
            //var college = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeID).Select(c => c).FirstOrDefault();
            var facultydata = new FacultyRegistration();
            var principaldata = db.jntuh_college_principal_registered.FirstOrDefault(i => i.collegeId == collegeID);

            if (principaldata != null)
            {
                var regdata = db.jntuh_registered_faculty.FirstOrDefault(i => i.RegistrationNumber == principaldata.RegistrationNumber);

                if (regdata != null)
                {
                    facultydata.FirstName = regdata.FirstName;
                    facultydata.LastName = regdata.LastName;
                    facultydata.RegistrationNumber = regdata.RegistrationNumber;
                    //if (regdata.Absent == true)
                    //{
                    //    Reason = "NOT AVAILABLE" + ",";
                    //}
                    //if (regdata.NotQualifiedAsperAICTE == true)
                    //{
                    //    Reason += "NOT QUALIFIED " + ",";
                    //}
                    //if (regdata.InvalidPANNumber == true)
                    //{
                    //    Reason += "NO PAN" + ",";
                    //}
                    //if (regdata.FalsePAN == true)
                    //{
                    //    Reason += "FALSE PAN" + ",";
                    //}
                    //if (regdata.NoSCM == true)
                    //{
                    //    Reason += "NO SCM/RATIFICATION" + ",";
                    //}
                    //if (regdata.IncompleteCertificates == true)
                    //{
                    //    Reason += "Incomplete Certificates" + ",";
                    //}
                    //if (regdata.PHDundertakingnotsubmitted == true)
                    //{
                    //    Reason += "No Undertaking" + ",";
                    //}
                    //if (regdata.Blacklistfaculy == true)
                    //{
                    //    Reason += "Blacklisted" + ",";
                    //}
                    if (!string.IsNullOrEmpty(regdata.DeactivationReason))
                    {
                        Reason = "Dr. " + facultydata.FirstName.First().ToString().ToUpper() + facultydata.FirstName.Substring(1) + " " + facultydata.LastName.First().ToString().ToUpper() + facultydata.LastName.Substring(1);
                        //Reason.Substring(0, Reason.Length - 1);
                        facultydata.DeactivationNew = "Yes";
                        OriginalReason = regdata.DeactivationReason;
                    }
                    else
                    {
                        Reason = "Dr. " + facultydata.FirstName.First().ToString().ToUpper() + facultydata.FirstName.Substring(1) + " " + facultydata.LastName.First().ToString().ToUpper() + facultydata.LastName.Substring(1);
                        facultydata.DeactivationNew = "";

                    }

                }
            }

            else
            {
                Reason = "NOT AVAILABLE";
                facultydata.DeactivationNew = "Yes";
            }

            principal += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
            principal += "<tr>";
            //principal += "<td align='left'><b>Principal: </b><img alt='' src='http://112.133.193.228:75//Content/Images/checkbox_no.png' height='16' width='16' /> Qualified &nbsp; <img alt='' src='http://112.133.193.228:75//Content/Images/checkbox_no.png' height='16' width='16' /> Ratified &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; Deficiency: <img alt='' src='http://112.133.193.228:75//Content/Images/checkbox_no.png' height='16' width='16' /> Yes <img alt='' src='http://112.133.193.228:75//Content/Images/checkbox_no.png' height='16' width='16' /> No";
            principal += "<td align='left'><b>Principal: </b>" + Reason + "&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;";
            if (!string.IsNullOrEmpty(facultydata.DeactivationNew))
            principal += "<b> Deficiency: </b>" + facultydata.DeactivationNew + "&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;";
            if (!string.IsNullOrEmpty(OriginalReason))
            principal += "<b> Reason: </b>" + OriginalReason;
            principal += "</td>";
            principal += "</tr>";
            principal += "</table>";

            return principal;
        }


        public ActionResult Deficiencies(string id)
        {
            if (!string.IsNullOrEmpty(id))
            {
                //int collegeID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(id.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]));
                int collegeID = Convert.ToInt32(id);
                var randomid = UAAAS.Models.Utilities.EncryptString(id.ToString(), System.Web.Configuration.WebConfigurationManager.AppSettings["CryptoKey"]);
                Response.ClearContent();
                Response.ClearHeaders();
                Response.Buffer = true;
                string collegeCode = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeID).Select(c => c.collegeCode).FirstOrDefault();
                Response.AddHeader("content-disposition", "attachment; filename=" + collegeCode + "-Deficiency-Report -" + randomid + ".doc");
                Response.ContentType = "application/vnd.ms-word ";
                Response.Charset = string.Empty;
                StringBuilder str = new StringBuilder();
                str.Append(Header());
                str.Append("<br />");
                str.Append(CollegeInformation(collegeID));
                str.Append("<br />");
                str.Append(Principal(collegeID));
                str.Append("<br />");
                //str.Append(CommitteeMembers(collegeID));
                //str.Append("<br />");
                str.Append(DeficienciesInFaculty(collegeID));
                //str.Append("<br />");
                //str.Append(PharmacyInformation());
                str.Append("<br />");
                str.Append(DeficiencyCollegeLabsAnnexure(collegeID));
                //str.Append(DeficienciesInLabs(collegeID));
                //str.Append("<br />");
                //str.Append(CollegeLabsAnnexure(collegeID));
                str.Append("<br />");

                Document pdfDoc = new Document(PageSize.A4.Rotate(), 60, 50, 60, 60);

                pdfDoc.SetPageSize(iTextSharp.text.PageSize.A4.Rotate());
                pdfDoc.SetMargins(60, 50, 60, 60);


                //Watermark
                //PdfReader pdfReader = new PdfReader(strFileLocation);
                //PdfStamper pdfStamper = new PdfStamper(pdfReader, new FileStream(strFileLocationOut, FileMode.Create, FileAccess.Write, FileShare.None));
                //iTextSharp.text.Image img = iTextSharp.text.Image.GetInstance(WatermarkLocation);
                //img.SetAbsolutePosition(100, 300);
                //PdfContentByte waterMark;
                //for (int pageIndex = 1; pageIndex <= pdfReader.NumberOfPages; pageIndex++)
                //{
                //    waterMark = pdfStamper.GetOverContent(pageIndex);
                //    waterMark.AddImage(img);
                //}

                //pdfStamper.FormFlattening = true;
                //pdfStamper.Close();

                //End


                string path = Server.MapPath("~/Content/PDFReports/PharmacyDeficiencyReports/");

                if (!Directory.Exists(path))
                {
                    Directory.CreateDirectory(path);
                }

                path = path + collegeCode + "-" + DateTime.Now.ToString("yyyMMddHHmmss") + ".pdf";
                PdfWriter pdfWriter = PdfWriter.GetInstance(pdfDoc, new FileStream(path, FileMode.Create));

                pdfDoc.Open();

                List<IElement> parsedHtmlElements = HTMLWorker.ParseToList(new StringReader(str.ToString()), null);

                foreach (var htmlElement in parsedHtmlElements)
                {
                    pdfDoc.Add((IElement)htmlElement);
                }

                pdfDoc.Close();

                Response.Output.Write(str.ToString());
                Response.Flush();
                Response.End();
            }

            return View();
        }



        #region WaterMarkCode
        //private static byte[] AddWatermark(byte[] bytes, BaseFont baseFont, string watermarkText)
        //{
        //    using (var ms = new MemoryStream(10 * 1024))
        //    {
        //        using (var reader = new PdfReader(bytes))
        //        using (var stamper = new PdfStamper(reader, ms))
        //        {
        //            var pages = reader.NumberOfPages;
        //            for (var i = 1; i <= pages; i++)
        //            {
        //                var dc = stamper.GetOverContent(i);
        //                AddWaterMarkText(dc, watermarkText, baseFont, 50, 45, BaseColor.GRAY, reader.GetPageSizeWithRotation(i));
        //            }
        //            stamper.Close();
        //        }
        //        return ms.ToArray();
        //    }
        //}

        //public static void AddWaterMarkText(PdfContentByte pdfData, string watermarkText, BaseFont font, float fontSize, float angle, BaseColor color, Rectangle realPageSize)
        //{
        //    var gstate = new PdfGState { FillOpacity = 0.35f, StrokeOpacity = 0.3f };
        //    pdfData.SaveState();
        //    pdfData.SetGState(gstate);
        //    pdfData.SetColorFill(color);
        //    pdfData.BeginText();
        //    pdfData.SetFontAndSize(font, fontSize);
        //    var x = (realPageSize.Right + realPageSize.Left) / 2;
        //    var y = (realPageSize.Bottom + realPageSize.Top) / 2;
        //    pdfData.ShowTextAligned(Element.ALIGN_CENTER, watermarkText, x, y, angle);
        //    pdfData.EndText();
        //    pdfData.RestoreState();
        //}
        #endregion



        //LABS
        public List<Lab> collegeLabs(int? collegeID)
        {
            List<Lab> lstlaboratories = new List<Lab>();
            List<Lab> collegeLabMaster = new List<Lab>();
            var jntuh_college_laboratories_deficiency = db.jntuh_college_laboratories_deficiency.Where(c => c.CollegeId == collegeID).ToList();

            string strcollegecode = db.jntuh_college_randamcodes.Where(r => r.CollegeId == collegeID).Select(r => r.RandamCode).FirstOrDefault();
            int[] specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeID).Select(e => e.specializationId).Distinct().ToArray();

            string CollegeAffiliationStatus = db.jntuh_college_affiliation.Where(u => u.collegeId == collegeID && u.affiliationTypeId == 7).Select(u => u.affiliationStatus).FirstOrDefault();


            if (CollegeAffiliationStatus == "Yes")
            {
                collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
                                                      .Where(l => specializationIds.Contains(l.SpecializationID))
                                                      .Select(l => new Lab
                                                      {
                                                          ////// EquipmentID=l.id,                                                               
                                                          degreeId = l.DegreeID,
                                                          degree = l.jntuh_degree.degree,
                                                          degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
                                                          departmentId = l.DepartmentID,
                                                          department = l.jntuh_department.departmentName,
                                                          specializationId = l.SpecializationID,
                                                          specializationName = l.jntuh_specialization.specializationName,
                                                          year = l.Year,
                                                          Semester = l.Semester,
                                                          Labcode = l.Labcode,
                                                          LabName = l.LabName
                                                      })
                                                      .OrderBy(l => l.degreeDisplayOrder)
                                                      .ThenBy(l => l.department)
                                                      .ThenBy(l => l.specializationName)
                                                      .ThenBy(l => l.year).ThenBy(l => l.Semester).Distinct()
                                                      .ToList();
            }
            else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
            {
                collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
                                                           .Where(l => specializationIds.Contains(l.SpecializationID) && l.Labcode != "TMP-CL")
                                                           .Select(l => new Lab
                                                           {
                                                               ////// EquipmentID=l.id,                                                               
                                                               degreeId = l.DegreeID,
                                                               degree = l.jntuh_degree.degree,
                                                               degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
                                                               departmentId = l.DepartmentID,
                                                               department = l.jntuh_department.departmentName,
                                                               specializationId = l.SpecializationID,
                                                               specializationName = l.jntuh_specialization.specializationName,
                                                               year = l.Year,
                                                               Semester = l.Semester,
                                                               Labcode = l.Labcode,
                                                               LabName = l.LabName
                                                           })
                                                           .OrderBy(l => l.degreeDisplayOrder)
                                                           .ThenBy(l => l.department)
                                                           .ThenBy(l => l.specializationName)
                                                           .ThenBy(l => l.year).ThenBy(l => l.Semester).Distinct()
                                                           .ToList();
            }



            var jntuh_college_laboratories = db.jntuh_college_laboratories_dataentry2.AsNoTracking().Where(l => l.CollegeID == collegeID).ToList();

            foreach (var item in collegeLabMaster)
            {
                Lab lstlabs = new Lab();
                lstlabs.collegeId = (int)collegeID;
                lstlabs.EquipmentID = item.EquipmentID;
                lstlabs.degree = item.degree;
                lstlabs.department = item.department;
                lstlabs.specializationName = item.specializationName;
                lstlabs.specializationId = item.specializationId;
                lstlabs.Semester = item.Semester;
                lstlabs.year = item.year;
                lstlabs.Labcode = item.Labcode;
                //lstlabs.RandomId = (int)rid;
                lstlabs.LabName = item.LabName;
                lstlabs.EquipmentNo = 1;
                lstlabs.RandomCode = strcollegecode;
                lstlabs.degreeDisplayOrder = item.degreeDisplayOrder;
                if (jntuh_college_laboratories_deficiency.Count() != 0)
                {
                    lstlabs.deficiency = jntuh_college_laboratories_deficiency.Where(ld => ld.LabCode == item.Labcode && ld.Year == item.year && ld.Semister == item.Semester && ld.CollegeId == collegeID).Select(ld => ld.Deficiency).FirstOrDefault();
                    lstlabs.id = jntuh_college_laboratories_deficiency.Where(ld => ld.LabCode == item.Labcode && ld.CollegeId == collegeID).Select(ld => ld.Id).FirstOrDefault();
                }
                else
                {
                    lstlabs.deficiency = null;
                    lstlabs.id = 0;
                }
                lstlaboratories.Add(lstlabs);
            }

            lstlaboratories = lstlaboratories.OrderBy(l => l.degreeDisplayOrder).ThenBy(l => l.department).ThenBy(l => l.specializationName)
                                             .ThenBy(l => l.year).ThenBy(l => l.Semester).Distinct().ToList();

            return lstlaboratories;
        }

        public string CollegeLabsAnnexure(int? collegeID)
        {
            string annexure = string.Empty;
            List<FacultyVerificationController.AnonymousLabclass> collegeLabAnonymousLabclass = new List<FacultyVerificationController.AnonymousLabclass>();
            int[] specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeID).Select(e => e.specializationId).Distinct().ToArray();
            List<Lab> collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
                                                        .Where(l => specializationIds.Contains(l.SpecializationID))
                                                        .Select(l => new Lab
                                                        {
                                                            EquipmentID = l.id,
                                                            degreeId = l.DegreeID,
                                                            degree = l.jntuh_degree.degree,
                                                            degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
                                                            departmentId = l.DepartmentID,
                                                            department = l.jntuh_department.departmentName,
                                                            specializationId = l.SpecializationID,
                                                            specializationName = l.jntuh_specialization.specializationName,
                                                            year = l.Year,
                                                            Semester = l.Semester,
                                                            Labcode = l.Labcode,
                                                            LabName = l.LabName,
                                                            EquipmentName = l.EquipmentName
                                                        })
                                                        .OrderBy(l => l.degreeDisplayOrder)
                                                        .ThenBy(l => l.department)
                                                        .ThenBy(l => l.specializationName)
                                                        .ThenBy(l => l.year).ThenBy(l => l.Semester)
                                                        .ToList();



            string CollegeAffiliationStatus = db.jntuh_college_affiliation.Where(u => u.collegeId == collegeID && u.affiliationTypeId == 7).Select(u => u.affiliationStatus).FirstOrDefault();

            if (CollegeAffiliationStatus == "Yes")
            {
                collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
                                                           .Where(l => specializationIds.Contains(l.SpecializationID))
                                                           .Select(l => new FacultyVerificationController.AnonymousLabclass
                                                           {
                                                               id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeID).Select(l1 => l1.id).FirstOrDefault(),
                                                               EquipmentID = l.id,
                                                               LabName = l.LabName,
                                                               EquipmentName = l.EquipmentName,
                                                               LabCode = l.Labcode,
                                                           })
                                                           .OrderBy(l => l.LabName)
                                                           .ThenBy(l => l.EquipmentName)
                                                           .ToList();

            }
            else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
            {
                collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
                                                              .Where(l => specializationIds.Contains(l.SpecializationID) && l.Labcode != "TMP-CL")
                                                              .Select(l => new FacultyVerificationController.AnonymousLabclass
                                                              {
                                                                  id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeID).Select(l1 => l1.id).FirstOrDefault(),
                                                                  EquipmentID = l.id,
                                                                  LabName = l.LabName,
                                                                  EquipmentName = l.EquipmentName,
                                                                  LabCode = l.Labcode,
                                                              })
                                                              .OrderBy(l => l.LabName)
                                                              .ThenBy(l => l.EquipmentName)
                                                              .ToList();
            }








            var collegeEquipments = db.jntuh_college_laboratories_dataentry2.Where(l => l.CollegeID == collegeID).Select(l => l.EquipmentID).Distinct().ToArray();

            var list = collegeLabMaster.Where(c => !collegeEquipments.Contains(c.EquipmentID)).Select(c => new { EquipmentID = c.id, LabCode = c.Labcode, LabName = c.LabName, EquipmentName = c.EquipmentName })
                                       .OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

            var labDeficiencies = db.jntuh_college_laboratories_deficiency.Where(ld => ld.CollegeId == collegeID && ld.Deficiency == true).Select(ld => ld.LabCode).ToArray();

            var list1 = collegeLabAnonymousLabclass.OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();


            list = list.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();
            list1 = list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

            #region this code written by suresh

            int?[] labequipmentIds = list1.Select(i => i.EquipmentID).ToArray();

            int[] clgequipmentIDs =
                db.jntuh_college_laboratories.Where(
                    l => l.CollegeID == collegeID && labequipmentIds.Contains(l.EquipmentID))
                    .Select(i => i.EquipmentID)
                    .ToArray();

            list1 = list1.Where(l => !clgequipmentIDs.Contains((int)l.EquipmentID))
                    .ToList();


            #endregion




            //list
            if (list1.Count() > 0)
            {
                annexure += "<table width='100%' border='1' cellpadding='5' cellspacing='0'>";
                annexure += "<tr>";
                annexure += "<th align='center' colspan='3'>LIST OF EQUIPMENT NOT AVAILABLE</th>";
                annexure += "</tr>";
                annexure += "<tr>";
                annexure += "<th align='left'>S.No</th><th align='left'>Lab Name</th><th align='left'>Equipment Name</th>";
                annexure += "</tr>";
                string StrEquipment = ""; string Strlabcode = ""; string TD = "";
                int Rowspam = 0;
                int deptloop = 0;
                foreach (var item in list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList())
                {
                    if (item.LabCode == "114LAB" || item.LabCode == "118LAB" || item.LabCode == "18LAB" || item.LabCode == "19LAB")
                        StrEquipment = item.EquipmentName != null ? item.EquipmentName : "Hospital MOU not uploaded";
                    else
                        StrEquipment = item.EquipmentName != null ? item.EquipmentName : "No Equipment Details Uploaded";
                    if (Strlabcode == "")
                        Strlabcode = item.LabCode;
                    Rowspam = list1.Where(l => l.LabCode == item.LabCode).Count();
                    int indexnow = list1.IndexOf(item);
                    if (indexnow > 0 && list1[indexnow].LabCode == list1[indexnow - 1].LabCode)
                        deptloop = 1;
                    else if (indexnow > 0 && list1[indexnow].LabCode != list1[indexnow - 1].LabCode)
                        deptloop = 0;
                    if (deptloop != 1 && item.EquipmentName == null)
                    {
                        TD = "<td rowspan='" + Rowspam + "' align='left'>" + StrEquipment + "</td>";
                    }
                    else if (item.EquipmentName != null)

                        TD = "<td  align='left'>" + item.EquipmentName + "</td>";
                    //if (Strlabcode == item.LabCode)
                    //{
                    //    if (item.EquipmentName == null)
                    //    {
                    //        if (Rowspamcount==0)
                    //        {
                    //            Rowspam = list1.Where(l => l.LabCode == item.LabCode).Count();
                    //            TD = "<td rowspan='" + Rowspam + "' align='left'>" + StrEquipment + "</td>";
                    //            Rowspamcount ++;
                    //        }

                    //    }
                    //    else if (item.EquipmentName != null)
                    //        TD = "<td  align='left'>" + StrEquipment + "</td>";
                    //    if (Rowspamcount == Rowspam)
                    //        Rowspamcount = 0;
                    //    //else
                    //    //    TD = "<td  align='left'>" + StrEquipment + "</td>";
                    //}
                    //else
                    //{
                    //     if (item.EquipmentName != null)
                    //         TD = "<td  align='left'>" + StrEquipment + "</td>";
                    //     else if (item.EquipmentName == null)
                    //     {
                    //         Rowspam = list1.Where(l => l.LabCode == item.LabCode).Count();
                    //         TD = "<td rowspan='" + Rowspam + "' align='left'>" + StrEquipment + "</td>";
                    //     }

                    //}


                    annexure += "<tr>";
                    annexure += "<td align='left'>" + (list1.IndexOf(item) + 1) + "</td><td align='left'>" + item.LabName + "</td>" + TD + "";
                    //annexure += "<td align='left'>" + (list.IndexOf(item) + 1) + "</td><td align='left'>" + item.LabCode + "</td><td align='left'>" + item.LabName + "</td><td align='left'>" + item.EquipmentName + "</td>";
                    annexure += "</tr>";
                    StrEquipment = "";
                    Strlabcode = item.LabCode;
                    TD = "";
                }

                annexure += "</table>";
            }
            annexure += "</br><table width='100%'  cellspacing='0'></br>";
            annexure += "<tr><td align='right' width='80%' style='font-size: 14px; font-weight: normal;'> <b>Sd /-</b></td></tr>";
            annexure += "<tr><td align='right' width='80%' style='font-size: 14px; font-weight: normal;'> <b>REGISTRAR</b></td></tr></br></br>";
            annexure += "</br><tr><td align='center' width='80%' style='font-size: 14px; font-weight: normal;' colspan='2'><b>The College shall submit Appeal, if any through Online mode only in the format " +
                       "prescribed within 10 Days from the date of this letter." + "</b></td></tr></br>";
            annexure += "<tr><td></td></tr>"; annexure += "</table>";
            return annexure;
        }

        public string DeficienciesInLabs(int? collegeID)
        {
            string labs = string.Empty;

            labs += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
            labs += "<tr>";
            labs += "<td align='left'><b><u>Deficiencies in Laboratory</u></b> (Department/ Specialization Wise):";
            labs += "</tr>";
            labs += "</table>";

            List<Lab> labsCount = collegeLabs(collegeID);

            var deficiencies = labsCount.GroupBy(l => new { l.degree, l.department, l.specializationName })
                                        .Select(l => new { degree = l.Key.degree, department = l.Key.department, specializationName = l.Key.specializationName, deficiencies = string.Empty })
                                        .ToList();

            labs += "<table width='100%' border='1' cellpadding='3' cellspacing='0' style='border-color: #ccc;'>";
            labs += "<tr>";
            labs += "<th style='text-align: center; width: 5%;'>S.No</th>";
            labs += "<th style='text-align: left; width: 10%;'>Degree</th>";
            labs += "<th style='text-align: left; width: 10%;'>Department</th>";
            labs += "<th style='text-align: left; width: 20%;'>Specialization</th>";
            labs += "<th style='text-align: center; '>Names of the Labs with Deficiency (Details Annexed)</th>";
            labs += "</tr>";

            var labMaster = db.jntuh_lab_master.ToList();
            var collegeLabMaster = db.jntuh_college_laboratories_dataentry2.Where(l => l.CollegeID == collegeID).ToList();

            foreach (var item in deficiencies)
            {

                labs += "<tr>";
                labs += "<td style='text-align: center; width: 5%; '>" + (deficiencies.IndexOf(item) + 1) + "</td>";
                labs += "<td style=''>" + item.degree + "</td>";
                labs += "<td style=''>" + item.department + "</td>";
                labs += "<td style=''>" + item.specializationName + "</td>";

                string degreeType = db.jntuh_degree.Where(d => d.degree == item.degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                string[] labcodes = db.jntuh_college_laboratories_deficiency.Where(d => d.CollegeId == (int)collegeID && d.Deficiency == true).Select(d => d.LabCode).ToArray();
                //Hospital & Clinical Pharmacy
                var aa = labsCount.Where(l => l.specializationName == "Hospital & Clinical Pharmacy").ToList();
                var labsWithDeficiency = labsCount.Where(l => l.degree == item.degree && l.department == item.department && l.specializationName == item.specializationName && l.deficiency == true)
                    .Select(l => new { Deficiency = l.year + "-" + l.Semester + "-" + l.Labcode.Replace("-", "$") + "-" + l.specializationId }).Select(l => l.Deficiency).ToList();

                List<string> defs = new List<string>();
                labsWithDeficiency.ForEach(l =>
                {
                    if (l.Equals("No Equipement Uploaded"))
                    {
                        defs.Add(l);
                    }
                    else
                    {
                        string[] strLab = l.Split('-');

                        int specializationid = Convert.ToInt32(strLab[3]);
                        int year = Convert.ToInt32(strLab[0]);
                        int semester = Convert.ToInt32(strLab[1]);
                        string labCode = strLab[2].Replace("$", "-");


                        var requiredLabs = labMaster.Where(m => m.SpecializationID == specializationid && m.Year == year && m.Semester == semester && m.Labcode == labCode).Select(m => m.id).ToList();
                        int requiredCount = requiredLabs.Count();
                        int availableCount = collegeLabMaster.Where(m => requiredLabs.Contains(m.EquipmentID)).Count();
                        //  string[] labcodes = labMaster.Where(m => m.SpecializationID == specializationid).Select(m => m.Labcode).ToArray();
                        if (requiredCount > availableCount)
                        {
                            string labName = labMaster.Where(m => m.SpecializationID == specializationid && m.Year == year && m.Semester == semester && m.Labcode == labCode).Select(m => m.LabName).FirstOrDefault();
                            defs.Add(year + "-" + semester + "-" + labName);
                        }
                    }
                });

                labs += "<td style='; text-align: center'>" + (labsWithDeficiency.Count() == 0 ? "NIL" : (defs.Count() == 0 ? "NIL" : String.Join(", ", defs))) + "</td>";
                labs += "</tr>";
            }
            if (deficiencies.Count() == 0)
            {
                labs += "<tr>";
                labs += "<td colspan='5' style='text-align: center'>NIL";
                labs += "</td>";
                labs += "</tr>";
            }
            labs += "</table>";

            return labs;
        }

        public string PharmacyInformation()
        {
            string collegeInformation = string.Empty;

            collegeInformation += "<P style='text-align: center; vertical-align: top;'> <b><u>Faculty Requirement for Pharmacy<u/><b/><br/></P>";
            collegeInformation += "<table width='100%' border='1' cellpadding='3' cellspacing='0' style='border-color: #ccc;font-size:13px'>";
            collegeInformation += "<tr>";
            collegeInformation += "<th style='text-align: center; vertical-align: top;'>SNo</th>";
            collegeInformation += "<th style='text-align: center; vertical-align: top;' colspan='2'>Requirement</th>";
            //collegeInformation += "<th style='text-align: center; vertical-align: top;'>Eligibility</th>";
            collegeInformation += "<th style='text-align: center; vertical-align: top;'>Intake 60</th>";
            collegeInformation += "<th style='text-align: center; vertical-align: top;'>Intake 100</th>";

            collegeInformation += "</tr>";
            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u>1</u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><b>Group - I </b><br /> Department of Pharmaceutics</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'> Pharmaceutics / Pharmaceutical Technology / Industrial Pharmacy / Pharmaceutical Biotechnology </td>";
            //collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u> M.Pharm /M.S. </u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>5</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>6</td>";
            collegeInformation += "</tr>";

            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>2</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><b>Group - II </b><br />Department of Pharmaceutical Chemistry(Including Pharmaceutical Analysis)</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>Pharma chemistry / Pharma analysis / Quality Assurance /  Pharmaceutical and Food Analysis</td>";
            // collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u> M.Pharm /M.S. </u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>4</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>6</td>";
            collegeInformation += "</tr>";

            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>3</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><b>Group - III </b><br />Department of Pharmacology</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>Hospital and Clinical Pharmacy / Pharmacology / Clinical Pharmacy / Pharmacy Practice / Pharm.D.</td>";
            //collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'> M.Pharm /M.S. </td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>4</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>5 </td>";
            collegeInformation += "</tr>";

            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>4</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><b>Group - IV </b><br />Department of Pharmacognosy</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>Pharmacognosy / Chemistry of Natural Products / Phytochemistry /Phytopharmaceuticals</td>";
            // collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u> M.Pharm /M.S. </u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>3</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>3</td>";
            collegeInformation += "</tr>";

            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>5</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><b>Group - V </b><br />Department of Pharmacy Practice & related subjects * Pharmacy Practice subjects are not in B. Pharm Course</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>Any specialization from Group-I,II,III & IV </td>";
            //collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u> M.Pharm /M.S. </u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>0</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>3</td>";
            collegeInformation += "</tr>";

            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>Principal</td>";
            //collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u> M.Pharm /M.S. </u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>1</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>1</td>";
            collegeInformation += "</tr>";

            collegeInformation += "<tr>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>Total</td>";
            //collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'><u> M.Pharm /M.S. </u></td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>17</td>";
            collegeInformation += "<td class='col2' style='text-align: center; vertical-align: top;width:10px'>24 </td>";
            collegeInformation += "</tr>";

            collegeInformation += "</table>";

            return collegeInformation;
        }

        public List<CollegeFacultyWithIntakeReport> PharmacyCollegeFaculty(int? collegeId)
        {
            var colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();

            //colleges.Add(new { collegeId = 0, collegeName = "00-ALL Colleges" });

            ViewBag.Colleges = colleges.OrderBy(c => c.collegeId).ThenBy(c => c.collegeName).ToList();



            var randomcode = "";
            if (collegeId != null)
            {
                randomcode = db.jntuh_college_randamcodes.FirstOrDefault(i => i.CollegeId == collegeId).RandamCode;
            }
            var pharmadTotalintake = 0;
            var pharmadPBTotalintake = 0;

            #region PharmacyCode
            List<CollegeIntakeExisting> collegeIntakeExisting = new List<CollegeIntakeExisting>();
            List<CollegeFacultyWithIntakeReport> intakedetailsList = new List<CollegeFacultyWithIntakeReport>();
            if (collegeId != null)
            {
                var jntuh_Bpharmacy_faculty_deficiency = db.jntuh_bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId).ToList();
                var jntuh_specialization = db.jntuh_specialization.ToList();

                int[] collegeIDs = null;
                int facultystudentRatio = 0;
                decimal facultyRatio = 0m;
                if (collegeId != 0)
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true && c.id == collegeId).Select(c => c.id).ToArray();
                }
                else
                {
                    collegeIDs = db.jntuh_college.Where(c => c.isActive == true).Select(c => c.id).ToArray();
                }
                var jntuh_academic_year = db.jntuh_academic_year.ToList();
                var jntuh_college = db.jntuh_college.Where(c => c.isActive == true).ToList();
                var jntuh_faculty_student_ratio_norms = db.jntuh_faculty_student_ratio_norms.Where(f => f.isActive == true).ToList();
                var jntuh_degree = db.jntuh_degree.ToList();

                int presentYear = jntuh_academic_year.Where(a => a.isActive == true && a.isPresentAcademicYear == true).Select(a => a.actualYear).FirstOrDefault();
                int AY1 = jntuh_academic_year.Where(a => a.actualYear == (presentYear + 1)).Select(a => a.id).FirstOrDefault();
                int AY2 = jntuh_academic_year.Where(a => a.actualYear == (presentYear)).Select(a => a.id).FirstOrDefault();
                int AY3 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 1)).Select(a => a.id).FirstOrDefault();
                int AY4 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 2)).Select(a => a.id).FirstOrDefault();
                int AY5 = jntuh_academic_year.Where(a => a.actualYear == (presentYear - 3)).Select(a => a.id).FirstOrDefault();
                List<jntuh_college_intake_existing> intake = db.jntuh_college_intake_existing.Where(i => collegeIDs.Contains(i.collegeId)).ToList();
                foreach (var item in intake)
                {
                    CollegeIntakeExisting newIntake = new CollegeIntakeExisting();
                    newIntake.id = item.id;
                    newIntake.collegeId = item.collegeId;
                    newIntake.academicYearId = item.academicYearId;
                    newIntake.shiftId = item.shiftId;
                    newIntake.isActive = item.isActive;
                    newIntake.nbaFrom = item.nbaFrom;
                    newIntake.nbaTo = item.nbaTo;
                    newIntake.specializationId = item.specializationId;
                    newIntake.Specialization = item.jntuh_specialization.specializationName;
                    newIntake.DepartmentID = item.jntuh_specialization.jntuh_department.id;
                    newIntake.Department = item.jntuh_specialization.jntuh_department.departmentName;
                    newIntake.degreeID = item.jntuh_specialization.jntuh_department.jntuh_degree.id;
                    newIntake.Degree = item.jntuh_specialization.jntuh_department.jntuh_degree.degree;
                    newIntake.degreeDisplayOrder = item.jntuh_specialization.jntuh_department.jntuh_degree.degreeDisplayOrder;
                    newIntake.shiftId = item.shiftId;
                    newIntake.Shift = item.jntuh_shift.shiftName;
                    collegeIntakeExisting.Add(newIntake);
                }
                collegeIntakeExisting = collegeIntakeExisting.AsEnumerable().GroupBy(r => new { r.specializationId, r.shiftId, r.collegeId }).Select(r => r.First()).ToList();

                //college Reg nos
                var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeId).ToList();
                string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

                var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeId).ToList();
                var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

                //education categoryIds UG,PG,PHD...........

                var jntuh_specializations = db.jntuh_specialization.ToList();
                var jntuh_departments = db.jntuh_department.ToList();
                int pharmacyDeptId = jntuh_departments.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();
                var collegeaffliations = db.jntuh_college_affliationstatus.AsNoTracking().ToList();
                var jntuh_education_category = db.jntuh_education_category.ToList();

                //var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
                //    : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();


                var registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();
                var scm = registeredFaculty.Where(i => i.NoSCM == true).ToList();
                //Reg nos related online facultyIds
                var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false)//&& rf.Noform16Verification == false && rf.NoForm16 == false
                                                        && (rf.NoSCM17 == false) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false) && (rf.Blacklistfaculy == false) && (rf.Noclass == false || rf.Noclass == null) && rf.NoRelevantUG == "No" && rf.NoRelevantPG == "No" && rf.NORelevantPHD == "No" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS == "Y"))
                                                        .Select(rf => new
                                                        {
                                                            RegistrationNumber = rf.RegistrationNumber,
                                                            Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                                                            //Department=
                                                            HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                            IsApproved = rf.isApproved,
                                                            PanNumber = rf.PANNumber,
                                                            AadhaarNumber = rf.AadhaarNumber,
                                                            PGSpecializationId = rf.PGSpecialization,
                                                            UGDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.DepartmentId).FirstOrDefault(),
                                                            SpecializationId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.SpecializationId).FirstOrDefault(),
                                                            jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                                                        }).ToList();
                jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
                var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
                {
                    RegistrationNumber = rf.RegistrationNumber,
                    Department = rf.Department,
                    //Department=rf.UGDepartmentId!=null?jntuh_departments.Where(D=>D.id==rf.UGDepartmentId).Select(D=>D.departmentName).FirstOrDefault():"",
                    PGSpecializationId = rf.PGSpecializationId,
                    UGDepartmentId = rf.UGDepartmentId,
                    HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                    Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                    SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                    PanNumber = rf.PanNumber,
                    AadhaarNumber = rf.AadhaarNumber,
                    //registered_faculty_specialization = rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                    registered_faculty_specialization = rf.SpecializationId != null ? jntuh_specializations.Where(S => S.id == rf.SpecializationId).Select(S => S.specializationName).FirstOrDefault() : rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : "",
                }).ToList();


                var bpharmacyintake = 0;
                decimal BpharcyrequiredFaculty = 0;
                decimal PharmDrequiredFaculty = 0;
                decimal PharmDPBrequiredFaculty = 0;
                var pharmacydeptids = new[] { 26, 27, 36, 39 };
                if (collegeId == 42)
                    jntuh_registered_faculty = jntuh_registered_faculty.Where(R => R.UGDepartmentId == 26 || R.UGDepartmentId == 27 || R.UGDepartmentId == 36 || R.UGDepartmentId == 39).ToList();
                collegeIntakeExisting = collegeIntakeExisting.Where(i => pharmacydeptids.Contains(i.DepartmentID)).ToList();
                foreach (var item in collegeIntakeExisting)
                {
                    CollegeFacultyWithIntakeReport intakedetails = new CollegeFacultyWithIntakeReport();
                    int phdFaculty = 0;
                    int pgFaculty = 0;
                    int ugFaculty = 0;

                    intakedetails.collegeId = item.collegeId;
                    intakedetails.collegeCode = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeCode).FirstOrDefault();
                    intakedetails.collegeName = jntuh_college.Where(c => c.id == item.collegeId).Select(c => c.collegeName).FirstOrDefault();
                    intakedetails.collegeRandomCode = randomcode;
                    intakedetails.Degree = item.Degree;
                    intakedetails.Department = item.Department;
                    intakedetails.Specialization = item.Specialization;
                    intakedetails.specializationId = item.specializationId;
                    intakedetails.DepartmentID = item.DepartmentID;
                    intakedetails.shiftId = item.shiftId;
                    var status = collegeaffliations.Where(i => i.DegreeID == item.degreeID && i.SpecializationId == item.specializationId && i.CollegeId == item.collegeId).ToList();
                    if (status.Count > 0)
                    {
                        intakedetails.AffliationStatus = "A";
                    }
                    intakedetails.approvedIntake1 = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake2 = GetIntake(item.collegeId, AY2, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake3 = GetIntake(item.collegeId, AY3, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake4 = GetIntake(item.collegeId, AY4, item.specializationId, item.shiftId, 1);
                    intakedetails.approvedIntake5 = GetIntake(item.collegeId, AY5, item.specializationId, item.shiftId, 1);
                    //intakedetails.ProposedIntake = GetIntake(item.collegeId, AY1, item.specializationId, item.shiftId, 1);
                    facultystudentRatio = Convert.ToInt32(jntuh_faculty_student_ratio_norms.Where(fn => fn.degreeId == item.degreeID).Select(fn => fn.Norms).FirstOrDefault().Split(':')[1].ToString());

                    if (item.Degree == "B.Tech")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake2) + (intakedetails.approvedIntake3) +
                                                    (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //intakedetails.A416TotalFaculty = registeredFaculty.Where(i => i.DepartmentId == item.DepartmentID && (i.jntuh_department.jntuh_degree.degree == "B.Tech" || i.jntuh_department.jntuh_degree.degree == "B.Pharmacy")).ToList().Count;
                    }
                    else if (item.Degree == "M.Tech" || item.Degree == "MBA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);

                    }
                    else if (item.Degree == "MCA")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) /
                                       Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        //intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        //var total = intakedetails.totalIntake >= 400 ? 100 : 60;
                        //bpharmacyintake = total;

                        int PharmDCount = collegeIntakeExisting.Count(C => C.Degree == "Pharm.D");
                        bpharmacyintake = intakedetails.approvedIntake1>=100?100:60;
                        if (PharmDCount > 0)
                            intakedetails.requiredFaculty = intakedetails.approvedIntake1 >= 100 ? 35 : 25;
                        else
                            intakedetails.requiredFaculty = intakedetails.approvedIntake1 >= 100 ? 25 : 15;

                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        //intakedetails.ProposedIntake = intakedetails.approvedIntake1;
                        intakedetails.ProposedIntake = 15;
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 12;
                        //intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                        intakedetails.requiredFaculty = 2;

                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.totalIntake = pharmadTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 15;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);

                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.totalIntake = pharmadPBTotalintake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / 10;
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }
                    else //MAM MTM Pharm.D Pharm.D PB
                    {
                        intakedetails.totalIntake = (intakedetails.approvedIntake1) + (intakedetails.approvedIntake2) +
                                                    (intakedetails.approvedIntake3) + (intakedetails.approvedIntake4) +
                                                    (intakedetails.approvedIntake5);
                        facultyRatio = Convert.ToDecimal(intakedetails.totalIntake) / Convert.ToDecimal(facultystudentRatio);
                        intakedetails.requiredFaculty = Math.Round(facultyRatio, 2);
                    }


                    intakedetails.degreeDisplayOrder = item.degreeDisplayOrder;

                    //====================================
                    // intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(s => s.SpecializationId == item.specializationId).Count();



                    string strdegreetype = jntuh_degree.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();
                    if (strdegreetype == "UG")
                    {
                        if (item.Degree == "B.Pharmacy")
                        {
                            intakedetails.SortId = 1;
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == "Pharmacy" && f.Recruitedfor == "UG").Count();
                            //intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.UGDepartmentId == "26" && f.Recruitedfor == "UG").Count();
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Where(f => f.Department == item.Department && f.Recruitedfor == "UG").Count();
                        }
                    }

                    if (strdegreetype == "PG")
                    {
                        if (item.Degree == "M.Pharmacy")
                        {
                            intakedetails.SortId = 4;
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == "Pharmacy" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.PGSpecializationId == item.specializationId);
                            //intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.UGDepartmentId == "26" && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                            switch (item.specializationId)
                            {
                                case 114://Hospital & Clinical Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice/Pharm D";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP" || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization == "PHARMD".ToUpper() || f.registered_faculty_specialization == "PHARM D" || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));

                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == 114));
                                    //phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Hospital & Clinical Pharmacy".ToUpper()));
                                    break;
                                case 116://Pharmaceutical Analysis & Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharma Chemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA" || f.registered_faculty_specialization == "PA RA" || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 118://Pharmaceutical Management & Regulatory Affaires
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PMRA/Regulatory Affairs/Pharmaceutics";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PMRA".ToUpper() || f.registered_faculty_specialization == "Regulatory Affairs".ToUpper() || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Management & Regulatory Affaires".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 120://Pharmaceutics
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));//|| f.registered_faculty_specialization == "Pharmaceutics".ToUpper();
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));// || f.registered_faculty_specialization == "Pharmaceutics".ToUpper()
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 122://Pharmacology
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacology/Pharmacognosy/HCP/Pharma Practice";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "HCP".ToUpper() || f.registered_faculty_specialization == "Pharmacy Practice".ToUpper() || f.registered_faculty_specialization.Contains("HOSPITAL".ToUpper()) || f.registered_faculty_specialization == "Pharmacology".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 124://Quality Assurance & Pharma Regulatory Affairs
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    //var s = jntuh_registered_faculty.Where(f => (f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                    //             f.registered_faculty_specialization == "QA".ToUpper() ||
                                    //             f.registered_faculty_specialization == "PA RA".ToUpper() ||
                                    //             f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA"))).ToList();
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA") || f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 115://Industrial Pharmacy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 121://Pharmacognosy
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmacognosy/Pharma Biotechnology/Pharmacology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmacology".ToUpper() || f.registered_faculty_specialization == "Pharmacognosy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 117://Pharmaceutical Chemistry
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA")));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 119://Pharmaceutical Technology (2011-12)
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in Pharmaceutics/Pharmaceutical Technology/Industrial Pharmacy/Pharma Biotechnology";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "Pharmaceutics".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper() || f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper() || f.registered_faculty_specialization == "Pharmacy Biotechnology".ToUpper() || f.registered_faculty_specialization.Contains("Biotechnology".ToUpper()) || f.registered_faculty_specialization.Contains("Bio-Technology".ToUpper()) || f.registered_faculty_specialization.Contains("Pharmaceutical Technology (2011-12)".ToUpper())));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                case 123://Quality Assurance
                                    intakedetails.PharmacySpec1 = "1 PHD & Specialized in PAQA/QA/PA RA/Pharmaceuticalchemistry";
                                    //intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.SpecializationId == item.specializationId || f.registered_faculty_specialization == "PAQA".ToUpper() || f.registered_faculty_specialization == "PA & QA".ToUpper() || f.registered_faculty_specialization == "QA".ToUpper() || f.registered_faculty_specialization == "PA RA".ToUpper() || f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper() || f.registered_faculty_specialization.Contains("QAPRA")));
                                    intakedetails.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    phdFaculty = jntuh_registered_faculty.Count(f => ("Ph.D" == f.HighestDegree) && (f.PGSpecializationId == item.specializationId));
                                    intakedetails.AvailableFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == item.specializationId);
                                    break;
                                default:
                                    intakedetails.PharmacySpec1 = "";
                                    intakedetails.PharmacyspecializationWiseFaculty = 0;
                                    phdFaculty = 0;
                                    break;
                            }
                        }
                        else
                        {
                            intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.Department == item.Department && (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                        }
                    }

                    if (strdegreetype == "Dual Degree")
                    {
                        intakedetails.specializationWiseFaculty = jntuh_registered_faculty.Count(f => (f.Recruitedfor == "PG" || f.Recruitedfor == "UG&PG") && f.SpecializationId == item.specializationId);
                    }
                    intakedetails.id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.SpecializationId == item.specializationId && fd.ShiftId == item.shiftId).Select(fd => fd.Id).FirstOrDefault();

                    if (intakedetails.id > 0)
                    {
                        int? swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                        if (swf != null)
                        {
                            intakedetails.specializationWiseFaculty = (int)swf;
                        }
                        intakedetails.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.Deficiency).FirstOrDefault();
                        intakedetails.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == intakedetails.id).Select(fd => fd.Shortage).FirstOrDefault();
                    }

                    //============================================

                    int noPanOrAadhaarcount = 0;

                    if (item.Degree == "B.Pharmacy")
                    {
                        intakedetails.SortId = 1;
                        BpharcyrequiredFaculty = Math.Round(intakedetails.requiredFaculty);
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        //phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";
                    }
                    else if (item.Degree == "M.Pharmacy")
                    {
                        intakedetails.SortId = 4;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy" && f.PGSpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        //phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy" && f.SpecializationId == item.specializationId);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                        intakedetails.Department = "Pharmacy";
                    }
                    else if (item.Degree == "Pharm.D")
                    {
                        intakedetails.SortId = 2;
                        PharmDRequiredFaculty = PharmDrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else if (item.Degree == "Pharm.D PB")
                    {
                        intakedetails.SortId = 3;
                        PharmDPBRequiredFaculty = PharmDPBrequiredFaculty = intakedetails.requiredFaculty;
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB" && f.SpecializationId == item.specializationId);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == pharmacyDeptId && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }
                    else
                    {
                        ugFaculty = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == item.Department);
                        pgFaculty = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == item.Department);
                        phdFaculty = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == item.Department);
                        noPanOrAadhaarcount = registeredFaculty.Count(f => f.DepartmentId == item.DepartmentID && f.PANNumber == null && f.AadhaarNumber == null && (f.isApproved == null || f.isApproved == true));
                    }

                    intakedetails.phdFaculty = phdFaculty;
                    intakedetails.pgFaculty = pgFaculty;
                    intakedetails.ugFaculty = ugFaculty;
                    intakedetails.totalFaculty = (ugFaculty + pgFaculty + phdFaculty);

                    intakedetails.facultyWithoutPANAndAadhaar = noPanOrAadhaarcount;
                    //=============//


                    //intakedetails.PharmacySpecilaizationList = pharmacyspeclist;
                    intakedetailsList.Add(intakedetails);
                }
            #endregion

                var pharmdspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Practice",
                    //    Specialization = "Pharm.D"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharm D",
                    //    Specialization = "Pharm.D"
                    //}
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)",
                        Specialization = "Pharm.D"
                    }
                };
                var pharmdpbspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Practice",
                    //    Specialization = "Pharm.D PB"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharm D",
                    //    Specialization = "Pharm.D PB"
                    //}
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)",
                        Specialization = "Pharm.D PB"
                    }
                };

                var pharmacyspeclist = new List<PharmacySpecilaizationList>
                {
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmaceutics",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Industrial Pharmacy",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy BioTechnology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmaceutical Technology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmaceutical Chemistry",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacy Analysis",
                    //    Specialization = "B.Pharmacy"
                    //},

                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "PAQA",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacology",
                    //    Specialization = "B.Pharmacy"
                    //},
                    ////new PharmacySpecilaizationList()
                    ////{
                    ////    PharmacyspecName = "Pharma D",
                    ////    Specialization = "B.Pharmacy"
                    ////},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Pharmacognosy",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "English",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Mathematics",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Computers",
                    //    Specialization = "B.Pharmacy"
                    //},new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Computer Science",
                    //    Specialization = "B.Pharmacy"
                    //},
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Zoology",
                    //    Specialization = "B.Pharmacy"
                    //}


                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group1 (Pharmaceutics , Industrial Pharmacy)",//, Industrial Pharmacy, Pharmacy BioTechnology, Pharmaceutical Technology
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis, PAQA, QA, QAPRA)",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Group3 (Pharmacy Analysis, PAQA)",
                    //    Specialization = "B.Pharmacy"
                    //},
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice)",
                        Specialization = "B.Pharmacy"
                    },
                    new PharmacySpecilaizationList()
                    {
                        PharmacyspecName = "Group4 (Pharmacognosy, Pharmaceutical Chemistry, Pharmaceutical Biotechonology, Phyto Pharmacy, Phyto medicine)",
                        Specialization = "B.Pharmacy"
                    },
                    //new PharmacySpecilaizationList()
                    //{
                    //    PharmacyspecName = "Group6 (English, Mathematics, Computers)",
                    //    Specialization = "B.Pharmacy"
                    //},
                };


                TotalcollegeFaculty = jntuh_registered_faculty.Count;

                #region All B.Pharmacy Specializations
                string PharmacyDeficiency = "";
                var reg_facultyspecilaizationsdistinct = jntuh_registered_faculty.Select(i => i.registered_faculty_specialization).Distinct().ToArray();
                var group1Subcount = 0; var group2Subcount = 0; var group3Subcount = 0; var group4Subcount = 0; var group5Subcount = 0; var group6Subcount = 0;
                var pharmadgroup1Subcount = 0; var pharmadPBgroup1Subcount = 0;
                string subgroupconditionsmet;
                string conditionbpharm = null;
                string conditionpharmd = null;
                string conditionphardpb = null;


                #region PharmD and PharmDPB
                int pharmaD = collegeIntakeExisting.Count(i => i.specializationId == 18);
                if (pharmaD > 0)
                {
                    List<CollegeFacultyWithIntakeReport> intakedetailsList1 = new List<CollegeFacultyWithIntakeReport>();
                    foreach (var list in pharmacyspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "B.Pharmacy";
                        bpharmacylist.Department = "Pharmacy";
                        bpharmacylist.PharmacyGroup1 = "Group1";

                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());

                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                        bpharmacylist.BphramacyrequiredFaculty = BpharcyrequiredFaculty;
                        bpharmacylist.SortId = 1;
                        #region bpharmacyspecializationcount

                        if (list.PharmacyspecName == "Pharmaceutics")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }

                        else if (list.PharmacyspecName == "Industrial Pharmacy")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy BioTechnology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                            f.registered_faculty_specialization == "Bio-Technology".ToUpper());

                        }
                        else if (list.PharmacyspecName == "Pharmaceutical Technology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper() ||
                                f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                            bpharmacylist.requiredFaculty = 3;
                        }
                        else if (list.PharmacyspecName == "Pharmaceutical Chemistry")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                            bpharmacylist.requiredFaculty = 2;
                        }
                        else if (list.PharmacyspecName == "Pharmacy Analysis")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }

                        else if (list.PharmacyspecName == "PAQA")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                         f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                         f.registered_faculty_specialization == "QAPRA".ToUpper() ||
                                         f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper() ||
                                         f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper());
                            bpharmacylist.requiredFaculty = 1;
                        }
                        else if (list.PharmacyspecName == "Pharmacology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }

                        else if (list.PharmacyspecName == "Pharma D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm.D".ToUpper());
                            bpharmacylist.requiredFaculty = 2;
                        }
                        else if (list.PharmacyspecName == "Pharmacognosy")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                          f.registered_faculty_specialization == "Pharmacognosy & Phytochemistry".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharmacognosy&Phytochemistry".ToUpper());
                            bpharmacylist.requiredFaculty = 2;
                        }

                        else if (list.PharmacyspecName == "English")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Mathematics")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Computers")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Computer Science")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Zoology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                            bpharmacylist.requiredFaculty = bpharmacyintake == 100 ? 3 : 2;
                        }

                        #endregion





                        if (list.PharmacyspecName == "Group1 (Pharmaceutics , Industrial Pharmacy)" || list.PharmacyspecName == "Pharmaceutics" || list.PharmacyspecName == "Industrial Pharmacy" || list.PharmacyspecName == "Pharmacy BioTechnology" || list.PharmacyspecName == "Pharmaceutical Technology")
                        {
                            group1Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 120 && f.RegistrationNumber != principalRegno) +
                                                jntuh_registered_faculty.Count(f => f.PGSpecializationId == 115 && f.RegistrationNumber != principalRegno);




                            bpharmacylist.BPharmacySubGroup1Count = group1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 10 : 7;
                            bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmaceutics , Industrial Pharmacy)";
                            if (bpharmacylist.BPharmacySubGroupRequired > group1Subcount)
                                PharmacyDeficiency = "Deficiency";
                        }

                        else if (list.PharmacyspecName == "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis, PAQA, QA, QAPRA)" || list.PharmacyspecName == "Pharmaceutical Chemistry")
                        {
                           // jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));

                            group2Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno) +
                                                 jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno) +
                                                 jntuh_registered_faculty.Count(f => f.PGSpecializationId == 123 && f.RegistrationNumber != principalRegno) +
                                                 jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);
                            bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 10 : 7;
                            bpharmacylist.PharmacySubGroup1 = "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis, PAQA, QA, QAPRA)";
                            if (bpharmacylist.BPharmacySubGroupRequired > group2Subcount)
                                PharmacyDeficiency = "Deficiency";


                        }


                        else if (list.PharmacyspecName == "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice)" || list.PharmacyspecName == "Pharmacology" || list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            group3Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122 && f.RegistrationNumber != principalRegno) +
                                                jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18 && f.RegistrationNumber != principalRegno) +
                                                jntuh_registered_faculty.Count(f => f.PGSpecializationId == 19 && f.RegistrationNumber != principalRegno);

                            switch (collegeId)
                            {

                                case 204:
                                    bpharmacylist.BPharmacySubGroupRequired = 6;
                                    break;
                                case 27:
                                case 219:
                                case 52:
                                    bpharmacylist.BPharmacySubGroupRequired = 7;
                                    break;
                                case 389:
                                    bpharmacylist.BPharmacySubGroupRequired = 8;
                                    break;
                                case 127:
                                case 428:
                                case 90:
                                case 392:
                                case 159:
                                    bpharmacylist.BPharmacySubGroupRequired = 10;
                                    break;
                                default:
                                    bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 12 : 9;
                                    break;

                            }



                            bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                          //  bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 12 : 9;
                            bpharmacylist.PharmacySubGroup1 = "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice)";
                            if (bpharmacylist.BPharmacySubGroupRequired > group3Subcount)
                                PharmacyDeficiency = "Deficiency";
                        }

                        else if (list.PharmacyspecName == "Group4 (Pharmacognosy, Pharmaceutical Chemistry, Pharmaceutical Biotechonology, Phyto Pharmacy, Phyto medicine)" || list.PharmacyspecName == "Pharmacognosy")
                        {

                            int PharmacognosySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 121 && f.RegistrationNumber != principalRegno);
                            int PharmaceuticalChemistrySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno);
                            int PAQASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno);
                            int QASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 123 && f.RegistrationNumber != principalRegno);
                            int QAPRASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);
                            int Grop2Required = bpharmacyintake >= 100 ? 10 : 7;
                            int Grop4Required = bpharmacyintake >= 100 ? 4 : 3;
                            int Total1 = Grop2Required - (PAQASp + QAPRASp + QASp);
                            int Total = (PAQASp + QAPRASp + PharmaceuticalChemistrySp + QASp) - Grop2Required;
                            if (Total > 0)
                                group4Subcount = PharmacognosySp + (PharmaceuticalChemistrySp - (Total1 < 0 ? 0 : Total1));
                            else if (Total <= 0)
                                group4Subcount = PharmacognosySp;
                            else if (PharmacognosySp == Grop2Required)
                                group4Subcount = PharmacognosySp;
                            bpharmacylist.BPharmacySubGroup1Count = group4Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = Grop4Required;
                            bpharmacylist.PharmacySubGroup1 = "Group4 (Pharmacognosy, Pharmaceutical Chemistry, Pharmaceutical Biotechonology, Phyto Pharmacy, Phyto medicine)";
                            if (bpharmacylist.BPharmacySubGroupRequired > group4Subcount)
                                PharmacyDeficiency = "Deficiency";
                        }

                        var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                        if (id > 0)
                        {
                            var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                            if (swf != null)
                            {
                                bpharmacylist.specializationWiseFaculty = (int)swf;
                            }
                            bpharmacylist.id = id;
                            bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                            bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                        }

                        intakedetailsList1.Add(bpharmacylist);
                    }
                    if (PharmacyDeficiency != "Deficiency")
                    {
                        PharmacyandPharmDMeet = "Yes";
                        foreach (var item in intakedetailsList1)
                        {
                            intakedetailsList.Add(item);
                        }

                        #region Pharmd Start
                        var pharmaD2 = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                        if (pharmaD2.Count > 0)
                        {
                            foreach (var list in pharmdspeclist)
                            {
                                int phd;
                                int pg;
                                int ug;
                                var bpharmacylist = new CollegeFacultyWithIntakeReport();
                                bpharmacylist.Specialization = list.Specialization;
                                bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                                bpharmacylist.collegeId = (int)collegeId;
                                bpharmacylist.collegeRandomCode = randomcode;
                                bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                                bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                                bpharmacylist.shiftId = 1;
                                bpharmacylist.Degree = "Pharm.D";
                                bpharmacylist.Department = "Pharm.D";
                                bpharmacylist.PharmacyGroup1 = "Group1";
                                //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                                bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D");
                                bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                                bpharmacylist.totalFaculty = ug + pg + phd;
                                //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                                bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                                bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                                bpharmacylist.pharmadrequiredfaculty = Math.Ceiling(PharmDrequiredFaculty);
                                bpharmacylist.SortId = 2;
                                #region pharmadSpecializationcount
                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharm D")
                                {
                                    //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                    //               f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                    //              f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                    //              f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                    //              f.registered_faculty_specialization == "Pharma D".ToUpper());

                                    // bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18 || f.PGSpecializationId == 122 );




                                    bpharmacylist.PharmacyspecializationWiseFaculty = 10;

                                }
                                else if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice")
                                {
                                    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                }
                                #endregion


                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                                {


                                    bpharmacylist.BPharmacySubGroup1Count = 5;
                                    bpharmacylist.BPharmacySubGroupRequired = 5;
                                    bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)";
                                }


                                var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                                if (id > 0)
                                {
                                    var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                                    if (swf != null)
                                    {
                                        bpharmacylist.specializationWiseFaculty = (int)swf;
                                    }
                                    bpharmacylist.id = id;
                                    bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                                    bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                                }

                                intakedetailsList.Add(bpharmacylist);
                            }
                        }
                        #endregion Pharmd End

                        #region PharmDPB Strt
                        var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                        if (pharmaDPB.Count > 0)
                        {
                            foreach (var list in pharmdpbspeclist)
                            {
                                int phd;
                                int pg;
                                int ug;
                                var bpharmacylist = new CollegeFacultyWithIntakeReport();
                                bpharmacylist.Specialization = list.Specialization;
                                bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                                bpharmacylist.collegeId = (int)collegeId;
                                bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                                bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                                bpharmacylist.collegeRandomCode = randomcode;
                                bpharmacylist.shiftId = 1;
                                bpharmacylist.Degree = "Pharm.D PB";
                                bpharmacylist.Department = "Pharm.D PB";
                                bpharmacylist.PharmacyGroup1 = "Group1";
                                //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                                bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB");
                                bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                                bpharmacylist.totalFaculty = ug + pg + phd;
                                //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                                bpharmacylist.pharmadPBrequiredfaculty = Math.Ceiling(PharmDPBrequiredFaculty);
                                bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                                bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                                bpharmacylist.SortId = 3;
                                #region pharmadPbSpecializationcount
                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology))" || list.PharmacyspecName == "Pharm D")
                                {
                                    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                                   f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                                  f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                                  f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                                  f.registered_faculty_specialization == "Pharma D".ToUpper());
                                }
                                else if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice")
                                {
                                    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                }
                                #endregion


                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                                {

                                    bpharmacylist.BPharmacySubGroup1Count = 2;
                                    bpharmacylist.BPharmacySubGroupRequired = 2;
                                    bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)";
                                }


                                var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                                if (id > 0)
                                {
                                    var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                                    if (swf != null)
                                    {
                                        bpharmacylist.specializationWiseFaculty = (int)swf;
                                    }
                                    bpharmacylist.id = id;
                                    bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                                    bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                                }

                                intakedetailsList.Add(bpharmacylist);
                            }
                        }
                        #endregion PharmDPB End

                    }
                    else if (PharmacyDeficiency == "Deficiency")
                    {
                        #region Pharmd Start
                        var pharmaD2 = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                        if (pharmaD2.Count > 0)
                        {
                            foreach (var list in pharmdspeclist)
                            {
                                int phd;
                                int pg;
                                int ug;
                                var bpharmacylist = new CollegeFacultyWithIntakeReport();
                                bpharmacylist.Specialization = list.Specialization;
                                bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                                bpharmacylist.collegeId = (int)collegeId;
                                bpharmacylist.collegeRandomCode = randomcode;
                                bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                                bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                                bpharmacylist.shiftId = 1;
                                bpharmacylist.Degree = "Pharm.D";
                                bpharmacylist.Department = "Pharm.D";
                                bpharmacylist.PharmacyGroup1 = "Group1";
                                //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                                bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D");
                                bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                                bpharmacylist.totalFaculty = ug + pg + phd;
                                //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                                bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                                bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                                bpharmacylist.pharmadrequiredfaculty = Math.Ceiling(PharmDrequiredFaculty);
                                bpharmacylist.SortId = 2;
                                #region pharmadSpecializationcount
                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharm D")
                                {

                                    bpharmacylist.PharmacyspecializationWiseFaculty = 0;

                                }
                                else if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice")
                                {
                                    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                }
                                #endregion


                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                                {


                                    bpharmacylist.BPharmacySubGroup1Count = 0;
                                    bpharmacylist.BPharmacySubGroupRequired = 5;
                                    bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)";
                                }


                                var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                                if (id > 0)
                                {
                                    var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                                    if (swf != null)
                                    {
                                        bpharmacylist.specializationWiseFaculty = (int)swf;
                                    }
                                    bpharmacylist.id = id;
                                    bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                                    bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                                }

                                intakedetailsList.Add(bpharmacylist);
                            }
                        }
                        #endregion Pharmd End

                        #region PharmDPB Strt
                        var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                        if (pharmaDPB.Count > 0)
                        {
                            foreach (var list in pharmdpbspeclist)
                            {
                                int phd;
                                int pg;
                                int ug;
                                var bpharmacylist = new CollegeFacultyWithIntakeReport();
                                bpharmacylist.Specialization = list.Specialization;
                                bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                                bpharmacylist.collegeId = (int)collegeId;
                                bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                                bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                                bpharmacylist.collegeRandomCode = randomcode;
                                bpharmacylist.shiftId = 1;
                                bpharmacylist.Degree = "Pharm.D PB";
                                bpharmacylist.Department = "Pharm.D PB";
                                bpharmacylist.PharmacyGroup1 = "Group1";
                                //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                                bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB");
                                bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                                bpharmacylist.totalFaculty = ug + pg + phd;
                                //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                                bpharmacylist.pharmadPBrequiredfaculty = Math.Ceiling(PharmDPBrequiredFaculty);
                                bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                                bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                                bpharmacylist.SortId = 3;
                                #region pharmadPbSpecializationcount
                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology))" || list.PharmacyspecName == "Pharm D")
                                {
                                    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                                   f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                                  f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                                  f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                                                  f.registered_faculty_specialization == "Pharma D".ToUpper());
                                }
                                else if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice")
                                {
                                    bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                                }
                                #endregion


                                if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                                {

                                    bpharmacylist.BPharmacySubGroup1Count = 0;
                                    bpharmacylist.BPharmacySubGroupRequired = 2;
                                    bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)";
                                }


                                var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                                if (id > 0)
                                {
                                    var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                                    if (swf != null)
                                    {
                                        bpharmacylist.specializationWiseFaculty = (int)swf;
                                    }
                                    bpharmacylist.id = id;
                                    bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                                    bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                                }

                                intakedetailsList.Add(bpharmacylist);
                            }
                        }
                        #endregion PharmDPB End

                    }
                }
                #endregion Pharmd And PharmDPB
                #region Pharmacy Only
                if (PharmacyDeficiency == "Deficiency" || pharmaD == 0)
                {
                    PharmacyandPharmDMeet = "No";
                    foreach (var list in pharmacyspeclist)
                    {
                        int phd;
                        int pg;
                        int ug;
                        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                        bpharmacylist.Specialization = list.Specialization;
                        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                        bpharmacylist.collegeId = (int)collegeId;
                        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                        bpharmacylist.collegeRandomCode = randomcode;
                        bpharmacylist.shiftId = 1;
                        bpharmacylist.Degree = "B.Pharmacy";
                        bpharmacylist.Department = "Pharmacy";
                        bpharmacylist.PharmacyGroup1 = "Group1";

                        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        //bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharmacy");
                        //bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharmacy");
                        //bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharmacy");
                        //bpharmacylist.totalFaculty = ug + pg + phd;
                        //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                        bpharmacylist.BphramacyrequiredFaculty = bpharmacyintake >= 100 ? 25 : 15;
                        bpharmacylist.SortId = 1;
                        #region bpharmacyspecializationcount

                        if (list.PharmacyspecName == "Pharmaceutics")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }

                        else if (list.PharmacyspecName == "Industrial Pharmacy")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Pharmacy BioTechnology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                            f.registered_faculty_specialization == "Bio-Technology".ToUpper());

                        }
                        else if (list.PharmacyspecName == "Pharmaceutical Technology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper() ||
                                f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                            bpharmacylist.requiredFaculty = 3;
                        }
                        else if (list.PharmacyspecName == "Pharmaceutical Chemistry")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                            bpharmacylist.requiredFaculty = 2;
                        }
                        else if (list.PharmacyspecName == "Pharmacy Analysis")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }

                        else if (list.PharmacyspecName == "PAQA")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                         f.registered_faculty_specialization == "PA & QA".ToUpper() ||
                                //f.registered_faculty_specialization == "Quality Assurance".ToUpper() ||
                                //f.registered_faculty_specialization == "QualityAssurance".ToUpper() ||
                                         f.registered_faculty_specialization == "QAPRA".ToUpper() ||
                                         f.registered_faculty_specialization == "Pharmaceutical Analysis & Quality Assurance".ToUpper() ||
                                         f.registered_faculty_specialization == "Quality Assurance & Pharma Regulatory Affairs".ToUpper());
                            bpharmacylist.requiredFaculty = 1;
                        }
                        else if (list.PharmacyspecName == "Pharmacology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }

                        else if (list.PharmacyspecName == "Pharma D")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharm.D".ToUpper());
                            bpharmacylist.requiredFaculty = 2;
                        }
                        else if (list.PharmacyspecName == "Pharmacognosy")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                                          f.registered_faculty_specialization == "Pharmacognosy & Phytochemistry".ToUpper() ||
                                          f.registered_faculty_specialization == "Pharmacognosy&Phytochemistry".ToUpper());
                            bpharmacylist.requiredFaculty = 2;
                        }

                        else if (list.PharmacyspecName == "English")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Mathematics")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Computers")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Computer Science")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                        }
                        else if (list.PharmacyspecName == "Zoology")
                        {
                            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                            bpharmacylist.requiredFaculty = bpharmacyintake == 100 ? 3 : 2;
                        }
                        #endregion



                        BpharcyrequiredFaculty = bpharmacyintake >= 100 ? 25 : 15;

                        if (list.PharmacyspecName == "Group1 (Pharmaceutics , Industrial Pharmacy)" || list.PharmacyspecName == "Pharmaceutics" || list.PharmacyspecName == "Industrial Pharmacy" || list.PharmacyspecName == "Pharmacy BioTechnology" || list.PharmacyspecName == "Pharmaceutical Technology")
                        {
                            //group1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutics".ToUpper());
                            group1Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 120 && f.RegistrationNumber != principalRegno) +
                                                jntuh_registered_faculty.Count(f => f.PGSpecializationId == 115 && f.RegistrationNumber != principalRegno);
                            // jntuh_registered_faculty.Count(f => f.PGSpecializationId == 119)+
                            //jntuh_registered_faculty.Count(f => f.PGSpecializationId == 115);

                            //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Industrial Pharmacy".ToUpper()) +
                            //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy BioTechnology".ToUpper()) +
                            //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Bio-Technology".ToUpper()) +
                            //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology (2011-12)".ToUpper()) +
                            //jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Technology".ToUpper());
                            //int TotalIntake=0;
                            //if (bpharmacyintake == 0)
                            //    TotalIntake = intakedetails.approvedIntake1;
                            //else if (bpharmacyintake >= 0)
                            //    TotalIntake = bpharmacyintake;
                            bpharmacylist.BPharmacySubGroup1Count = group1Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 8 : 5;
                            bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmaceutics , Industrial Pharmacy)";
                        }

                        else if (list.PharmacyspecName == "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis, PAQA, QA, QAPRA)" || list.PharmacyspecName == "Pharmaceutical Chemistry")
                        {
                            //group2Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmaceutical Chemistry".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));

                            group2Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno) +
                                                 jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno) +
                                                 jntuh_registered_faculty.Count(f => f.PGSpecializationId == 123 && f.RegistrationNumber != principalRegno) +
                                                 jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);
                            bpharmacylist.BPharmacySubGroup1Count = group2Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 7 : 4;
                            bpharmacylist.PharmacySubGroup1 = "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis, PAQA, QA, QAPRA)";


                        }
                        //else if (list.PharmacyspecName == "Group3 (Pharmacy Analysis, PAQA)" || list.PharmacyspecName == "Pharmacy Analysis" || list.PharmacyspecName == "PAQA" || list.PharmacyspecName == "PA & QA" || list.PharmacyspecName.Contains("QA"))
                        //{
                        //    var y = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()).ToList();
                        //    var g = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization.Contains("QA")).ToList();
                        //    var g1 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PAQA".ToUpper()).ToList();
                        //    var g2 = jntuh_registered_faculty.Where(f => f.registered_faculty_specialization == "PA & QA".ToUpper()).ToList();

                        //    group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Analysis".ToUpper()) +
                        //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PAQA".ToUpper()) +
                        //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PA & QA".ToUpper()) +
                        //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("QAPRA")) +
                        //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Pharmaceutical Analysis & Quality Assurance".ToUpper())) +
                        //        jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("Quality Assurance & Pharma Regulatory Affairs".ToUpper()));
                        //    bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                        //    bpharmacylist.BPharmacySubGroupRequired = 1;
                        //    bpharmacylist.PharmacySubGroup1 = "Group3 (Pharmacy Analysis, PAQA)";
                        //}

                        else if (list.PharmacyspecName == "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice)" || list.PharmacyspecName == "Pharmacology" || list.PharmacyspecName == "Pharma D" || list.PharmacyspecName == "Pharma.D" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                        {
                            // group3Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacology".ToUpper());
                            group3Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122 && f.RegistrationNumber != principalRegno) +
                                                jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18 && f.RegistrationNumber != principalRegno) +
                                                jntuh_registered_faculty.Count(f => f.PGSpecializationId == 19 && f.RegistrationNumber != principalRegno);
                            // jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);

                            bpharmacylist.BPharmacySubGroup1Count = group3Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = bpharmacyintake >= 100 ? 6 : 4;
                            bpharmacylist.PharmacySubGroup1 = "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice)";
                        }

                        else if (list.PharmacyspecName == "Group4 (Pharmacognosy, Pharmaceutical Chemistry, Pharmaceutical Biotechonology, Phyto Pharmacy, Phyto medicine)" || list.PharmacyspecName == "Pharmacognosy")
                        {
                            //group4Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy".ToUpper()) +
                            //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacognosy&Phytochemistryc".ToUpper()) +
                            //    jntuh_registered_faculty.Count(f => f.registered_faculty_specialization.Contains("PHARMACOGNOSY & PHYTOCHEMISTRY".ToUpper()));

                            //group4Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 121 && f.RegistrationNumber!=principalRegno);

                            int PharmacognosySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 121 && f.RegistrationNumber != principalRegno);
                            int PharmaceuticalChemistrySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 117 && f.RegistrationNumber != principalRegno);
                            int PAQASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 116 && f.RegistrationNumber != principalRegno);
                            int QASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 123 && f.RegistrationNumber != principalRegno);
                            int QAPRASp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 124 && f.RegistrationNumber != principalRegno);
                            int Group2Required = bpharmacyintake >= 100 ? 7 : 4;
                            int Group4Required = bpharmacyintake >= 100 ? 4 : 2;
                            int Total1 = Group2Required - (PAQASp + QAPRASp + QASp);
                            int Total = (PAQASp + QAPRASp + PharmaceuticalChemistrySp + QASp) - Group2Required;
                            if (Total > 0)
                                group4Subcount = PharmacognosySp + (PharmaceuticalChemistrySp - (Total1 < 0 ? 0 : Total1));
                            else if (Total <= 0)
                                group4Subcount = PharmacognosySp;
                            else if (PharmacognosySp == Group2Required)
                                group4Subcount = PharmacognosySp;
                            bpharmacylist.BPharmacySubGroup1Count = group4Subcount;
                            bpharmacylist.BPharmacySubGroupRequired = Group4Required;
                            bpharmacylist.PharmacySubGroup1 = "Group4 (Pharmacognosy, Pharmaceutical Chemistry, Pharmaceutical Biotechonology, Phyto Pharmacy, Phyto medicine)";
                        }

                        var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                        if (id > 0)
                        {
                            var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                            if (swf != null)
                            {
                                bpharmacylist.specializationWiseFaculty = (int)swf;
                            }
                            bpharmacylist.id = id;
                            bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                            bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                        }

                        intakedetailsList.Add(bpharmacylist);
                    }
                }
                #endregion  Pharmacy Only

                #region PharM D and Pharm DPB Commented Code START
                ////for pharma D specializations
                //var pharmaD1 = collegeIntakeExisting.Where(i => i.specializationId == 18).ToList();
                //if (pharmaD1.Count > 0)
                //{
                //    foreach (var list in pharmdspeclist)
                //    {
                //        int phd;
                //        int pg;
                //        int ug;
                //        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                //        bpharmacylist.Specialization = list.Specialization;
                //        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                //        bpharmacylist.collegeId = (int)collegeId;
                //        bpharmacylist.collegeRandomCode = randomcode;
                //        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                //        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                //        bpharmacylist.shiftId = 1;
                //        bpharmacylist.Degree = "Pharm.D";
                //        bpharmacylist.Department = "Pharm.D";
                //        bpharmacylist.PharmacyGroup1 = "Group1";
                //        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                //        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                //        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D");
                //        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D");
                //        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D");
                //        bpharmacylist.totalFaculty = ug + pg + phd;
                //        //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                //        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                //        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                //        bpharmacylist.pharmadrequiredfaculty = Math.Ceiling(PharmDrequiredFaculty);
                //        bpharmacylist.SortId = 2;
                //        #region pharmadSpecializationcount
                //        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharm D")
                //        {
                //            //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                //            //               f.registered_faculty_specialization == "PharmD".ToUpper() ||
                //            //              f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                //            //              f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                //            //              f.registered_faculty_specialization == "Pharma D".ToUpper());

                //            // bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18 || f.PGSpecializationId == 122 );

                //            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                //            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                //            int Required = bpharmacyintake >= 100 ? 5 : 4;
                //            int Total = (PharmacologySp) - Required;
                //            int Total1 = Required - PharmacologySp;
                //            if (Total > 0)
                //                bpharmacylist.PharmacyspecializationWiseFaculty = PharmDSp + (PharmacologySp - Required);
                //            else if (Total < 0)
                //                bpharmacylist.PharmacyspecializationWiseFaculty = PharmDSp + (PharmacologySp);
                //            else if (PharmacologySp == Required)
                //                bpharmacylist.PharmacyspecializationWiseFaculty = PharmDSp;

                //        }
                //        else if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice")
                //        {
                //            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                //        }
                //        #endregion


                //        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                //        {
                //            //pharmadgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                //            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                //            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                //            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                //            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                //            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper());

                //            //var faculty12 = jntuh_registered_faculty.Where(f => f.PGSpecializationId == 18 || f.PGSpecializationId == 122).Select(f => f).ToList();

                //            //int HospitalSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);
                //            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                //            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                //            int Required = bpharmacyintake >= 100 ? 5 : 4;
                //            int Total = (PharmacologySp) - Required;
                //            int Total1 = Required - PharmacologySp;
                //            if (Total > 0)
                //                pharmadgroup1Subcount = PharmDSp + Total;
                //            else if (Total < 0)
                //                pharmadgroup1Subcount = PharmDSp;
                //            else if (PharmacologySp == Required)
                //                pharmadgroup1Subcount = PharmDSp;
                //            bpharmacylist.BPharmacySubGroup1Count = pharmadgroup1Subcount;
                //            bpharmacylist.BPharmacySubGroupRequired = pharmadTotalintake / 30;
                //            bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)";
                //        }


                //        var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                //        if (id > 0)
                //        {
                //            var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                //            if (swf != null)
                //            {
                //                bpharmacylist.specializationWiseFaculty = (int)swf;
                //            }
                //            bpharmacylist.id = id;
                //            bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                //            bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                //        }

                //        intakedetailsList.Add(bpharmacylist);
                //    }
                //}




                ////for pharma.D PB specializations
                //var pharmaDPB = collegeIntakeExisting.Where(i => i.specializationId == 19).ToList();
                //if (pharmaDPB.Count > 0)
                //{
                //    foreach (var list in pharmdpbspeclist)
                //    {
                //        int phd;
                //        int pg;
                //        int ug;
                //        var bpharmacylist = new CollegeFacultyWithIntakeReport();
                //        bpharmacylist.Specialization = list.Specialization;
                //        bpharmacylist.PharmacySpec1 = list.PharmacyspecName;
                //        bpharmacylist.collegeId = (int)collegeId;
                //        bpharmacylist.collegeCode = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeCode).FirstOrDefault();
                //        bpharmacylist.collegeName = jntuh_college.Where(c => c.id == collegeId).Select(c => c.collegeName).FirstOrDefault();
                //        bpharmacylist.collegeRandomCode = randomcode;
                //        bpharmacylist.shiftId = 1;
                //        bpharmacylist.Degree = "Pharm.D PB";
                //        bpharmacylist.Department = "Pharm.D PB";
                //        bpharmacylist.PharmacyGroup1 = "Group1";
                //        //bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                //        bpharmacylist.specializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                //        bpharmacylist.ugFaculty = ug = jntuh_registered_faculty.Count(f => "UG" == f.HighestDegree && f.Department == "Pharm.D PB");
                //        bpharmacylist.pgFaculty = pg = jntuh_registered_faculty.Count(f => ("PG" == f.HighestDegree || "M.Phil" == f.HighestDegree) && f.Department == "Pharm.D PB");
                //        bpharmacylist.phdFaculty = phd = jntuh_registered_faculty.Count(f => "Ph.D" == f.HighestDegree && f.Department == "Pharm.D PB");
                //        bpharmacylist.totalFaculty = ug + pg + phd;
                //        //bpharmacylist.requiredFaculty = BpharcyrequiredFaculty;
                //        bpharmacylist.pharmadPBrequiredfaculty = Math.Ceiling(PharmDPBrequiredFaculty);
                //        bpharmacylist.PharmacySpecilaizationList = pharmacyspeclist;
                //        bpharmacylist.totalcollegefaculty = jntuh_registered_faculty.Count;
                //        bpharmacylist.SortId = 3;
                //        #region pharmadPbSpecializationcount
                //        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology))" || list.PharmacyspecName == "Pharm D")
                //        {
                //            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper() ||
                //                           f.registered_faculty_specialization == "PharmD".ToUpper() ||
                //                          f.registered_faculty_specialization == "Pharm D".ToUpper() ||
                //                          f.registered_faculty_specialization == "Pharma.D".ToUpper() ||
                //                          f.registered_faculty_specialization == "Pharma D".ToUpper());
                //        }
                //        else if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice")
                //        {
                //            bpharmacylist.PharmacyspecializationWiseFaculty = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == list.PharmacyspecName.ToUpper());
                //        }
                //        #endregion


                //        if (list.PharmacyspecName == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)" || list.PharmacyspecName == "Pharmacy Practice" || list.PharmacyspecName == "Pharm D" || list.PharmacyspecName == "Pharm.D")
                //        {
                //            //pharmadPBgroup1Subcount = jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharmacy Practice".ToUpper()) +
                //            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma D".ToUpper()) +
                //            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharma.D".ToUpper()) +
                //            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm D".ToUpper()) +
                //            //                jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "Pharm.D".ToUpper()) +
                //            //            jntuh_registered_faculty.Count(f => f.registered_faculty_specialization == "PharmD".ToUpper()); 

                //            int HospitalSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);
                //            int PharmacologySp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122);
                //            int PharmDSp = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18);
                //            int Required = bpharmacyintake >= 100 ? 5 : 4;
                //            int Total = (HospitalSp + PharmacologySp) - Required;
                //            int Total1 = Required - HospitalSp;
                //            int pharmadgroup1Subcount1 = 0;
                //            if (Total > 0)
                //                pharmadgroup1Subcount1 = PharmDSp + (PharmacologySp - Total);
                //            else if (Total < 0)
                //                pharmadgroup1Subcount1 = PharmDSp + (PharmacologySp);
                //            else if (PharmacologySp == Required)
                //                pharmadgroup1Subcount1 = PharmDSp;

                //            //pharmadPBgroup1Subcount = jntuh_registered_faculty.Count(f => f.PGSpecializationId == 18) +
                //            //                       jntuh_registered_faculty.Count(f => f.PGSpecializationId == 122)+
                //            //                       jntuh_registered_faculty.Count(f => f.PGSpecializationId == 114);



                //            bpharmacylist.BPharmacySubGroup1Count = pharmadgroup1Subcount1;
                //            bpharmacylist.BPharmacySubGroupRequired = pharmadPBTotalintake / 10;
                //            bpharmacylist.PharmacySubGroup1 = "Group1 (Pharmacy Practice, Pharm D, Pharmacology)";
                //        }


                //        var id = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.CollegeId == collegeId && fd.BpharmacySpecialization == list.PharmacyspecName && fd.ShiftId == 1).Select(fd => fd.Id).FirstOrDefault();
                //        if (id > 0)
                //        {
                //            var swf = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.SpecializationWiseFaculty).FirstOrDefault();
                //            if (swf != null)
                //            {
                //                bpharmacylist.specializationWiseFaculty = (int)swf;
                //            }
                //            bpharmacylist.id = id;
                //            bpharmacylist.deficiency = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Deficiency).FirstOrDefault();
                //            bpharmacylist.shortage = jntuh_Bpharmacy_faculty_deficiency.Where(fd => fd.Id == id).Select(fd => fd.Shortage).FirstOrDefault();
                //        }

                //        intakedetailsList.Add(bpharmacylist);
                //    }
                //}

                #endregion PharM D and Pharm DPB Commented Code  END





                if (BpharcyrequiredFaculty > 0)
                {

                    if (bpharmacyintake >= 100)
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                        BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    else
                    {
                        BpharcyrequiredFaculty = Math.Round(BpharcyrequiredFaculty) - 0;
                        ViewBag.BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                        BpharmacyrequiredFaculty = BpharcyrequiredFaculty;
                    }
                    intakedetailsList.Where(i => i.PharmacyGroup1 != "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.requiredFaculty = BpharcyrequiredFaculty);


                    if (jntuh_registered_faculty.Count >= BpharcyrequiredFaculty)
                    {
                        if (group1Subcount >= (bpharmacyintake >= 100 ? 8 : 5) && group2Subcount >= (bpharmacyintake >= 100 ? 7 : 4) && group3Subcount >= (bpharmacyintake >= 100 ? 6 : 4) && group4Subcount >= (bpharmacyintake >= 100 ? 4 : 2))//&& group5Subcount >= 2 && group6Subcount >= (bpharmacyintake == 100 ? 3 : 2)
                        {
                            subgroupconditionsmet = conditionbpharm = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionbpharm = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionbpharm = "Yes";
                    }

                    ViewBag.BpharmcyCondition = conditionbpharm;
                    bpharmacycondition = conditionbpharm;
                    intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "B.Pharmacy").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);


                }

                if (PharmDrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDrequiredFaculty)
                    {
                        if (pharmadgroup1Subcount >= pharmadTotalintake / 30)
                        {
                            subgroupconditionsmet = conditionpharmd = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionpharmd = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionpharmd = "Yes";
                    }

                    ViewBag.PharmaDCondition = conditionpharmd;
                    pharmdcondition = conditionpharmd;
                    if (conditionbpharm == "No")
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }


                }

                ViewBag.PharmDPBrequiredFaculty = PharmDPBrequiredFaculty;
                pharmadpbrequiredfaculty = PharmDPBrequiredFaculty;
                if (PharmDPBrequiredFaculty > 0)
                {
                    if (jntuh_registered_faculty.Count >= PharmDPBrequiredFaculty)
                    {
                        if (pharmadPBgroup1Subcount >= pharmadPBTotalintake / 10)
                        {
                            subgroupconditionsmet = conditionphardpb = "No";
                        }
                        else
                        {
                            subgroupconditionsmet = conditionphardpb = "Yes";
                        }
                    }
                    else
                    {
                        subgroupconditionsmet = conditionphardpb = "Yes";
                    }

                    ViewBag.PharmaDPBCondition = conditionphardpb;
                    pharmadpbcondition = conditionphardpb;
                    if (conditionbpharm == "No" && conditionpharmd == "No")
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = subgroupconditionsmet);
                    }
                    else
                    {
                        intakedetailsList.Where(i => i.PharmacyGroup1 == "Group1" && i.Specialization == "Pharm.D PB").ToList().ForEach(c => c.BPharmacySubGroupMet = "Yes");
                    }

                }



                #endregion

                intakedetailsList = intakedetailsList.OrderBy(ei => ei.Department).ThenBy(ei => ei.degreeDisplayOrder).ThenBy(ei => ei.Specialization).ThenBy(ei => ei.shiftId).ToList();
            }
            return intakedetailsList;
        }

        public string DeficienciesInFaculty(int? collegeID)
        {
            string faculty = string.Empty;
            string facultyAdmittedIntakeZero = string.Empty;
            faculty += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
            faculty += "<tr>";
            faculty += "<td align='left'><b><u>Deficiencies in Faculty</u></b> (Department/ Specialization Wise):</td>";
          //  faculty += "<td align='left'><b><u>See annexure for more details</u></b>";
            faculty += "</tr>";
            faculty += "</table>";

            List<CollegeFacultyWithIntakeReport> facultyCounts = PharmacyCollegeFaculty(collegeID).Where(c => c.shiftId == 1).OrderBy(i => i.SortId).ToList();//Where(c => c.shiftId == 1)


            #region Facultydata Starting
            var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.Where(cf => cf.collegeId == collegeID).ToList();
            string[] strRegnos = jntuh_college_faculty_registered.Select(cf => cf.RegistrationNumber).ToArray();

            var jntuh_college_faculty_registered_new = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeID).ToList();
            var principalRegno = jntuh_college_faculty_registered_new.Select(cf => cf.RegistrationNumber).FirstOrDefault();

            //education categoryIds UG,PG,PHD...........

            var jntuh_specializations = db.jntuh_specialization.ToList();
            var jntuh_departments = db.jntuh_department.ToList();
            int pharmacyDeptId = jntuh_departments.Where(d => d.departmentName == "Pharmacy").Select(d => d.id).FirstOrDefault();
            var collegeaffliations = db.jntuh_college_affliationstatus.AsNoTracking().ToList();
            var jntuh_education_category = db.jntuh_education_category.ToList();

            //var registeredFaculty = principalRegno != null ? db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim()) && rf.RegistrationNumber != principalRegno).ToList()
            //    : db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();


            var registeredFaculty = db.jntuh_registered_faculty.Where(rf => strRegnos.Contains(rf.RegistrationNumber.Trim())).ToList();
            var scm = registeredFaculty.Where(i => i.NoSCM == true).ToList();
            //Reg nos related online facultyIds
            var jntuh_registered_faculty1 = registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false)//&& rf.Noform16Verification == false && rf.NoForm16 == false
                                                    && (rf.NoSCM17 == false) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false) && (rf.Blacklistfaculy == false) && (rf.Noclass == false || rf.Noclass == null) && rf.NoRelevantUG == "No" && rf.NoRelevantPG == "No" && rf.NORelevantPHD == "No" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) && (rf.Invaliddegree == false || rf.Invaliddegree == null) && rf.BAS == "Y"))
                                                    .Select(rf => new
                                                    {
                                                        RegistrationNumber = rf.RegistrationNumber,
                                                        Department = rf.jntuh_department != null ? rf.jntuh_department.departmentName : null,
                                                        //Department=
                                                        HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
                                                        IsApproved = rf.isApproved,
                                                        PanNumber = rf.PANNumber,
                                                        AadhaarNumber = rf.AadhaarNumber,
                                                        PGSpecializationId = rf.PGSpecialization,
                                                        UGDepartmentId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.DepartmentId).FirstOrDefault(),
                                                        SpecializationId = jntuh_college_faculty_registered.Where(C => C.RegistrationNumber == rf.RegistrationNumber).Select(C => C.SpecializationId).FirstOrDefault(),
                                                        jntuh_registered_faculty_education = rf.jntuh_registered_faculty_education
                                                    }).ToList();
            jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();
            var jntuh_registered_faculty = jntuh_registered_faculty1.Select(rf => new
            {
                RegistrationNumber = rf.RegistrationNumber,
                Department = rf.Department,
                //Department=rf.UGDepartmentId!=null?jntuh_departments.Where(D=>D.id==rf.UGDepartmentId).Select(D=>D.departmentName).FirstOrDefault():"",
                PGSpecializationId = rf.PGSpecializationId,
                UGDepartmentId = rf.UGDepartmentId,
                HighestDegree = jntuh_education_category.Where(c => c.id == rf.HighestDegreeID).Select(c => c.educationCategoryName).FirstOrDefault(),
                Recruitedfor = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.IdentifiedFor).FirstOrDefault(),
                SpecializationId = jntuh_college_faculty_registered.Where(c => c.RegistrationNumber == rf.RegistrationNumber).Select(c => c.SpecializationId).FirstOrDefault(),
                PanNumber = rf.PanNumber,
                AadhaarNumber = rf.AadhaarNumber,
                //registered_faculty_specialization = rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : ""
                registered_faculty_specialization = rf.SpecializationId != null ? jntuh_specializations.Where(S => S.id == rf.SpecializationId).Select(S => S.specializationName).FirstOrDefault() : rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").FirstOrDefault().specialization != null ? rf.jntuh_registered_faculty_education.Where(e => e.jntuh_education_category.educationCategoryName == "PG").Select(i => i.specialization).FirstOrDefault().ToUpper().Trim() : "",
            }).ToList();
            #endregion Facultydata Ending
            var collegeStatus = db.jntuh_collegestatus.Where(e => e.CollegeId == collegeID).Select(e => e).FirstOrDefault();
            if (collegeStatus != null)
            {
                if (collegeStatus.SIStatus == true)
                {
                    facultyCounts = facultyCounts.Where(e => e.Degree != "M.Pharmacy").Select(e => e).ToList();
                }
            }

            if (collegeStatus != null)
            {
                if (collegeStatus.AICTEStatus == true)
                {
                    var RegisteredFaculty = (from Reg in db.jntuh_registered_faculty
                                             join Clg in db.jntuh_college_faculty_registered on Reg.RegistrationNumber equals Clg.RegistrationNumber
                                             join ClgEdit in db.jntuh_college_edit_status on Clg.collegeId equals ClgEdit.collegeId
                                             where ClgEdit.IsCollegeEditable == false && Clg.collegeId == collegeID
                                             select Reg).ToList();

                    int Absebtfaculty = RegisteredFaculty.Count(e => e.Absent == true);
                    int TotalFaculty = RegisteredFaculty.Count();

                    var Percentage = Math.Ceiling((((double)Absebtfaculty / (double)TotalFaculty) * 100));



                    faculty += "<p>As per the FFC report it is observed that:</p>";
                    faculty += "<ol type='i'>";
                    faculty += "<li>Acute deficiency of faculty due to " + Percentage + " % of faculty absent during FFC inspection.</li>";
                    faculty += "<li>As per the records the College is running the following approved programs in the previous academic years:</li>";
                    faculty += "</ol>";
                    faculty += "<table width='100%' border='1' cellpadding='5' cellspacing='0'>";
                    faculty += "<tr>";
                    faculty += "<th>S.No.</th>";
                    faculty += "<th>Degree</th>";
                    faculty += "<th>Department</th>";
                    faculty += "<th>Specialization</th>";
                    faculty += "</tr>";

                    var CollegeIntakeData = (from Intake in db.jntuh_college_intake_existing
                                             join Spec in db.jntuh_specialization on Intake.specializationId equals Spec.id
                                             join Dept in db.jntuh_department on Spec.departmentId equals Dept.id
                                             join Deg in db.jntuh_degree on Dept.degreeId equals Deg.id
                                             where Intake.collegeId == collegeID && Intake.academicYearId == 8
                                             select new
                                             {
                                                 Degree = Deg.degree,
                                                 Department = Dept.departmentName,
                                                 SpecializationName = Spec.specializationName,
                                                 DegreeId = Deg.id
                                             }).OrderBy(e => e.Degree).ToList();
                    int collegecountindex = 1;
                    foreach (var collegeitem in CollegeIntakeData)
                    {
                        faculty += "<tr>";
                        faculty += "<td>" + collegecountindex + "</td>";
                        faculty += "<td>" + collegeitem.Degree + "</td>";
                        faculty += "<td>" + collegeitem.Department + "</td>";
                        faculty += "<td>" + collegeitem.SpecializationName + "</td>";
                        faculty += "</tr>";
                        collegecountindex++;
                    }




                    faculty += "</table>";
                    faculty += "<p>From the above, it is clear that you were running the courses in the previous academic years without the required faculty members and other essential academic facilities. It indicates that you have no inclination for maintaining minimum essential requirements for running the courses even for the existing approved programs/courses. Under these circumstances the SCA recommends for <b><u>'No Admission status'</u></b> for the A.Y. 2017-18 for your Institution. You are further directed to provide the clear explanation/plan of action within 5 days regarding the availability of essential requirements for the existing batches till the completion of their academic programs. The deficiency details are as follows: </p>";
                }
            }
            var count = facultyCounts.Count();
            var distDeptcount = 1;
            var deptloop = 1;
            var specloop = 1;
            decimal departmentWiseRequiredFaculty = 0;

            string[] departments = new string[] { "English", "Mathematics", "Physics", "Chemistry", "Others" };

            int totalBtechFirstYearIntake = facultyCounts.Where(d => d.Degree == "B.Tech").Select(d => d.approvedIntake1).Sum();
            var degrees = db.jntuh_degree.ToList();
            var firstYearRequired = Math.Ceiling((double)totalBtechFirstYearIntake / 150);
            int remainingFaculty = 0;
            int remainingPHDFaculty = 0;
            var remainingphramdFaculty = 0;
            var distSpeccount = 0;
            var totalusedfaculty = 0;
            var remainingmpharmacyfaculty = 0;
            if (PharmDRequiredFaculty == 0)
            {
                var facultycount = TotalcollegeFaculty - (int)Math.Ceiling(ViewBag.BpharmacyrequiredFaculty);
                remainingmpharmacyfaculty = facultycount;
            }
            faculty += "<table width='100%' border='1' cellpadding='3' cellspacing='0' style='border-color: #ccc;font-size:13px'>";
            faculty += "<tr>";
            faculty += "<th style='text-align: center; vertical-align: top;'>SNo</th>";
            faculty += "<th style='text-align: left; vertical-align: top;' >Department</th>";
            faculty += "<th style='text-align: left; vertical-align: top;' >Degree</th>";
            faculty += "<th style='text-align: left; vertical-align: top;' >Specialization</th>";
            //faculty += "<th style='text-align: left; vertical-align: top;' >Status</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >Total Intake *</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >Proposed Intake</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >No.of Faculty Required *</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >No.of Faculty Available</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >Pharmacy Specializations *</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >Specialization Wise Faculty Required</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >Specialization Wise Faculty Available</th>";
            //faculty += "<th style='text-align: center; vertical-align: top;' >Adjusted faculty</th>";
            //faculty += "<th style='text-align: center; vertical-align: top;' >Not Qualified as per AICTE faculty</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >Deficiency</th>";
            faculty += "<th style='text-align: center; vertical-align: top;' >No. of Ph.D faculty</th>";
            faculty += "</tr>";
            #region Admitted Take More Than Two Zero Header

            facultyAdmittedIntakeZero += "<p>The Courses for which college has applied for Closure or Zero Proposed Intake for A.Y. 2017-18 are as follows.</p>";
            facultyAdmittedIntakeZero += "<table width='100%' border='1' cellpadding='3' cellspacing='0' style='border-color: #ccc;'>";
            facultyAdmittedIntakeZero += "<tr>";
            facultyAdmittedIntakeZero += "<th style='text-align: center; vertical-align: top;'>SNo</th>";
            facultyAdmittedIntakeZero += "<th style='text-align: left; vertical-align: top;' >Department</th>";
            facultyAdmittedIntakeZero += "<th style='text-align: left; vertical-align: top;' >Degree</th>";
            facultyAdmittedIntakeZero += "<th style='text-align: left; vertical-align: top;' >Specialization</th>";
            facultyAdmittedIntakeZero += "<th style='text-align: center; vertical-align: top;' >Sanction Intake</th>";
            facultyAdmittedIntakeZero += "<th style='text-align: center; vertical-align: top;' >Proposed Intake</th>";

            facultyAdmittedIntakeZero += "</tr>";
            #endregion
            foreach (var item in facultyCounts.Where(E => E.approvedIntake1 == 0 && E.Degree == "M.Pharmacy").Select(e => e).ToList())
            {
                facultyAdmittedIntakeZero += "<tr>";
                facultyAdmittedIntakeZero += "<td class='col2' style='text-align: center; vertical-align: top;width:10px' rowspan='1'>" + (facultyCounts.IndexOf(item) + 1) + "</td>";
                facultyAdmittedIntakeZero += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.Department + "</td>";
                facultyAdmittedIntakeZero += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.Degree + "</td>";
                facultyAdmittedIntakeZero += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.Specialization + "</td>";
                facultyAdmittedIntakeZero += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.totalIntake + "</td>";
                facultyAdmittedIntakeZero += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.approvedIntake1 + "</td>";
                facultyAdmittedIntakeZero += "</tr>";
            }
            string str = "";
            int GroupCount1 = 0, GroupCount2 = 0, GroupCount3 = 0, GroupCount4 = 0;
            int[] specializationIds = facultyCounts.Where(E => E.approvedIntake1 == 0 && E.Degree == "M.Pharmacy").Select(e => e.specializationId).ToArray();
            if (specializationIds.Length > 0)
                facultyCounts = facultyCounts.Where(E => !specializationIds.Contains(E.specializationId)).Select(e => e).ToList();
            else
                facultyCounts = facultyCounts.Select(e => e).ToList();
            int rFaculty11 = 0;
            int Group1Assignedfaculty = 0, Group2Assignedfaculty = 0, Group3Assignedfaculty = 0, Group4Assignedfaculty = 0;
            foreach (var item in facultyCounts)
            {
                var pharmadsubgroupmet = "";
                distDeptcount = facultyCounts.Where(d => d.Department == item.Department).Distinct().Count();
                distSpeccount = facultyCounts.Where(d => d.Specialization == item.Specialization && d.Degree == item.Degree).Distinct().Count();
                int indexnow = facultyCounts.IndexOf(item);

                if (indexnow > 0 && facultyCounts[indexnow].Department != facultyCounts[indexnow - 1].Department)
                {
                    deptloop = 1;
                }
                if (indexnow > 0 && facultyCounts[indexnow].Specialization != facultyCounts[indexnow - 1].Specialization)
                {
                    specloop = 1;
                }
                departmentWiseRequiredFaculty = facultyCounts.Where(d => d.Department == item.Department).Select(d => d.requiredFaculty).Sum();

                string minimumRequirementMet = string.Empty;
                int facultyShortage = 0;
                int adjustedFaculty = 0;
                int adjustedPHDFaculty = 0;

                int tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.totalFaculty));//totalFaculty
                int PharmDcount = facultyCounts.Count(F => F.Degree == "Pharm.D");
                int rFaculty = 0;
                int rFaculty1 = 0;
                rFaculty = (int)Math.Ceiling(item.requiredFaculty);
                if (PharmDcount > 0)
                {
                    int facultyCount = facultyCounts.Where(F => F.Degree == "Pharm.D" && F.BPharmacySubGroupMet != null).Select(F => F.BPharmacySubGroup1Count).FirstOrDefault();
                    if ((int)Math.Ceiling(item.requiredFaculty) > 0)
                    {
                        //if (facultyCount > 0)
                        //    rFaculty1 = (int)Math.Ceiling(item.requiredFaculty);
                        //else if ((int)Math.Ceiling(item.requiredFaculty) == 35)
                        //    rFaculty1 = 25;
                        //else if ((int)Math.Ceiling(item.requiredFaculty) == 25)
                        //    rFaculty1 = 15;

                        rFaculty1 = (int)Math.Ceiling(item.requiredFaculty);
                    }

                }



                if (departments.Contains(item.Department))
                {
                    rFaculty = (int)firstYearRequired;
                    departmentWiseRequiredFaculty = (int)firstYearRequired;
                }

                var degreeType = degrees.Where(d => d.degree == item.Degree).Select(d => d.jntuh_degree_type.degreeType).FirstOrDefault();


                if (item.Degree == "Pharm.D")//&& @ViewBag.BpharmcyCondition == "No"
                {
                    tFaculty = item.totalcollegefaculty;
                    rFaculty = (int)Math.Ceiling(BpharmacyrequiredFaculty);

                    var pharmadreqfaculty = (int)Math.Ceiling(item.pharmadrequiredfaculty);
                    if (deptloop == 1)
                    {
                        if (tFaculty >= rFaculty && ((tFaculty - rFaculty) >= pharmadreqfaculty) && (item.BPharmacySubGroup1Count >= (pharmadreqfaculty / 2)) && str == "")
                        {
                            minimumRequirementMet = "YES";
                            adjustedFaculty = tFaculty - rFaculty;

                            if (adjustedFaculty > pharmadreqfaculty)
                            {
                                remainingphramdFaculty = adjustedFaculty - pharmadreqfaculty;
                                adjustedFaculty = pharmadreqfaculty;
                            }
                        }
                        else
                        {
                            remainingphramdFaculty = tFaculty - rFaculty;
                        }
                    }
                }

                if (item.Degree == "Pharm.D PB")//&& @ViewBag.BpharmcyCondition == "No" && @ViewBag.PharmaDCondition == "No"
                {
                    tFaculty = item.totalcollegefaculty;
                    rFaculty = (int)Math.Ceiling(BpharmacyrequiredFaculty);

                    var pharmadpbreqfaculty = (int)Math.Ceiling(item.pharmadPBrequiredfaculty);
                    if (deptloop == 1)
                    {
                        if (tFaculty >= rFaculty && ((tFaculty - rFaculty) >= pharmadpbreqfaculty))
                        {
                            minimumRequirementMet = "YES";
                            adjustedFaculty = tFaculty - rFaculty;

                            if (remainingphramdFaculty > pharmadpbreqfaculty)
                            {
                                adjustedFaculty = pharmadpbreqfaculty;
                                remainingphramdFaculty = remainingphramdFaculty - pharmadpbreqfaculty;
                            }
                            else
                            {
                                adjustedFaculty = remainingphramdFaculty;
                            }
                        }
                    }
                }



                if (item.Degree == "B.Pharmacy" && indexnow > 0 && item.PharmacySubGroup1 != "SubGroup6")
                {
                    tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.BPharmacySubGroup1Count));
                    rFaculty = item.BPharmacySubGroupRequired;
                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "YES";
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            adjustedFaculty = tFaculty;
                            facultyShortage = rFaculty - tFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty > 0 && degreeType.Equals("PG"))
                        {
                            adjustedPHDFaculty = 1;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    else
                    {
                        if (rFaculty <= remainingFaculty && tFaculty >= rFaculty)
                        {
                            minimumRequirementMet = "YES";
                            remainingFaculty = remainingFaculty + (tFaculty - rFaculty);
                            adjustedFaculty = rFaculty;
                        }
                        else if (tFaculty >= rFaculty && rFaculty != 0)
                        {
                            minimumRequirementMet = "NO";
                            adjustedFaculty = rFaculty;
                            facultyShortage = rFaculty - remainingFaculty;
                            //remainingFaculty = 0;
                        }
                        else if (tFaculty < rFaculty)
                        {
                            minimumRequirementMet = "NO";
                            adjustedFaculty = tFaculty;
                            remainingFaculty = remainingFaculty - tFaculty;
                        }
                        if (remainingPHDFaculty > 0 && degreeType.Equals("PG"))
                        {
                            int ProposedIntake = item.ProposedIntake;
                            adjustedPHDFaculty = 1;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }

                }

                else if (item.Degree == "B.Pharmacy" && indexnow == 0 && item.PharmacySubGroup1 != "SubGroup6")
                {
                    tFaculty = (int)Math.Ceiling(Convert.ToDecimal(item.BPharmacySubGroup1Count));
                    rFaculty = item.BPharmacySubGroupRequired;
                    if (deptloop == 1)
                    {
                        if (rFaculty <= tFaculty)
                        {
                            minimumRequirementMet = "YES";
                            remainingFaculty = tFaculty - rFaculty;
                            adjustedFaculty = rFaculty;
                        }
                        else
                        {
                            minimumRequirementMet = "NO";
                            adjustedFaculty = tFaculty;
                            facultyShortage = rFaculty - tFaculty;
                        }

                        remainingPHDFaculty = item.phdFaculty;

                        if (remainingPHDFaculty > 0 && degreeType.Equals("PG"))
                        {
                            adjustedPHDFaculty = 1;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }
                    else
                    {
                        if (rFaculty <= remainingFaculty && tFaculty >= rFaculty)
                        {
                            minimumRequirementMet = "YES";
                            remainingFaculty = remainingFaculty - rFaculty;
                            adjustedFaculty = rFaculty;
                        }
                        else if (tFaculty >= rFaculty)
                        {
                            minimumRequirementMet = "NO";
                            adjustedFaculty = remainingFaculty;
                            facultyShortage = rFaculty - remainingFaculty;
                            remainingFaculty = 0;
                        }
                        else if (tFaculty < rFaculty)
                        {
                            minimumRequirementMet = "NO";
                            adjustedFaculty = tFaculty;
                            //remainingFaculty = remainingFaculty - tFaculty;
                        }




                        if (remainingPHDFaculty > 0 && degreeType.Equals("PG"))
                        {
                            adjustedPHDFaculty = 1;
                            remainingPHDFaculty = remainingPHDFaculty - 1;
                        }
                    }

                }

                ////New
                //var mpharmremainingfaculty = TotalcollegeFaculty - (int)Math.Ceiling(BpharmacyrequiredFaculty);
                //if (item.Degree == "M.Pharmacy" && PharmDRequiredFaculty <= 0 && item.PharmacyspecializationWiseFaculty >= 1)
                //{
                //    tFaculty = TotalcollegeFaculty;
                //    rFaculty = (int)Math.Ceiling(BpharmacyrequiredFaculty);
                //    //remainingFaculty = tFaculty - rFaculty;

                //    var mpharmacyreqfaculty = (int)Math.Ceiling(item.requiredFaculty);
                //    if (tFaculty >= rFaculty && ((tFaculty - rFaculty) >= mpharmacyreqfaculty))
                //    {
                //        minimumRequirementMet = "YES";
                //        adjustedFaculty = tFaculty - rFaculty;

                //        if (remainingFaculty > mpharmacyreqfaculty)
                //        {
                //            adjustedFaculty = mpharmacyreqfaculty;
                //            remainingFaculty = remainingFaculty - mpharmacyreqfaculty;
                //        }
                //        else
                //        {
                //            adjustedFaculty = remainingFaculty;
                //        }
                //    }
                //}

//New


                else if (item.Degree == "M.Pharmacy" && item.PharmacyspecializationWiseFaculty >= 1)//&& (PharmDRequiredFaculty > 0 || PharmDPBRequiredFaculty > 0)
                {


                    tFaculty = PharmDRequiredFaculty > 0 ? remainingphramdFaculty : remainingmpharmacyfaculty;
                    rFaculty = (int)Math.Ceiling(item.requiredFaculty);


                    if (rFaculty <= tFaculty && remainingphramdFaculty > 0)
                    {
                        //minimumRequirementMet = "YES";
                        remainingphramdFaculty = remainingphramdFaculty - rFaculty;
                        adjustedFaculty = rFaculty;
                    }
                    else if (rFaculty <= tFaculty && remainingphramdFaculty == 0 && remainingmpharmacyfaculty > 0)
                    {
                        // minimumRequirementMet = "NO";
                        remainingFaculty = remainingFaculty - rFaculty;
                        adjustedFaculty = rFaculty;
                        remainingmpharmacyfaculty = remainingmpharmacyfaculty - rFaculty;
                    }

                    else if (tFaculty <= rFaculty && remainingphramdFaculty > 0)
                    {
                        remainingphramdFaculty = remainingphramdFaculty - rFaculty;
                        adjustedFaculty = tFaculty;
                    }
                    else if (tFaculty <= rFaculty && remainingphramdFaculty == 0 && remainingmpharmacyfaculty > 0)
                    {
                        remainingFaculty = remainingFaculty - rFaculty;
                        adjustedFaculty = tFaculty;
                        remainingmpharmacyfaculty = remainingmpharmacyfaculty - tFaculty;
                    }
                    if (remainingPHDFaculty > 0 && degreeType.Equals("PG"))
                    {
                        adjustedPHDFaculty = 1;
                        remainingPHDFaculty = remainingPHDFaculty - 1;
                    }
                }



                if ((item.Degree == "B.Pharmacy") && item.PharmacyGroup1 == "Group1")
                {
                    if (item.BPharmacySubGroup1Count >= item.BPharmacySubGroupRequired)
                    {
                        item.BPharmacySubGroupMet = "No Deficiency";
                    }
                    else
                    {
                        item.BPharmacySubGroupMet = "Deficiency";//Yes
                    }
                }

                else if (item.Degree == "Pharm.D" && item.PharmacyGroup1 == "Group1")
                {

                    if (item.BPharmacySubGroup1Count >= item.BPharmacySubGroupRequired && adjustedFaculty >= Math.Ceiling(PharmDRequiredFaculty) && bpharmacycondition == "No")
                    {
                        item.BPharmacySubGroupMet = "No Deficiency";
                        pharmadsubgroupmet = "No";
                    }
                    else
                    {
                        item.BPharmacySubGroupMet = "Deficiency";
                    }
                }

                else if (item.Degree == "Pharm.D PB" && item.PharmacyGroup1 == "Group1")
                {
                    if (item.BPharmacySubGroup1Count >= item.BPharmacySubGroupRequired && adjustedFaculty >= Math.Ceiling(pharmadpbrequiredfaculty) && bpharmacycondition == "No") //&& pharmadsubgroupmet == "No"
                    {
                        item.BPharmacySubGroupMet = "No Deficiency";
                    }
                    else
                    {
                        item.BPharmacySubGroupMet = "Deficiency";
                    }
                }



                if (item.Degree == "M.Pharmacy" && item.PharmacyspecializationWiseFaculty >= 1 && bpharmacycondition == "No")//&& @adjustedFaculty == rFaculty
                {

                    if (bpharmacycondition == "No" && item.phdFaculty >= 1)//&& pharmdcondition == "No" && pharmadpbcondition == "No"
                    {

                        //if (PharmDcount>0)int
                        int Group1facultyCount = facultyCounts.Count(F => F.Degree == "M.Pharmacy" && (F.specializationId == 120 || F.specializationId == 115));
                        int Group2facultyCount = facultyCounts.Count(F => F.Degree == "M.Pharmacy" && (F.specializationId == 117 || F.specializationId == 116 || F.specializationId == 123 || F.specializationId == 124));
                        int Group3facultyCount = facultyCounts.Count(F => F.Degree == "M.Pharmacy" && (F.specializationId == 122));
                        int Group4facultyCount = facultyCounts.Count(F => F.Degree == "M.Pharmacy" && (F.specializationId == 121 || F.specializationId == 117));


                        if (item.specializationId == 120 || item.specializationId == 115)
                        {
                            #region Group1 Conditions Start
                            int Pharmaceutics = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 120);
                            int IndustrialPharmacy = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 115);
                            int MinumGroupRequired = 0, TotalFaculty = 0, PharmacyRequiredFaculty = 0;
                            PharmacyRequiredFaculty = facultyCounts.Where(F => F.Degree == "B.Pharmacy" && F.PharmacySpec1 == "Group1 (Pharmaceutics , Industrial Pharmacy)").Select(F => F.BPharmacySubGroupRequired).FirstOrDefault();
                            if (Group1facultyCount == 1)
                            {
                                if (item.specializationId == 120 && GroupCount1 == 0)
                                {
                                    MinumGroupRequired = 5;
                                    TotalFaculty = (Pharmaceutics + IndustrialPharmacy) - PharmacyRequiredFaculty;
                                    if (TotalFaculty > 0)
                                    {
                                        if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group1Assignedfaculty && Pharmaceutics >= 2)
                                                {
                                                    GroupCount1++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }


                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {

                                            if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                            {
                                                if (item.PharmacyspecializationWiseFaculty >= 1)
                                                {
                                                    Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                    if (TotalFaculty >= Group1Assignedfaculty && Pharmaceutics >= 2)
                                                    {
                                                        GroupCount1++;
                                                        if (adjustedFaculty == 0)
                                                            adjustedFaculty = 2;
                                                        item.BPharmacySubGroupMet = "No Deficiency";
                                                    }
                                                    else
                                                        item.BPharmacySubGroupMet = "Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                                else if (item.specializationId == 115 && GroupCount1 == 0)
                                {
                                    MinumGroupRequired = 5;
                                    TotalFaculty = (Pharmaceutics + IndustrialPharmacy) - PharmacyRequiredFaculty;
                                    if (TotalFaculty > 0)
                                    {
                                        if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group1Assignedfaculty && IndustrialPharmacy >= 2)
                                                {
                                                    GroupCount1++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }

                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {

                                            if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                            {
                                                if (item.PharmacyspecializationWiseFaculty >= 1)
                                                {
                                                    Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                    if (TotalFaculty >= Group1Assignedfaculty && IndustrialPharmacy >= 2)
                                                    {
                                                        GroupCount1++;
                                                        if (adjustedFaculty == 0)
                                                            adjustedFaculty = 2;
                                                        item.BPharmacySubGroupMet = "No Deficiency";
                                                    }
                                                    else
                                                        item.BPharmacySubGroupMet = "Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                            }
                            else if (Group1facultyCount == 2)
                            {
                                if (item.specializationId == 120 && GroupCount1 == 0)
                                {
                                    MinumGroupRequired = 5;
                                    TotalFaculty = (Pharmaceutics + IndustrialPharmacy) - PharmacyRequiredFaculty;
                                    if (TotalFaculty > 0)
                                    {
                                        if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group1Assignedfaculty && Pharmaceutics >= 2)
                                                {
                                                    GroupCount1++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }

                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {

                                            if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                            {
                                                if (item.PharmacyspecializationWiseFaculty >= 1)
                                                {
                                                    Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                    if (TotalFaculty >= Group1Assignedfaculty && Pharmaceutics >= 2)
                                                    {
                                                        GroupCount1++;
                                                        if (adjustedFaculty == 0)
                                                            adjustedFaculty = 2;
                                                        item.BPharmacySubGroupMet = "No Deficiency";
                                                    }
                                                    else
                                                        item.BPharmacySubGroupMet = "Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                                else if (item.specializationId == 120 && GroupCount1 == 1)
                                {
                                    MinumGroupRequired = 6;
                                    TotalFaculty = (Pharmaceutics + IndustrialPharmacy) - PharmacyRequiredFaculty;
                                    if (TotalFaculty > 0)
                                    {
                                        if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group1Assignedfaculty && Pharmaceutics >= 2)
                                                {
                                                    GroupCount1++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {

                                            if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                            {
                                                if (item.PharmacyspecializationWiseFaculty >= 1)
                                                {
                                                    Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                    if (TotalFaculty >= Group1Assignedfaculty && Pharmaceutics >= 2)
                                                    {
                                                        GroupCount1++;
                                                        if (adjustedFaculty == 0)
                                                            adjustedFaculty = 2;
                                                        item.BPharmacySubGroupMet = "No Deficiency";
                                                    }
                                                    else
                                                        item.BPharmacySubGroupMet = "Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                                else if (item.specializationId == 115 && GroupCount1 == 0)
                                {
                                    MinumGroupRequired = 5;
                                    TotalFaculty = (Pharmaceutics + IndustrialPharmacy) - PharmacyRequiredFaculty;
                                    if (TotalFaculty > 0)
                                    {
                                        if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group1Assignedfaculty && IndustrialPharmacy >= 2)
                                                {
                                                    GroupCount1++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {

                                            if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                            {
                                                if (item.PharmacyspecializationWiseFaculty >= 1)
                                                {
                                                    Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                    if (TotalFaculty >= Group1Assignedfaculty && IndustrialPharmacy >= 2)
                                                    {
                                                        GroupCount1++;
                                                        if (adjustedFaculty == 0)
                                                            adjustedFaculty = 2;
                                                        item.BPharmacySubGroupMet = "No Deficiency";
                                                    }
                                                    else
                                                        item.BPharmacySubGroupMet = "Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                                else if (item.specializationId == 115 && GroupCount1 == 1)
                                {
                                    MinumGroupRequired = 6;
                                    TotalFaculty = (Pharmaceutics + IndustrialPharmacy) - PharmacyRequiredFaculty;
                                    if (TotalFaculty > 0)
                                    {
                                        if (PharmacyRequiredFaculty > MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group1Assignedfaculty && IndustrialPharmacy >= 2)
                                                {
                                                    GroupCount1++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }

                                        else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                            {
                                                if (item.PharmacyspecializationWiseFaculty >= 1)
                                                {
                                                    Group1Assignedfaculty = Group1Assignedfaculty + Group1Assignedfaculty > 0 ? 1 : 2;
                                                    if (TotalFaculty >= Group1Assignedfaculty && IndustrialPharmacy >= 2)
                                                    {
                                                        GroupCount1++;
                                                        if (adjustedFaculty == 0)
                                                            adjustedFaculty = 2;
                                                        item.BPharmacySubGroupMet = "No Deficiency";
                                                    }
                                                    else
                                                        item.BPharmacySubGroupMet = "Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }

                            }
                            #endregion Group1 Conditions End

                        }
                        else if (item.specializationId == 117 || item.specializationId == 116 || item.specializationId == 123 || item.specializationId == 124)
                        {
                            #region Group2 Conditions Start
                            int PharmaceuticalChemistry = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 117);
                            int PAQA = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 116);
                            int QA = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 123);
                            int QAPRA = facultyCounts.Count(F => F.specializationId == 124);


                            int Pharmacognosy = facultyCounts.Count(F => F.specializationId == 117);
                            int PharmacyRequiredFaculty = facultyCounts.Where(F => F.Degree == "B.Pharmacy" && F.PharmacySpec1 == "Group2 (Pharmaceutical Chemistry,Pharmaceutical Analysis, PAQA, QA, QAPRA)").Select(F => F.BPharmacySubGroupRequired).FirstOrDefault();
                            int MinumGroupRequired = 0, TotalFaculty = 0;
                            if (item.specializationId == 117)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = (PAQA + QA + QAPRA + PharmaceuticalChemistry) - PharmacyRequiredFaculty;
                                if (TotalFaculty > 0)
                                {
                                    if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                    {
                                        if (item.PharmacyspecializationWiseFaculty >= 1)
                                        {
                                            Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                            if (TotalFaculty >= Group2Assignedfaculty && PharmaceuticalChemistry >= 2)
                                            {
                                                GroupCount2++;
                                                if (adjustedFaculty == 0)
                                                    adjustedFaculty = 2;
                                                item.BPharmacySubGroupMet = "No Deficiency";
                                            }

                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                    {

                                        if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group2Assignedfaculty && PharmaceuticalChemistry >= 2)
                                                {
                                                    GroupCount2++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }

                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";
                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }
                            else if (item.specializationId == 116)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = (PAQA + QA + QAPRA + PharmaceuticalChemistry) - PharmacyRequiredFaculty;
                                if (TotalFaculty > 0)
                                {
                                    if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                    {
                                        if (item.PharmacyspecializationWiseFaculty >= 1)
                                        {
                                            Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                            if (TotalFaculty >= Group2Assignedfaculty && PAQA >= 2)
                                            {
                                                GroupCount2++;
                                                if (adjustedFaculty == 0)
                                                    adjustedFaculty = 2;
                                                item.BPharmacySubGroupMet = "No Deficiency";
                                            }

                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                    {

                                        if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group2Assignedfaculty && PAQA >= 2)
                                                {
                                                    GroupCount2++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }

                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";
                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }
                            else if (item.specializationId == 123)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = (PAQA + QA + QAPRA + PharmaceuticalChemistry) - PharmacyRequiredFaculty;
                                if (TotalFaculty > 0)
                                {
                                    if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                    {
                                        if (item.PharmacyspecializationWiseFaculty >= 1)
                                        {
                                            Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                            if (TotalFaculty >= Group2Assignedfaculty && QA >= 2)
                                            {
                                                GroupCount2++;
                                                if (adjustedFaculty == 0)
                                                    adjustedFaculty = 2;
                                                item.BPharmacySubGroupMet = "No Deficiency";
                                            }

                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                    {

                                        if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group2Assignedfaculty && QA >= 2)
                                                {
                                                    GroupCount2++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }

                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";
                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }
                            else if (item.specializationId == 124)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = (PAQA + QA + QAPRA + PharmaceuticalChemistry) - PharmacyRequiredFaculty;
                                if (TotalFaculty > 0)
                                {
                                    if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                    {
                                        if (item.PharmacyspecializationWiseFaculty >= 1)
                                        {
                                            Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                            if (TotalFaculty >= Group2Assignedfaculty && QAPRA >= 2)
                                            {
                                                GroupCount2++;
                                                if (adjustedFaculty == 0)
                                                    adjustedFaculty = 2;
                                                item.BPharmacySubGroupMet = "No Deficiency";
                                            }

                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                    {

                                        if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                Group2Assignedfaculty = Group2Assignedfaculty + Group2Assignedfaculty > 0 ? 1 : 2;
                                                if (TotalFaculty >= Group2Assignedfaculty && QAPRA >= 2)
                                                {
                                                    GroupCount2++;
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }

                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";
                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }


                            #endregion Group2 Conditions End

                        }
                        else if (item.specializationId == 122)
                        {
                            #region Group3 Conditions Start
                            int MinumGroupRequired = 5;
                            int TotalFaculty = 0;
                            int PharmacyRequiredFaculty = facultyCounts.Where(F => F.Degree == "B.Pharmacy" && F.PharmacySpec1 == "Group3 (Pharmacology, Pharm-D, Pharm-DPB, Pharmacy Practice)").Select(F => F.BPharmacySubGroupRequired).FirstOrDefault();
                            int Pharmacology = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 122);
                            int PharmDPB = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 19);
                            int PharmD = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 18);
                            if (item.specializationId == 122)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = (Pharmacology + PharmDPB + PharmD) - PharmacyRequiredFaculty;
                                if (TotalFaculty > 0)
                                {
                                    if (PharmacyRequiredFaculty > MinumGroupRequired)
                                    {
                                        if (item.PharmacyspecializationWiseFaculty >= 1)
                                        {
                                            if (TotalFaculty >= 2)
                                            {
                                                if (adjustedFaculty == 0)
                                                    adjustedFaculty = 2;
                                                item.BPharmacySubGroupMet = "No Deficiency";
                                            }

                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                    {

                                        if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                if (TotalFaculty >= 2)
                                                {
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";
                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }

                            #endregion Group3 Conditions End


                        }
                        else if (item.specializationId == 121)
                        {
                            #region Group4 Conditions Start
                            int MinumGroupRequired = 5;
                            int TotalFaculty = 0;
                            int PharmacyRequiredFaculty = facultyCounts.Where(F => F.Degree == "B.Pharmacy" && F.PharmacySpec1 == "Group4 (Pharmacognosy, Pharmaceutical Chemistry, Pharmaceutical Biotechonology, Phyto Pharmacy, Phyto medicine)").Select(F => F.BPharmacySubGroupRequired).FirstOrDefault();
                            int Pharmacognosy = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 121);
                            int PharmaceuticalChemistry = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 117);
                            if (item.specializationId == 121)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = (Pharmacognosy) - PharmacyRequiredFaculty;
                                if (TotalFaculty > 0)
                                {
                                    if (PharmacyRequiredFaculty >= MinumGroupRequired)
                                    {
                                        if (item.PharmacyspecializationWiseFaculty >= 1)
                                        {
                                            if (TotalFaculty >= 2)
                                            {
                                                if (adjustedFaculty == 0)
                                                    adjustedFaculty = 2;
                                                item.BPharmacySubGroupMet = "No Deficiency";
                                            }

                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                    {

                                        if ((PharmacyRequiredFaculty + TotalFaculty) >= MinumGroupRequired)
                                        {
                                            if (item.PharmacyspecializationWiseFaculty >= 1)
                                            {
                                                if (TotalFaculty >= 2)
                                                {
                                                    if (adjustedFaculty == 0)
                                                        adjustedFaculty = 2;
                                                    item.BPharmacySubGroupMet = "No Deficiency";
                                                }
                                                else
                                                    item.BPharmacySubGroupMet = "Deficiency";
                                            }
                                            else
                                                item.BPharmacySubGroupMet = "Deficiency";
                                        }
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";
                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }
                            #endregion Group4 Conditions End


                        }


                        else if (item.specializationId == 114)
                        {

                            int HospitalClinicalPharmacy = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 114);
                            int MinumGroupRequired = 5;
                            int TotalFaculty = 0;

                            if (item.specializationId == 114)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = HospitalClinicalPharmacy;
                                if (TotalFaculty > 0)
                                {

                                    if (item.PharmacyspecializationWiseFaculty >= 1)
                                    {
                                        if (TotalFaculty >= 5)
                                            item.BPharmacySubGroupMet = "No Deficiency";
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";


                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }
                        }
                        else if (item.specializationId == 118)
                        {
                            int PharmaceuticalManagementRegulatoryAffaires = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 118);
                            int MinumGroupRequired = 5;
                            int TotalFaculty = 0;
                            if (item.specializationId == 118)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = PharmaceuticalManagementRegulatoryAffaires;
                                if (TotalFaculty > 0)
                                {

                                    if (item.PharmacyspecializationWiseFaculty >= 1)
                                    {
                                        if (TotalFaculty >= 5)
                                            item.BPharmacySubGroupMet = "No Deficiency";
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }

                        }
                        else if (item.specializationId == 119)
                        {
                            int PharmaceuticalTechnology = jntuh_registered_faculty.Count(F => F.PGSpecializationId == 119);
                            int MinumGroupRequired = 5;
                            int TotalFaculty = 0;
                            if (item.specializationId == 119)
                            {
                                MinumGroupRequired = 5;
                                TotalFaculty = PharmaceuticalTechnology;
                                if (TotalFaculty > 0)
                                {

                                    if (item.PharmacyspecializationWiseFaculty >= 1)
                                    {
                                        if (TotalFaculty >= 5)
                                            item.BPharmacySubGroupMet = "No Deficiency";
                                        else
                                            item.BPharmacySubGroupMet = "Deficiency";
                                    }
                                    else
                                        item.BPharmacySubGroupMet = "Deficiency";

                                }
                                else
                                    item.BPharmacySubGroupMet = "Deficiency";

                            }
                        }






                        //    if (item.specializationId == 120)
                        //    {
                        //        int SuticsFaculty = (item.specializationWiseFaculty) - 6;
                        //        if (SuticsFaculty >= Math.Ceiling(item.requiredFaculty) && SuticsFaculty > 0)
                        //            item.BPharmacySubGroupMet = "No Deficiency";
                        //        else
                        //            item.BPharmacySubGroupMet = "Deficiency";
                        //    }
                        //    else if (item.specializationId == 121)
                        //    {
                        //        int SuticsFaculty = (item.specializationWiseFaculty) - 6;
                        //        if (SuticsFaculty >= Math.Ceiling(item.requiredFaculty) && SuticsFaculty > 0)
                        //            item.BPharmacySubGroupMet = "No Deficiency";
                        //        else
                        //            item.BPharmacySubGroupMet = "Deficiency";
                        //    }
                        //    else if (item.specializationId == 122)
                        //    {
                        //        int SuticsFaculty = (item.specializationWiseFaculty) - 5;
                        //        if (SuticsFaculty >= Math.Ceiling(item.requiredFaculty) && SuticsFaculty > 0)
                        //            item.BPharmacySubGroupMet = "No Deficiency";
                        //        else
                        //            item.BPharmacySubGroupMet = "Deficiency";
                        //    }

                        //    else if (item.specializationId == 117)
                        //    {
                        //        int SuticsFaculty = (item.specializationWiseFaculty) - 4;
                        //        if ((SuticsFaculty >= Math.Ceiling(item.requiredFaculty)) && SuticsFaculty > 0)
                        //            item.BPharmacySubGroupMet = "No Deficiency";
                        //        else
                        //            item.BPharmacySubGroupMet = "Deficiency";
                        //    }
                        //    else
                        //        item.BPharmacySubGroupMet = "No Deficiency";
                        //}
                        ////else if (bpharmacycondition == "No")//&& pharmdcondition == "No" && pharmadpbrequiredfaculty == 0
                        ////{
                        ////    item.BPharmacySubGroupMet = "No";
                        ////}
                        //else
                        //{
                        //    item.BPharmacySubGroupMet = "Deficiency";
                        //}

                    }
                }
                else if ((item.Degree == "M.Pharmacy" && item.PharmacyspecializationWiseFaculty < 1) && bpharmacycondition == "Yes")
                {
                    item.BPharmacySubGroupMet = "Deficiency";
                }
                else if ((item.Degree == "M.Pharmacy" && item.PharmacyspecializationWiseFaculty >= 1) && bpharmacycondition == "Yes")
                {
                    item.BPharmacySubGroupMet = "Deficiency";
                }
                else if ((item.Degree == "M.Pharmacy" && item.PharmacyspecializationWiseFaculty <= 1) && bpharmacycondition == "No")
                {
                    item.BPharmacySubGroupMet = "Deficiency";
                }
                //else if (item.Degree == "M.Pharmacy")
                //{
                //    item.BPharmacySubGroupMet = "Yes";
                //}


                faculty += "<tr>";
                faculty += "<td class='col2' style='text-align: center; vertical-align: top;width:10px' rowspan='1'>" + (facultyCounts.IndexOf(item) + 1) + "</td>";

                faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.Department + "</td>";
                if (specloop == 1)
                    faculty += "<td rowspan='" + distSpeccount + "'  class='col2' style='text-align: center; vertical-align: center;'>" + item.Degree + "</td>";
                if (specloop == 1)
                    faculty += "<td rowspan='" + distSpeccount + "'  class='col2' style='text-align: center; vertical-align: center;'>" + item.Specialization + "</td>";


                //faculty += "<td class='col2' style='text-align: center; vertical-align: top;font-weight: bold'>" + item.AffliationStatus + "</td>";
                if (item.totalIntake > 0)
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.totalIntake + "</td>";
                }
                else
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                }
                if (item.totalIntake > 0)
                {
                    if (item.Degree == "M.Pharmacy")
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>15</td>";
                    else
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.approvedIntake1 + "</td>";
                }
                else
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                }

                if (Math.Ceiling(item.requiredFaculty) > 0)
                {
                    if (rFaculty1 == 25 || rFaculty1 == 15)
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + rFaculty1 + " </td>";
                    else
                    {
                        if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet == null && PharmacyandPharmDMeet == "Yes")
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>10</td>";
                        else if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet == null && PharmacyandPharmDMeet == "No")
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>10</td>";
                        else
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + Math.Ceiling(item.requiredFaculty) + " </td>";
                    }

                }
                else
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                }

                if (item.Degree == "B.Pharmacy" && item.PharmacySubGroup1 == null)
                {
                    if (TotalcollegeFaculty > rFaculty1)
                    {
                        //faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + Math.Ceiling(item.requiredFaculty) + " </td>"; 
                        if (PharmDcount > 0)
                        {
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + rFaculty1 + " </td>";
                            rFaculty11 = rFaculty1;
                        }
                        else
                        {
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + Math.Ceiling(item.requiredFaculty) + " </td>";
                            rFaculty11 = (int)Math.Ceiling(item.requiredFaculty);
                        }


                    }
                    else
                    {
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + TotalcollegeFaculty + " </td>";
                    }

                }
                else if (item.Degree == "M.Pharmacy" || item.Degree == "Pharm.D" || item.Degree == "Pharm.D PB")
                {

                    if (item.BPharmacySubGroupMet == "Deficiency")
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + 0 + "</td>";
                    else
                    {
                        totalusedfaculty = totalusedfaculty + adjustedFaculty;
                        if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet == null && PharmacyandPharmDMeet == "Yes")
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'> 10  </td>";
                        else if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet != null && PharmacyandPharmDMeet == "Yes")
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                        else
                            faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + adjustedFaculty + " </td>";
                    }

                }
                else if (item.Degree == "B.Pharmacy" && item.PharmacySubGroup1 != null)
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'> </td>";
                }
                //if (item.PharmacySubGroup1 == "Group1 (Pharmacy Practice, Pharm D, Pharmacology)")
                //    faculty += "<td class='col2' style='text-align: left; vertical-align: top;'>See Annexure</td>";
                //else
                    faculty += "<td class='col2' style='text-align: left; vertical-align: top;'>" + item.PharmacySubGroup1 + "</td>";
                if (item.BPharmacySubGroupRequired > 0 && item.Degree != "M.Pharmacy")
                {

                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.BPharmacySubGroupRequired + "</td>";
                }
                //else if (item.Degree == "M.Pharmacy")
                //{
                //    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.BPharmacySubGroupRequired + "</td>";
                //}
                else
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                }
                if (item.BPharmacySubGroupRequired > 0 && item.Degree != "M.Pharmacy")
                {
                    if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet != null && PharmacyandPharmDMeet == "Yes")
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>5</td>";
                    //else if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet == null && PharmacyandPharmDMeet == "Yes")
                    //faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>5</td>";
                    else
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + adjustedFaculty + "</td>";
                }
                else if (item.Degree == "M.Pharmacy")
                {
                    if (item.BPharmacySubGroupMet == "Deficiency")
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + 0 + "</td>";
                    else
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + adjustedFaculty + "</td>";
                }
                else
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                }

                if (item.BPharmacySubGroupMet == null && item.Degree == "B.Pharmacy")
                {
                    if (bpharmacycondition == "No")
                    {
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'><b> B.Pharmacy No Deficiency.</b></td>";
                    }
                    else
                    {
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'><b> B.Pharmacy Deficiency Exists & Hence Other Degrees will not be considered. </b></td>";
                        str = "Deficiency";
                    }
                }
                else
                {
                    // if (Math.Ceiling(item.requiredFaculty) >= adjustedFaculty)
                    if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet == null && PharmacyandPharmDMeet == "Yes")
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>No Deficiency</td>";
                    else if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet != null && PharmacyandPharmDMeet == "Yes")
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>No Deficiency</td>";
                    else if (item.Degree == "Pharm.D" && item.BPharmacySubGroupMet == null && PharmacyandPharmDMeet == "No")
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>Deficiency</td>";
                    else
                        faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.BPharmacySubGroupMet + "</td>";
                    //else
                    // faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>Deficiency</td>";
                }

                if (item.phdFaculty > 0 || item.totalIntake > 0)
                {
                    //if (item.BPharmacySubGroupMet == "Deficiency")
                    //    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + 0 + "</td>";
                    //else
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>" + item.phdFaculty + "</td>";
                }
                else
                {
                    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'></td>";
                }

                //if (adjustedPHDFaculty > 0)
                //{
                //    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>NO</td>";
                //}
                //else if (item.approvedIntake1 > 0)
                //{
                //    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>YES</td>";
                //}
                //else
                //{
                //    faculty += "<td class='col2' style='text-align: center; vertical-align: top;'>NO</td>";
                //}

                faculty += "</tr>";




                deptloop++;
                specloop++;
            }

            int PharmacyFaculty1 = 0;
            if (rFaculty11 == 25 || rFaculty11 == 15)
                PharmacyFaculty1 = rFaculty11;
            else
                PharmacyFaculty1 = (int)Math.Ceiling(BpharmacyrequiredFaculty);
            var requiredfacultybpharmacy = rFaculty11;
            var collegetotalfaculty = TotalcollegeFaculty;
            var conditionchecked = totalusedfaculty + requiredfacultybpharmacy;

            if (collegetotalfaculty >= conditionchecked && totalusedfaculty > 0)
            {
                var additionalfaculty = collegetotalfaculty - conditionchecked;
                faculty += "<tr><td align='center' colspan='13' style='font-size: 14px; font-weight: normal;'><b> Additional Faculty : " + additionalfaculty + "</b></td></tr>";
            }
            else if (totalusedfaculty == 0)
            {
                var additionalfaculty = collegetotalfaculty - requiredfacultybpharmacy;
                additionalfaculty = additionalfaculty >= 0 ? additionalfaculty : 0;
                faculty += "<tr><td align='center' colspan='13' style='font-size: 14px; font-weight: normal;'><b> Additional Faculty : " + additionalfaculty + "</b></td></tr>";
            }
            else
            {
                faculty += "<tr><td align='center' colspan='13' style='font-size: 14px; font-weight: normal;'><b> Additional Faculty : " + 0 + "</b></td></tr>";
            }

            //if ((remainingphramdFaculty > 0))
            //{
            //    faculty += "<tr><td align='center' colspan='13' style='font-size: 14px; font-weight: normal;'><b> Additional Faculty : " + remainingphramdFaculty + "</b></td></tr>";
            //}
            //else
            //{
            //    faculty += "<tr><td align='center' colspan='13' style='font-size: 14px; font-weight: normal;'><b> Additional Faculty : " + 0 + "</b></td></tr>";
            //}
            faculty += "<tr><td align='center' colspan='13' style='font-size: 14px; font-weight: normal;'><b> Total Faculty : " + TotalcollegeFaculty + "</b></td></tr>";
            faculty += "</table>";

            faculty += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
            faculty += "<tr>";
            faculty += "<td align='left'>* II, III & IV Year for B.Pharmacy</td>";
            faculty += "<td align='left'>* I, II Year for M.Pharmacy</td>";
            faculty += "<td align='left'>* I, II, III , IV & V Year for Pharm.D</td>";
            faculty += "<td align='left'>* IV, V Year for Pharm.D PB</td>";
            faculty += "</tr>";
            faculty += "</table>";



            //faculty += "<p><b>Note: </b> As per the F.No02.268/2015-PCI, 14-136/2014-PCI (M.Pharm) pg. no.1:</p>";
            //faculty += "<br/><p> &nbsp;&nbsp;&nbsp;<b>1)</b> Specialization-wise requirement of additional staff for conduct of M.Pharm course has been prescribed. However, as this needs clarity the following details are provided for consideration for granting approval of M.Pharm course:</p>";
            //faculty += "<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>a)</b> The number seats approved for admission to the M.Pharm course shall be 3 students per PG teacher (1:3).  Further, for seeking permission to start the M.Pharm course or extension of approval or increase in intake upto 15 seats per specialization as per PCI norms.</p>";
            //faculty += "<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>b)</b> In addition to the minimum requirement of staff for conduct of B.Pharm and Pharm.D courses (if the institution is also conducting B.Pharm programme) the department in which the M.Pharm Course is being introduced shall have two additional staff (with concerned specialization) per specialization and the department should have minimum of 5 faculty in the said department.</p>";
            //faculty += "<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>c)</b> Two Faculty members with M.Pharm qualification in concerned specialization with more than five years experience in teaching be appointed for each specialization.</p>";
            //faculty += "<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>d)</b> If College is offering more than one M.Pharmacy courses from a group of equivalence courses,  then points a) and b) are applicable. Further, the sharing faculty showing facility (5-2)=3can be among equivalence group but for only one  course. </p>";
            //faculty += "<br/><p> &nbsp;&nbsp;&nbsp;<b>2)</b> The Principal having M.Pharm, Ph.D. qualification can be considered as Professor / HoD of the concerned department and is eligible to teach the concerned subject / specialization in UG/PG course in Pharmacy.</p>";



            facultyAdmittedIntakeZero += "</table>";



            faculty += facultyAdmittedIntakeZero;

            var collegeFacultycount = 0;

            //string[] collegefacultyRegistrationNo = db.jntuh_college_faculty_registered.AsNoTracking().Where(e => e.collegeId == collegeID).Select(e => e.RegistrationNumber).ToArray();
            //var jntuh_college_faculty_principal = db.jntuh_college_principal_registered.Where(cf => cf.collegeId == collegeID).ToList();
            //var principalRegno = jntuh_college_faculty_principal.Select(cf => cf.RegistrationNumber).FirstOrDefault();


            //var registeredFaculty = db.jntuh_registered_faculty.Where(rf => collegefacultyRegistrationNo.Contains(rf.RegistrationNumber.Trim())).ToList();
            //var jntuh_registered_faculty1 =
            //        registeredFaculty.Where(rf => rf.type != "Adjunct" && ((rf.Absent == false) && (rf.NotQualifiedAsperAICTE == false)//&& rf.Noform16Verification == false && rf.NoForm16 == false
            //                                            && (rf.NoSCM17 == false) && (rf.PANNumber != null) && (rf.IncompleteCertificates == false) && (rf.Blacklistfaculy == false) && (rf.MultipleRegInSameCollege == false || rf.MultipleRegInSameCollege == null) && rf.NoRelevantUG == "No" && rf.NoRelevantPG == "No" && rf.NORelevantPHD == "No" && rf.NotIdentityfiedForanyProgram == false && (rf.InvalidPANNumber == false || rf.InvalidPANNumber == null) && (rf.PhdUndertakingDocumentstatus == true || rf.PhdUndertakingDocumentstatus == null) && (rf.AppliedPAN == false || rf.AppliedPAN == null) && (rf.SamePANUsedByMultipleFaculty == false || rf.SamePANUsedByMultipleFaculty == null) && rf.BASStatusOld == "Y")).Select(rf => new
            //            {
            //                //Departmentid = rf.DepartmentId,
            //                RegistrationNumber = rf.RegistrationNumber,
            //                //Department = rf.jntuh_department.departmentName,
            //                HighestDegreeID = rf.jntuh_registered_faculty_education.Count() != 0 ? rf.jntuh_registered_faculty_education.Select(e => e.educationId).Max() : 0,
            //                IsApproved = rf.isApproved,
            //                PanNumber = rf.PANNumber,
            //                AadhaarNumber = rf.AadhaarNumber,
            //                NoForm16 = rf.NoForm16,
            //                TotalExperience = rf.TotalExperience
            //            }).ToList();


            jntuh_registered_faculty1 = jntuh_registered_faculty1.Where(e => e.HighestDegreeID >= 4).ToList();

            collegeFacultycount = jntuh_registered_faculty1.Count;



            var lastyearfacultycount = db.jntuh_notin415faculty.Where(i => i.CollegeId == collegeID).Select(i => i).FirstOrDefault();

            int count1 = 0;
            //var nodocumentsdetails = db.jntuh_deficiencyrepoprt_college_pendingdocuments.Where(i => i.CollegeId == collegeID).Select(i => i).FirstOrDefault();




            var AffiliationFeeandCommanFee = db.jntuh_college_paymentoffee.Where(e => e.collegeId == collegeID).Select(e => e).FirstOrDefault();

            List<int?> NoBAS = new List<int?> { 2, 59, 247, 415, 419, 239, 447 };



            //PENDING SUPPORTING DOCUMENTS FOR ONLINE  DATA:
            #region PENDING SUPPORTING DOCUMENTS FOR ONLINE  DATA:
            if (collegeStatus != null)
            {
                if (collegeStatus.SIStatus == true)
                {
                    faculty += "<p><b>Note :In so far as P.G. programs are concerned the University has issued a separate show cause notice Dt. 15.05.2017 based on Surprise Inspection Committee Reports.</b></p>";
                }
            }


            faculty += "<br/><table><tr><td align='left'><b><u>Pending Issues:</u></b></td>";
            faculty += "</tr></table>";
            faculty += "<ul style='list-style-type:disc'>";
            if (NoBAS.Contains(collegeID))
            {
                faculty += "<li>Biometric Attendance System not implemented.</li>";
            }

            if (AffiliationFeeandCommanFee != null)
            {
                if (AffiliationFeeandCommanFee.duesAmount != null)
                {
                    faculty += "<li>Common Service Fee Due:<b> Rs." + AffiliationFeeandCommanFee.duesAmount + "</b></li>";
                }

                if (AffiliationFeeandCommanFee.paidAmount != null)
                {
                    faculty += "<li>Affiliation Fee Due: <b>Rs." + AffiliationFeeandCommanFee.paidAmount + "</b></li>";
                }
            }
            //if (nodocumentsdetails != null && nodocumentsdetails.Antiraging == true)
            //{
            //    faculty += "<li>Antiragging Committee Details.</li>";

            //}
            //if (nodocumentsdetails != null && nodocumentsdetails.AuditedStatement == true)
            //{
            //    faculty += "<li>Audited Statement.</li>";
            //}
            //if (nodocumentsdetails != null && nodocumentsdetails.LandUsedCertificate == true)
            //{
            //    faculty += "<li>Land Use Certificate.</li>";
            //}

            faculty += "</ul>";
            #endregion

            //OTHER OBSERVATIONS/  REMARKS
            #region OTHER OBSERVATIONS/  REMARKS
            int Count2 = 0;

            faculty += "<table><tr><td align='left'><b><u>Other Observations/ Remarks:</u></b></td>";
            faculty += "</tr></table>";
            faculty += "<ul style='list-style-type:disc'>";


            //if (nodocumentsdetails != null && nodocumentsdetails.FFCTeamComments != "" && nodocumentsdetails.FFCTeamComments != null)
            //{
            //    faculty += "<li>" + nodocumentsdetails.FFCTeamComments + "</li>";

            //}


            //if (nodocumentsdetails != null && nodocumentsdetails.AICTENoOfFaculty != 0)
            //{

                //faculty += "<li>Total faculty uploaded to AICTE for Extension of Approval for AY 2017-18 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + nodocumentsdetails.AICTENoOfFaculty + ".</li>";//facultyCounts.Select(i => i.specializationWiseFaculty).Sum()
                faculty += "<li>Total faculty available during inspection with  qualifications as prescribed by AICTE &nbsp;&nbsp;&nbsp;:<b> " + collegeFacultycount + "</b>.</li>";
            //}
            //else
            //{
            //    faculty += "<li>Total faculty uploaded to AICTE for Extension of Approval for AY 2017-18 &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : 0.</li>";
            //    faculty += "<li>Total faculty available during inspection with  qualifications as prescribed by AICTE &nbsp;&nbsp;&nbsp;:<b> " + collegeFacultycount + "</b>.</li>";

            //}


            int currentyearfaculty = 0;
            //if (nodocumentsdetails != null && nodocumentsdetails.Currentyearfaculty != 0)
            //{
            //    //currentyearfaculty = (int)nodocumentsdetails.Currentyearfaculty;
            //}

            //  if (nodocumentsdetails != null && nodocumentsdetails.Lastyearfaculty != 0)
            if (lastyearfacultycount != null)
            {

                faculty += "<li>Number of faculty recruited after the last inspection  &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; : " + lastyearfacultycount.RegistrationNumber + ".</li>";//". Total Available Faculty is " + collegeFacultycount + 
            }
            else
            {

                faculty += "<li>Number of faculty recruited after the last inspection &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;   :0. </li>";//Total Available Faculty is " + collegeFacultycount + ".
            }


            faculty += "</ul>";
            #endregion



            return faculty;
        }


        public string DeficiencyCollegeLabsAnnexure(int? collegeID)
        {
            string annexure = string.Empty;
            List<FacultyVerificationController.AnonymousLabclass> collegeLabAnonymousLabclass = new List<FacultyVerificationController.AnonymousLabclass>();
            List<int> specializationIds = db.jntuh_college_intake_existing.Where(e => e.collegeId == collegeID && e.courseStatus != "Closure" && e.academicYearId == 9).Select(e => e.specializationId).Distinct().ToList();
            int[] Equipmentsids = db.jntuh_college_laboratories.Where(C => C.CollegeID == collegeID).Select(C => C.EquipmentID).ToArray();
            var DepartmentsData = db.jntuh_specialization.Where(e => e.isActive == true && specializationIds.Contains(e.id)).Select(e => e.departmentId).Distinct().ToArray();

            var DegreeIds = db.jntuh_department.Where(e => e.isActive == true && DepartmentsData.Contains(e.id)).Select(e => e.degreeId).ToArray();

            if (DegreeIds.Contains(4))
            {
                specializationIds.Add(39);
            }



            //List<Lab> collegeLabMaster = db.jntuh_lab_master.AsNoTracking()
            //                                            .Where(l => specializationIds.Contains(l.SpecializationID))
            //                                            .Select(l => new Lab
            //                                            {
            //                                                EquipmentID = l.id,
            //                                                degreeId = l.DegreeID,
            //                                                degree = l.jntuh_degree.degree,
            //                                                degreeDisplayOrder = l.jntuh_degree.degreeDisplayOrder,
            //                                                departmentId = l.DepartmentID,
            //                                                department = l.jntuh_department.departmentName,
            //                                                specializationId = l.SpecializationID,
            //                                                specializationName = l.jntuh_specialization.specializationName,
            //                                                year = l.Year,
            //                                                Semester = l.Semester,
            //                                                Labcode = l.Labcode,
            //                                                LabName = l.LabName,
            //                                                EquipmentName = l.EquipmentName
            //                                            })
            //                                            .OrderBy(l => l.degreeDisplayOrder)
            //                                            .ThenBy(l => l.department)
            //                                            .ThenBy(l => l.specializationName)
            //                                            .ThenBy(l => l.year).ThenBy(l => l.Semester)
            //                                            .ToList();



            string CollegeAffiliationStatus = db.jntuh_college_affiliation.Where(u => u.collegeId == collegeID && u.affiliationTypeId == 7).Select(u => u.affiliationStatus).FirstOrDefault();

            if (CollegeAffiliationStatus == "Yes")
            {
                collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
                                                           .Where(l => l.CollegeId == collegeID && !Equipmentsids.Contains(l.id))
                                                           .Select(l => new FacultyVerificationController.AnonymousLabclass
                                                           {
                                                               // id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeID).Select(l1 => l1.id).FirstOrDefault(),
                                                               EquipmentID = l.id,
                                                               LabName = l.LabName,
                                                               EquipmentName = l.EquipmentName,
                                                               Department = l.jntuh_department.departmentName,
                                                               LabCode = l.Labcode,
                                                               year = l.Year,
                                                               Semester = l.Semester,
                                                               specializationId = l.SpecializationID
                                                           })
                                                           .OrderBy(l => l.LabName)
                                                           .ThenBy(l => l.EquipmentName)
                                                           .ToList();

            }
            else if (CollegeAffiliationStatus == "No" || CollegeAffiliationStatus == null)
            {
                collegeLabAnonymousLabclass = db.jntuh_lab_master.AsNoTracking()
                                                              .Where(l => specializationIds.Contains(l.SpecializationID) && !Equipmentsids.Contains(l.id) && l.CollegeId == null)
                                                              .Select(l => new FacultyVerificationController.AnonymousLabclass
                                                              {
                                                                  //  id = db.jntuh_appeal_college_laboratories.Where(l1 => l1.EquipmentID == l.id && l1.EquipmentNo == 1 && l1.CollegeID == collegeID).Select(l1 => l1.id).FirstOrDefault(),
                                                                  EquipmentID = l.id,
                                                                  LabName = l.LabName,
                                                                  EquipmentName = l.EquipmentName,
                                                                  Department = l.jntuh_department.departmentName,
                                                                  LabCode = l.Labcode,
                                                                  year = l.Year,
                                                                  Semester = l.Semester,
                                                                  specializationId = l.SpecializationID
                                                              })
                                                              .OrderBy(l => l.LabName)
                                                              .ThenBy(l => l.EquipmentName)
                                                              .ToList();
            }








            //var collegeEquipments = db.jntuh_college_laboratories_dataentry2.Where(l => l.CollegeID == collegeID).Select(l => l.EquipmentID).Distinct().ToArray();

            //var list = collegeLabMaster.Where(c => !collegeEquipments.Contains(c.EquipmentID)).Select(c => new { EquipmentID = c.id, LabCode = c.Labcode, LabName = c.LabName, EquipmentName = c.EquipmentName })
            //                           .OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();

            //var labDeficiencies = db.jntuh_college_laboratories_deficiency.Where(ld => ld.CollegeId == collegeID && ld.Deficiency == true).Select(ld => ld.LabCode).ToArray();

            var list1 = collegeLabAnonymousLabclass.OrderBy(c => c.LabName).ThenBy(c => c.EquipmentName).Distinct().ToList();


            // list = list.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();
            //list1 = list1.Where(l => labDeficiencies.Contains(l.LabCode)).ToList();

            #region this code written by suresh

            int?[] labequipmentIds = list1.Select(i => i.EquipmentID).ToArray();

            int[] clgequipmentIDs =
                db.jntuh_college_laboratories.Where(
                    l => l.CollegeID == collegeID && labequipmentIds.Contains(l.EquipmentID))
                    .Select(i => i.EquipmentID)
                    .ToArray();

            list1 = list1.Where(l => !clgequipmentIDs.Contains((int)l.EquipmentID))
                    .ToList();


            #endregion

            int[] SpecializationIDs;
            if (DegreeIds.Contains(4))
                SpecializationIDs = (from a in collegeLabAnonymousLabclass orderby a.Department select a.specializationId).Distinct().ToArray();
            //labs.Select(l => l.specializationId).Distinct().ToArray();
            else
                SpecializationIDs = (from a in collegeLabAnonymousLabclass where a.specializationId != 39 orderby a.Department select a.specializationId).Distinct().ToArray();


            //list


            if (list1.Count() > 0)
            {
                var specializations = db.jntuh_specialization.Where(it => SpecializationIDs.Contains(it.id)).Select(s => new
                {
                    s.id,
                    specialization = s.specializationName,
                    department = s.jntuh_department.departmentName,
                    degree = s.jntuh_department.jntuh_degree.degree,
                    deptId = s.jntuh_department.id,

                }).OrderBy(e => e.deptId).ToList();


                annexure += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
                annexure += "<tr>";
                annexure += "<td align='left'><b><u>Deficiencies in Laboratory  </u></b></td>";
                annexure += "</tr>";
                annexure += "</table>";
                foreach (var speclializationId in SpecializationIDs)
                {
                    string LabNmae = "", EquipmentName = "", DepartmentName = "";
                    var specializationDetails = specializations.FirstOrDefault(s => s.id == speclializationId);
                    DepartmentName = list1.Where(l => l.specializationId == speclializationId).Select(l => l.Department).FirstOrDefault();
                    annexure += "<table width='100%' border='1' cellpadding='5' cellspacing='0'>";
                    annexure += "<tr>";
                    annexure += "<th align='left' colspan='4'> " + specializationDetails.degree + " -" + specializationDetails.department + "-" + specializationDetails.specialization + "</th>";
                    annexure += "</tr>";
                    annexure += "<tr>";
                    annexure += "<th align='left'>S.No</th><th align='left'>Lab Name</th><th align='left'>Equipment Name</th><th align='left'>Deficiency(Yes/No)<br/>If No Reason</th>";
                    annexure += "</tr>";
                    int LabsCount = 0;
                    int EquipmentsCount = 0;

                    var labs = list1.Where(l => l.specializationId == speclializationId).OrderBy(e => e.year).ThenBy(e => e.Semester).ToList();
                    int indexnow = 1;
                    foreach (var item in labs.ToList())
                    {

                        LabNmae = item.LabName.Trim() != null ? item.year + "-" + item.Semester + "-" + item.LabName : null;
                        EquipmentName = item.EquipmentName;
                        // int indexnow = list1.IndexOf(item);



                        //if (indexnow > 0 && list1[indexnow].LabName == list1[indexnow - 1].LabName)

                        //    LabsCount++;

                        //else if (indexnow == 0 && (list1[indexnow].LabName == null || list1[indexnow].LabName == ""))
                        //    LabsCount++;

                        //if (indexnow > 0 && list1[indexnow].EquipmentName == list1[indexnow - 1].EquipmentName)

                        //    EquipmentsCount++;

                        //else if (indexnow == 0 && (list1[indexnow].EquipmentName == null || list1[indexnow].EquipmentName == ""))
                        //    EquipmentsCount++;

                        //if (string.IsNullOrEmpty(item.LabName.Trim()) && LabsCount > 0)
                        //{
                        //    //if (indexnow > 0 && (item.LabName.Trim() == null ||item.LabName.Trim() == ""))
                        //    //    LabNmae = "No Labs Uploaded";
                        //}
                        //else
                        //{
                        //    LabNmae = item.LabName.Trim() != null ? item.year + "-" + item.Semester + "-" + item.LabName : null;
                        //}
                        //if (string.IsNullOrEmpty(item.EquipmentName) && EquipmentsCount > 0)
                        //{
                        //    //if (indexnow > 0 && (item.EquipmentName == null || item.EquipmentName == ""))
                        //    //    LabNmae = "No Equipments Uploaded";
                        //}
                        //else
                        //{
                        //    EquipmentName = item.EquipmentName;
                        //}
                        //if (string.IsNullOrEmpty(item.Department))
                        //{
                        //    DepartmentName = item.Department;
                        //}
                        //else
                        //{
                        //    DepartmentName = "";
                        //}


                        annexure += "<tr>";
                        annexure += "<td align='left'>" + indexnow + "</td><td  align='left'>" + LabNmae + "</td><td  align='left'>" + EquipmentName + "</td> <td  align='left'></td>";
                        annexure += "</tr>";



                        //if (string.IsNullOrEmpty(item.LabName))
                        //    LabsCount++;
                        //if (string.IsNullOrEmpty(item.EquipmentName))
                        //    EquipmentsCount++;

                        // annexure += "<td align='left'>" + (list1.IndexOf(item) + 1) + "</td><td rowspan='" + LabsCount + "' align='left'>" + LabNmae + "</td><td rowspan='" + EquipmentsCount + "' align='left'>" + EquipmentName + "</td>";\

                        #region code

                        //if (indexnow != list1.Count() - 1)
                        //{
                        //    annexure += "<tr>";
                        //    annexure += "<td align='left'>" + (list1.IndexOf(item) + 1) + "</td>";
                        //    if (list1[indexnow].LabName != list1[indexnow + 1].LabName)
                        //    {
                        //        // annexure += "<tr>";
                        //        //<td align='left'>" + (list1.IndexOf(item) + 1) + "</td>
                        //        annexure += "<td rowspan='" + LabsCount + "' align='left'>" + LabNmae + "</td><td rowspan='" + EquipmentsCount + "' align='left'>" + EquipmentName + "</td>";
                        //        // annexure += "</tr>";
                        //    }
                        //    annexure += "</tr>";
                        //}
                        //else
                        //{
                        //    if (list1[indexnow].LabName != list1[indexnow].LabName)
                        //    {
                        //        //annexure += "<tr>";
                        //        //annexure += "<td align='left'>" + (list1.IndexOf(item) + 1) + "</td><td rowspan='" + LabsCount + "' align='left'>" + LabNmae + "</td><td rowspan='" + EquipmentsCount + "' align='left'>" + EquipmentName + "</td>";
                        //        //annexure += "</tr>";
                        //        annexure += "<tr>";
                        //        annexure += "<td align='left'>" + (list1.IndexOf(item) + 1) + "</td>";
                        //        if (list1[indexnow].LabName != list1[indexnow + 1].LabName)
                        //        {
                        //            // annexure += "<tr>";
                        //            //<td align='left'>" + (list1.IndexOf(item) + 1) + "</td>
                        //            annexure += "<td rowspan='" + LabsCount + "' align='left'>" + LabNmae + "</td><td rowspan='" + EquipmentsCount + "' align='left'>" + EquipmentName + "</td>";
                        //            // annexure += "</tr>";
                        //        }
                        //        annexure += "</tr>";
                        //    }
                        //}

                        #endregion



                        // annexure += "<td align='left'>" + (list1.IndexOf(item) + 1) + "</td><td  align='left'>" + LabNmae + "</td><td  align='left'>" + EquipmentName + "</td>";
                        //annexure += "<td align='left'>" + (list.IndexOf(item) + 1) + "</td><td align='left'>" + item.LabCode + "</td><td align='left'>" + item.LabName + "</td><td align='left'>" + item.EquipmentName + "</td>";

                        if (!string.IsNullOrEmpty(item.LabName))
                            LabsCount = 0;
                        if (!string.IsNullOrEmpty(item.EquipmentName))
                            EquipmentsCount = 0;
                        indexnow++;
                    }

                    annexure += "</table>";
                    annexure += "<br/>";
                }
            }
            else
            {
                annexure += "<table width='100%' border='0' cellpadding='5' cellspacing='0'>";
                annexure += "<tr>";
                annexure += "<td align='left'><b><u>Deficiencies in Laboratory  </u></b></td>";
                annexure += "</tr>";
                annexure += "</table>";
                annexure += "<table width='100%' border='1'  cellspacing='0'>";
                annexure += "<tr><td align='center'> <b>NIL</b></td></tr>";
                annexure += "</table>";
            }
            //annexure += "</br><table width='100%'  cellspacing='0'></br>";
            //annexure += "<tr><td align='right' width='80%' style='font-size: 14px; font-weight: normal;'> <b>Sd /-</b></td></tr>";
            //annexure += "<tr><td align='right' width='80%' style='font-size: 14px; font-weight: normal;'> <b>REGISTRAR</b></td></tr></br></br>";
            //annexure += "</br><tr><td align='center' width='80%' style='font-size: 14px; font-weight: normal;' colspan='2'><b>The College shall submit Appeal, if any through Online mode only in the format " +
            //           "prescribed within 10 Days from the date of this letter." + "</b></td></tr></br>";
            //annexure += "<tr><td></td></tr>"; annexure += "</table>";
            annexure += "</br><p> <b>NOTE:</b> The Physical Verification of the faculty and their presence at the time of Inspection by the FFC, automatically does not mean that the college is entitled for Affiliation based on numbers. Those of the faculty who are having the requisite qualifications and credentials are verified and found correct will be taken into account for the purpose of granting affiliation.</p>";
            annexure += "</br><table width='100%'  cellspacing='0'></br>";
            annexure += "<tr><td align='right' width='80%' style='font-size: 14px; font-weight: normal;'> <b>Sd /-</b></td></tr>";
            annexure += "<tr><td align='right' width='80%' style='font-size: 14px; font-weight: normal;'> <b>REGISTRAR</b></td></tr></br></br>";
            annexure += "</br><tr><td align='center' width='80%' style='font-size: 14px; font-weight: normal;' colspan='2'><b>The College shall submit Appeal, if any through Online mode only in the format " +
                       "prescribed within 5 Days from the date of this letter." + "</b></td></tr></br>";
            annexure += "<tr><td></td></tr>"; annexure += "</table>";


            return annexure;
        }


        #endregion


        #region Phd  Add Specilization
        //
        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        public ActionResult PHDAddSpecialization(int? collegeid)
        {

            List<Colleges> colleges = db.jntuh_college.Where(c => c.isActive == true).Select(c => new Colleges
            {
                collegeId = c.id,
                collegeName = c.collegeCode + "-" + c.collegeName
            }).OrderBy(c => c.collegeName).ToList();
            //colleges.Add(new Colleges() { collegeId = 0, collegeName = "New Faculty" });
            //int?[] colleges1 = db.jntuh_registered_faculty_log.Where(C => C.collegeId != null && C.FacultyApprovedStatus != 0).Select(i => i.collegeId).ToArray();
            ViewBag.Colleges = colleges;
            List<FacultyRegistration> data = new List<FacultyRegistration>();
            var jntuh_college_faculty_registered = db.jntuh_college_faculty_registered.AsNoTracking().Where(i => i.collegeId == collegeid).ToList();

            var regFaculty = db.jntuh_registered_faculty.AsNoTracking().ToList();

            var jntuh_specialization = db.jntuh_specialization.AsNoTracking().ToList();

            var facultyLogregnos = db.jntuh_college_faculty_registered.Where(i => i.collegeId == collegeid).Select(i => i.RegistrationNumber.Trim()).ToArray();

            List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();

            jntuh_registered_faculty = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber.Trim())).ToList(); //&& (rf.collegeId == null || rf.collegeId == collegeid)


            var regIds = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber.Trim())).Select(i => i.id).ToArray();
            var regEducationids = db.jntuh_registered_faculty_education.AsNoTracking().Where(i => regIds.Contains(i.facultyId) && i.educationId == 6).Select(i => i.facultyId).ToArray();
            if (collegeid != null)
            {
                var faculty = regFaculty.Where(i => regEducationids.Contains(i.id)).ToList();

                string RegNo;
                int? Specializationid;
                data.AddRange(faculty.Select(d => new FacultyRegistration()
                {
                    CollegeId = collegeid,
                    id = d.id,
                    Type = d.type,
                    RegistrationNumber = RegNo = d.RegistrationNumber,
                    UniqueID = d.UniqueID,
                    FirstName = d.FirstName,
                    MiddleName = d.MiddleName,
                    LastName = d.LastName,
                    GenderId = d.GenderId,
                    Email = d.Email,
                    facultyPhoto = d.Photo,
                    Mobile = d.Mobile,
                    PANNumber = d.PANNumber,
                    AadhaarNumber = d.AadhaarNumber,
                    SpecializationId = Specializationid = jntuh_college_faculty_registered.Where(e => e.RegistrationNumber.Trim() == RegNo.Trim()).Select(e => e.SpecializationId).FirstOrDefault(),
                    SpecializationName = Specializationid != null ? jntuh_specialization.Where(t => t.id == Specializationid).Select(t => t.specializationName).FirstOrDefault() : "",
                    isActive = d.isActive,
                    IdentfiedFor = jntuh_college_faculty_registered.Where(e => e.RegistrationNumber.Trim() == RegNo.Trim()).Select(e => e.IdentifiedFor).FirstOrDefault(),
                    isApproved = d.isApproved,
                    SamePANNumberCount = d.PANNumber != null ? jntuh_registered_faculty.Where(i => i.PANNumber == d.PANNumber && i.collegeId == collegeid).ToList().Count : 1,
                    SameAadhaarNumberCount = d.AadhaarNumber != null ? jntuh_registered_faculty.Where(f => f.AadhaarNumber == d.AadhaarNumber).ToList().Count : 1,
                    Absent = d.Absent != null ? (bool)d.Absent : false,
                    BlacklistFaculty = d.Blacklistfaculy != null ? (bool)d.Blacklistfaculy : false,
                    PHDundertakingnotsubmitted = d.PHDundertakingnotsubmitted != null ? (bool)d.PHDundertakingnotsubmitted : false,
                    NOTQualifiedAsPerAICTE = d.NotQualifiedAsperAICTE != null ? (bool)d.NotQualifiedAsperAICTE : false,
                    InvalidPANNo = d.InvalidPANNumber != null ? (bool)d.InvalidPANNumber : false,
                    InCompleteCeritificates = d.IncompleteCertificates != null ? (bool)d.IncompleteCertificates : false,
                    FalsePAN = d.FalsePAN != null ? (bool)d.FalsePAN : false,
                    NoSCM = d.NoSCM != null ? (bool)d.NoSCM : false,
                    DegreeId = d.jntuh_registered_faculty_education.Count(e => e.facultyId == d.id) > 0 ? d.jntuh_registered_faculty_education.Where(e => e.facultyId == d.id).Select(e => e.educationId).Max() : 0
                }));
            }
            else
            {
                data = new List<FacultyRegistration>();
            }
            return View(data);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpGet]
        public ActionResult PHDAddSpecializationView(int collegeId, string regno)
        {
            var faculty = new CollegeFaculty();
            var existingfaculty = db.jntuh_registered_faculty.FirstOrDefault(i => i.RegistrationNumber.Trim() == regno.Trim()); //&& i.collegeId == collegeId
            if (existingfaculty != null)
            {
                faculty.collegeId = collegeId;
                faculty.id = existingfaculty.id;
                faculty.facultyFirstName = existingfaculty.FirstName;
                faculty.facultyLastName = existingfaculty.LastName;
                faculty.facultySurname = existingfaculty.MiddleName;
                faculty.facultyDesignationId = existingfaculty.DesignationId;
                faculty.designation = db.jntuh_designation.Where(d => d.id == faculty.facultyDesignationId).Select(d => d.designation).FirstOrDefault();
                faculty.facultyOtherDesignation = existingfaculty.OtherDesignation;
                if (existingfaculty.DepartmentId != null)
                    faculty.facultyDepartmentId = (int)existingfaculty.DepartmentId;
                faculty.department = db.jntuh_department.Where(d => d.id == faculty.facultyDepartmentId).Select(d => d.departmentName).FirstOrDefault();
                faculty.FacultyRegistrationNumber = regno;
                faculty.facultyRecruitedFor =
                    db.jntuh_college_faculty_registered.Where(i => i.RegistrationNumber == regno)
                        .Select(i => i.IdentifiedFor)
                        .FirstOrDefault();
            }

            var pgSpecializations = db.jntuh_college_intake_existing
                                         .Where(e => e.jntuh_specialization.jntuh_department.jntuh_degree.id != 4 && e.jntuh_specialization.jntuh_department.jntuh_degree.id != 5)
                                         .Select(e => new { id = e.jntuh_specialization.id, spec = e.jntuh_specialization.specializationName })
                                         .GroupBy(e => new { e.id, e.spec })
                                         .OrderBy(e => e.Key.spec)
                                         .Select(e => new { id = e.Key.id, spec = e.Key.spec }).ToList();
            ViewBag.PGSpecializations = pgSpecializations;
            return PartialView(faculty);
        }

        [Authorize(Roles = "Admin,SuperAdmin,FacultyVerification")]
        [HttpPost]
        public ActionResult PHDAddSpecializationView(CollegeFaculty faculty)
        {
            TempData["Error"] = null;
            var isExistingFaculty = db.jntuh_college_faculty_registered.FirstOrDefault(r => r.RegistrationNumber.Trim() == faculty.FacultyRegistrationNumber.Trim());
            if (isExistingFaculty != null)
            {
                isExistingFaculty.IdentifiedFor = faculty.facultyRecruitedFor;
                isExistingFaculty.SpecializationId = faculty.SpecializationId;
                isExistingFaculty.updatedBy = 375;
                isExistingFaculty.updatedOn = DateTime.Now;
                db.Entry(isExistingFaculty).State = EntityState.Modified;
                db.SaveChanges();
                TempData["Success"] = "Faculty Specialization (" + faculty.FacultyRegistrationNumber + " ) Successfully Updated ..";
                TempData["Error"] = null;
            }

            return RedirectToAction("PHDAddSpecialization", "FacultyVerification", new { isExistingFaculty.collegeId });
        }

        #endregion


        #region Not match 416 and 415
        [Authorize(Roles = "Admin")]
        public ActionResult NotMatching416and415(int? collegeId)
        {
            var SubmissionColleges = db.jntuh_college_edit_status.Where(e => e.IsCollegeEditable == false).Select(e => e.collegeId).ToArray();


            List<FacultyRegistration> data = new List<FacultyRegistration>();

            #region Registration Numbers

            string[] NotMatchingFaculty = new string[]
            {
                "7630-160315-121335", "7686-151230-154120", "9055-150424-143404", "8291-150624-160237",
                "8084-170106-141141", "4649-150419-151608", "6023-151229-151344", "2099-160224-173602",
                "18150403-142049", "1512-160320-134513", "0846-160320-165659", "4034-160216-142916",
                "3394-150507-144346", "9124-150507-135331", "1738-170111-071821", "0577-170213-131717",
                "7952-150408-135415", "9182-160306-153609", "4901-160307-142655", "5758-150409-145824",
                "4709-150410-175042", "7978-150411-131958", "7863-150416-103726", "5226-150418-221111",
                "6337-160306-133805", "2278-160306-100917", "5598-160225-143322", "5518-160307-001211",
                "4554-160313-000554", "6939-160313-004843", "8185-170213-170935", "1514-170213-185246",
                "6808-170213-183538", "1167-170213-134133", "7443-170213-154811", "3932-170213-174117",
                "0773-160226-192909", "9840-150410-140053", "9062-150524-171033", "9233-150507-194931",
                "7404-170213-141707", "0302-150422-152357", "6047-160306-154420", "6959-150419-190736",
                "1763-150414-110519", "0348-160311-163216", "9382-150427-063550", "1473-160303-191732",
                "9504-160306-134108", "91150404-151329", "23150405-105408", "2593-160227-152134", "0245-170126-113657",
                "0657-160314-201940", "71150407-103737", "4966-150413-093635", "5220-161217-122742",
                "5754-150413-150641", "98150407-160625", "5207-150409-145858", "15150406-114529", "1338-160227-154825",
                "8891-170119-102453", "2145-150407-235337", "8853-151223-204341", "6901-150413-201321",
                "98150406-234723", "46150407-144715", "43150404-143444", "87150331-155749", "6331-150419-220801",
                "4072-160207-232820", "0712-161223-100737", "3215-161222-122521", "4372-161223-164619",
                "4964-161222-120801", "6972-170103-165838", "4961-160322-112103", "9510-160529-163736",
                "0879-170107-110211", "2222-170107-120801", "8014-150427-180255", "1286-150413-145305",
                "2557-160222-102056", "01150402-143403", "1558-160226-100102", "4717-150410-131519", "86150331-175500",
                "2607-160211-125023", "45150406-095151", "4086-160104-113654", "88150404-152817", "9908-150411-105434",
                "0334-150409-132111", "70150406-140728", "52150406-194954", "3313-160305-205712", "4312-161222-154542",
                "2652-161223-112228", "1043-161216-155552", "9771-170208-094118", "1344-150409-173112",
                "8394-160220-231406", "7029-151230-093454", "0662-150409-025754", "0384-150410-145404",
                "0214-150422-164247", "3996-150422-185904", "8081-170107-133020", "2428-170111-102724",
                "6722-170111-003910", "9698-170107-142324", "7122-150409-121246", "2340-170112-100852",
                "9946-160303-115621", "0238-170107-150600", "84150406-134458", "69150406-174533", "0846-170111-120917",
                "9986-170111-100814", "7511-170116-131736", "2163-160212-134941", "6162-160305-124538",
                "0931-160306-225618", "4089-160303-105804", "7188-150520-134428", "3970-170130-094027",
                "9745-160529-150403", "68150402-095814", "2624-170202-123226", "2778-150621-184256",
                "2810-150429-153804", "5389-160319-221410", "5496-160320-044254", "2823-160320-131107",
                "3797-160320-135100", "7825-160320-141932", "0180-160320-143938", "3762-160320-151047",
                "6417-160320-155551", "5759-160320-164615", "1452-160320-172544", "8807-150505-121240",
                "8271-150506-152322", "6708-160301-204711", "7068-160303-162430", "8965-160304-122549",
                "5280-160422-215925", "6274-150408-100100", "6551-150411-113707", "1505-160306-003218",
                "1526-160305-234119", "4864-160304-225506", "0484-150408-155625", "6146-150418-130520",
                "5903-170210-175032", "3365-160528-160846", "5097-160528-130443", "4400-160528-182727",
                "3674-170210-151722", "4896-160722-135211", "6990-160529-101506", "0022-160529-113859",
                "3415-160528-185828", "7361-160528-190838", "0091-160529-131742", "6501-170213-225601",
                "2714-160528-170309", "4200-160528-170518", "9368-160528-172540", "5376-160528-181252",
                "1201-170209-173323", "1150-170210-173637", "1758-170214-115629", "6434-170213-113430",
                "0186-170210-165259", "5656-170210-173657", "4611-170210-214736", "2804-170210-164754",
                "8217-170209-170724", "6367-170209-165506", "1859-160528-191546", "4538-170210-141018",
                "4810-170210-141406", "2880-170211-141808", "5002-170213-094953", "8517-170211-155210",
                "9885-170210-160632", "1828-170210-163552", "4445-170211-124445", "2005-160303-231533",
                "7318-170213-120502", "6090-170211-175446", "6083-170211-111602", "2958-170211-134902",
                "6597-170213-164711", "5495-170213-173911", "0146-160529-121408", "2021-160528-163429",
                "2730-160306-101221", "1899-160113-162019", "7120-160313-133832", "8474-170213-174816",
                "4015-160528-160649", "6749-150414-123827", "0159-170213-152900", "0438-170213-124159",
                "0914-170213-175643", "7951-160224-143835", "2230-160220-152520", "7042-150414-123153",
                "3757-150502-135344", "6895-150429-170247", "6927-170209-163120", "6125-150414-164614",
                "1056-160129-194931", "0143-150421-135127", "8922-160304-141115", "7658-150422-121924",
                "7919-150419-223139", "6729-160312-181656", "5485-170121-134813", "4560-170131-212615",
                "7177-170129-092230", "9035-160309-190504", "6083-170129-070059", "4777-160129-180655",
                "7086-150504-131114", "5624-160304-140025", "1676-160528-002803", "9113-150421-120134",
                "8998-160313-182455", "5465-160301-105955", "2678-160229-102452", "7702-160314-121638",
                "8408-160303-132406", "7030-160303-151747", "6972-170202-134430", "4063-160311-163312",
                "6716-150506-183821", "6452-151217-093905", "1984-151218-115458", "1511-151217-151449",
                "29150406-154615", "8642-160201-101511", "3192-160201-150636", "3513-160308-134604",
                "0281-160217-221844", "8647-160217-225517", "6770-160129-152350", "7053-160313-202120",
                "6946-160528-100557", "5970-160312-134913", "2804-160312-140522", "2579-160111-111402",
                "1913-150509-111446", "9110-160130-152455", "2639-160213-115600", "4503-150419-134140",
                "7740-160213-121246", "2661-160218-120831", "1925-160130-110923", "1597-160528-152545",
                "2552-160216-125852", "9928-160527-200628", "8158-160318-121601", "6699-160217-151831",
                "0486-160218-145537", "5361-150419-174025", "3628-160529-165714", "83150402-115453",
                "2917-170201-130446", "9867-150424-000126", "5355-170109-120259", "6696-170123-134610",
                "3466-160205-124359", "8115-150419-164121", "0758-160529-180334", "5393-150413-094807",
                "8104-160303-132402", "38150404-123839", "2526-170127-065126", "9280-160304-142023",
                "4270-160229-105639", "8459-170202-135353", "2784-170130-132036", "4938-170208-185751",
                "5610-150409-130530", "2741-160309-155524", "6705-160524-103804", "3113-160529-191056",
                "7660-150428-102336", "7199-160315-171257", "0715-170127-120904", "5000-150418-145842",
                "6066-160529-203234", "6828-151223-143831", "33150407-120048", "64150402-163428", "3706-170117-145422",
                "5436-170114-175439", "0375-160314-212710", "2496-170208-160223", "9732-150414-153940",
                "2495-150424-144055", "6953-160316-144844", "2308-160311-194627", "5630-160316-163235",
                "0908-160316-164513", "1040-160320-200607", "6842-170129-130014", "8691-150414-152739",
                "6159-170204-151039", "6271-170204-164621", "3105-170204-144353", "4451-170207-180205",
                "0617-170204-180432", "9394-170204-131431", "2534-170108-200024", "9042-150416-103116",
                "3396-150508-151212", "6998-160320-155850", "2476-160527-175717", "9931-150409-123511",
                "7147-160215-163529", "0681-170207-111423", "9722-170207-125227", "9363-170208-122604",
                "4846-160112-120224", "8956-160212-194814", "2672-160917-155841", "7631-160614-143314",
                "1188-160305-112757", "5665-170104-103558", "7482-170104-104639", "8921-160208-144309",
                "1585-150408-215452", "6523-150415-150907", "7096-160218-143732", "4709-160302-124951",
                "0369-170122-081347", "13150330-152743", "2047-160309-112739", "8541-170128-120354",
                "6410-170128-003149", "9341-170212-090732", "7733-160310-153229", "5064-170125-115811",
                "8477-170125-111457", "8742-170128-125514", "1704-170211-121845", "7848-170212-221935",
                "4305-170213-154318", "4447-170213-121728", "9642-170211-140420", "9882-170208-130729",
                "8382-170209-201806", "3955-170210-143354", "5031-170209-222338", "1985-170210-191012",
                "0696-170211-122556", "5935-170213-114728", "6584-170210-193243", "4834-170213-151052",
                "9674-170213-150818", "7540-170209-220443", "3383-170213-144017", "7237-160222-155232",
                "1855-170211-131825", "7126-170211-134536", "6117-170213-145514", "0916-160309-115555",
                "3270-170211-210548", "8836-170210-202650", "9807-150427-112305", "4809-170208-112025",
                "1151-170213-183821", "1463-160314-152942", "9342-160105-150535", "5227-170212-211419",
                "6805-161210-123243", "4894-160216-124359", "9762-160306-233807", "7046-170212-172631",
                "0651-170213-122337", "9813-170211-231033", "5960-170213-122444", "3136-170213-231923",
                "36150407-111502", "34150404-130854", "88150406-164556", "0301-150506-164719", "7398-160228-142349",
                "2323-150415-134107", "0983-150507-092434", "5025-150507-145717", "5912-150408-122341",
                "9551-151221-151514", "58150407-143209", "1602-160307-092342", "3814-160601-145937", "53150404-135752",
                "52150406-122341", "0592-160528-153105", "05150404-124405", "9917-161217-142649", "9090-161213-120059",
                "2136-160220-153848", "0311-150412-124406", "0592-150412-211226", "8105-150412-154535",
                "8710-160307-000916", "0332-160530-011549", "7044-150416-161728", "3079-160528-224153",
                "4404-160528-230641", "4258-160528-174805", "1602-150415-121145", "9785-150412-124738",
                "1179-150417-145325", "9992-150413-102830", "8816-150416-111343", "5346-150415-154204",
                "5379-150414-123736", "6851-150420-111725", "4347-150420-124554", "9497-150421-112225",
                "4890-150421-115451", "3239-151229-161539", "5467-160306-143913", "5923-160306-170009",
                "5457-160306-214901", "5727-160311-210053", "2697-160308-144953", "2429-170130-005232",
                "4565-160315-102135", "8473-160615-150805", "6707-160124-103157", "6806-170105-114300",
                "0234-150410-164222", "3467-150408-102555", "3247-160225-230746", "6340-160227-112811",
                "6114-150410-104221", "9428-160601-215914", "6044-170201-092431", "4897-160223-135631",
                "9796-160219-115300", "2697-161021-154519", "7293-170121-110127", "17150402-141306",
                "2775-170211-173649", "9614-170211-152846", "9207-170207-160637", "8693-160524-123323",
                "3038-150413-112451", "34150404-121744", "09150404-135128", "9216-150504-164635", "64150404-220040",
                "8095-150504-180924", "93150403-190004", "18150404-140434", "63150404-153418", "7939-170117-152208",
                "40150404-093249", "8592-160306-222247", "86150404-152523", "8464-150413-125549", "0698-150408-105123",
                "5957-150413-135745", "7400-160224-130354", "34150405-225935", "05150406-163809", "5902-160209-141304",
                "9422-160223-154818", "27150406-114120", "0694-161230-105121", "6553-170201-092800",
                "8949-150410-135958", "8481-150409-230059", "1312-150411-122337", "6585-150414-151718",
                "8548-150414-163415", "5373-150422-162506", "8965-150422-175615", "6492-150422-192927",
                "6366-160211-123055", "9328-160211-112933", "2698-160306-072827", "7663-160309-150348",
                "6371-150416-131923", "0582-170201-144850", "2060-170206-111952", "5696-170203-115252",
                "9015-170202-130415", "8691-170207-132213", "5378-170131-185849", "5392-160723-134531",
                "6884-160724-161324", "6043-160524-120531", "2305-160527-202927", "3223-160527-205206",
                "6759-150407-212102", "4734-150408-154556", "53150407-173729", "3069-150408-155628",
                "2424-150408-170844", "4069-150408-151413", "8674-150408-173814", "9512-150408-170851",
                "9541-150409-145817", "6162-150409-110909", "0458-150409-170535", "1695-150409-141036",
                "2924-150410-143957", "4513-150413-153815", "5204-150422-113209", "3930-150504-122229",
                "3510-160205-122453", "8163-160223-093356", "70150406-213931", "2351-160302-144825",
                "1114-150411-171816", "92150402-123842", "60150401-223654", "77150404-133845", "1046-161126-133019",
                "4213-161128-093740", "8814-150409-131539", "8806-161221-120300", "0066-161220-104430",
                "4402-161228-104652", "2419-150415-105007", "20150407-155612", "61150404-140224", "86150404-151609",
                "7047-150423-063816", "2347-150426-122729", "8147-150421-075011", "0350-160307-132639",
                "9187-160307-131549", "4186-160307-150305", "1287-160315-190939", "6596-150427-182311",
                "9205-160312-202910", "8364-160529-170815", "21150407-120926", "8992-160528-192549",
                "6184-150418-183341", "2118-150505-124002", "7520-150505-153327", "9395-160315-124903",
                "6089-160316-130918", "0113-160319-113438", "9861-160319-120734", "8032-160320-215312",
                "6017-150417-165035", "4717-170213-142258", "45150403-102058", "2289-160529-235630",
                "1858-150427-212922", "6000-170119-135841", "5396-170131-013955", "1981-160305-152356",
                "8779-170213-145911", "8509-170108-174702", "2957-170203-070126", "8948-170213-065143",
                "7418-170121-145435", "4815-170202-103907", "0002-170122-164405", "1765-170122-180346",
                "3186-170122-174736", "9624-170122-171621", "8765-170121-135033", "08150407-143643",
                "3224-170204-160738", "2778-170204-153715", "2663-170204-173448", "4384-160312-173611",
                "2164-160203-114313", "0293-160316-083753", "82150407-152803", "9067-170211-160409",
                "4998-170213-184319", "9343-170213-193439", "4350-170214-184529", "0772-160303-212845",
                "9441-150418-153442", "2554-150417-233710", "8669-150427-191139", "8621-160122-154959",
                "3349-160122-120654", "4487-160219-140230", "0339-160220-152945", "4392-150507-144934",
                "4476-160219-155810", "6814-160220-155404", "5554-160219-151747", "9196-160224-184845",
                "5033-160224-190849", "6119-160305-180717", "3887-160314-160929", "0434-160315-124134",
                "5551-160527-173428", "6472-160314-144930", "2359-160224-193045", "7216-160210-114123",
                "9807-150413-172713", "2763-150417-171755", "2527-150417-164524", "8344-150429-162201",
                "8833-150504-131131", "1325-160127-110453", "9691-160311-104345", "6582-170211-070747",
                "0184-150429-124639", "0767-150430-105420", "0799-150430-113108", "1654-150411-173142",
                "1784-150430-101515", "1886-150422-150232", "2274-150411-103758", "2342-150415-171146",
                "2470-150409-161016", "2768-150421-101720", "2843-150417-163237", "2900-150430-114213",
                "2999-150420-121153", "3047-150418-105704", "3253-150430-111321", "3477-150430-113036",
                "3867-150506-141718", "4023-160105-124329", "4417-150506-111105", "4437-150430-104224",
                "4756-150411-150337", "4861-150430-112525", "5107-150430-104415", "4949-150416-152724",
                "5360-150430-090404", "5915-150420-124149", "5783-150411-163753", "6364-150427-094759",
                "6491-150417-124731", "3214-150428-090121", "5846-150505-192522", "9311-160528-192024",
                "66150406-124424", "2801-170128-130925", "9323-160203-145205", "0990-160215-111950",
                "1565-160312-124542", "4241-160206-215323", "8258-160313-023418", "6177-160210-115108",
                "7102-160310-185444", "2466-150409-133435", "7451-150416-120539", "1597-160616-123011",
                "94150407-121555", "9278-160526-140952", "8749-160526-150859", "6965-160526-154638", "15150406-161822",
                "9536-170131-212136", "63150406-131716", "3967-170120-124656", "3265-170127-110253",
                "9616-160314-214031", "7043-160315-011405", "3845-160314-214240", "7341-160319-202433",
                "17150404-142810", "0427-160319-203556", "5612-170202-102750", "6716-170202-113141",
                "2132-170214-152404", "6177-150414-114925", "7762-150414-120120", "7388-150415-104552",
                "9592-150415-114206", "7914-150419-112011", "7243-150419-102609", "8664-150420-130600",
                "6138-150420-155757", "4842-150420-135330", "9093-150420-194646", "2447-150420-195908",
                "5985-150424-195454", "3653-150425-150943", "7089-150425-155306", "6045-150425-160725",
                "9620-150425-162458", "8035-150427-142020", "9320-150427-170140", "9299-150427-214624",
                "8317-150427-215401", "6119-150427-220210", "2825-150427-221333", "8012-160226-115532",
                "0429-160224-123851", "1908-160306-200529", "73150403-160105", "90150401-140844", "1666-150408-110342",
                "12150331-122716", "5311-150408-120936", "4688-160309-112402", "9270-151221-162216",
                "9708-161209-103047", "1093-150413-161035", "1568-160211-122943", "0525-160526-145355",
                "4464-150417-153037", "7367-160525-144406", "5240-160307-120829", "7131-170117-151703",
                "8578-160528-193327", "87150401-221908", "9906-160125-181402", "0660-150409-124352",
                "4830-160529-120940", "8418-151216-110802", "9725-161125-115841", "4110-161125-100917",
                "2981-150409-142932", "5675-161024-151653", "1286-150414-213837", "1224-160126-152108",
                "6613-150411-142710", "5539-150501-135340", "5048-160121-224827", "5930-160106-143020",
                "17150403-190525", "0667-160529-143027", "8525-160529-155716", "8169-160529-151959",
                "9268-160528-134441", "2869-150415-144846", "5293-160528-125708", "4448-160528-142253",
                "3158-160528-152648", "6826-160529-115922", "3470-160119-112313", "5149-160214-143956",
                "7674-170119-123128", "3753-160314-204614", "8573-160228-155541", "9992-160313-171008",
                "6830-160313-183247", "6946-160311-133813", "1725-160311-124620", "1126-160311-123502",
                "4596-160311-111742", "8941-160310-192725", "8048-160303-194528", "1521-150425-165431",
                "5042-150424-092402", "7762-170213-131706", "4861-160528-131929", "68150406-103647",
                "2738-150419-181758", "6876-160529-013157", "46150402-164035", "21150331-171218", "25150330-130556",
                "8591-150424-153429", "1752-150410-144814", "83150331-161215", "97150404-093249", "0683-150426-134258",
                "0953-170126-132613", "2107-170201-000747", "7054-150407-203251", "6284-150413-134233",
                "1656-151222-115832", "9204-150426-082545", "4131-160305-124635", "9198-160209-140159",
                "6428-160312-113313", "34150330-174403", "7673-160312-214842", "0709-150408-220941",
                "4309-160716-121740", "0247-160718-150016", "6984-150408-151439", "9325-160305-155738",
                "4942-160301-142821", "2780-160310-121125", "2425-160304-110527", "0421-160304-183236",
                "1668-160304-182155", "7275-150504-125241", "4025-150504-142252", "0733-150418-183232",
                "0274-150418-171215", "93150404-141613", "3935-150418-112650", "1981-160218-125831",
                "1931-160305-160358", "2764-170102-122338", "0149-160528-135247", "2841-160301-143926",
                "0579-150429-145015", "0304-150415-130515", "1606-150420-210335", "3731-150415-103441",
                "1397-170131-012843", "8588-150415-170354", "5652-150413-164625", "2016-150414-155407",
                "8535-160306-115549", "1694-160309-134309", "60150406-161151", "4624-150408-203422", "09150404-120352",
                "61150405-220905", "2270-150414-130410", "8416-150416-145415", "2702-160313-181805",
                "5126-160313-164033", "2233-160313-152506", "9278-160227-175517", "8047-160312-185459",
                "8950-160312-130000", "5757-150425-164847", "7999-160312-122135", "2910-150425-161419",
                "6274-160311-202257", "8364-160311-182651", "6511-160311-183702", "7593-160311-184732",
                "5742-150425-175307", "2500-160313-172355", "4600-160303-205548", "5931-160313-173346",
                "9518-160228-123744", "4398-160315-003631", "4751-160315-024019", "2334-160528-153120",
                "9908-150414-171744", "2841-160315-000843", "93150407-104524", "2290-150415-124226", "14150406-195952",
                "3235-160311-154105", "2059-160312-155413", "3564-160128-140329", "57150407-153860",
                "8200-151221-113515", "9205-160313-131833", "9101-170120-145413", "7516-160602-163557",
                "7702-160602-163941", "1821-161220-155939", "7023-160310-145650", "0914-160601-210421",
                "8360-160303-113906", "92150402-105647", "0761-160601-212556", "60150402-113258", "4233-160602-165354",
                "8851-150414-170858", "8471-150412-173932", "2546-150412-173119", "9256-160311-185204",
                "8003-150413-133546", "5430-150413-163549", "2701-150411-113659", "4595-150422-114349",
                "7960-150502-150257", "1620-150502-152356", "2387-150410-144833", "0564-150410-171819",
                "8462-150422-133254", "4861-150507-155306", "9853-150427-125224", "1293-150507-135709",
                "6425-160527-195638", "20150404-101123", "69150402-122321", "39150402-145343", "07150402-125233",
                "4466-150411-141313", "42150407-113239", "2707-150410-100823", "07150407-120410", "0480-150422-112653",
                "9826-151229-092356", "3330-150430-133044", "6967-161219-165751", "81150406-154016",
                "2544-150428-110130", "6607-160319-151901", "2380-160319-131104", "9521-150413-110745",
                "1620-161024-152052", "3599-150410-110418", "3970-170130-094026", "0945-160403-184505",
                "1369-160403-182556", "3730-160310-105244", "88150406-161753", "90150402-150047", "9173-150507-150021",
                "8131-170130-130437", "8408-170201-064407", "14150403-124707", "43150407-130258", "1712-170211-153918",
                "8981-150507-155801", "87150401-161430", "78150402-154255", "54150404-121217", "3572-150408-110435",
                "9358-170111-094327", "6379-170112-093250", "5708-150409-151643", "4481-150622-111801",
                "7476-160311-183510", "6332-150428-170419", "6603-150411-135407", "3210-150413-162336",
                "5393-150413-170705", "72150401-171750", "3346-150519-175531", "5099-160128-193730",
                "9416-160128-200754", "5967-150408-103621", "7327-150407-204808", "7664-150412-211154",
                "4939-160521-195913", "7712-160527-143340", "7482-160222-161720", "5086-160529-112201",
                "9339-160304-164442", "1322-160303-174548", "8532-170213-171543", "3309-160527-125417",
                "9172-160529-135102", "5572-151221-112001", "4835-170111-070653", "4808-170105-150640",
                "5247-170102-121234", "8730-161230-125051", "0992-161230-121956", "3998-161228-114910",
                "6485-161101-163643", "5687-150430-135005", "7679-170110-065917", "03150405-153612",
                "4258-161026-001838", "8346-170108-194233", "40150402-143807", "1646-161220-105707",
                "8560-170104-104305", "64150403-194039", "38150406-144105", "7003-170106-110228", "0346-170105-105010",
                "1393-170109-150905", "52150404-192637", "67150406-115210", "7684-161024-224045", "8949-150413-110201",
                "86150402-121020", "9124-150416-095344", "9363-150418-163841", "28150406-181334", "4605-150423-061526",
                "8458-160319-192246", "6265-150408-133919", "8912-160311-134224", "9549-170112-082043",
                "4094-160305-170912", "61150404-113548", "25150406-165705", "7405-150415-104750", "6498-150414-132024",
                "8145-150623-151823", "8663-160318-115338", "1376-160320-140613", "8352-150625-115421",
                "7697-150625-114147", "5798-150416-122241", "75150406-195900", "4573-150608-145611",
                "3397-160324-134203", "57150406-145350", "8852-150416-112530", "5325-150501-155841",
                "1453-150408-140305", "3387-150418-161042", "8458-170107-153525", "7549-150413-152355",
                "1978-150623-143947", "7444-150410-121802", "1210-150506-103632", "3092-150505-113418",
                "3976-160315-001126", "68150406-101901", "1777-160202-143750", "1336-150418-140621",
                "6819-150410-103530", "92150406-135955", "6192-160130-162505", "9028-160526-131004", "30150406-161731",
                "0533-161026-145736", "1468-161226-161101", "3572-160223-150316", "1222-160222-142803",
                "2893-160302-125312", "2487-161230-083439", "3434-160602-132427", "2256-150622-121243",
                "3934-160314-174513", "45150407-165606", "8537-150419-154733", "49150407-130505", "5376-160222-145101",
                "2360-170103-112140", "93150407-103535", "00150405-100832", "2270-161231-122610", "5159-161219-144711",
                "12150402-134315", "4101-150420-154417", "8713-170131-002853", "2047-170131-001545",
                "8753-170128-125518", "2280-170116-151806", "9572-161220-155150", "6791-161220-162843",
                "9259-161220-161857", "6999-161220-164130", "8914-161220-151549", "2290-161220-150619",
                "7463-161220-163440", "4016-161220-160010", "4079-161217-091729", "4705-150410-134307",
                "3495-160121-132207", "4522-150409-132623", "3864-160129-140543", "5536-170105-143357",
                "61150406-173142", "2542-160315-143241", "4996-150429-152053", "1022-150621-094514",
                "4267-160725-133322", "6682-160725-105008", "8301-150409-133558", "0959-170118-101333",
                "1054-170117-144658", "6706-170117-135157", "0134-160315-061703", "4118-150504-161245",
                "1273-160203-114609", "1222-160203-132155", "8207-150514-123114", "9838-160314-161301",
                "3182-150417-123240", "6742-160223-093034", "4939-150419-180848", "4834-160112-123402",
                "0785-160304-122835", "5400-160306-183922", "1014-160308-145815", "8584-160311-212612",
                "3510-150702-122630", "3099-160113-151255", "4421-150419-153134", "9791-150422-162245",
                "4699-150422-155446", "3716-150426-162827", "0275-170203-125608", "7015-160314-092507",
                "6454-160526-111310", "82150403-085448", "6020-151230-153631", "4351-160108-142441", "85150404-120647",
                "98150404-165355", "77150404-131644", "4010-151222-154107", "29150404-165846", "32150402-153339",
                "1276-150512-112735", "12150404-145056", "8878-160223-223347", "7084-150603-172353",
                "6769-170213-170434", "5788-151230-175558", "7076-150626-130943", "1364-150624-211302",
                "8720-170201-211422", "9163-170125-103919", "0998-170125-121726", "5543-160226-140657",
                "2147-160526-171020", "4350-161220-123614", "9732-170202-124848", "1719-160213-113453",
                "9704-150413-171630", "3400-150417-172221", "7944-150427-124706", "5932-150413-174248",
                "1676-150409-142448", "3124-150413-174441", "0346-150415-125604", "4824-150409-110817",
                "1959-160529-184524", "8254-160228-184502", "0342-160209-145508", "1221-160111-140608",
                "5095-160306-225454", "2164-160310-192023", "4122-160613-164022", "6442-150427-215014",
                "2135-151223-144404", "5973-160310-102310", "4002-161206-143448", "4751-160130-144156",
                "3532-170208-183343", "4315-160528-184224", "2688-161025-141333", "4396-151229-203501",
                "26150402-141752", "09150406-212144", "2327-160311-190915", "5017-170201-125756", "2799-170201-131625",
                "0908-160321-001515", "7431-150410-115336", "4528-160224-133457", "3495-150419-073217",
                "54150404-144305", "1442-161217-164741", "9424-150411-172955", "6255-150414-125432",
                "1545-150415-164200", "4686-150409-125921", "9387-170103-115646", "0397-161224-130319",
                "7592-160222-113732", "2869-170104-150331", "8826-170104-160251", "0498-161208-180101",
                "6715-170104-142042", "3025-170104-162428", "8238-161224-112812", "2837-170201-233605",
                "3233-170131-235910", "6457-160306-025057", "4582-170106-150634", "0269-170102-163353",
                "3592-170103-113539", "3417-170102-154948", "2363-160528-071601", "8983-170106-122420",
                "4781-170127-104000", "2396-170127-114622", "3087-170128-001927", "9770-170201-133826",
                "7975-170103-122244", "0238-150420-180459", "7356-160225-112618", "5035-170116-133024",
                "1232-150418-151823", "5617-150513-152145", "0203-170112-120043", "5171-170112-123145",
                "1933-170112-121858", "3491-170112-131503", "1154-150428-134455", "2407-170102-163504",
                "4575-170102-155436", "2181-170105-144345", "5722-170201-125221", "0433-170110-135810",
                "8399-150414-110831", "0673-170110-113428", "5809-170110-132623", "7318-170201-164142",
                "6654-170201-002143", "3150-150413-162254", "1511-150409-125904", "3531-150421-143805",
                "6051-150524-174209", "4656-170207-231823", "4999-170209-000728", "0689-150422-170654",
                "0333-160317-234907", "9628-170213-183623", "4337-160319-183437", "7764-170128-002930",
                "5524-170128-003245", "0300-170131-220955", "1812-160311-213854", "6946-150423-144842",
                "1592-150424-130127", "4278-150416-175043", "6119-150421-112904", "2439-160211-123708",
                "9179-160529-152420", "0159-151223-162056", "7547-160314-211638", "8603-160315-194238",
                "3215-150423-134334", "4388-150530-101925", "8630-160314-180624", "1622-150418-161710",
                "9199-160309-144048", "5138-150409-141019", "0493-170121-130627", "0169-170204-143320",
                "84150404-095132", "8205-160527-185358", "0550-150417-141414", "6493-160223-102504",
                "3807-160228-123610", "8636-160229-183233", "3469-150516-111216", "5215-150419-070749",
                "9510-150429-165727", "4630-150506-215228", "6498-160123-143654", "4337-160223-151821",
                "9933-160314-201522", "1332-160319-170448", "3740-160320-203844", "5640-160320-215246",
                "2018-161226-111403", "7638-161226-131405", "8818-161226-114635", "3317-161104-154609",
                "6812-170103-151902", "0316-161226-142438", "7868-161228-140512", "3839-161119-142417",
                "5658-161226-122734", "4448-170126-092757", "8635-170126-123208", "1678-170106-151708",
                "5465-150425-083116", "0685-170128-134228", "4853-160319-163914", "2283-160220-153931",
                "9636-160220-151457", "7871-150418-002841", "1659-160121-141234", "5442-160306-120738",
                "1748-160112-122121", "8358-160217-192727", "0831-160217-195551", "4105-160222-213948",
                "3016-150414-195159", "63150402-153845", "29150404-140402", "5568-160224-132025", "8787-160223-142327",
                "8953-170106-120959", "77150402-155125", "27150403-001409", "9245-150420-141953", "7291-150415-163447",
                "0579-160215-101434", "9348-160105-145219", "9676-160223-100837", "8835-150419-161442",
                "3413-150501-140237", "5224-160223-111229", "1448-150420-163552", "0707-150408-175902",
                "1597-150501-203437", "5736-150425-233155", "7105-150425-230828", "3759-160225-105814",
                "7467-170208-215934", "0319-150415-110441", "6722-160130-112556", "70150407-143333",
                "3167-160113-141609", "2611-170211-204725", "36150404-113553", "2080-170213-111855",
                "0721-160218-111226", "1121-150408-132811", "4513-170208-123357", "1193-160520-134714",
                "3542-150411-103429", "8774-150414-155625", "2473-160307-110356", "3624-161027-121204",
                "2719-160216-140322", "6041-170213-175817", "6892-170125-112214", "43150401-134901",
                "5634-160529-150247", "2051-160524-153249", "1764-160527-213853", "4413-170109-142830",
                "0818-150520-103837", "50150404-122151", "9916-160229-135844", "6964-170214-144608",
                "7931-170214-131532", "6812-160524-154714", "7313-160103-085742", "9884-150411-132602",
                "5604-150411-130232", "3703-160522-091917", "4497-160522-090415", "2289-161208-153116",
                "4700-150409-150559", "0630-150409-165859", "9740-150409-181934", "2241-150410-132243",
                "5506-150410-155553", "6372-150410-173451", "7824-150410-182039", "1241-150411-112927",
                "6089-150411-114805", "4226-150411-124648", "2470-150411-130045", "3681-150410-162558",
                "6844-150410-173514", "3649-160307-002651", "9178-160307-144617", "6973-160307-171604",
                "1386-160307-181518", "5760-150418-160506", "8145-170125-113602", "62150407-150235",
                "3026-160223-141232", "0180-160225-141302", "1425-170121-142712", "6065-150516-161613",
                "1066-160305-133440", "2339-150427-203842", "8802-150409-104500", "5336-160312-195351",
                "0993-160528-135057", "01150406-161150", "9822-150418-014619", "5291-160528-145027", "57150404-150352",
                "8276-150501-152857", "3688-160221-001429", "7162-160306-224532", "6920-160306-231701",
                "9416-160314-111316", "1478-160130-160144", "2396-150416-171548", "1486-160529-230507",
                "9003-150413-140820", "8160-150415-102705", "7557-160529-084603", "7650-160305-181644",
                "0641-160303-173614", "4389-160316-132209", "8736-150504-162728", "47150402-162611", "07150404-125816",
                "4116-170109-144516", "2153-170110-063454", "9829-150411-172341", "4756-160102-112032",
                "9942-170208-120936", "2317-160216-114205", "0936-160305-182443", "2880-150416-150056",
                "2076-150418-221237", "9111-160526-163347", "1327-150410-144811", "7887-170210-231823",
                "4410-170212-065005", "4954-170213-230117", "3352-170210-200748", "4066-170210-221416",
                "8231-170212-073617", "9883-170210-220331", "7589-170212-112245", "7183-170213-231825",
                "6940-170212-065856", "5179-170213-102036", "3861-170210-225629", "0600-150422-125943",
                "8597-170210-224413", "8002-160528-173222", "2898-170210-230852", "4860-170210-222918",
                "8860-170210-174656", "0536-160315-112435", "0410-170210-202435", "3056-160528-174322",
                "6923-160528-180521", "1539-170213-141717", "0548-160524-154249", "8836-150418-205007",
                "4685-150416-141708", "3184-150420-101855", "9887-150409-170515", "98150403-154735",
                "9258-150419-083012", "1436-150414-150419", "0818-170213-230947", "8834-150409-141628",
                "0358-150505-133524", "4497-160309-151216", "9176-160210-131620", "1408-160227-162601",
                "8625-160225-151044", "6385-160303-160342", "1568-150409-153107", "92150327-102544",
                "9468-160528-172136", "7713-150408-110155", "2832-160527-133203", "3300-150418-120320",
                "3166-150409-133218", "2235-150415-105409", "1621-170204-123015", "4561-170204-134953",
                "8361-170204-132348", "2168-170204-125052", "7409-150418-121706", "3295-161107-115758",
                "8432-150418-104251", "2801-170203-124805", "8255-160131-122517", "01150406-123323",
                "7476-160318-164611", "49150402-144800", "61150407-120725", "0799-170202-212157", "3702-170202-205800",
                "9744-170206-145652", "6199-170206-163321", "3042-150409-153634", "4600-160218-160119",
                "4305-160219-103221", "3999-170126-130740", "4002-150410-153653", "9252-170204-073234",
                "7906-170204-071806", "6848-170203-190044", "2487-170203-174819", "6018-170203-183122",
                "7986-170203-184447", "0949-161104-172508", "8943-150423-151654", "7716-150427-204900",
                "7677-170213-155734", "9701-150505-172404", "9465-150408-103455", "57150331-144607", "75150406-102321",
                "1666-150506-114739", "0595-170204-181942", "8603-170204-183258", "5191-170204-180507",
                "9213-170212-140245", "8611-150424-224329", "6092-170213-142812", "1226-170213-145711",
                "0340-170213-144245", "9242-161105-101618", "1414-161105-104041", "3015-161105-102504",
                "5172-160105-170434", "41150331-122508", "4988-150408-171010", "8141-170207-081133",
                "9501-170206-160120", "4045-170206-154651", "5183-170206-152314", "1743-161104-160604",
                "0113-161025-122914", "8780-160306-234154", "3468-170213-135538", "3561-160306-222717",
                "3518-161208-134255", "3767-161208-141541", "4137-161208-150005", "4535-161206-145855",
                "21150406-134753", "8391-170102-125021", "5738-170102-155111", "1940-170105-132341",
                "7070-161214-131324", "9674-170201-134235", "6931-160302-192141", "32150331-140308",
                "8022-170110-131850", "7689-160527-210131", "0185-160527-220128", "4501-170110-141553",
                "6852-160528-124152", "7308-170102-135535", "6787-160527-204710", "8021-150410-130502",
                "3043-150418-123931", "5965-150426-132701", "8077-160218-125208", "7919-160528-201710",
                "7185-161128-094703", "2707-161207-170758", "4785-170128-093435", "7996-170201-111358",
                "1695-160524-153728", "2682-161126-115613", "1313-150410-125322", "5941-170204-122016",
                "1275-170201-114745", "9209-170203-090636", "8098-170127-095938", "9165-170128-133930",
                "8282-170127-120010", "5900-170128-095011", "9224-170128-092935", "1650-170127-100140",
                "5235-170204-120405", "8705-170127-102316", "4336-170128-085732", "6280-170128-091305",
                "7874-170128-101930", "1346-161130-150711", "0565-160223-114048", "9303-170201-114027",
                "3451-150416-022307", "6361-170201-111242", "3432-170201-111936", "0581-170128-080337",
                "3110-170121-130746", "8987-170121-131131", "1761-170127-095301", "9686-170127-101032",
                "4847-170206-095919", "9897-170206-101713", "5529-170206-221715", "0879-160314-164629",
                "6864-170201-140542", "7933-160307-144332", "7368-150420-113200", "2446-150429-164107",
                "8779-161025-113529", "0564-170208-180025", "3492-160210-161127", "4007-170209-175024",
                "3204-150507-141126", "3107-150411-132914", "6087-170212-130603", "3634-170210-094102",
                "9966-170211-170427", "4592-170127-094455", "7520-170127-091110", "7556-160305-235250",
                "1088-150409-182132", "7799-160131-085043", "5696-150426-225924", "0028-150426-195016",
                "7031-160224-120240", "4434-150504-103325", "8800-160301-125824", "1988-150420-132948",
                "4867-160311-190756", "3532-170213-192053", "9894-160113-202323", "5578-150410-102015",
                "0488-150420-044637", "7722-161125-153814", "7207-161125-162256", "34150404-120959",
                "4161-150415-112413", "5408-150413-155845", "8913-150414-144330", "4235-170201-133626",
                "5174-170201-131846", "0560-170201-092713", "6502-170125-100458", "3510-170125-121018",
                "8522-170109-104111", "47150407-152328", "4396-170208-214209", "1271-170213-094820",
                "8893-150422-134619", "8064-150414-182840", "6977-160307-122403", "4898-150417-172408",
                "6372-161024-145509", "7948-150418-163356", "9264-170208-115642", "0814-150525-110528",
                "3389-150416-170932", "3776-150417-124457", "8629-150409-154943", "5435-150411-131552",
                "0427-150411-145827", "9235-150420-162602", "9162-150422-162042", "5770-150422-162934",
                "1498-150423-125327", "4170-150416-123503", "1383-150424-153313", "4740-150426-151439",
                "5336-150426-161009", "6059-150623-104414", "0921-150507-181851", "3206-150426-164510",
                "9645-170111-132420", "1332-170120-101902", "9542-160315-161529", "4306-170112-100714",
                "0126-170213-115529", "8773-170213-161956", "5441-150426-161329", "6751-150427-083219",
                "7466-160217-164427", "5829-160217-085150", "1006-160217-110816", "2881-160221-172406",
                "8840-160216-171444", "2949-160309-110305", "1969-160310-110218", "8915-160310-094946",
                "3020-160302-151209", "1380-160301-121542", "7331-160225-175309", "1912-150410-144635",
                "0081-170201-184401", "2059-170201-183156", "4884-160523-221934", "1363-170205-110157",
                "9893-170130-060435", "1325-170131-213647", "3219-170201-075256", "3556-170205-071708",
                "1854-170131-212606", "7281-150426-130459", "3748-150427-115129", "5533-160215-153310",
                "4668-160202-145543", "2277-160202-150649", "7160-160126-130308", "4155-160228-151007",
                "0831-160229-130528", "4404-160313-120815", "8223-160314-171505", "6872-160314-114951",
                "0456-160315-123013", "7810-160316-122556", "9422-160320-151054", "0174-160320-144903",
                "5543-160320-170031", "2029-160320-185320", "8143-160317-100815", "32150407-132157",
                "6453-150507-190621", "8245-150413-153714", "28150404-123750", "1544-160307-152305",
                "5183-170213-104901", "8482-160313-190624", "8343-150628-120850", "1560-160524-170149",
                "3384-160216-123928", "2547-160216-122353", "1072-150416-131804", "8683-150411-103235",
                "5651-150424-125019", "9682-160216-134834", "6108-160216-144413", "4896-150619-162217",
                "8624-160526-220903", "6384-160527-133336", "9001-160527-113642", "3743-160527-153212",
                "9817-160527-160506", "7871-160527-155146", "7363-160529-212715", "5676-160527-124637",
                "2287-160527-122559", "0332-160529-214451", "3055-160529-210541", "4072-160527-175300",
                "2289-160527-180504", "5847-160527-193230", "4855-160527-193845", "7518-160527-174637",
                "9767-160527-134840", "0649-160527-135747", "6697-160527-194511", "7962-160527-121749",
                "9211-160529-212800", "3885-160526-214922", "6761-160527-104234", "3613-160529-190559",
                "2739-150506-152645", "2331-160527-195326", "8088-160527-175904", "3594-150408-132755",
                "24150407-144546", "7620-150413-134814", "7604-150414-112240", "6039-150423-113712",
                "7563-150423-131136", "1325-150423-120301", "6220-150423-144915", "5192-150416-134445",
                "4797-150415-075403", "7534-150426-071035", "1080-150505-211321", "6903-150506-125905",
                "8943-150507-132216", "3855-150507-145302", "1334-150520-140106", "3059-150516-165055",
                "2422-150413-195436", "4643-150414-152604", "7203-150619-173132", "6164-150521-102913",
                "4588-160311-134411", "5758-160311-211049", "3771-160311-213320", "9356-160312-095056",
                "9611-160312-223525", "3546-160312-231314", "7201-160313-113044", "2159-160313-204546",
                "6066-160314-003105", "6800-160313-232250", "0148-160314-013347", "1126-160313-233351",
                "1455-160313-231229", "2934-160314-015327", "3055-160313-235019", "3503-160313-221119",
                "3747-160314-003908", "5871-160314-005803", "6873-160314-020241", "8228-160314-000603",
                "8780-160314-011533", "9536-160314-002000", "4202-150414-162907", "2118-150525-142432",
                "5162-160317-143436", "0551-160302-144328", "3365-150520-150117", "5208-150520-143322",
                "8912-150520-134046", "6051-151224-130228", "3618-150505-155511", "8755-160528-141635",
                "3635-170110-101222", "0865-170131-004815", "7509-170131-010402", "3145-170201-135532",
                "8673-170209-001735", "2013-170213-225517", "8323-160519-150837", "4869-160528-143219",
                "6333-160529-211741", "9373-160528-054323", "1400-150507-152048", "1786-160314-004152",
                "2698-150422-122441", "1581-160318-213116", "7664-160522-105414", "7397-160524-140443",
                "9865-160525-110126", "4556-160522-113614", "7976-150409-152425", "5130-160312-160358",
                "1924-160523-160353", "4182-160525-105402", "6808-160524-104123", "92150402-113945",
                "0425-160529-151238", "0099-160523-170912", "9674-160525-153020", "2663-160524-144030",
                "7132-150505-171425", "2511-150506-173242", "8620-150506-185031", "8330-170208-104945",
                "5346-150425-220931", "85150406-121323", "46150406-145449", "17150406-141632", "31150406-195404",
                "2434-150415-120158", "7241-150427-153651", "4265-160212-115650", "6692-160226-142030",
                "4984-161230-133326", "6401-160607-102901", "2773-150427-125541", "3209-151219-115716",
                "5662-160529-185837", "00150406-013500", "6387-160209-150154", "0879-151218-160156",
                "8608-150409-105419", "68150406-132039", "5798-160223-133519", "06150407-152436", "65150407-125645",
                "7882-150504-112706", "92150407-133551", "18150407-103916", "1104-150427-121112", "1082-150413-112419",
                "1541-150408-144354", "4422-160525-155014", "8495-160525-160333", "2047-160528-164025",
                "0445-160528-140355", "3710-160127-152855", "0797-161026-150136", "8028-161125-125251",
                "4260-160318-145031", "71150406-140527", "3901-150409-115819", "4629-150416-154342",
                "1201-160309-134915", "6246-150422-101621", "4496-160320-202856", "7132-160311-112331",
                "1845-160213-132715", "2404-160303-150020", "7763-161101-124425", "3176-161101-133032",
                "2791-160529-104931", "73150407-114716", "4787-160213-121851", "9849-160216-210758",
                "2955-150409-134708", "51150407-104456", "8224-160107-205730", "34150406-143425", "4163-160216-204429",
                "00150401-122025", "3660-161221-103638", "08150404-110655", "0587-160529-123004", "0869-160211-112328",
                "2179-161231-131104", "3796-150424-132940", "5564-170214-133702", "16150407-110617",
                "4578-150421-115131", "8673-160217-110800", "2511-150413-121902", "5851-170121-105052",
                "51150407-165346", "0993-150427-110339", "8179-150425-191121", "9121-161224-130949", "61150407-103616",
                "8341-160304-201231", "2337-160304-211429", "1197-160313-101848", "4751-160309-113357",
                "5628-170110-101625", "8356-170103-161138", "4165-161231-154330", "9788-150411-160741",
                "1527-170102-122923", "82150401-173209", "2547-150414-090031", "7162-170120-115101",
                "5768-160102-162016", "5412-160119-121753", "00150402-113807", "90150402-114033", "74150406-100125",
                "11150402-135109", "6334-170212-075755", "0414-150427-153301", "5916-160521-170808",
                "3874-160520-140742", "2476-161230-104149", "9210-170213-143544", "8708-150603-110737",
                "3688-160220-103709", "5002-150623-211558", "3063-160217-133447", "8772-150409-121657",
                "8132-150414-143748", "2884-150522-150334", "7621-160616-094646", "5178-160215-160658",
                "6392-170111-121725", "5811-160322-142907", "7003-160313-044849", "2419-150413-102521",
                "0902-160108-093932", "1122-150409-154748", "00150401-154855", "5615-150411-155137",
                "8475-150411-120810", "3486-150411-095502", "3639-150410-162727", "9309-150410-121029",
                "4003-150412-141221", "7210-150413-105352", "1312-150413-125326", "6696-150413-130825",
                "4117-150413-152658", "3669-150413-170657", "3899-150414-115715", "2174-150414-121721",
                "6308-150414-134913", "5377-150415-110819", "5586-150415-122845", "6708-150416-093905",
                "7148-150416-105317", "5423-150417-104022", "2831-150417-170418", "7164-150418-103839",
                "7661-150418-115542", "4781-150418-144821", "5424-150418-155748", "4282-150418-172548",
                "5847-150418-162252", "2032-150418-163546", "7752-150419-100403", "5625-150419-101143",
                "5299-150419-113156", "2993-150419-114628", "3109-150425-172435", "4479-150501-145658",
                "6381-150501-150737", "2086-150502-133145", "7604-150505-103653", "6698-150505-123503",
                "5479-150506-104334", "0669-150506-111009", "6923-150506-120141", "0949-150506-120812",
                "7709-150506-123059", "8671-150506-135633", "0252-150506-152406", "5992-150506-161253",
                "8179-150506-165415", "0383-150506-170706", "4974-150506-172340", "1806-150507-112323",
                "6391-150507-121340", "6549-150507-124445", "1690-150507-143202", "3599-150507-145110",
                "2767-150507-175854", "3719-150507-161509", "2217-150425-180146", "1175-150414-102435",
                "1509-150413-143434", "3956-150416-095004", "0224-150412-143440", "0021-160203-121651",
                "9782-150621-180925", "0838-160130-152129", "8478-160201-151903", "7038-160203-172000",
                "6781-160130-141641", "0813-160201-121714", "1518-160130-120614", "3895-161227-142826",
                "95150403-181521", "32150407-170348", "2993-150414-143110", "7086-150423-110021", "6608-150421-114020",
                "4255-150418-130836", "8364-150420-134942", "5457-150418-104417", "1973-150420-143126",
                "8893-150423-095144", "2748-160204-135119", "5439-160203-170902", "4539-150412-234736",
                "5847-170104-120408", "1179-150411-125234", "3900-150419-132559", "6754-150422-111827",
                "6452-150419-124132", "7329-150415-145740", "0089-170126-105321", "5757-170126-090739",
                "4687-150420-162710", "1549-150418-123933", "2375-150427-184049", "4721-160312-130908",
                "3811-150408-093155", "5491-150424-105812", "6988-170209-100538", "4483-170201-173620",
                "6080-160305-164900", "3941-160309-164350", "2760-150419-090320", "8285-160312-050319",
                "7473-150418-015556", "3151-150416-153354", "1849-170208-030910", "2567-160523-200410",
                "7572-170125-120940", "87150406-124350", "65150407-114408", "9700-150418-103531", "5407-150420-114851",
                "4944-150507-132508", "4115-160219-143540", "9062-150410-120317", "0401-160301-113838",
                "8030-160306-231643", "5432-160313-190256", "5420-160313-194955", "8511-160313-193749",
                "8645-160313-200336", "7061-150420-105321", "64150407-114332", "06150406-110517", "3976-150408-141108",
                "82150402-101300", "9883-160227-163438", "1035-160111-103854", "5800-150427-144201",
                "8104-150418-154509", "3014-150418-113353", "0072-150420-162805", "3537-150420-144050",
                "6751-150420-133318", "2700-150420-152707", "1099-150420-155631", "8618-150421-131105",
                "1116-150422-131415", "4518-150422-124849", "0433-150422-144932", "1406-150423-153817",
                "5691-150424-130902", "1324-150424-125421", "4188-150424-144352", "5468-150426-133235",
                "4707-150426-144632", "6444-150426-140504", "6008-150427-132706", "2456-150427-125655",
                "4411-150427-123037", "3744-150427-115838", "6337-150424-155245", "9304-150420-122848",
                "0331-150505-122336", "1709-150505-124153", "1660-150507-152429", "7533-150507-124230",
                "9332-170117-152612", "68150402-113106", "2421-170118-102956", "2139-150427-182601",
                "0406-160219-191416", "2578-160213-110706", "1164-170206-093911", "5254-150413-112851",
                "5787-150413-143618", "97150404-114446", "52150404-111626", "8075-150425-223901", "0911-170129-065647",
                "6672-160529-170707", "3699-150409-112552", "7125-150419-124613", "3489-150427-153757",
                "5260-160314-161427", "4193-160315-144200", "6661-150424-214204", "0649-160226-131946",
                "5615-160130-133452", "9141-160313-125550", "7582-160318-135755", "9273-160319-131507",
                "9436-160120-103747", "1583-160321-025005", "0055-160321-025342", "7889-170202-111209",
                "3277-160313-143513", "0009-160320-170339", "6781-160314-144608", "4797-160226-145553",
                "6583-160123-120248", "6850-160123-122615", "0173-160127-161028", "2396-160118-125229",
                "5496-160307-013102", "8488-160315-145202", "1047-170213-102548", "1365-160529-235101",
                "1871-160530-000425", "5726-160530-005205", "8286-160530-003941", "5893-160529-230109",
                "8439-160529-231659", "4847-160202-145733", "8755-150410-154152", "0357-160525-165724",
                "7134-160525-164007", "6086-160525-170543", "2748-150413-133433", "4573-160123-123755",
                "1820-150426-121151", "7569-160529-080401", "2159-150426-133204", "2355-160226-143254",
                "6425-170214-144804", "7292-160527-150452", "7553-150623-161556", "9892-150415-173517",
                "6928-150409-115746", "2786-150411-163924", "3114-170211-144641", "0412-150416-120453",
                "81150401-093631", "0391-160303-162613", "9367-161206-133006", "50150406-110631", "4447-150502-174016",
                "5971-150422-101217", "5184-150509-001340", "7141-150412-131341", "9605-150417-135430",
                "4861-150425-185152", "5088-150424-192514", "9564-150427-142814", "1693-150508-154732",
                "2653-150508-191449", "7997-160229-140001", "6132-150626-154919", "5962-160224-160416",
                "3206-160224-120222", "7077-160224-125548", "2257-160203-144427", "4810-160223-152133",
                "9122-160206-160942", "4409-160204-164554", "4026-160303-160758", "6996-160303-145344",
                "1367-160306-171807", "1274-150519-150855", "6580-150510-181933", "3336-150522-164708",
                "4912-150511-143333", "2598-150518-190658", "7241-150511-121423", "0981-160318-205813",
                "5673-150424-101940", "2388-150427-204152", "0046-150415-150634", "2066-150423-143523",
                "1390-150423-152725", "9233-150505-205122", "9802-150508-124913", "0904-160320-215334",
                "5540-160320-224833", "4040-160319-171255", "5225-160319-180200", "7708-150525-124845",
                "1619-150507-111147", "1531-160310-145437", "2186-161128-110121", "3873-150412-144811",
                "1252-150507-154923", "3512-160319-162401", "4454-150619-141552", "8079-150623-221138",
                "5575-150408-123749", "13150404-115435", "0284-150414-132540", "6880-150410-120425",
                "6762-161230-124738", "9010-161227-100115", "3704-150419-164705", "3963-161230-104242",
                "1003-170119-133836", "4904-170119-140309", "1320-160310-172529", "0588-170126-140848",
                "9064-150415-195000", "4731-170130-143850", "8378-170103-122409", "7791-170127-090325",
                "3830-170127-055112", "7748-170127-100820", "2672-170112-132640", "8402-170130-042424",
                "2308-160306-234502", "4929-160307-000431", "7251-150416-124047", "3671-150423-160132",
                "8396-150411-102437", "21150404-112230", "8751-160303-203316", "22150402-113959", "0970-150430-153100",
                "0932-160121-151242", "8655-150421-113103", "1016-170213-095525", "7190-170207-111147",
                "5896-170207-155653", "02150404-152942", "79150402-152913", "8901-150417-123938", "5586-151231-121104",
                "1062-160204-122634", "1289-150421-162247", "1562-170207-151420", "7402-170206-170527",
                "1508-150409-162904", "8855-160129-224744", "67150407-102924", "6376-170120-135816",
                "0669-160522-101027", "3889-150409-161144", "6066-150623-095231", "3019-160222-163141",
                "2509-151231-151506", "48150406-135026", "9930-150414-094453", "0351-150417-195125",
                "2960-150419-093920", "9047-150413-152958", "9524-160527-113642", "8911-160526-101256",
                "31150404-133058", "8227-160305-105918", "0139-170129-012129", "3447-170128-072520",
                "6530-170128-071327", "9997-170128-123735", "2180-170131-182913", "0879-170127-102221",
                "5740-170128-065233", "0314-170128-063904", "0642-170201-010158", "6224-170207-203022",
                "9695-170128-113040", "8585-170201-120216", "0301-170207-022315", "3297-150408-144359",
                "7138-170129-081817", "5546-170126-125053", "4220-170129-025046", "8005-170201-000619",
                "0047-170131-192931", "1147-150412-155421", "5422-170205-104152", "0958-170129-084011",
                "4475-170128-122425", "8273-170126-012315", "9255-170208-024359", "3093-150416-102135",
                "7174-170123-132929", "3198-170126-132721", "2666-170127-090324", "1481-170127-093811",
                "3230-170130-085724", "3329-170129-092239", "6091-170128-073953", "6390-170127-105554",
                "2692-170128-104048", "7221-170128-084918", "28150407-133434", "7024-170129-080222",
                "7376-170130-102016", "2518-170130-140831", "6682-170130-130443", "2262-150419-114238",
                "5098-170131-210235", "1177-170131-220405", "8812-170131-224502", "8933-170131-232705",
                "1482-170131-221805", "3178-170205-173127", "3528-170207-181515", "1585-170208-030004",
                "4875-170201-184730", "2353-170203-160228", "4036-170208-040826", "0488-170128-025908",
                "4119-170205-175600", "6798-170131-194605", "7035-170131-200730", "6255-170128-003518",
                "5942-170129-085532", "2069-170130-092557", "4130-170131-184300", "7260-170201-134551",
                "3622-170125-122440", "7446-170125-112314", "5329-170131-185305", "3657-170125-104542",
                "6036-170125-121735", "4045-150418-063749", "1492-170128-001627", "2279-170205-143143",
                "9712-170205-134257", "0767-150410-143506", "4004-170205-153648", "7853-150408-103506",
                "1887-170205-145557", "1900-170208-043356", "3897-170128-010649", "1845-170205-120706",
                "8222-170205-130900", "6285-170128-021140", "1202-170205-114804", "6761-170205-165911",
                "2127-170208-045517", "8984-170203-123525", "3878-170205-160244", "8748-170207-024537",
                "4007-170201-163315", "5635-170208-033222", "2933-150412-211042", "5929-170208-130807",
                "5004-170208-182607", "2458-170201-172012", "3417-170210-100634", "6851-170208-173310",
                "4151-150418-070253", "9914-150522-154121", "6549-150507-154751", "0660-150408-220123",
                "9131-150427-155737", "8197-150426-082907", "3106-160223-185143", "7342-150411-134225",
                "5375-150409-181641", "2300-150418-100415", "1886-150409-122631", "4655-150415-115007",
                "9359-150414-140023", "4754-150428-082840", "7577-150427-173104", "8511-160204-125829",
                "5663-170213-131904", "7574-150420-194505", "7174-170208-165322", "4055-170208-144841",
                "5113-150418-101307", "3027-150411-143956", "5072-150414-165652", "7013-150414-175745",
                "0444-150412-045036", "5103-150412-051622", "8722-150412-042526", "3365-150412-004735",
                "9281-150519-150922", "8010-160228-170503", "9366-160228-223356", "2230-160228-194912",
                "1386-160228-194048", "2108-160304-182753", "3891-160313-063506", "2451-160313-064515",
                "1092-160314-104844", "9183-160314-103445", "8889-160314-101931", "6633-160314-233020",
                "2672-160314-234904", "7262-170211-180641", "4423-170214-151909", "6625-170211-195416",
                "8924-150407-231234", "4582-151217-093323", "7016-161024-152425", "3702-160307-012243",
                "0488-161026-105046", "6471-160529-222644", "9221-160305-132154", "0217-161212-172129",
                "92150330-123607", "5043-161121-134957", "2513-170103-100638", "6092-160315-163018", "17150404-131517",
                "03150404-165809", "46150404-141230", "69150404-125508", "65150403-103830", "6249-151221-112735",
                "3492-161216-195533", "94150402-154930"
            };
            #endregion

            var CollegeIds = db.jntuh_college_faculty_registered.Where(e => NotMatchingFaculty.Contains(e.RegistrationNumber)).Select(e => e.collegeId).Distinct().ToArray();

            ViewBag.Colleges = db.jntuh_college.Where(e => e.isActive == true && SubmissionColleges.Contains(e.id) && CollegeIds.Contains(e.id)).Select(e => new { collegeId = e.id, CollegeCode = e.collegeCode + "-" + e.collegeName }).OrderBy(e => e.CollegeCode).ToList();


            if (collegeId != null)
            {
                // int collegeid = db.jntuh_college_randamcodes.Find(rid).CollegeId;


                //  var regFaculty = db.jntuh_registered_faculty.AsNoTracking().Where(e => e.isActive != false && e.Blacklistfaculy != true).ToList();
                var facultyLogregnos = db.jntuh_college_faculty_registered.Where(i => i.collegeId == collegeId).Select(i => i.RegistrationNumber).ToArray();
                List<jntuh_registered_faculty> jntuh_registered_faculty = new List<jntuh_registered_faculty>();
                jntuh_registered_faculty = db.jntuh_registered_faculty.AsNoTracking().Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber) && NotMatchingFaculty.Contains(rf.RegistrationNumber.Trim()) && rf.isActive != false && rf.Blacklistfaculy != true).Select(e => e).ToList(); //&& (rf.collegeId == null || rf.collegeId == collegeid)


                // var regIds = regFaculty.Where(rf => facultyLogregnos.Contains(rf.RegistrationNumber)).Select(i => i.id).ToArray();
                //  var regEducationids = db.jntuh_registered_faculty_education.AsNoTracking().Where(i => regIds.Contains(i.facultyId) && i.educationId == 6).Select(i => i.facultyId).ToArray();
                var jntuh_college_faculty_registered_faculty = db.jntuh_college_faculty_registered.Where(cf => facultyLogregnos.Contains(cf.RegistrationNumber)).ToList();

                var jntuh_specialization = db.jntuh_specialization.Where(e => e.isActive == true).Select(e => e).ToList();

                var DegreeData = (from Deg in db.jntuh_degree
                                  join Dept in db.jntuh_department on Deg.id equals Dept.degreeId
                                  select new { DeptId = Dept.id, DeptName = Deg.degree + "-" + Dept.departmentName }).ToList();



                // var faculty = regFaculty.ToList();

                data.AddRange(jntuh_registered_faculty.Select(d => new FacultyRegistration()
                {
                    id = d.id,
                    CollegeId = collegeId,
                    Type = d.type,
                    RegistrationNumber = d.RegistrationNumber,
                    UniqueID = d.UniqueID,
                    FirstName = d.FirstName,
                    MiddleName = d.MiddleName,
                    LastName = d.LastName,
                    GenderId = d.GenderId,
                    Email = d.Email,
                    facultyPhoto = d.Photo,
                    SelectionCommitteeProcedings = d.ProceedingDocument,
                    Mobile = d.Mobile,
                    DepartmentId = jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault(),
                    DepartmentName = jntuh_college_faculty_registered_faculty.Where(e => e.RegistrationNumber.Trim() == d.RegistrationNumber).Select(e => e.DepartmentId).FirstOrDefault() != null ? DegreeData.Where(e => e.DeptId == jntuh_college_faculty_registered_faculty.Where(f => f.RegistrationNumber.Trim() == d.RegistrationNumber).Select(f => f.DepartmentId).FirstOrDefault()).Select(e => e.DeptName).FirstOrDefault() : "",
                    PANNumber = d.PANNumber,
                    AadhaarNumber = d.AadhaarNumber,
                    NORelevantUG = d.NoRelevantUG,
                    NORelevantPG = d.NoRelevantPG,
                    NORelevantPHD = d.NORelevantPHD,
                    NOTQualifiedAsPerAICTE = d.NotQualifiedAsperAICTE ?? false,
                    XeroxcopyofcertificatesFlag = d.Xeroxcopyofcertificates ?? false,
                    NotIdentityFiedForAnyProgramFlag = d.NotIdentityfiedForanyProgram ?? false,
                    MultipleReginSamecoll = d.Noclass ?? false,
                    NOForm16 = d.NoForm16 ?? false,
                    Absent = d.Absent ?? false,
                    NoSCM17Flag = d.NoSCM17 ?? false,
                    InCompleteCeritificates = d.IncompleteCertificates != null ? (bool)d.IncompleteCertificates : false,
                    PGSpecializationName = d.PGSpecialization != null ? jntuh_specialization.Where(e => e.id == d.PGSpecialization).Select(e => e.specializationName).FirstOrDefault() : "",
                    isActive = d.isActive,
                    isApproved = d.isApproved,
                    Basstatus = d.InvalidAadhaar,
                    FacultyVerificationStatus = d.FacultyVerificationStatus,
                    SamePANNumberCount = d.PANNumber != null ? jntuh_registered_faculty.Where(i => i.PANNumber == d.PANNumber && i.collegeId == collegeId).ToList().Count : 1,
                    SameAadhaarNumberCount = d.AadhaarNumber != null ? jntuh_registered_faculty.Where(f => f.AadhaarNumber == d.AadhaarNumber).ToList().Count : 1,
                }));
            }
            else
            {
                data = new List<FacultyRegistration>();
            }
            return View(data);
        }

        [Authorize(Roles = "Admin")]
        public ActionResult AddNoSCMFlag(string fid, int collegeId)
        {
            int userID = Convert.ToInt32(Membership.GetUser(User.Identity.Name).ProviderUserKey);
            int fID = 0;
            if (!string.IsNullOrEmpty(fid))
            {
                fID = Convert.ToInt32(UAAAS.Models.Utilities.DecryptString(fid, WebConfigurationManager.AppSettings["CryptoKey"]));
                var facultydata = db.jntuh_registered_faculty.FirstOrDefault(e => e.id == fID);
                if (facultydata != null)
                {
                    facultydata.NoSCM17 = true;
                    facultydata.updatedOn = DateTime.Now;
                    facultydata.updatedBy = userID;
                    db.Entry(facultydata).State = EntityState.Modified;
                    db.SaveChanges();
                    TempData["Success"] = "NoSCM Flag Added Successfully..";
                }
                else
                {
                    TempData["Error"] = "NoSCM Flag Added Failed";
                }
            }
            else
            {
                TempData["Error"] = "Faculty Not Found.";
            }
            return RedirectToAction("NotMatching416and415", "FacultyVerification", new { collegeId = collegeId });
        }

        #endregion




    }
}
